; entering Souper's runOnFunction() for ./chacha20_ref.c.bc:chacha20_encrypt_bytes()

; ModuleID = './chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %377, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %373, %8
  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
  %45 = phi i8* [ %2, %8 ], [ %375, %373 ]
  %46 = phi i8* [ %1, %8 ], [ %376, %373 ]
  %47 = phi i8* [ null, %8 ], [ %61, %373 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %373

358:                                              ; preds = %242
  br i1 %48, label %359, label %372

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %372, label %362

362:                                              ; preds = %359
  %363 = trunc i32 %261 to i8
  store i8 %363, i8* %61, align 1
  %364 = icmp eq i32 %360, 1
  br i1 %364, label %372, label %365

365:                                              ; preds = %362, %365
  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
  %367 = getelementptr i8, i8* %59, i32 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr i8, i8* %61, i32 %366
  store i8 %368, i8* %369, align 1
  %370 = add nuw i32 %366, 1
  %371 = icmp eq i32 %370, %360
  br i1 %371, label %372, label %365

372:                                              ; preds = %365, %362, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %377

373:                                              ; preds = %242
  %374 = add i64 %42, -64
  %375 = getelementptr i8, i8* %59, i32 64
  %376 = getelementptr i8, i8* %60, i32 64
  br label %41

377:                                              ; preds = %4, %372
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = icmp eq i64 %3, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = eq 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %33, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %35, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %37, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %39, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
infer %0

; *****
; For LLVM instruction:
;  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = icmp ult i64 %42, 64
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 64:i64
infer %1

; *****
; For LLVM instruction:
;  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i8, i8* %52, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = add i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = zext i32 %55 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %57 = icmp ugt i64 %42, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = zext %1
%3:i64 = var (range=[1,0))
%4:i1 = ult %2, %3
infer %4

; *****
; For LLVM instruction:
;  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
infer %0

; *****
; For LLVM instruction:
;  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = add i32 %64, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %81 = xor i32 %80, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %82 = shl i32 %81, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %83 = lshr i32 %81, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %84 = or i32 %83, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %85 = add i32 %84, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %86 = xor i32 %85, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %87 = shl i32 %86, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %88 = lshr i32 %86, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %89 = or i32 %88, %87
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %90 = add i32 %89, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %91 = xor i32 %90, %84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %92 = shl i32 %91, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %93 = lshr i32 %91, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %94 = or i32 %93, %92
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %95 = add i32 %94, %85
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %96 = xor i32 %95, %89
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %97 = shl i32 %96, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %98 = lshr i32 %96, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %99 = or i32 %98, %97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %100 = add i32 %65, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %101 = xor i32 %100, %77
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %102 = shl i32 %101, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %103 = lshr i32 %101, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %104 = or i32 %103, %102
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %105 = add i32 %104, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %106 = xor i32 %105, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %107 = shl i32 %106, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %108 = lshr i32 %106, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %109 = or i32 %108, %107
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %110 = add i32 %109, %100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %111 = xor i32 %110, %104
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %112 = shl i32 %111, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %113 = lshr i32 %111, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %114 = or i32 %113, %112
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %115 = add i32 %114, %105
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %116 = xor i32 %115, %109
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %117 = shl i32 %116, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %118 = lshr i32 %116, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %119 = or i32 %118, %117
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %120 = add i32 %66, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %121 = xor i32 %120, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %122 = shl i32 %121, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %123 = lshr i32 %121, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %124 = or i32 %123, %122
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %125 = add i32 %124, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %126 = xor i32 %125, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %127 = shl i32 %126, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %128 = lshr i32 %126, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %129 = or i32 %128, %127
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %130 = add i32 %129, %120
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %131 = xor i32 %130, %124
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %132 = shl i32 %131, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %133 = lshr i32 %131, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %134 = or i32 %133, %132
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %135 = add i32 %134, %125
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %136 = xor i32 %135, %129
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %137 = shl i32 %136, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %138 = lshr i32 %136, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %139 = or i32 %138, %137
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %140 = add i32 %67, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %141 = xor i32 %140, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4

; *****
; For LLVM instruction:
;  %142 = shl i32 %141, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %143 = lshr i32 %141, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5

; *****
; For LLVM instruction:
;  %144 = or i32 %143, %142
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7

; *****
; For LLVM instruction:
;  %145 = add i32 %144, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9

; *****
; For LLVM instruction:
;  %146 = xor i32 %145, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10

; *****
; For LLVM instruction:
;  %147 = shl i32 %146, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11

; *****
; For LLVM instruction:
;  %148 = lshr i32 %146, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11

; *****
; For LLVM instruction:
;  %149 = or i32 %148, %147
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %150 = add i32 %149, %140
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14

; *****
; For LLVM instruction:
;  %151 = xor i32 %150, %144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15

; *****
; For LLVM instruction:
;  %152 = shl i32 %151, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16

; *****
; For LLVM instruction:
;  %153 = lshr i32 %151, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16

; *****
; For LLVM instruction:
;  %154 = or i32 %153, %152
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18

; *****
; For LLVM instruction:
;  %155 = add i32 %154, %145
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19

; *****
; For LLVM instruction:
;  %156 = xor i32 %155, %149
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20

; *****
; For LLVM instruction:
;  %157 = shl i32 %156, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21

; *****
; For LLVM instruction:
;  %158 = lshr i32 %156, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21

; *****
; For LLVM instruction:
;  %159 = or i32 %158, %157
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23

; *****
; For LLVM instruction:
;  %160 = add i32 %119, %90
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %161 = xor i32 %160, %154
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %162 = shl i32 %161, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %163 = lshr i32 %161, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %164 = or i32 %163, %162
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %165 = add i32 %164, %135
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %166 = xor i32 %165, %119
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %167 = shl i32 %166, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %168 = lshr i32 %166, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %169 = or i32 %168, %167
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %170 = add i32 %169, %160
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %171 = xor i32 %170, %164
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %172 = shl i32 %171, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %173 = lshr i32 %171, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %174 = or i32 %173, %172
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %175 = add i32 %174, %165
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %176 = xor i32 %175, %169
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %177 = shl i32 %176, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %178 = lshr i32 %176, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %179 = or i32 %178, %177
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %180 = add i32 %139, %110
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %181 = xor i32 %180, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %182 = shl i32 %181, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %183 = lshr i32 %181, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %184 = or i32 %183, %182
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %185 = add i32 %184, %155
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %186 = xor i32 %185, %139
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %187 = shl i32 %186, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %188 = lshr i32 %186, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %189 = or i32 %188, %187
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %190 = add i32 %189, %180
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %191 = xor i32 %190, %184
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %192 = shl i32 %191, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %193 = lshr i32 %191, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %194 = or i32 %193, %192
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %195 = add i32 %194, %185
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %196 = xor i32 %195, %189
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %197 = shl i32 %196, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %198 = lshr i32 %196, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %199 = or i32 %198, %197
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %200 = add i32 %159, %130
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %201 = xor i32 %200, %114
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %202 = shl i32 %201, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %203 = lshr i32 %201, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %204 = or i32 %203, %202
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %205 = add i32 %204, %95
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %206 = xor i32 %205, %159
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %207 = shl i32 %206, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %208 = lshr i32 %206, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %209 = or i32 %208, %207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %210 = add i32 %209, %200
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %211 = xor i32 %210, %204
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %212 = shl i32 %211, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %213 = lshr i32 %211, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %214 = or i32 %213, %212
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %215 = add i32 %214, %205
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %216 = xor i32 %215, %209
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %217 = shl i32 %216, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %218 = lshr i32 %216, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %219 = or i32 %218, %217
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %220 = add i32 %99, %150
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39

; *****
; For LLVM instruction:
;  %221 = xor i32 %220, %134
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59

; *****
; For LLVM instruction:
;  %222 = shl i32 %221, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %223 = lshr i32 %221, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60

; *****
; For LLVM instruction:
;  %224 = or i32 %223, %222
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62

; *****
; For LLVM instruction:
;  %225 = add i32 %224, %115
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83

; *****
; For LLVM instruction:
;  %226 = xor i32 %225, %99
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84

; *****
; For LLVM instruction:
;  %227 = shl i32 %226, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85

; *****
; For LLVM instruction:
;  %228 = lshr i32 %226, 20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85

; *****
; For LLVM instruction:
;  %229 = or i32 %228, %227
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87

; *****
; For LLVM instruction:
;  %230 = add i32 %229, %220
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88

; *****
; For LLVM instruction:
;  %231 = xor i32 %230, %224
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89

; *****
; For LLVM instruction:
;  %232 = shl i32 %231, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90

; *****
; For LLVM instruction:
;  %233 = lshr i32 %231, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90

; *****
; For LLVM instruction:
;  %234 = or i32 %233, %232
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92

; *****
; For LLVM instruction:
;  %235 = add i32 %234, %225
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93

; *****
; For LLVM instruction:
;  %236 = xor i32 %235, %229
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94

; *****
; For LLVM instruction:
;  %237 = shl i32 %236, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95

; *****
; For LLVM instruction:
;  %238 = lshr i32 %236, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95

; *****
; For LLVM instruction:
;  %239 = or i32 %238, %237
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97

; *****
; For LLVM instruction:
;  %240 = add nsw i32 %63, -2
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %241 = icmp eq i32 %240, 0
; Looking for a replacement for:
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %243 = add i32 %170, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82 (hasExternalUses)
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = add %0, %89
infer %90

; *****
; For LLVM instruction:
;  %244 = add i32 %190, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82 (hasExternalUses)
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = add %0, %89
infer %90

; *****
; For LLVM instruction:
;  %245 = add i32 %210, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82 (hasExternalUses)
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = add %0, %89
infer %90

; *****
; For LLVM instruction:
;  %246 = add i32 %230, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82 (hasExternalUses)
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = add %0, %89
infer %90

; *****
; For LLVM instruction:
;  %247 = add i32 %239, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = xor %94, %88
%96:i32 = shl %95, 7:i32
%97:i32 = lshr %95, 25:i32
%98:i32 = or %96, %97 (hasExternalUses)
%99:i32 = add %0, %98
infer %99

; *****
; For LLVM instruction:
;  %248 = add i32 %179, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = xor %94, %88
%96:i32 = shl %95, 7:i32
%97:i32 = lshr %95, 25:i32
%98:i32 = or %96, %97 (hasExternalUses)
%99:i32 = add %0, %98
infer %99

; *****
; For LLVM instruction:
;  %249 = add i32 %199, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = xor %94, %88
%96:i32 = shl %95, 7:i32
%97:i32 = lshr %95, 25:i32
%98:i32 = or %96, %97 (hasExternalUses)
%99:i32 = add %0, %98
infer %99

; *****
; For LLVM instruction:
;  %250 = add i32 %219, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = xor %94, %88
%96:i32 = shl %95, 7:i32
%97:i32 = lshr %95, 25:i32
%98:i32 = or %96, %97 (hasExternalUses)
%99:i32 = add %0, %98
infer %99

; *****
; For LLVM instruction:
;  %251 = add i32 %215, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = add %0, %94
infer %95

; *****
; For LLVM instruction:
;  %252 = add i32 %235, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = add %0, %94
infer %95

; *****
; For LLVM instruction:
;  %253 = add i32 %175, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = add %0, %94
infer %95

; *****
; For LLVM instruction:
;  %254 = add i32 %195, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = add %0, %94
infer %95

; *****
; For LLVM instruction:
;  %255 = add i32 %194, %43
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %0, %93
infer %94

; *****
; For LLVM instruction:
;  %256 = add i32 %214, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %0, %93
infer %94

; *****
; For LLVM instruction:
;  %257 = add i32 %234, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %0, %93
infer %94

; *****
; For LLVM instruction:
;  %258 = add i32 %174, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %0, %93
infer %94

; *****
; For LLVM instruction:
;  %260 = load i32, i32* %259, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %261 = xor i32 %260, %243
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91
infer %92

; *****
; For LLVM instruction:
;  %264 = load i32, i32* %263, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %265 = xor i32 %264, %244
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91
infer %92

; *****
; For LLVM instruction:
;  %268 = load i32, i32* %267, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %269 = xor i32 %268, %245
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91
infer %92

; *****
; For LLVM instruction:
;  %272 = load i32, i32* %271, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %273 = xor i32 %272, %246
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91
infer %92

; *****
; For LLVM instruction:
;  %276 = load i32, i32* %275, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %277 = xor i32 %276, %247
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = xor %95, %89
%97:i32 = shl %96, 7:i32
%98:i32 = lshr %96, 25:i32
%99:i32 = or %97, %98 (hasExternalUses)
%100:i32 = add %1, %99
%101:i32 = xor %0, %100
infer %101

; *****
; For LLVM instruction:
;  %280 = load i32, i32* %279, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %281 = xor i32 %280, %248
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = xor %95, %89
%97:i32 = shl %96, 7:i32
%98:i32 = lshr %96, 25:i32
%99:i32 = or %97, %98 (hasExternalUses)
%100:i32 = add %1, %99
%101:i32 = xor %0, %100
infer %101

; *****
; For LLVM instruction:
;  %284 = load i32, i32* %283, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %285 = xor i32 %284, %249
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = xor %95, %89
%97:i32 = shl %96, 7:i32
%98:i32 = lshr %96, 25:i32
%99:i32 = or %97, %98 (hasExternalUses)
%100:i32 = add %1, %99
%101:i32 = xor %0, %100
infer %101

; *****
; For LLVM instruction:
;  %288 = load i32, i32* %287, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %289 = xor i32 %288, %250
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = xor %95, %89
%97:i32 = shl %96, 7:i32
%98:i32 = lshr %96, 25:i32
%99:i32 = or %97, %98 (hasExternalUses)
%100:i32 = add %1, %99
%101:i32 = xor %0, %100
infer %101

; *****
; For LLVM instruction:
;  %292 = load i32, i32* %291, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %293 = xor i32 %292, %251
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = add %1, %95
%97:i32 = xor %0, %96
infer %97

; *****
; For LLVM instruction:
;  %296 = load i32, i32* %295, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %297 = xor i32 %296, %252
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = add %1, %95
%97:i32 = xor %0, %96
infer %97

; *****
; For LLVM instruction:
;  %300 = load i32, i32* %299, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %301 = xor i32 %300, %253
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = add %1, %95
%97:i32 = xor %0, %96
infer %97

; *****
; For LLVM instruction:
;  %304 = load i32, i32* %303, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %305 = xor i32 %304, %254
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = add %1, %95
%97:i32 = xor %0, %96
infer %97

; *****
; For LLVM instruction:
;  %308 = load i32, i32* %307, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %309 = xor i32 %308, %255
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %1, %94
%96:i32 = xor %0, %95
infer %96

; *****
; For LLVM instruction:
;  %312 = load i32, i32* %311, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %313 = xor i32 %312, %256
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %1, %94
%96:i32 = xor %0, %95
infer %96

; *****
; For LLVM instruction:
;  %316 = load i32, i32* %315, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %317 = xor i32 %316, %257
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %1, %94
%96:i32 = xor %0, %95
infer %96

; *****
; For LLVM instruction:
;  %320 = load i32, i32* %319, align 1
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %321 = xor i32 %320, %258
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %1, %94
%96:i32 = xor %0, %95
infer %96

; *****
; For LLVM instruction:
;  %322 = add i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %323 = icmp eq i32 %322, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %324 = zext i1 %323 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %325 = add i32 %44, %324
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1 (hasExternalUses)
%3:i1 = eq 0:i32, %2
%4:i32 = zext %3
%5:i32 = add %0, %4
infer %5

; *****
; For LLVM instruction:
;  %357 = icmp ult i64 %42, 65
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
infer %1

; *****
; For LLVM instruction:
;  %360 = trunc i64 %42 to i32
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0
infer %3

; *****
; For LLVM instruction:
;  %361 = icmp eq i32 %360, 0
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0 (hasExternalUses)
%4:i1 = eq 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %363 = trunc i32 %261 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91 (hasExternalUses)
%93:i8 = trunc %92
infer %93

; *****
; For LLVM instruction:
;  %364 = icmp eq i32 %360, 1
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0 (hasExternalUses)
%4:i1 = eq 0:i32, %3
pc %4 0:i1
%5:i1 = eq 1:i32, %3
infer %5

; *****
; For LLVM instruction:
;  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
; Looking for a replacement for:
%0:i32 = var (nonZero) (range=[1,0))
infer %0

; *****
; For LLVM instruction:
;  %368 = load i8, i8* %367, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %370 = add nuw i32 %366, 1
; Looking for a replacement for:
%0:i32 = var (nonZero) (range=[1,0))
%1:i32 = addnuw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %371 = icmp eq i32 %370, %360
; Looking for a replacement for:
%0:i32 = var (nonZero) (range=[1,0))
%1:i32 = addnuw 1:i32, %0 (hasExternalUses)
%2:i64 = var (range=[1,0))
%3:i32 = trunc %2 (hasExternalUses)
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %374 = add i64 %42, -64
; Looking for a replacement for:
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 0:i1
%2:i64 = add 18446744073709551552:i64, %0
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[1,0))
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4611686018427387904
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 64:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = zext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i64 = zext %1
%3:i64 = var (range=[1,0))
%4:i1 = ult %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2048
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2145583100
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = shl %15, 8:i32
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2146416640
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8 (hasExternalUses)
%16:i32 = lshr %15, 24:i32
infer %16


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1337049056
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = lshr %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3 (hasExternalUses)
%5:i32 = shl %4, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2 (hasExternalUses)
%4:i32 = xor %0, %3
%5:i32 = shl %4, 16:i32
%6:i32 = lshr %4, 16:i32
%7:i32 = or %5, %6

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -698635663
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = shl %20, 7:i32
infer %21


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1525700096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13 (hasExternalUses)
%21:i32 = lshr %20, 25:i32
infer %21


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = xor %19, %13
%21:i32 = shl %20, 7:i32
%22:i32 = lshr %20, 25:i32
%23:i32 = or %21, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2095414611
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = shl %10, 12:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9 (hasExternalUses)
%11:i32 = lshr %10, 20:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %0 (hasExternalUses)
%5:i32 = xor %2, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %1, %8 (hasExternalUses)
%10:i32 = xor %0, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38
infer %39


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1246780832
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -92075454
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = shl %59, 16:i32
infer %60


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 139788288
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58 (hasExternalUses)
%60:i32 = lshr %59, 16:i32
infer %60


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 47746
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37 (hasExternalUses)
%39:i32 = add %14, %38 (hasExternalUses)
%40:i32 = var
%41:i32 = var
%42:i32 = add %40, %41
%43:i32 = var
%44:i32 = var
%45:i32 = xor %44, %42
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %43, %48 (hasExternalUses)
%50:i32 = xor %41, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %42, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = xor %39, %58
%60:i32 = shl %59, 16:i32
%61:i32 = lshr %59, 16:i32
%62:i32 = or %60, %61
infer %62


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1778552001
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -437018013
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1491561671
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = shl %84, 12:i32
infer %85


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1688756224
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58 (hasExternalUses)
%85:i32 = lshr %84, 20:i32
infer %85


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3865
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %19, %82 (hasExternalUses)
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
infer %87


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1286982043
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81 (hasExternalUses)
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87
infer %88


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -556689917
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
infer %89


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1780741386
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = shl %89, 8:i32
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 957571328
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82 (hasExternalUses)
%90:i32 = lshr %89, 24:i32
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 72
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = xor %4, %2
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %3, %8 (hasExternalUses)
%10:i32 = xor %1, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %2, %13 (hasExternalUses)
%15:i32 = var
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = add %17, %18
%20:i32 = xor %16, %19
%21:i32 = shl %20, 16:i32
%22:i32 = lshr %20, 16:i32
%23:i32 = or %21, %22
%24:i32 = add %15, %23
%25:i32 = xor %18, %24
%26:i32 = shl %25, 12:i32
%27:i32 = lshr %25, 20:i32
%28:i32 = or %26, %27
%29:i32 = add %19, %28 (hasExternalUses)
%30:i32 = xor %29, %23
%31:i32 = shl %30, 8:i32
%32:i32 = lshr %30, 24:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %24, %33 (hasExternalUses)
%35:i32 = xor %34, %28
%36:i32 = shl %35, 7:i32
%37:i32 = lshr %35, 25:i32
%38:i32 = or %36, %37
%39:i32 = add %14, %38
%40:i32 = var
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = add %42, %43
%45:i32 = xor %41, %44
%46:i32 = shl %45, 16:i32
%47:i32 = lshr %45, 16:i32
%48:i32 = or %46, %47
%49:i32 = add %40, %48
%50:i32 = xor %43, %49
%51:i32 = shl %50, 12:i32
%52:i32 = lshr %50, 20:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 8:i32
%57:i32 = lshr %55, 24:i32
%58:i32 = or %56, %57 (hasExternalUses)
%59:i32 = add %49, %58 (hasExternalUses)
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %39, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %59, %82 (hasExternalUses)
%84:i32 = xor %83, %38
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %39, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91
infer %92


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 578360228
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86 (hasExternalUses)
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92
infer %93


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 988667969
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3 (hasExternalUses)
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7 (hasExternalUses)
%9:i32 = add %0, %8

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
infer %94


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -456196687
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = shl %94, 7:i32
infer %95


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 156385024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87 (hasExternalUses)
%95:i32 = lshr %94, 25:i32
infer %95


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 38
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = xor %1, %4
%6:i32 = shl %5, 16:i32
%7:i32 = lshr %5, 16:i32
%8:i32 = or %6, %7
%9:i32 = add %0, %8
%10:i32 = xor %3, %9
%11:i32 = shl %10, 12:i32
%12:i32 = lshr %10, 20:i32
%13:i32 = or %11, %12 (hasExternalUses)
%14:i32 = add %4, %13 (hasExternalUses)
%15:i32 = xor %14, %8
%16:i32 = shl %15, 8:i32
%17:i32 = lshr %15, 24:i32
%18:i32 = or %16, %17 (hasExternalUses)
%19:i32 = add %9, %18 (hasExternalUses)
%20:i32 = var
%21:i32 = var
%22:i32 = add %20, %21
%23:i32 = var
%24:i32 = var
%25:i32 = xor %24, %22
%26:i32 = shl %25, 16:i32
%27:i32 = lshr %25, 16:i32
%28:i32 = or %26, %27 (hasExternalUses)
%29:i32 = add %23, %28 (hasExternalUses)
%30:i32 = xor %21, %29
%31:i32 = shl %30, 12:i32
%32:i32 = lshr %30, 20:i32
%33:i32 = or %31, %32 (hasExternalUses)
%34:i32 = add %22, %33 (hasExternalUses)
%35:i32 = var
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %37, %38
%40:i32 = xor %36, %39
%41:i32 = shl %40, 16:i32
%42:i32 = lshr %40, 16:i32
%43:i32 = or %41, %42
%44:i32 = add %35, %43
%45:i32 = xor %38, %44
%46:i32 = shl %45, 12:i32
%47:i32 = lshr %45, 20:i32
%48:i32 = or %46, %47
%49:i32 = add %39, %48 (hasExternalUses)
%50:i32 = xor %49, %43
%51:i32 = shl %50, 8:i32
%52:i32 = lshr %50, 24:i32
%53:i32 = or %51, %52 (hasExternalUses)
%54:i32 = add %44, %53 (hasExternalUses)
%55:i32 = xor %54, %48
%56:i32 = shl %55, 7:i32
%57:i32 = lshr %55, 25:i32
%58:i32 = or %56, %57
%59:i32 = add %34, %58
%60:i32 = var
%61:i32 = var
%62:i32 = add %60, %61
%63:i32 = var
%64:i32 = var
%65:i32 = xor %64, %62
%66:i32 = shl %65, 16:i32
%67:i32 = lshr %65, 16:i32
%68:i32 = or %66, %67
%69:i32 = add %63, %68 (hasExternalUses)
%70:i32 = xor %61, %69
%71:i32 = shl %70, 12:i32
%72:i32 = lshr %70, 20:i32
%73:i32 = or %71, %72 (hasExternalUses)
%74:i32 = add %62, %73 (hasExternalUses)
%75:i32 = xor %74, %68
%76:i32 = shl %75, 8:i32
%77:i32 = lshr %75, 24:i32
%78:i32 = or %76, %77 (hasExternalUses)
%79:i32 = xor %59, %78
%80:i32 = shl %79, 16:i32
%81:i32 = lshr %79, 16:i32
%82:i32 = or %80, %81
%83:i32 = add %19, %82
%84:i32 = xor %83, %58
%85:i32 = shl %84, 12:i32
%86:i32 = lshr %84, 20:i32
%87:i32 = or %85, %86
%88:i32 = add %59, %87 (hasExternalUses)
%89:i32 = xor %88, %82
%90:i32 = shl %89, 8:i32
%91:i32 = lshr %89, 24:i32
%92:i32 = or %90, %91 (hasExternalUses)
%93:i32 = add %83, %92 (hasExternalUses)
%94:i32 = xor %93, %87
%95:i32 = shl %94, 7:i32
%96:i32 = lshr %94, 25:i32
%97:i32 = or %95, %96
infer %97


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (range=[2,21))
%1:i32 = addnsw 4294967294:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82 (hasExternalUses)
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = add %0, %89
infer %90


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = xor %94, %88
%96:i32 = shl %95, 7:i32
%97:i32 = lshr %95, 25:i32
%98:i32 = or %96, %97 (hasExternalUses)
%99:i32 = add %0, %98
infer %99


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = xor %2, %5
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8
%10:i32 = add %1, %9
%11:i32 = xor %4, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %5, %14 (hasExternalUses)
%16:i32 = xor %15, %9
%17:i32 = shl %16, 8:i32
%18:i32 = lshr %16, 24:i32
%19:i32 = or %17, %18 (hasExternalUses)
%20:i32 = add %10, %19 (hasExternalUses)
%21:i32 = var
%22:i32 = var
%23:i32 = add %21, %22
%24:i32 = var
%25:i32 = var
%26:i32 = xor %25, %23
%27:i32 = shl %26, 16:i32
%28:i32 = lshr %26, 16:i32
%29:i32 = or %27, %28 (hasExternalUses)
%30:i32 = add %24, %29 (hasExternalUses)
%31:i32 = xor %22, %30
%32:i32 = shl %31, 12:i32
%33:i32 = lshr %31, 20:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %23, %34 (hasExternalUses)
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %38, %39
%41:i32 = xor %37, %40
%42:i32 = shl %41, 16:i32
%43:i32 = lshr %41, 16:i32
%44:i32 = or %42, %43
%45:i32 = add %36, %44
%46:i32 = xor %39, %45
%47:i32 = shl %46, 12:i32
%48:i32 = lshr %46, 20:i32
%49:i32 = or %47, %48
%50:i32 = add %40, %49 (hasExternalUses)
%51:i32 = xor %50, %44
%52:i32 = shl %51, 8:i32
%53:i32 = lshr %51, 24:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 7:i32
%58:i32 = lshr %56, 25:i32
%59:i32 = or %57, %58
%60:i32 = add %35, %59
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %60, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %20, %83
%85:i32 = xor %84, %59
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %60, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %84, %93 (hasExternalUses)
%95:i32 = add %0, %94
infer %95


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor %5, %3
%7:i32 = shl %6, 16:i32
%8:i32 = lshr %6, 16:i32
%9:i32 = or %7, %8 (hasExternalUses)
%10:i32 = add %4, %9 (hasExternalUses)
%11:i32 = xor %2, %10
%12:i32 = shl %11, 12:i32
%13:i32 = lshr %11, 20:i32
%14:i32 = or %12, %13 (hasExternalUses)
%15:i32 = add %3, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = add %18, %19
%21:i32 = xor %17, %20
%22:i32 = shl %21, 16:i32
%23:i32 = lshr %21, 16:i32
%24:i32 = or %22, %23
%25:i32 = add %16, %24
%26:i32 = xor %19, %25
%27:i32 = shl %26, 12:i32
%28:i32 = lshr %26, 20:i32
%29:i32 = or %27, %28
%30:i32 = add %20, %29 (hasExternalUses)
%31:i32 = xor %30, %24
%32:i32 = shl %31, 8:i32
%33:i32 = lshr %31, 24:i32
%34:i32 = or %32, %33 (hasExternalUses)
%35:i32 = add %25, %34 (hasExternalUses)
%36:i32 = xor %35, %29
%37:i32 = shl %36, 7:i32
%38:i32 = lshr %36, 25:i32
%39:i32 = or %37, %38
%40:i32 = add %15, %39
%41:i32 = var
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = add %43, %44
%46:i32 = xor %42, %45
%47:i32 = shl %46, 16:i32
%48:i32 = lshr %46, 16:i32
%49:i32 = or %47, %48
%50:i32 = add %41, %49
%51:i32 = xor %44, %50
%52:i32 = shl %51, 12:i32
%53:i32 = lshr %51, 20:i32
%54:i32 = or %52, %53 (hasExternalUses)
%55:i32 = add %45, %54 (hasExternalUses)
%56:i32 = xor %55, %49
%57:i32 = shl %56, 8:i32
%58:i32 = lshr %56, 24:i32
%59:i32 = or %57, %58 (hasExternalUses)
%60:i32 = add %50, %59 (hasExternalUses)
%61:i32 = var
%62:i32 = var
%63:i32 = add %61, %62
%64:i32 = var
%65:i32 = var
%66:i32 = xor %65, %63
%67:i32 = shl %66, 16:i32
%68:i32 = lshr %66, 16:i32
%69:i32 = or %67, %68
%70:i32 = add %64, %69 (hasExternalUses)
%71:i32 = xor %62, %70
%72:i32 = shl %71, 12:i32
%73:i32 = lshr %71, 20:i32
%74:i32 = or %72, %73 (hasExternalUses)
%75:i32 = add %63, %74 (hasExternalUses)
%76:i32 = xor %75, %69
%77:i32 = shl %76, 8:i32
%78:i32 = lshr %76, 24:i32
%79:i32 = or %77, %78 (hasExternalUses)
%80:i32 = xor %40, %79
%81:i32 = shl %80, 16:i32
%82:i32 = lshr %80, 16:i32
%83:i32 = or %81, %82
%84:i32 = add %60, %83 (hasExternalUses)
%85:i32 = xor %84, %39
%86:i32 = shl %85, 12:i32
%87:i32 = lshr %85, 20:i32
%88:i32 = or %86, %87 (hasExternalUses)
%89:i32 = add %40, %88 (hasExternalUses)
%90:i32 = xor %89, %83
%91:i32 = shl %90, 8:i32
%92:i32 = lshr %90, 24:i32
%93:i32 = or %91, %92 (hasExternalUses)
%94:i32 = add %0, %93
infer %94


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83 (hasExternalUses)
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = add %1, %90
%92:i32 = xor %0, %91
infer %92


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = xor %95, %89
%97:i32 = shl %96, 7:i32
%98:i32 = lshr %96, 25:i32
%99:i32 = or %97, %98 (hasExternalUses)
%100:i32 = add %1, %99
%101:i32 = xor %0, %100
infer %101


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = var
%5:i32 = var
%6:i32 = add %4, %5
%7:i32 = xor %3, %6
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9
%11:i32 = add %2, %10
%12:i32 = xor %5, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %6, %15 (hasExternalUses)
%17:i32 = xor %16, %10
%18:i32 = shl %17, 8:i32
%19:i32 = lshr %17, 24:i32
%20:i32 = or %18, %19 (hasExternalUses)
%21:i32 = add %11, %20 (hasExternalUses)
%22:i32 = var
%23:i32 = var
%24:i32 = add %22, %23
%25:i32 = var
%26:i32 = var
%27:i32 = xor %26, %24
%28:i32 = shl %27, 16:i32
%29:i32 = lshr %27, 16:i32
%30:i32 = or %28, %29 (hasExternalUses)
%31:i32 = add %25, %30 (hasExternalUses)
%32:i32 = xor %23, %31
%33:i32 = shl %32, 12:i32
%34:i32 = lshr %32, 20:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %24, %35 (hasExternalUses)
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = var
%41:i32 = add %39, %40
%42:i32 = xor %38, %41
%43:i32 = shl %42, 16:i32
%44:i32 = lshr %42, 16:i32
%45:i32 = or %43, %44
%46:i32 = add %37, %45
%47:i32 = xor %40, %46
%48:i32 = shl %47, 12:i32
%49:i32 = lshr %47, 20:i32
%50:i32 = or %48, %49
%51:i32 = add %41, %50 (hasExternalUses)
%52:i32 = xor %51, %45
%53:i32 = shl %52, 8:i32
%54:i32 = lshr %52, 24:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 7:i32
%59:i32 = lshr %57, 25:i32
%60:i32 = or %58, %59
%61:i32 = add %36, %60
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %61, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %21, %84
%86:i32 = xor %85, %60
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %61, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %85, %94 (hasExternalUses)
%96:i32 = add %1, %95
%97:i32 = xor %0, %96
infer %97


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = var
%6:i32 = var
%7:i32 = xor %6, %4
%8:i32 = shl %7, 16:i32
%9:i32 = lshr %7, 16:i32
%10:i32 = or %8, %9 (hasExternalUses)
%11:i32 = add %5, %10 (hasExternalUses)
%12:i32 = xor %3, %11
%13:i32 = shl %12, 12:i32
%14:i32 = lshr %12, 20:i32
%15:i32 = or %13, %14 (hasExternalUses)
%16:i32 = add %4, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = var
%19:i32 = var
%20:i32 = var
%21:i32 = add %19, %20
%22:i32 = xor %18, %21
%23:i32 = shl %22, 16:i32
%24:i32 = lshr %22, 16:i32
%25:i32 = or %23, %24
%26:i32 = add %17, %25
%27:i32 = xor %20, %26
%28:i32 = shl %27, 12:i32
%29:i32 = lshr %27, 20:i32
%30:i32 = or %28, %29
%31:i32 = add %21, %30 (hasExternalUses)
%32:i32 = xor %31, %25
%33:i32 = shl %32, 8:i32
%34:i32 = lshr %32, 24:i32
%35:i32 = or %33, %34 (hasExternalUses)
%36:i32 = add %26, %35 (hasExternalUses)
%37:i32 = xor %36, %30
%38:i32 = shl %37, 7:i32
%39:i32 = lshr %37, 25:i32
%40:i32 = or %38, %39
%41:i32 = add %16, %40
%42:i32 = var
%43:i32 = var
%44:i32 = var
%45:i32 = var
%46:i32 = add %44, %45
%47:i32 = xor %43, %46
%48:i32 = shl %47, 16:i32
%49:i32 = lshr %47, 16:i32
%50:i32 = or %48, %49
%51:i32 = add %42, %50
%52:i32 = xor %45, %51
%53:i32 = shl %52, 12:i32
%54:i32 = lshr %52, 20:i32
%55:i32 = or %53, %54 (hasExternalUses)
%56:i32 = add %46, %55 (hasExternalUses)
%57:i32 = xor %56, %50
%58:i32 = shl %57, 8:i32
%59:i32 = lshr %57, 24:i32
%60:i32 = or %58, %59 (hasExternalUses)
%61:i32 = add %51, %60 (hasExternalUses)
%62:i32 = var
%63:i32 = var
%64:i32 = add %62, %63
%65:i32 = var
%66:i32 = var
%67:i32 = xor %66, %64
%68:i32 = shl %67, 16:i32
%69:i32 = lshr %67, 16:i32
%70:i32 = or %68, %69
%71:i32 = add %65, %70 (hasExternalUses)
%72:i32 = xor %63, %71
%73:i32 = shl %72, 12:i32
%74:i32 = lshr %72, 20:i32
%75:i32 = or %73, %74 (hasExternalUses)
%76:i32 = add %64, %75 (hasExternalUses)
%77:i32 = xor %76, %70
%78:i32 = shl %77, 8:i32
%79:i32 = lshr %77, 24:i32
%80:i32 = or %78, %79 (hasExternalUses)
%81:i32 = xor %41, %80
%82:i32 = shl %81, 16:i32
%83:i32 = lshr %81, 16:i32
%84:i32 = or %82, %83
%85:i32 = add %61, %84 (hasExternalUses)
%86:i32 = xor %85, %40
%87:i32 = shl %86, 12:i32
%88:i32 = lshr %86, 20:i32
%89:i32 = or %87, %88 (hasExternalUses)
%90:i32 = add %41, %89 (hasExternalUses)
%91:i32 = xor %90, %84
%92:i32 = shl %91, 8:i32
%93:i32 = lshr %91, 24:i32
%94:i32 = or %92, %93 (hasExternalUses)
%95:i32 = add %1, %94
%96:i32 = xor %0, %95
infer %96


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = add 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1 (hasExternalUses)
%3:i1 = eq 0:i32, %2
%4:i32 = zext %3
%5:i32 = add %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = add 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 24
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0 (hasExternalUses)
%4:i1 = eq 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %377, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %373, %8
  %42 = phi i64 [ %3, %8 ], [ %374, %373 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %373 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %373 ]
  %45 = phi i8* [ %2, %8 ], [ %375, %373 ]
  %46 = phi i8* [ %1, %8 ], [ %376, %373 ]
  %47 = phi i8* [ null, %8 ], [ %61, %373 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %373

358:                                              ; preds = %242
  br i1 %48, label %359, label %372

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %372, label %362

362:                                              ; preds = %359
  %363 = trunc i32 %261 to i8
  store i8 %363, i8* %61, align 1
  %364 = icmp eq i32 %360, 1
  br i1 %364, label %372, label %365

365:                                              ; preds = %362, %365
  %366 = phi i32 [ %370, %365 ], [ 1, %362 ]
  %367 = getelementptr i8, i8* %59, i32 %366
  %368 = load i8, i8* %367, align 1
  %369 = getelementptr i8, i8* %61, i32 %366
  store i8 %368, i8* %369, align 1
  %370 = add nuw i32 %366, 1
  %371 = icmp eq i32 %370, %360
  br i1 %371, label %372, label %365

372:                                              ; preds = %365, %362, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %377

373:                                              ; preds = %242
  %374 = add i64 %42, -64
  %375 = getelementptr i8, i8* %59, i32 64
  %376 = getelementptr i8, i8* %60, i32 64
  br label %41

377:                                              ; preds = %4, %372
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %361 = icmp eq i32 %360, 0"
; from ""
; with "i1 false" in:
"%0:i64 = var (range=[1,0))
%1:i1 = ult %0, 65:i64
pc %1 1:i1
%2:i1 = ult %0, 64:i64
pc %2 1:i1
%3:i32 = trunc %0 (hasExternalUses)
%4:i1 = eq 0:i32, %3
cand %4 0:i1
"
; with "i1 false"

Module after replacement:
; ModuleID = './chacha20_ref.c.bc'
source_filename = "crypto_stream/chacha20/ref/chacha20_ref.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_stream_chacha20_implementation = type { i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i64, i8*, i8*)*, i32 (i8*, i8*, i64, i8*, i64, i8*)*, i32 (i8*, i8*, i64, i8*, i32, i8*)* }
%struct.chacha_ctx = type { [16 x i32] }

@crypto_stream_chacha20_ref_implementation = hidden local_unnamed_addr global %struct.crypto_stream_chacha20_implementation { i32 (i8*, i64, i8*, i8*)* @stream_ref, i32 (i8*, i64, i8*, i8*)* @stream_ietf_ext_ref, i32 (i8*, i8*, i64, i8*, i64, i8*)* @stream_ref_xor_ic, i32 (i8*, i8*, i64, i8*, i32, i8*)* @stream_ietf_ext_ref_xor_ic }, align 4

; Function Attrs: nounwind
define internal i32 @stream_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %54, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 0, i32* %45, align 4
  %46 = bitcast i8* %2 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i8, i8* %2, i32 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %51, i32* %52, align 4
  %53 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %53, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %54

54:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref(i8* nocapture %0, i64 %1, i8* nocapture readonly %2, i8* nocapture readonly %3) #0 {
  %5 = alloca %struct.chacha_ctx, align 4
  %6 = bitcast %struct.chacha_ctx* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %9, align 4
  %10 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 1
  store i32 857760878, i32* %10, align 4
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %12, align 4
  %13 = bitcast i8* %3 to i32*
  %14 = load i32, i32* %13, align 1
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 4
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i8, i8* %3, i32 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 1
  %19 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = getelementptr i8, i8* %3, i32 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 6
  store i32 %22, i32* %23, align 4
  %24 = getelementptr i8, i8* %3, i32 12
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 7
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i8, i8* %3, i32 16
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 1
  %31 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 8
  store i32 %30, i32* %31, align 4
  %32 = getelementptr i8, i8* %3, i32 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 9
  store i32 %34, i32* %35, align 4
  %36 = getelementptr i8, i8* %3, i32 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 1
  %39 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i8, i8* %3, i32 28
  %41 = bitcast i8* %40 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 11
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 12
  store i32 0, i32* %44, align 4
  %45 = bitcast i8* %2 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 13
  store i32 %46, i32* %47, align 4
  %48 = getelementptr i8, i8* %2, i32 4
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i8, i8* %2, i32 8
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 1
  %55 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %5, i32 0, i32 0, i32 15
  store i32 %54, i32* %55, align 4
  %56 = trunc i64 %1 to i32
  tail call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 %56, i1 false)
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %5, i8* %0, i8* %0, i64 %1)
  call void @sodium_memzero(i8* nonnull %6, i32 64) #4
  br label %57

57:                                               ; preds = %4, %8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i64 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = lshr i64 %4, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %4 to i32
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %14, align 4
  %15 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %15, align 4
  %16 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %16, align 4
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %17, align 4
  %18 = bitcast i8* %5 to i32*
  %19 = load i32, i32* %18, align 1
  %20 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %19, i32* %20, align 4
  %21 = getelementptr i8, i8* %5, i32 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i8, i8* %5, i32 8
  %26 = bitcast i8* %25 to i32*
  %27 = load i32, i32* %26, align 1
  %28 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %27, i32* %28, align 4
  %29 = getelementptr i8, i8* %5, i32 12
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr i8, i8* %5, i32 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i8, i8* %5, i32 20
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %39, i32* %40, align 4
  %41 = getelementptr i8, i8* %5, i32 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %43, i32* %44, align 4
  %45 = getelementptr i8, i8* %5, i32 28
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 1
  %48 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %13, i32* %49, align 4
  %50 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %12, i32* %50, align 4
  %51 = bitcast i8* %3 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: nounwind
define internal i32 @stream_ietf_ext_ref_xor_ic(i8* nocapture %0, i8* nocapture readonly %1, i64 %2, i8* nocapture readonly %3, i32 %4, i8* nocapture readonly %5) #0 {
  %7 = alloca %struct.chacha_ctx, align 4
  %8 = bitcast %struct.chacha_ctx* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = icmp eq i64 %2, 0
  br i1 %9, label %58, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 0
  store i32 1634760805, i32* %11, align 4
  %12 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 1
  store i32 857760878, i32* %12, align 4
  %13 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 2
  store i32 2036477234, i32* %13, align 4
  %14 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 3
  store i32 1797285236, i32* %14, align 4
  %15 = bitcast i8* %5 to i32*
  %16 = load i32, i32* %15, align 1
  %17 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 4
  store i32 %16, i32* %17, align 4
  %18 = getelementptr i8, i8* %5, i32 4
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 5
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i8, i8* %5, i32 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 6
  store i32 %24, i32* %25, align 4
  %26 = getelementptr i8, i8* %5, i32 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 7
  store i32 %28, i32* %29, align 4
  %30 = getelementptr i8, i8* %5, i32 16
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 1
  %33 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i8, i8* %5, i32 20
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 9
  store i32 %36, i32* %37, align 4
  %38 = getelementptr i8, i8* %5, i32 24
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr i8, i8* %5, i32 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 12
  store i32 %4, i32* %46, align 4
  %47 = bitcast i8* %3 to i32*
  %48 = load i32, i32* %47, align 1
  %49 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 13
  store i32 %48, i32* %49, align 4
  %50 = getelementptr i8, i8* %3, i32 4
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 14
  store i32 %52, i32* %53, align 4
  %54 = getelementptr i8, i8* %3, i32 8
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 1
  %57 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %7, i32 0, i32 0, i32 15
  store i32 %56, i32* %57, align 4
  call fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nonnull %7, i8* %1, i8* %0, i64 %2)
  call void @sodium_memzero(i8* nonnull %8, i32 64) #4
  br label %58

58:                                               ; preds = %6, %10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
define internal fastcc void @chacha20_encrypt_bytes(%struct.chacha_ctx* nocapture %0, i8* nocapture readonly %1, i8* nocapture %2, i64 %3) unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #4
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %376, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 10
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 12
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 14
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr %struct.chacha_ctx, %struct.chacha_ctx* %0, i32 0, i32 0, i32 15
  %40 = load i32, i32* %39, align 4
  br label %41

41:                                               ; preds = %372, %8
  %42 = phi i64 [ %3, %8 ], [ %373, %372 ]
  %43 = phi i32 [ %34, %8 ], [ %322, %372 ]
  %44 = phi i32 [ %36, %8 ], [ %325, %372 ]
  %45 = phi i8* [ %2, %8 ], [ %374, %372 ]
  %46 = phi i8* [ %1, %8 ], [ %375, %372 ]
  %47 = phi i8* [ null, %8 ], [ %61, %372 ]
  %48 = icmp ult i64 %42, 64
  br i1 %48, label %49, label %58

49:                                               ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* nonnull align 16 dereferenceable(64) %6, i8 0, i32 64, i1 false)
  br label %50

50:                                               ; preds = %49, %50
  %51 = phi i32 [ %55, %50 ], [ 0, %49 ]
  %52 = getelementptr i8, i8* %46, i32 %51
  %53 = load i8, i8* %52, align 1
  %54 = getelementptr [64 x i8], [64 x i8]* %5, i32 0, i32 %51
  store i8 %53, i8* %54, align 1
  %55 = add i32 %51, 1
  %56 = zext i32 %55 to i64
  %57 = icmp ugt i64 %42, %56
  br i1 %57, label %50, label %58

58:                                               ; preds = %50, %41
  %59 = phi i8* [ %45, %41 ], [ %6, %50 ]
  %60 = phi i8* [ %46, %41 ], [ %6, %50 ]
  %61 = phi i8* [ %47, %41 ], [ %45, %50 ]
  br label %62

62:                                               ; preds = %58, %62
  %63 = phi i32 [ 20, %58 ], [ %240, %62 ]
  %64 = phi i32 [ %10, %58 ], [ %170, %62 ]
  %65 = phi i32 [ %12, %58 ], [ %190, %62 ]
  %66 = phi i32 [ %14, %58 ], [ %210, %62 ]
  %67 = phi i32 [ %16, %58 ], [ %230, %62 ]
  %68 = phi i32 [ %18, %58 ], [ %239, %62 ]
  %69 = phi i32 [ %20, %58 ], [ %179, %62 ]
  %70 = phi i32 [ %22, %58 ], [ %199, %62 ]
  %71 = phi i32 [ %24, %58 ], [ %219, %62 ]
  %72 = phi i32 [ %26, %58 ], [ %215, %62 ]
  %73 = phi i32 [ %28, %58 ], [ %235, %62 ]
  %74 = phi i32 [ %30, %58 ], [ %175, %62 ]
  %75 = phi i32 [ %40, %58 ], [ %174, %62 ]
  %76 = phi i32 [ %38, %58 ], [ %234, %62 ]
  %77 = phi i32 [ %44, %58 ], [ %214, %62 ]
  %78 = phi i32 [ %43, %58 ], [ %194, %62 ]
  %79 = phi i32 [ %32, %58 ], [ %195, %62 ]
  %80 = add i32 %64, %68
  %81 = xor i32 %80, %78
  %82 = shl i32 %81, 16
  %83 = lshr i32 %81, 16
  %84 = or i32 %83, %82
  %85 = add i32 %84, %72
  %86 = xor i32 %85, %68
  %87 = shl i32 %86, 12
  %88 = lshr i32 %86, 20
  %89 = or i32 %88, %87
  %90 = add i32 %89, %80
  %91 = xor i32 %90, %84
  %92 = shl i32 %91, 8
  %93 = lshr i32 %91, 24
  %94 = or i32 %93, %92
  %95 = add i32 %94, %85
  %96 = xor i32 %95, %89
  %97 = shl i32 %96, 7
  %98 = lshr i32 %96, 25
  %99 = or i32 %98, %97
  %100 = add i32 %65, %69
  %101 = xor i32 %100, %77
  %102 = shl i32 %101, 16
  %103 = lshr i32 %101, 16
  %104 = or i32 %103, %102
  %105 = add i32 %104, %73
  %106 = xor i32 %105, %69
  %107 = shl i32 %106, 12
  %108 = lshr i32 %106, 20
  %109 = or i32 %108, %107
  %110 = add i32 %109, %100
  %111 = xor i32 %110, %104
  %112 = shl i32 %111, 8
  %113 = lshr i32 %111, 24
  %114 = or i32 %113, %112
  %115 = add i32 %114, %105
  %116 = xor i32 %115, %109
  %117 = shl i32 %116, 7
  %118 = lshr i32 %116, 25
  %119 = or i32 %118, %117
  %120 = add i32 %66, %70
  %121 = xor i32 %120, %76
  %122 = shl i32 %121, 16
  %123 = lshr i32 %121, 16
  %124 = or i32 %123, %122
  %125 = add i32 %124, %74
  %126 = xor i32 %125, %70
  %127 = shl i32 %126, 12
  %128 = lshr i32 %126, 20
  %129 = or i32 %128, %127
  %130 = add i32 %129, %120
  %131 = xor i32 %130, %124
  %132 = shl i32 %131, 8
  %133 = lshr i32 %131, 24
  %134 = or i32 %133, %132
  %135 = add i32 %134, %125
  %136 = xor i32 %135, %129
  %137 = shl i32 %136, 7
  %138 = lshr i32 %136, 25
  %139 = or i32 %138, %137
  %140 = add i32 %67, %71
  %141 = xor i32 %140, %75
  %142 = shl i32 %141, 16
  %143 = lshr i32 %141, 16
  %144 = or i32 %143, %142
  %145 = add i32 %144, %79
  %146 = xor i32 %145, %71
  %147 = shl i32 %146, 12
  %148 = lshr i32 %146, 20
  %149 = or i32 %148, %147
  %150 = add i32 %149, %140
  %151 = xor i32 %150, %144
  %152 = shl i32 %151, 8
  %153 = lshr i32 %151, 24
  %154 = or i32 %153, %152
  %155 = add i32 %154, %145
  %156 = xor i32 %155, %149
  %157 = shl i32 %156, 7
  %158 = lshr i32 %156, 25
  %159 = or i32 %158, %157
  %160 = add i32 %119, %90
  %161 = xor i32 %160, %154
  %162 = shl i32 %161, 16
  %163 = lshr i32 %161, 16
  %164 = or i32 %163, %162
  %165 = add i32 %164, %135
  %166 = xor i32 %165, %119
  %167 = shl i32 %166, 12
  %168 = lshr i32 %166, 20
  %169 = or i32 %168, %167
  %170 = add i32 %169, %160
  %171 = xor i32 %170, %164
  %172 = shl i32 %171, 8
  %173 = lshr i32 %171, 24
  %174 = or i32 %173, %172
  %175 = add i32 %174, %165
  %176 = xor i32 %175, %169
  %177 = shl i32 %176, 7
  %178 = lshr i32 %176, 25
  %179 = or i32 %178, %177
  %180 = add i32 %139, %110
  %181 = xor i32 %180, %94
  %182 = shl i32 %181, 16
  %183 = lshr i32 %181, 16
  %184 = or i32 %183, %182
  %185 = add i32 %184, %155
  %186 = xor i32 %185, %139
  %187 = shl i32 %186, 12
  %188 = lshr i32 %186, 20
  %189 = or i32 %188, %187
  %190 = add i32 %189, %180
  %191 = xor i32 %190, %184
  %192 = shl i32 %191, 8
  %193 = lshr i32 %191, 24
  %194 = or i32 %193, %192
  %195 = add i32 %194, %185
  %196 = xor i32 %195, %189
  %197 = shl i32 %196, 7
  %198 = lshr i32 %196, 25
  %199 = or i32 %198, %197
  %200 = add i32 %159, %130
  %201 = xor i32 %200, %114
  %202 = shl i32 %201, 16
  %203 = lshr i32 %201, 16
  %204 = or i32 %203, %202
  %205 = add i32 %204, %95
  %206 = xor i32 %205, %159
  %207 = shl i32 %206, 12
  %208 = lshr i32 %206, 20
  %209 = or i32 %208, %207
  %210 = add i32 %209, %200
  %211 = xor i32 %210, %204
  %212 = shl i32 %211, 8
  %213 = lshr i32 %211, 24
  %214 = or i32 %213, %212
  %215 = add i32 %214, %205
  %216 = xor i32 %215, %209
  %217 = shl i32 %216, 7
  %218 = lshr i32 %216, 25
  %219 = or i32 %218, %217
  %220 = add i32 %99, %150
  %221 = xor i32 %220, %134
  %222 = shl i32 %221, 16
  %223 = lshr i32 %221, 16
  %224 = or i32 %223, %222
  %225 = add i32 %224, %115
  %226 = xor i32 %225, %99
  %227 = shl i32 %226, 12
  %228 = lshr i32 %226, 20
  %229 = or i32 %228, %227
  %230 = add i32 %229, %220
  %231 = xor i32 %230, %224
  %232 = shl i32 %231, 8
  %233 = lshr i32 %231, 24
  %234 = or i32 %233, %232
  %235 = add i32 %234, %225
  %236 = xor i32 %235, %229
  %237 = shl i32 %236, 7
  %238 = lshr i32 %236, 25
  %239 = or i32 %238, %237
  %240 = add nsw i32 %63, -2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %62

242:                                              ; preds = %62
  %243 = add i32 %170, %10
  %244 = add i32 %190, %12
  %245 = add i32 %210, %14
  %246 = add i32 %230, %16
  %247 = add i32 %239, %18
  %248 = add i32 %179, %20
  %249 = add i32 %199, %22
  %250 = add i32 %219, %24
  %251 = add i32 %215, %26
  %252 = add i32 %235, %28
  %253 = add i32 %175, %30
  %254 = add i32 %195, %32
  %255 = add i32 %194, %43
  %256 = add i32 %214, %44
  %257 = add i32 %234, %38
  %258 = add i32 %174, %40
  %259 = bitcast i8* %60 to i32*
  %260 = load i32, i32* %259, align 1
  %261 = xor i32 %260, %243
  %262 = getelementptr i8, i8* %60, i32 4
  %263 = bitcast i8* %262 to i32*
  %264 = load i32, i32* %263, align 1
  %265 = xor i32 %264, %244
  %266 = getelementptr i8, i8* %60, i32 8
  %267 = bitcast i8* %266 to i32*
  %268 = load i32, i32* %267, align 1
  %269 = xor i32 %268, %245
  %270 = getelementptr i8, i8* %60, i32 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = xor i32 %272, %246
  %274 = getelementptr i8, i8* %60, i32 16
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = xor i32 %276, %247
  %278 = getelementptr i8, i8* %60, i32 20
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = xor i32 %280, %248
  %282 = getelementptr i8, i8* %60, i32 24
  %283 = bitcast i8* %282 to i32*
  %284 = load i32, i32* %283, align 1
  %285 = xor i32 %284, %249
  %286 = getelementptr i8, i8* %60, i32 28
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = xor i32 %288, %250
  %290 = getelementptr i8, i8* %60, i32 32
  %291 = bitcast i8* %290 to i32*
  %292 = load i32, i32* %291, align 1
  %293 = xor i32 %292, %251
  %294 = getelementptr i8, i8* %60, i32 36
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 1
  %297 = xor i32 %296, %252
  %298 = getelementptr i8, i8* %60, i32 40
  %299 = bitcast i8* %298 to i32*
  %300 = load i32, i32* %299, align 1
  %301 = xor i32 %300, %253
  %302 = getelementptr i8, i8* %60, i32 44
  %303 = bitcast i8* %302 to i32*
  %304 = load i32, i32* %303, align 1
  %305 = xor i32 %304, %254
  %306 = getelementptr i8, i8* %60, i32 48
  %307 = bitcast i8* %306 to i32*
  %308 = load i32, i32* %307, align 1
  %309 = xor i32 %308, %255
  %310 = getelementptr i8, i8* %60, i32 52
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 1
  %313 = xor i32 %312, %256
  %314 = getelementptr i8, i8* %60, i32 56
  %315 = bitcast i8* %314 to i32*
  %316 = load i32, i32* %315, align 1
  %317 = xor i32 %316, %257
  %318 = getelementptr i8, i8* %60, i32 60
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = xor i32 %320, %258
  %322 = add i32 %43, 1
  %323 = icmp eq i32 %322, 0
  %324 = zext i1 %323 to i32
  %325 = add i32 %44, %324
  %326 = bitcast i8* %59 to i32*
  store i32 %261, i32* %326, align 1
  %327 = getelementptr i8, i8* %59, i32 4
  %328 = bitcast i8* %327 to i32*
  store i32 %265, i32* %328, align 1
  %329 = getelementptr i8, i8* %59, i32 8
  %330 = bitcast i8* %329 to i32*
  store i32 %269, i32* %330, align 1
  %331 = getelementptr i8, i8* %59, i32 12
  %332 = bitcast i8* %331 to i32*
  store i32 %273, i32* %332, align 1
  %333 = getelementptr i8, i8* %59, i32 16
  %334 = bitcast i8* %333 to i32*
  store i32 %277, i32* %334, align 1
  %335 = getelementptr i8, i8* %59, i32 20
  %336 = bitcast i8* %335 to i32*
  store i32 %281, i32* %336, align 1
  %337 = getelementptr i8, i8* %59, i32 24
  %338 = bitcast i8* %337 to i32*
  store i32 %285, i32* %338, align 1
  %339 = getelementptr i8, i8* %59, i32 28
  %340 = bitcast i8* %339 to i32*
  store i32 %289, i32* %340, align 1
  %341 = getelementptr i8, i8* %59, i32 32
  %342 = bitcast i8* %341 to i32*
  store i32 %293, i32* %342, align 1
  %343 = getelementptr i8, i8* %59, i32 36
  %344 = bitcast i8* %343 to i32*
  store i32 %297, i32* %344, align 1
  %345 = getelementptr i8, i8* %59, i32 40
  %346 = bitcast i8* %345 to i32*
  store i32 %301, i32* %346, align 1
  %347 = getelementptr i8, i8* %59, i32 44
  %348 = bitcast i8* %347 to i32*
  store i32 %305, i32* %348, align 1
  %349 = getelementptr i8, i8* %59, i32 48
  %350 = bitcast i8* %349 to i32*
  store i32 %309, i32* %350, align 1
  %351 = getelementptr i8, i8* %59, i32 52
  %352 = bitcast i8* %351 to i32*
  store i32 %313, i32* %352, align 1
  %353 = getelementptr i8, i8* %59, i32 56
  %354 = bitcast i8* %353 to i32*
  store i32 %317, i32* %354, align 1
  %355 = getelementptr i8, i8* %59, i32 60
  %356 = bitcast i8* %355 to i32*
  store i32 %321, i32* %356, align 1
  %357 = icmp ult i64 %42, 65
  br i1 %357, label %358, label %372

358:                                              ; preds = %242
  br i1 %48, label %359, label %371

359:                                              ; preds = %358
  %360 = trunc i64 %42 to i32
  br i1 false, label %371, label %361

361:                                              ; preds = %359
  %362 = trunc i32 %261 to i8
  store i8 %362, i8* %61, align 1
  %363 = icmp eq i32 %360, 1
  br i1 %363, label %371, label %364

364:                                              ; preds = %361, %364
  %365 = phi i32 [ %369, %364 ], [ 1, %361 ]
  %366 = getelementptr i8, i8* %59, i32 %365
  %367 = load i8, i8* %366, align 1
  %368 = getelementptr i8, i8* %61, i32 %365
  store i8 %367, i8* %368, align 1
  %369 = add nuw i32 %365, 1
  %370 = icmp eq i32 %369, %360
  br i1 %370, label %371, label %364

371:                                              ; preds = %364, %361, %359, %358
  store i32 %322, i32* %33, align 4
  store i32 %325, i32* %35, align 4
  br label %376

372:                                              ; preds = %242
  %373 = add i64 %42, -64
  %374 = getelementptr i8, i8* %59, i32 64
  %375 = getelementptr i8, i8* %60, i32 64
  br label %41

376:                                              ; preds = %4, %371
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #4
  ret void
}

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for ./chacha20_ref.c.bc:chacha20_encrypt_bytes()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for ./chacha20_ref.c.bc:chacha20_encrypt_bytes()
