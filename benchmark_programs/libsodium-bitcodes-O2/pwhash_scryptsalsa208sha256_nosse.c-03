; entering Souper's runOnFunction() for ./pwhash_scryptsalsa208sha256_nosse.c.bc:salsa20_8()

; ModuleID = './pwhash_scryptsalsa208sha256_nosse.c.bc'
source_filename = "crypto_pwhash/scryptsalsa208sha256/nosse/pwhash_scryptsalsa208sha256_nosse.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.escrypt_region_t = type { i8*, i8*, i32 }

@errno = external thread_local local_unnamed_addr global i32, align 4

; Function Attrs: nounwind
define hidden i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i32 %4, i64 %5, i32 %6, i32 %7, i8* %8, i32 %9) local_unnamed_addr #0 {
  %11 = zext i32 %6 to i64
  %12 = zext i32 %7 to i64
  %13 = mul nuw i64 %12, %11
  %14 = icmp ugt i64 %13, 1073741823
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  store i32 22, i32* @errno, align 4
  br label %172

16:                                               ; preds = %10
  %17 = icmp ugt i64 %5, 4294967295
  br i1 %17, label %18, label %19

18:                                               ; preds = %16
  store i32 22, i32* @errno, align 4
  br label %172

19:                                               ; preds = %16
  %20 = tail call i64 @llvm.ctpop.i64(i64 %5), !range !4
  %21 = icmp ugt i64 %20, 1
  %22 = icmp ult i64 %5, 2
  %23 = or i1 %22, %21
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  store i32 28, i32* @errno, align 4
  br label %172

25:                                               ; preds = %19
  %26 = icmp eq i32 %6, 0
  %27 = icmp eq i32 %7, 0
  %28 = or i1 %26, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  store i32 28, i32* @errno, align 4
  br label %172

30:                                               ; preds = %25
  %31 = udiv i32 33554431, %7
  %32 = icmp ult i32 %31, %6
  %33 = icmp ugt i32 %6, 16777215
  %34 = or i1 %33, %32
  br i1 %34, label %39, label %35

35:                                               ; preds = %30
  %36 = udiv i32 33554431, %6
  %37 = zext i32 %36 to i64
  %38 = icmp ult i64 %37, %5
  br i1 %38, label %39, label %40

39:                                               ; preds = %35, %30
  store i32 48, i32* @errno, align 4
  br label %172

40:                                               ; preds = %35
  %41 = shl nuw nsw i32 %6, 7
  %42 = mul i32 %41, %7
  %43 = trunc i64 %5 to i32
  %44 = mul i32 %41, %43
  %45 = add i32 %42, %44
  %46 = icmp ult i32 %45, %44
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  store i32 48, i32* @errno, align 4
  br label %172

48:                                               ; preds = %40
  %49 = shl nuw i32 %6, 8
  %50 = or i32 %49, 64
  %51 = add i32 %45, %50
  %52 = icmp ult i32 %51, %50
  br i1 %52, label %53, label %54

53:                                               ; preds = %48
  store i32 48, i32* @errno, align 4
  br label %172

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.escrypt_region_t, %struct.escrypt_region_t* %0, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = icmp ult i32 %56, %51
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = tail call i32 @escrypt_free_region(%struct.escrypt_region_t* nonnull %0) #3
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %172

61:                                               ; preds = %58
  %62 = tail call i8* @escrypt_alloc_region(%struct.escrypt_region_t* nonnull %0, i32 %51) #3
  %63 = icmp eq i8* %62, null
  br i1 %63, label %172, label %64

64:                                               ; preds = %54, %61
  %65 = getelementptr inbounds %struct.escrypt_region_t, %struct.escrypt_region_t* %0, i32 0, i32 1
  %66 = load i8*, i8** %65, align 4
  %67 = getelementptr i8, i8* %66, i32 %42
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr i8, i8* %67, i32 %44
  %70 = bitcast i8* %69 to i32*
  tail call void @escrypt_PBKDF2_SHA256(i8* %1, i32 %2, i8* %3, i32 %4, i64 1, i8* %66, i32 %42) #3
  %71 = shl nuw nsw i32 %6, 5
  %72 = getelementptr i32, i32* %70, i32 %71
  %73 = shl nuw nsw i32 %6, 6
  %74 = getelementptr i32, i32* %70, i32 %73
  %75 = icmp eq i32 %6, 0
  %76 = and i32 %71, 1073741792
  %77 = icmp eq i32 %76, 0
  %78 = add nsw i32 %71, -16
  %79 = getelementptr i32, i32* %70, i32 %78
  %80 = add i32 %43, -1
  %81 = getelementptr i32, i32* %72, i32 %78
  br label %82

82:                                               ; preds = %168, %64
  %83 = phi i32 [ 0, %64 ], [ %169, %168 ]
  %84 = mul i32 %41, %83
  %85 = getelementptr i8, i8* %66, i32 %84
  br i1 %75, label %95, label %86

86:                                               ; preds = %82, %86
  %87 = phi i32 [ %93, %86 ], [ 0, %82 ]
  %88 = shl i32 %87, 2
  %89 = getelementptr i8, i8* %85, i32 %88
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 1
  %92 = getelementptr i32, i32* %70, i32 %87
  store i32 %91, i32* %92, align 4
  %93 = add nuw i32 %87, 1
  %94 = icmp eq i32 %93, %71
  br i1 %94, label %95, label %86

95:                                               ; preds = %86, %82
  br label %96

96:                                               ; preds = %95, %121
  %97 = phi i64 [ %122, %121 ], [ 0, %95 ]
  %98 = trunc i64 %97 to i32
  br i1 %77, label %120, label %99

99:                                               ; preds = %96
  %100 = mul i32 %71, %98
  %101 = getelementptr i32, i32* %68, i32 %100
  br label %102

102:                                              ; preds = %102, %99
  %103 = phi i32 [ 0, %99 ], [ %107, %102 ]
  %104 = getelementptr i32, i32* %70, i32 %103
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr i32, i32* %101, i32 %103
  store i32 %105, i32* %106, align 4
  %107 = add nuw nsw i32 %103, 1
  %108 = icmp eq i32 %107, %76
  br i1 %108, label %109, label %102

109:                                              ; preds = %102
  tail call fastcc void @blockmix_salsa8(i32* nonnull %70, i32* nonnull %72, i32* nonnull %74, i32 %6) #3
  %110 = or i32 %98, 1
  %111 = mul i32 %110, %71
  %112 = getelementptr i32, i32* %68, i32 %111
  br label %113

113:                                              ; preds = %113, %109
  %114 = phi i32 [ 0, %109 ], [ %118, %113 ]
  %115 = getelementptr i32, i32* %72, i32 %114
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr i32, i32* %112, i32 %114
  store i32 %116, i32* %117, align 4
  %118 = add nuw nsw i32 %114, 1
  %119 = icmp eq i32 %118, %76
  br i1 %119, label %121, label %113

120:                                              ; preds = %96
  tail call fastcc void @blockmix_salsa8(i32* %70, i32* %72, i32* %74, i32 %6) #3
  br label %121

121:                                              ; preds = %113, %120
  tail call fastcc void @blockmix_salsa8(i32* %72, i32* %70, i32* %74, i32 %6) #3
  %122 = add i64 %97, 2
  %123 = icmp ult i64 %122, %5
  br i1 %123, label %96, label %125

124:                                              ; preds = %156
  br i1 %75, label %168, label %159

125:                                              ; preds = %121, %156
  %126 = phi i64 [ %157, %156 ], [ 0, %121 ]
  br i1 %77, label %155, label %127

127:                                              ; preds = %125
  %128 = load i32, i32* %79, align 4
  %129 = and i32 %128, %80
  %130 = mul i32 %129, %71
  %131 = getelementptr i32, i32* %68, i32 %130
  br label %132

132:                                              ; preds = %132, %127
  %133 = phi i32 [ 0, %127 ], [ %139, %132 ]
  %134 = getelementptr i32, i32* %131, i32 %133
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr i32, i32* %70, i32 %133
  %137 = load i32, i32* %136, align 4
  %138 = xor i32 %137, %135
  store i32 %138, i32* %136, align 4
  %139 = add nuw nsw i32 %133, 1
  %140 = icmp eq i32 %139, %76
  br i1 %140, label %141, label %132

141:                                              ; preds = %132
  tail call fastcc void @blockmix_salsa8(i32* nonnull %70, i32* nonnull %72, i32* nonnull %74, i32 %6) #3
  %142 = load i32, i32* %81, align 4
  %143 = and i32 %142, %80
  %144 = mul i32 %143, %71
  %145 = getelementptr i32, i32* %68, i32 %144
  br label %146

146:                                              ; preds = %146, %141
  %147 = phi i32 [ 0, %141 ], [ %153, %146 ]
  %148 = getelementptr i32, i32* %145, i32 %147
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr i32, i32* %72, i32 %147
  %151 = load i32, i32* %150, align 4
  %152 = xor i32 %151, %149
  store i32 %152, i32* %150, align 4
  %153 = add nuw nsw i32 %147, 1
  %154 = icmp eq i32 %153, %76
  br i1 %154, label %156, label %146

155:                                              ; preds = %125
  tail call fastcc void @blockmix_salsa8(i32* nonnull %70, i32* nonnull %72, i32* nonnull %74, i32 %6) #3
  br label %156

156:                                              ; preds = %146, %155
  tail call fastcc void @blockmix_salsa8(i32* nonnull %72, i32* nonnull %70, i32* nonnull %74, i32 %6) #3
  %157 = add i64 %126, 2
  %158 = icmp ult i64 %157, %5
  br i1 %158, label %125, label %124

159:                                              ; preds = %124, %159
  %160 = phi i32 [ %166, %159 ], [ 0, %124 ]
  %161 = shl i32 %160, 2
  %162 = getelementptr i8, i8* %85, i32 %161
  %163 = getelementptr i32, i32* %70, i32 %160
  %164 = load i32, i32* %163, align 4
  %165 = bitcast i8* %162 to i32*
  store i32 %164, i32* %165, align 1
  %166 = add nuw i32 %160, 1
  %167 = icmp eq i32 %166, %71
  br i1 %167, label %168, label %159

168:                                              ; preds = %159, %124
  %169 = add nuw i32 %83, 1
  %170 = icmp eq i32 %169, %7
  br i1 %170, label %171, label %82

171:                                              ; preds = %168
  tail call void @escrypt_PBKDF2_SHA256(i8* %1, i32 %2, i8* %66, i32 %42, i64 1, i8* %8, i32 %9) #3
  br label %172

172:                                              ; preds = %61, %58, %171, %53, %47, %39, %29, %24, %18, %15
  %173 = phi i32 [ -1, %15 ], [ -1, %18 ], [ -1, %24 ], [ -1, %29 ], [ -1, %39 ], [ -1, %47 ], [ -1, %53 ], [ 0, %171 ], [ -1, %58 ], [ -1, %61 ]
  ret i32 %173
}

declare i32 @escrypt_free_region(%struct.escrypt_region_t* %0) local_unnamed_addr #1

declare i8* @escrypt_alloc_region(%struct.escrypt_region_t* %0, i32 %1) local_unnamed_addr #1

declare void @escrypt_PBKDF2_SHA256(i8* %0, i32 %1, i8* %2, i32 %3, i64 %4, i8* %5, i32 %6) local_unnamed_addr #1

; Function Attrs: nounwind
define internal fastcc void @blockmix_salsa8(i32* nocapture readonly %0, i32* nocapture %1, i32* %2, i32 %3) unnamed_addr #0 {
  %5 = shl i32 %3, 1
  %6 = shl i32 %3, 5
  %7 = add i32 %6, -16
  %8 = getelementptr i32, i32* %0, i32 %7
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %2, align 4
  %10 = getelementptr i32, i32* %8, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr i32, i32* %2, i32 1
  store i32 %11, i32* %12, align 4
  %13 = getelementptr i32, i32* %8, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr i32, i32* %2, i32 2
  store i32 %14, i32* %15, align 4
  %16 = getelementptr i32, i32* %8, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr i32, i32* %2, i32 3
  store i32 %17, i32* %18, align 4
  %19 = getelementptr i32, i32* %8, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr i32, i32* %2, i32 4
  store i32 %20, i32* %21, align 4
  %22 = getelementptr i32, i32* %8, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr i32, i32* %2, i32 5
  store i32 %23, i32* %24, align 4
  %25 = getelementptr i32, i32* %8, i32 6
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i32, i32* %2, i32 6
  store i32 %26, i32* %27, align 4
  %28 = getelementptr i32, i32* %8, i32 7
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr i32, i32* %2, i32 7
  store i32 %29, i32* %30, align 4
  %31 = getelementptr i32, i32* %8, i32 8
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr i32, i32* %2, i32 8
  store i32 %32, i32* %33, align 4
  %34 = getelementptr i32, i32* %8, i32 9
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr i32, i32* %2, i32 9
  store i32 %35, i32* %36, align 4
  %37 = getelementptr i32, i32* %8, i32 10
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i32, i32* %2, i32 10
  store i32 %38, i32* %39, align 4
  %40 = getelementptr i32, i32* %8, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr i32, i32* %2, i32 11
  store i32 %41, i32* %42, align 4
  %43 = getelementptr i32, i32* %8, i32 12
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr i32, i32* %2, i32 12
  store i32 %44, i32* %45, align 4
  %46 = getelementptr i32, i32* %8, i32 13
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr i32, i32* %2, i32 13
  store i32 %47, i32* %48, align 4
  %49 = getelementptr i32, i32* %8, i32 14
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr i32, i32* %2, i32 14
  store i32 %50, i32* %51, align 4
  %52 = getelementptr i32, i32* %8, i32 15
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr i32, i32* %2, i32 15
  store i32 %53, i32* %54, align 4
  %55 = icmp eq i32 %5, 0
  br i1 %55, label %275, label %56

56:                                               ; preds = %4
  %57 = shl i32 %3, 4
  br label %58

58:                                               ; preds = %258, %56
  %59 = phi i32 [ %53, %56 ], [ %274, %258 ]
  %60 = phi i32 [ %50, %56 ], [ %273, %258 ]
  %61 = phi i32 [ %47, %56 ], [ %272, %258 ]
  %62 = phi i32 [ %44, %56 ], [ %271, %258 ]
  %63 = phi i32 [ %41, %56 ], [ %270, %258 ]
  %64 = phi i32 [ %38, %56 ], [ %269, %258 ]
  %65 = phi i32 [ %35, %56 ], [ %268, %258 ]
  %66 = phi i32 [ %32, %56 ], [ %267, %258 ]
  %67 = phi i32 [ %29, %56 ], [ %266, %258 ]
  %68 = phi i32 [ %26, %56 ], [ %265, %258 ]
  %69 = phi i32 [ %23, %56 ], [ %264, %258 ]
  %70 = phi i32 [ %20, %56 ], [ %263, %258 ]
  %71 = phi i32 [ %17, %56 ], [ %262, %258 ]
  %72 = phi i32 [ %14, %56 ], [ %261, %258 ]
  %73 = phi i32 [ %11, %56 ], [ %260, %258 ]
  %74 = phi i32 [ %9, %56 ], [ %259, %258 ]
  %75 = phi i32 [ 0, %56 ], [ %256, %258 ]
  %76 = shl i32 %75, 4
  %77 = getelementptr i32, i32* %0, i32 %76
  %78 = load i32, i32* %77, align 4
  %79 = xor i32 %74, %78
  store i32 %79, i32* %2, align 4
  %80 = getelementptr i32, i32* %77, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = xor i32 %73, %81
  store i32 %82, i32* %12, align 4
  %83 = getelementptr i32, i32* %77, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = xor i32 %72, %84
  store i32 %85, i32* %15, align 4
  %86 = getelementptr i32, i32* %77, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = xor i32 %71, %87
  store i32 %88, i32* %18, align 4
  %89 = getelementptr i32, i32* %77, i32 4
  %90 = load i32, i32* %89, align 4
  %91 = xor i32 %70, %90
  store i32 %91, i32* %21, align 4
  %92 = getelementptr i32, i32* %77, i32 5
  %93 = load i32, i32* %92, align 4
  %94 = xor i32 %69, %93
  store i32 %94, i32* %24, align 4
  %95 = getelementptr i32, i32* %77, i32 6
  %96 = load i32, i32* %95, align 4
  %97 = xor i32 %68, %96
  store i32 %97, i32* %27, align 4
  %98 = getelementptr i32, i32* %77, i32 7
  %99 = load i32, i32* %98, align 4
  %100 = xor i32 %67, %99
  store i32 %100, i32* %30, align 4
  %101 = getelementptr i32, i32* %77, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = xor i32 %66, %102
  store i32 %103, i32* %33, align 4
  %104 = getelementptr i32, i32* %77, i32 9
  %105 = load i32, i32* %104, align 4
  %106 = xor i32 %65, %105
  store i32 %106, i32* %36, align 4
  %107 = getelementptr i32, i32* %77, i32 10
  %108 = load i32, i32* %107, align 4
  %109 = xor i32 %64, %108
  store i32 %109, i32* %39, align 4
  %110 = getelementptr i32, i32* %77, i32 11
  %111 = load i32, i32* %110, align 4
  %112 = xor i32 %63, %111
  store i32 %112, i32* %42, align 4
  %113 = getelementptr i32, i32* %77, i32 12
  %114 = load i32, i32* %113, align 4
  %115 = xor i32 %62, %114
  store i32 %115, i32* %45, align 4
  %116 = getelementptr i32, i32* %77, i32 13
  %117 = load i32, i32* %116, align 4
  %118 = xor i32 %61, %117
  store i32 %118, i32* %48, align 4
  %119 = getelementptr i32, i32* %77, i32 14
  %120 = load i32, i32* %119, align 4
  %121 = xor i32 %60, %120
  store i32 %121, i32* %51, align 4
  %122 = getelementptr i32, i32* %77, i32 15
  %123 = load i32, i32* %122, align 4
  %124 = xor i32 %59, %123
  store i32 %124, i32* %54, align 4
  tail call fastcc void @salsa20_8(i32* nonnull %2)
  %125 = shl i32 %75, 3
  %126 = getelementptr i32, i32* %1, i32 %125
  %127 = load i32, i32* %2, align 4
  store i32 %127, i32* %126, align 4
  %128 = load i32, i32* %12, align 4
  %129 = getelementptr i32, i32* %126, i32 1
  store i32 %128, i32* %129, align 4
  %130 = load i32, i32* %15, align 4
  %131 = getelementptr i32, i32* %126, i32 2
  store i32 %130, i32* %131, align 4
  %132 = load i32, i32* %18, align 4
  %133 = getelementptr i32, i32* %126, i32 3
  store i32 %132, i32* %133, align 4
  %134 = load i32, i32* %21, align 4
  %135 = getelementptr i32, i32* %126, i32 4
  store i32 %134, i32* %135, align 4
  %136 = load i32, i32* %24, align 4
  %137 = getelementptr i32, i32* %126, i32 5
  store i32 %136, i32* %137, align 4
  %138 = load i32, i32* %27, align 4
  %139 = getelementptr i32, i32* %126, i32 6
  store i32 %138, i32* %139, align 4
  %140 = load i32, i32* %30, align 4
  %141 = getelementptr i32, i32* %126, i32 7
  store i32 %140, i32* %141, align 4
  %142 = load i32, i32* %33, align 4
  %143 = getelementptr i32, i32* %126, i32 8
  store i32 %142, i32* %143, align 4
  %144 = load i32, i32* %36, align 4
  %145 = getelementptr i32, i32* %126, i32 9
  store i32 %144, i32* %145, align 4
  %146 = load i32, i32* %39, align 4
  %147 = getelementptr i32, i32* %126, i32 10
  store i32 %146, i32* %147, align 4
  %148 = load i32, i32* %42, align 4
  %149 = getelementptr i32, i32* %126, i32 11
  store i32 %148, i32* %149, align 4
  %150 = load i32, i32* %45, align 4
  %151 = getelementptr i32, i32* %126, i32 12
  store i32 %150, i32* %151, align 4
  %152 = load i32, i32* %48, align 4
  %153 = getelementptr i32, i32* %126, i32 13
  store i32 %152, i32* %153, align 4
  %154 = load i32, i32* %51, align 4
  %155 = getelementptr i32, i32* %126, i32 14
  store i32 %154, i32* %155, align 4
  %156 = load i32, i32* %54, align 4
  %157 = getelementptr i32, i32* %126, i32 15
  store i32 %156, i32* %157, align 4
  %158 = or i32 %76, 16
  %159 = getelementptr i32, i32* %0, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32, i32* %2, align 4
  %162 = xor i32 %161, %160
  store i32 %162, i32* %2, align 4
  %163 = getelementptr i32, i32* %159, i32 1
  %164 = load i32, i32* %163, align 4
  %165 = load i32, i32* %12, align 4
  %166 = xor i32 %165, %164
  store i32 %166, i32* %12, align 4
  %167 = getelementptr i32, i32* %159, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = load i32, i32* %15, align 4
  %170 = xor i32 %169, %168
  store i32 %170, i32* %15, align 4
  %171 = getelementptr i32, i32* %159, i32 3
  %172 = load i32, i32* %171, align 4
  %173 = load i32, i32* %18, align 4
  %174 = xor i32 %173, %172
  store i32 %174, i32* %18, align 4
  %175 = getelementptr i32, i32* %159, i32 4
  %176 = load i32, i32* %175, align 4
  %177 = load i32, i32* %21, align 4
  %178 = xor i32 %177, %176
  store i32 %178, i32* %21, align 4
  %179 = getelementptr i32, i32* %159, i32 5
  %180 = load i32, i32* %179, align 4
  %181 = load i32, i32* %24, align 4
  %182 = xor i32 %181, %180
  store i32 %182, i32* %24, align 4
  %183 = getelementptr i32, i32* %159, i32 6
  %184 = load i32, i32* %183, align 4
  %185 = load i32, i32* %27, align 4
  %186 = xor i32 %185, %184
  store i32 %186, i32* %27, align 4
  %187 = getelementptr i32, i32* %159, i32 7
  %188 = load i32, i32* %187, align 4
  %189 = load i32, i32* %30, align 4
  %190 = xor i32 %189, %188
  store i32 %190, i32* %30, align 4
  %191 = getelementptr i32, i32* %159, i32 8
  %192 = load i32, i32* %191, align 4
  %193 = load i32, i32* %33, align 4
  %194 = xor i32 %193, %192
  store i32 %194, i32* %33, align 4
  %195 = getelementptr i32, i32* %159, i32 9
  %196 = load i32, i32* %195, align 4
  %197 = load i32, i32* %36, align 4
  %198 = xor i32 %197, %196
  store i32 %198, i32* %36, align 4
  %199 = getelementptr i32, i32* %159, i32 10
  %200 = load i32, i32* %199, align 4
  %201 = load i32, i32* %39, align 4
  %202 = xor i32 %201, %200
  store i32 %202, i32* %39, align 4
  %203 = getelementptr i32, i32* %159, i32 11
  %204 = load i32, i32* %203, align 4
  %205 = load i32, i32* %42, align 4
  %206 = xor i32 %205, %204
  store i32 %206, i32* %42, align 4
  %207 = getelementptr i32, i32* %159, i32 12
  %208 = load i32, i32* %207, align 4
  %209 = load i32, i32* %45, align 4
  %210 = xor i32 %209, %208
  store i32 %210, i32* %45, align 4
  %211 = getelementptr i32, i32* %159, i32 13
  %212 = load i32, i32* %211, align 4
  %213 = load i32, i32* %48, align 4
  %214 = xor i32 %213, %212
  store i32 %214, i32* %48, align 4
  %215 = getelementptr i32, i32* %159, i32 14
  %216 = load i32, i32* %215, align 4
  %217 = load i32, i32* %51, align 4
  %218 = xor i32 %217, %216
  store i32 %218, i32* %51, align 4
  %219 = getelementptr i32, i32* %159, i32 15
  %220 = load i32, i32* %219, align 4
  %221 = load i32, i32* %54, align 4
  %222 = xor i32 %221, %220
  store i32 %222, i32* %54, align 4
  tail call fastcc void @salsa20_8(i32* nonnull %2)
  %223 = add i32 %125, %57
  %224 = getelementptr i32, i32* %1, i32 %223
  %225 = load i32, i32* %2, align 4
  store i32 %225, i32* %224, align 4
  %226 = load i32, i32* %12, align 4
  %227 = getelementptr i32, i32* %224, i32 1
  store i32 %226, i32* %227, align 4
  %228 = load i32, i32* %15, align 4
  %229 = getelementptr i32, i32* %224, i32 2
  store i32 %228, i32* %229, align 4
  %230 = load i32, i32* %18, align 4
  %231 = getelementptr i32, i32* %224, i32 3
  store i32 %230, i32* %231, align 4
  %232 = load i32, i32* %21, align 4
  %233 = getelementptr i32, i32* %224, i32 4
  store i32 %232, i32* %233, align 4
  %234 = load i32, i32* %24, align 4
  %235 = getelementptr i32, i32* %224, i32 5
  store i32 %234, i32* %235, align 4
  %236 = load i32, i32* %27, align 4
  %237 = getelementptr i32, i32* %224, i32 6
  store i32 %236, i32* %237, align 4
  %238 = load i32, i32* %30, align 4
  %239 = getelementptr i32, i32* %224, i32 7
  store i32 %238, i32* %239, align 4
  %240 = load i32, i32* %33, align 4
  %241 = getelementptr i32, i32* %224, i32 8
  store i32 %240, i32* %241, align 4
  %242 = load i32, i32* %36, align 4
  %243 = getelementptr i32, i32* %224, i32 9
  store i32 %242, i32* %243, align 4
  %244 = load i32, i32* %39, align 4
  %245 = getelementptr i32, i32* %224, i32 10
  store i32 %244, i32* %245, align 4
  %246 = load i32, i32* %42, align 4
  %247 = getelementptr i32, i32* %224, i32 11
  store i32 %246, i32* %247, align 4
  %248 = load i32, i32* %45, align 4
  %249 = getelementptr i32, i32* %224, i32 12
  store i32 %248, i32* %249, align 4
  %250 = load i32, i32* %48, align 4
  %251 = getelementptr i32, i32* %224, i32 13
  store i32 %250, i32* %251, align 4
  %252 = load i32, i32* %51, align 4
  %253 = getelementptr i32, i32* %224, i32 14
  store i32 %252, i32* %253, align 4
  %254 = load i32, i32* %54, align 4
  %255 = getelementptr i32, i32* %224, i32 15
  store i32 %254, i32* %255, align 4
  %256 = add nuw i32 %75, 2
  %257 = icmp ult i32 %256, %5
  br i1 %257, label %258, label %275

258:                                              ; preds = %58
  %259 = load i32, i32* %2, align 4
  %260 = load i32, i32* %12, align 4
  %261 = load i32, i32* %15, align 4
  %262 = load i32, i32* %18, align 4
  %263 = load i32, i32* %21, align 4
  %264 = load i32, i32* %24, align 4
  %265 = load i32, i32* %27, align 4
  %266 = load i32, i32* %30, align 4
  %267 = load i32, i32* %33, align 4
  %268 = load i32, i32* %36, align 4
  %269 = load i32, i32* %39, align 4
  %270 = load i32, i32* %42, align 4
  %271 = load i32, i32* %45, align 4
  %272 = load i32, i32* %48, align 4
  %273 = load i32, i32* %51, align 4
  %274 = load i32, i32* %54, align 4
  br label %58

275:                                              ; preds = %58, %4
  ret void
}

; Function Attrs: nounwind
define internal fastcc void @salsa20_8(i32* nocapture %0) unnamed_addr #0 {
  %2 = load i32, i32* %0, align 4
  %3 = getelementptr i32, i32* %0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr i32, i32* %0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr i32, i32* %0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr i32, i32* %0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr i32, i32* %0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr i32, i32* %0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr i32, i32* %0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr i32, i32* %0, i32 8
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i32, i32* %0, i32 9
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr i32, i32* %0, i32 10
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i32, i32* %0, i32 11
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr i32, i32* %0, i32 12
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i32, i32* %0, i32 13
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr i32, i32* %0, i32 14
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i32, i32* %0, i32 15
  %32 = load i32, i32* %31, align 4
  br label %66

33:                                               ; preds = %66
  %34 = load i32, i32* %0, align 4
  %35 = add i32 %34, %183
  store i32 %35, i32* %0, align 4
  %36 = load i32, i32* %3, align 4
  %37 = add i32 %36, %168
  store i32 %37, i32* %3, align 4
  %38 = load i32, i32* %5, align 4
  %39 = add i32 %38, %173
  store i32 %39, i32* %5, align 4
  %40 = load i32, i32* %7, align 4
  %41 = add i32 %40, %178
  store i32 %41, i32* %7, align 4
  %42 = load i32, i32* %9, align 4
  %43 = add i32 %42, %198
  store i32 %43, i32* %9, align 4
  %44 = load i32, i32* %11, align 4
  %45 = add i32 %44, %203
  store i32 %45, i32* %11, align 4
  %46 = load i32, i32* %13, align 4
  %47 = add i32 %46, %188
  store i32 %47, i32* %13, align 4
  %48 = load i32, i32* %15, align 4
  %49 = add i32 %48, %193
  store i32 %49, i32* %15, align 4
  %50 = load i32, i32* %17, align 4
  %51 = add i32 %50, %213
  store i32 %51, i32* %17, align 4
  %52 = load i32, i32* %19, align 4
  %53 = add i32 %52, %218
  store i32 %53, i32* %19, align 4
  %54 = load i32, i32* %21, align 4
  %55 = add i32 %54, %223
  store i32 %55, i32* %21, align 4
  %56 = load i32, i32* %23, align 4
  %57 = add i32 %56, %208
  store i32 %57, i32* %23, align 4
  %58 = load i32, i32* %25, align 4
  %59 = add i32 %58, %228
  store i32 %59, i32* %25, align 4
  %60 = load i32, i32* %27, align 4
  %61 = add i32 %60, %233
  store i32 %61, i32* %27, align 4
  %62 = load i32, i32* %29, align 4
  %63 = add i32 %62, %238
  store i32 %63, i32* %29, align 4
  %64 = load i32, i32* %31, align 4
  %65 = add i32 %64, %243
  store i32 %65, i32* %31, align 4
  ret void

66:                                               ; preds = %1, %66
  %67 = phi i32 [ %16, %1 ], [ %193, %66 ]
  %68 = phi i32 [ %8, %1 ], [ %178, %66 ]
  %69 = phi i32 [ %24, %1 ], [ %208, %66 ]
  %70 = phi i32 [ %32, %1 ], [ %243, %66 ]
  %71 = phi i32 [ %6, %1 ], [ %173, %66 ]
  %72 = phi i32 [ %30, %1 ], [ %238, %66 ]
  %73 = phi i32 [ %14, %1 ], [ %188, %66 ]
  %74 = phi i32 [ %22, %1 ], [ %223, %66 ]
  %75 = phi i32 [ %28, %1 ], [ %233, %66 ]
  %76 = phi i32 [ %20, %1 ], [ %218, %66 ]
  %77 = phi i32 [ %4, %1 ], [ %168, %66 ]
  %78 = phi i32 [ %12, %1 ], [ %203, %66 ]
  %79 = phi i32 [ %18, %1 ], [ %213, %66 ]
  %80 = phi i32 [ %10, %1 ], [ %198, %66 ]
  %81 = phi i32 [ %26, %1 ], [ %228, %66 ]
  %82 = phi i32 [ %2, %1 ], [ %183, %66 ]
  %83 = phi i32 [ 0, %1 ], [ %244, %66 ]
  %84 = add i32 %81, %82
  %85 = shl i32 %84, 7
  %86 = lshr i32 %84, 25
  %87 = or i32 %85, %86
  %88 = xor i32 %87, %80
  %89 = add i32 %88, %82
  %90 = shl i32 %89, 9
  %91 = lshr i32 %89, 23
  %92 = or i32 %90, %91
  %93 = xor i32 %92, %79
  %94 = add i32 %93, %88
  %95 = shl i32 %94, 13
  %96 = lshr i32 %94, 19
  %97 = or i32 %95, %96
  %98 = xor i32 %97, %81
  %99 = add i32 %98, %93
  %100 = shl i32 %99, 18
  %101 = lshr i32 %99, 14
  %102 = or i32 %100, %101
  %103 = xor i32 %102, %82
  %104 = add i32 %77, %78
  %105 = shl i32 %104, 7
  %106 = lshr i32 %104, 25
  %107 = or i32 %105, %106
  %108 = xor i32 %107, %76
  %109 = add i32 %108, %78
  %110 = shl i32 %109, 9
  %111 = lshr i32 %109, 23
  %112 = or i32 %110, %111
  %113 = xor i32 %112, %75
  %114 = add i32 %113, %108
  %115 = shl i32 %114, 13
  %116 = lshr i32 %114, 19
  %117 = or i32 %115, %116
  %118 = xor i32 %117, %77
  %119 = add i32 %118, %113
  %120 = shl i32 %119, 18
  %121 = lshr i32 %119, 14
  %122 = or i32 %120, %121
  %123 = xor i32 %122, %78
  %124 = add i32 %73, %74
  %125 = shl i32 %124, 7
  %126 = lshr i32 %124, 25
  %127 = or i32 %125, %126
  %128 = xor i32 %127, %72
  %129 = add i32 %128, %74
  %130 = shl i32 %129, 9
  %131 = lshr i32 %129, 23
  %132 = or i32 %130, %131
  %133 = xor i32 %132, %71
  %134 = add i32 %133, %128
  %135 = shl i32 %134, 13
  %136 = lshr i32 %134, 19
  %137 = or i32 %135, %136
  %138 = xor i32 %137, %73
  %139 = add i32 %138, %133
  %140 = shl i32 %139, 18
  %141 = lshr i32 %139, 14
  %142 = or i32 %140, %141
  %143 = xor i32 %142, %74
  %144 = add i32 %69, %70
  %145 = shl i32 %144, 7
  %146 = lshr i32 %144, 25
  %147 = or i32 %145, %146
  %148 = xor i32 %147, %68
  %149 = add i32 %148, %70
  %150 = shl i32 %149, 9
  %151 = lshr i32 %149, 23
  %152 = or i32 %150, %151
  %153 = xor i32 %152, %67
  %154 = add i32 %153, %148
  %155 = shl i32 %154, 13
  %156 = lshr i32 %154, 19
  %157 = or i32 %155, %156
  %158 = xor i32 %157, %69
  %159 = add i32 %158, %153
  %160 = shl i32 %159, 18
  %161 = lshr i32 %159, 14
  %162 = or i32 %160, %161
  %163 = xor i32 %162, %70
  %164 = add i32 %148, %103
  %165 = shl i32 %164, 7
  %166 = lshr i32 %164, 25
  %167 = or i32 %165, %166
  %168 = xor i32 %167, %118
  %169 = add i32 %168, %103
  %170 = shl i32 %169, 9
  %171 = lshr i32 %169, 23
  %172 = or i32 %170, %171
  %173 = xor i32 %172, %133
  %174 = add i32 %173, %168
  %175 = shl i32 %174, 13
  %176 = lshr i32 %174, 19
  %177 = or i32 %175, %176
  %178 = xor i32 %177, %148
  %179 = add i32 %178, %173
  %180 = shl i32 %179, 18
  %181 = lshr i32 %179, 14
  %182 = or i32 %180, %181
  %183 = xor i32 %182, %103
  %184 = add i32 %123, %88
  %185 = shl i32 %184, 7
  %186 = lshr i32 %184, 25
  %187 = or i32 %185, %186
  %188 = xor i32 %138, %187
  %189 = add i32 %188, %123
  %190 = shl i32 %189, 9
  %191 = lshr i32 %189, 23
  %192 = or i32 %190, %191
  %193 = xor i32 %153, %192
  %194 = add i32 %193, %188
  %195 = shl i32 %194, 13
  %196 = lshr i32 %194, 19
  %197 = or i32 %195, %196
  %198 = xor i32 %197, %88
  %199 = add i32 %198, %193
  %200 = shl i32 %199, 18
  %201 = lshr i32 %199, 14
  %202 = or i32 %200, %201
  %203 = xor i32 %202, %123
  %204 = add i32 %143, %108
  %205 = shl i32 %204, 7
  %206 = lshr i32 %204, 25
  %207 = or i32 %205, %206
  %208 = xor i32 %158, %207
  %209 = add i32 %208, %143
  %210 = shl i32 %209, 9
  %211 = lshr i32 %209, 23
  %212 = or i32 %210, %211
  %213 = xor i32 %212, %93
  %214 = add i32 %213, %208
  %215 = shl i32 %214, 13
  %216 = lshr i32 %214, 19
  %217 = or i32 %215, %216
  %218 = xor i32 %217, %108
  %219 = add i32 %218, %213
  %220 = shl i32 %219, 18
  %221 = lshr i32 %219, 14
  %222 = or i32 %220, %221
  %223 = xor i32 %222, %143
  %224 = add i32 %163, %128
  %225 = shl i32 %224, 7
  %226 = lshr i32 %224, 25
  %227 = or i32 %225, %226
  %228 = xor i32 %227, %98
  %229 = add i32 %228, %163
  %230 = shl i32 %229, 9
  %231 = lshr i32 %229, 23
  %232 = or i32 %230, %231
  %233 = xor i32 %232, %113
  %234 = add i32 %233, %228
  %235 = shl i32 %234, 13
  %236 = lshr i32 %234, 19
  %237 = or i32 %235, %236
  %238 = xor i32 %237, %128
  %239 = add i32 %238, %233
  %240 = shl i32 %239, 18
  %241 = lshr i32 %239, 14
  %242 = or i32 %240, %241
  %243 = xor i32 %242, %163
  %244 = add nuw nsw i32 %83, 2
  %245 = icmp ult i32 %83, 6
  br i1 %245, label %66, label %33
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.ctpop.i64(i64 %0) #2

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}
!4 = !{i64 0, i64 65}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = add i32 %34, %183
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = add i32 %36, %168
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = add i32 %38, %173
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = add i32 %40, %178
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %32, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %8 (hasExternalUses)
%81:i32 = add %0, %80
infer %81

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = add i32 %42, %198
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %32, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %8 (hasExternalUses)
%81:i32 = add %0, %80
infer %81

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = add i32 %44, %203
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = add i32 %46, %188
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = add i32 %48, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = add i32 %50, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = add i32 %52, %218
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %32, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %8 (hasExternalUses)
%81:i32 = add %0, %80
infer %81

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = add i32 %54, %223
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = add i32 %56, %208
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = add i32 %58, %228
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = add i32 %60, %233
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = add i32 %62, %238
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %0, %80
infer %81

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = add i32 %64, %243
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %16, %1 ], [ %193, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %8, %1 ], [ %178, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %24, %1 ], [ %208, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = phi i32 [ %32, %1 ], [ %243, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %6, %1 ], [ %173, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = phi i32 [ %30, %1 ], [ %238, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ %14, %1 ], [ %188, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = phi i32 [ %22, %1 ], [ %223, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = phi i32 [ %28, %1 ], [ %233, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = phi i32 [ %20, %1 ], [ %218, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = phi i32 [ %4, %1 ], [ %168, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = phi i32 [ %12, %1 ], [ %203, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = phi i32 [ %18, %1 ], [ %213, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = phi i32 [ %10, %1 ], [ %198, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = phi i32 [ %26, %1 ], [ %228, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = phi i32 [ %2, %1 ], [ %183, %66 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = phi i32 [ 0, %1 ], [ %244, %66 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
infer %0

; *****
; For LLVM instruction:
;  %84 = add i32 %81, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %85 = shl i32 %84, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %86 = lshr i32 %84, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %87 = or i32 %85, %86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %88 = xor i32 %87, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %89 = add i32 %88, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %90 = shl i32 %89, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %91 = lshr i32 %89, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %92 = or i32 %90, %91
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %93 = xor i32 %92, %79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %94 = add i32 %93, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %95 = shl i32 %94, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %96 = lshr i32 %94, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %97 = or i32 %95, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %98 = xor i32 %97, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %99 = add i32 %98, %93
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %100 = shl i32 %99, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %101 = lshr i32 %99, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %102 = or i32 %100, %101
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %103 = xor i32 %102, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %104 = add i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %105 = shl i32 %104, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %106 = lshr i32 %104, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %107 = or i32 %105, %106
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %108 = xor i32 %107, %76
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %109 = add i32 %108, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %110 = shl i32 %109, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %111 = lshr i32 %109, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %112 = or i32 %110, %111
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %113 = xor i32 %112, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %114 = add i32 %113, %108
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %115 = shl i32 %114, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %116 = lshr i32 %114, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %117 = or i32 %115, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %118 = xor i32 %117, %77
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %119 = add i32 %118, %113
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %120 = shl i32 %119, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %121 = lshr i32 %119, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %122 = or i32 %120, %121
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %123 = xor i32 %122, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %124 = add i32 %73, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %125 = shl i32 %124, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %126 = lshr i32 %124, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %127 = or i32 %125, %126
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %128 = xor i32 %127, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %129 = add i32 %128, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %130 = shl i32 %129, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %131 = lshr i32 %129, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %132 = or i32 %130, %131
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %133 = xor i32 %132, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %134 = add i32 %133, %128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %135 = shl i32 %134, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %136 = lshr i32 %134, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %137 = or i32 %135, %136
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %138 = xor i32 %137, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %139 = add i32 %138, %133
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %140 = shl i32 %139, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %141 = lshr i32 %139, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %142 = or i32 %140, %141
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %143 = xor i32 %142, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %144 = add i32 %69, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %145 = shl i32 %144, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %146 = lshr i32 %144, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3

; *****
; For LLVM instruction:
;  %147 = or i32 %145, %146
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5

; *****
; For LLVM instruction:
;  %148 = xor i32 %147, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7

; *****
; For LLVM instruction:
;  %149 = add i32 %148, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8

; *****
; For LLVM instruction:
;  %150 = shl i32 %149, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9

; *****
; For LLVM instruction:
;  %151 = lshr i32 %149, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9

; *****
; For LLVM instruction:
;  %152 = or i32 %150, %151
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11

; *****
; For LLVM instruction:
;  %153 = xor i32 %152, %67
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13

; *****
; For LLVM instruction:
;  %154 = add i32 %153, %148
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14

; *****
; For LLVM instruction:
;  %155 = shl i32 %154, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15

; *****
; For LLVM instruction:
;  %156 = lshr i32 %154, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15

; *****
; For LLVM instruction:
;  %157 = or i32 %155, %156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17

; *****
; For LLVM instruction:
;  %158 = xor i32 %157, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18

; *****
; For LLVM instruction:
;  %159 = add i32 %158, %153
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19

; *****
; For LLVM instruction:
;  %160 = shl i32 %159, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20

; *****
; For LLVM instruction:
;  %161 = lshr i32 %159, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20

; *****
; For LLVM instruction:
;  %162 = or i32 %160, %161
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22

; *****
; For LLVM instruction:
;  %163 = xor i32 %162, %70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23

; *****
; For LLVM instruction:
;  %164 = add i32 %148, %103
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %165 = shl i32 %164, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %166 = lshr i32 %164, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %167 = or i32 %165, %166
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %168 = xor i32 %167, %118
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %169 = add i32 %168, %103
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %170 = shl i32 %169, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %171 = lshr i32 %169, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %172 = or i32 %170, %171
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %173 = xor i32 %172, %133
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %174 = add i32 %173, %168
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %175 = shl i32 %174, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %176 = lshr i32 %174, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %177 = or i32 %175, %176
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %178 = xor i32 %177, %148
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %179 = add i32 %178, %173
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %180 = shl i32 %179, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %181 = lshr i32 %179, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %182 = or i32 %180, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %183 = xor i32 %182, %103
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %184 = add i32 %123, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %185 = shl i32 %184, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %186 = lshr i32 %184, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %187 = or i32 %185, %186
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %188 = xor i32 %138, %187
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %189 = add i32 %188, %123
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %190 = shl i32 %189, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %191 = lshr i32 %189, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %192 = or i32 %190, %191
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %193 = xor i32 %153, %192
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %194 = add i32 %193, %188
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %195 = shl i32 %194, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %196 = lshr i32 %194, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %197 = or i32 %195, %196
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %198 = xor i32 %197, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %199 = add i32 %198, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %200 = shl i32 %199, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %201 = lshr i32 %199, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %202 = or i32 %200, %201
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %203 = xor i32 %202, %123
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %204 = add i32 %143, %108
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32

; *****
; For LLVM instruction:
;  %205 = shl i32 %204, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %206 = lshr i32 %204, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %207 = or i32 %205, %206
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %208 = xor i32 %158, %207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %209 = add i32 %208, %143
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %210 = shl i32 %209, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %211 = lshr i32 %209, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %212 = or i32 %210, %211
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %213 = xor i32 %212, %93
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %214 = add i32 %213, %208
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %215 = shl i32 %214, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %216 = lshr i32 %214, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %217 = or i32 %215, %216
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %218 = xor i32 %217, %108
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79

; *****
; For LLVM instruction:
;  %219 = add i32 %218, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %220 = shl i32 %219, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %221 = lshr i32 %219, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %222 = or i32 %220, %221
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %223 = xor i32 %222, %143
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %224 = add i32 %163, %128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32

; *****
; For LLVM instruction:
;  %225 = shl i32 %224, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33

; *****
; For LLVM instruction:
;  %226 = lshr i32 %224, 25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33

; *****
; For LLVM instruction:
;  %227 = or i32 %225, %226
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35

; *****
; For LLVM instruction:
;  %228 = xor i32 %227, %98
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55

; *****
; For LLVM instruction:
;  %229 = add i32 %228, %163
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56

; *****
; For LLVM instruction:
;  %230 = shl i32 %229, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57

; *****
; For LLVM instruction:
;  %231 = lshr i32 %229, 23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57

; *****
; For LLVM instruction:
;  %232 = or i32 %230, %231
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59

; *****
; For LLVM instruction:
;  %233 = xor i32 %232, %113
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74

; *****
; For LLVM instruction:
;  %234 = add i32 %233, %228
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75

; *****
; For LLVM instruction:
;  %235 = shl i32 %234, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76

; *****
; For LLVM instruction:
;  %236 = lshr i32 %234, 19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76

; *****
; For LLVM instruction:
;  %237 = or i32 %235, %236
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78

; *****
; For LLVM instruction:
;  %238 = xor i32 %237, %128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79

; *****
; For LLVM instruction:
;  %239 = add i32 %238, %233
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80

; *****
; For LLVM instruction:
;  %240 = shl i32 %239, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81

; *****
; For LLVM instruction:
;  %241 = lshr i32 %239, 14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81

; *****
; For LLVM instruction:
;  %242 = or i32 %240, %241
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83

; *****
; For LLVM instruction:
;  %243 = xor i32 %242, %163
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84

; *****
; For LLVM instruction:
;  %244 = add nuw nsw i32 %83, 2
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
%1:i32 = addnw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %245 = icmp ult i32 %83, 6
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
%1:i1 = ult %0, 6:i32
infer %1
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %32, %24
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %3
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %1, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = var
%11:i32 = var
%12:i32 = add %10, %9
%13:i32 = shl %12, 7:i32
%14:i32 = lshr %12, 25:i32
%15:i32 = or %13, %14
%16:i32 = xor %11, %15 (hasExternalUses)
%17:i32 = var
%18:i32 = add %9, %16
%19:i32 = shl %18, 9:i32
%20:i32 = lshr %18, 23:i32
%21:i32 = or %19, %20
%22:i32 = xor %17, %21 (hasExternalUses)
%23:i32 = add %16, %22
%24:i32 = shl %23, 13:i32
%25:i32 = lshr %23, 19:i32
%26:i32 = or %24, %25
%27:i32 = xor %10, %26 (hasExternalUses)
%28:i32 = add %27, %22
%29:i32 = shl %28, 18:i32
%30:i32 = lshr %28, 14:i32
%31:i32 = or %29, %30
%32:i32 = xor %9, %31 (hasExternalUses)
%33:i32 = add %8, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %32, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %8 (hasExternalUses)
%81:i32 = add %0, %80
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %0, %56
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %0, %75
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23 (hasExternalUses)
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %0, %80
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %2, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %3, %7 (hasExternalUses)
%9:i32 = var
%10:i32 = add %1, %8
%11:i32 = shl %10, 9:i32
%12:i32 = lshr %10, 23:i32
%13:i32 = or %11, %12
%14:i32 = xor %9, %13 (hasExternalUses)
%15:i32 = add %8, %14
%16:i32 = shl %15, 13:i32
%17:i32 = lshr %15, 19:i32
%18:i32 = or %16, %17
%19:i32 = xor %2, %18 (hasExternalUses)
%20:i32 = add %19, %14
%21:i32 = shl %20, 18:i32
%22:i32 = lshr %20, 14:i32
%23:i32 = or %21, %22
%24:i32 = xor %1, %23
%25:i32 = var
%26:i32 = var
%27:i32 = var
%28:i32 = add %26, %27
%29:i32 = shl %28, 7:i32
%30:i32 = lshr %28, 25:i32
%31:i32 = or %29, %30
%32:i32 = xor %25, %31 (hasExternalUses)
%33:i32 = add %24, %32
%34:i32 = shl %33, 7:i32
%35:i32 = lshr %33, 25:i32
%36:i32 = or %34, %35
%37:i32 = var
%38:i32 = var
%39:i32 = var
%40:i32 = add %37, %39
%41:i32 = shl %40, 7:i32
%42:i32 = lshr %40, 25:i32
%43:i32 = or %41, %42
%44:i32 = xor %38, %43 (hasExternalUses)
%45:i32 = var
%46:i32 = add %39, %44
%47:i32 = shl %46, 9:i32
%48:i32 = lshr %46, 23:i32
%49:i32 = or %47, %48
%50:i32 = xor %45, %49 (hasExternalUses)
%51:i32 = add %44, %50
%52:i32 = shl %51, 13:i32
%53:i32 = lshr %51, 19:i32
%54:i32 = or %52, %53
%55:i32 = xor %37, %54 (hasExternalUses)
%56:i32 = xor %36, %55 (hasExternalUses)
%57:i32 = add %24, %56
%58:i32 = shl %57, 9:i32
%59:i32 = lshr %57, 23:i32
%60:i32 = or %58, %59
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = var
%65:i32 = add %64, %62
%66:i32 = shl %65, 7:i32
%67:i32 = lshr %65, 25:i32
%68:i32 = or %66, %67
%69:i32 = xor %63, %68 (hasExternalUses)
%70:i32 = add %62, %69
%71:i32 = shl %70, 9:i32
%72:i32 = lshr %70, 23:i32
%73:i32 = or %71, %72
%74:i32 = xor %61, %73 (hasExternalUses)
%75:i32 = xor %60, %74 (hasExternalUses)
%76:i32 = add %56, %75
%77:i32 = shl %76, 13:i32
%78:i32 = lshr %76, 19:i32
%79:i32 = or %77, %78
%80:i32 = xor %79, %32 (hasExternalUses)
%81:i32 = add %75, %80
%82:i32 = shl %81, 18:i32
%83:i32 = lshr %81, 14:i32
%84:i32 = or %82, %83
%85:i32 = xor %84, %24 (hasExternalUses)
%86:i32 = add %0, %85
infer %86


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = lshr %2, 25:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = shl %8, 9:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7 (hasExternalUses)
%9:i32 = lshr %8, 23:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %2, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = add %0, %7
%9:i32 = shl %8, 9:i32
%10:i32 = lshr %8, 23:i32
%11:i32 = or %9, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -506368
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = add %3, %1
%5:i32 = shl %4, 7:i32
%6:i32 = lshr %4, 25:i32
%7:i32 = or %5, %6
%8:i32 = xor %2, %7 (hasExternalUses)
%9:i32 = add %1, %8
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %0, %12
infer %13


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
infer %14


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = shl %14, 13:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147475456
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13 (hasExternalUses)
%15:i32 = lshr %14, 19:i32
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
infer %19


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -409534464
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = shl %19, 18:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16777216
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13 (hasExternalUses)
%20:i32 = lshr %19, 14:i32
infer %20


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %0, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %1, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %2, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %0, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
infer %22


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -262144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
infer %23


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483136
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2113930240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1946165248
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2139291648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %0, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = var
%10:i32 = var
%11:i32 = add %9, %8
%12:i32 = shl %11, 7:i32
%13:i32 = lshr %11, 25:i32
%14:i32 = or %12, %13
%15:i32 = xor %10, %14 (hasExternalUses)
%16:i32 = var
%17:i32 = add %8, %15
%18:i32 = shl %17, 9:i32
%19:i32 = lshr %17, 23:i32
%20:i32 = or %18, %19
%21:i32 = xor %16, %20 (hasExternalUses)
%22:i32 = add %15, %21
%23:i32 = shl %22, 13:i32
%24:i32 = lshr %22, 19:i32
%25:i32 = or %23, %24
%26:i32 = xor %9, %25 (hasExternalUses)
%27:i32 = add %26, %21
%28:i32 = shl %27, 18:i32
%29:i32 = lshr %27, 14:i32
%30:i32 = or %28, %29
%31:i32 = xor %8, %30 (hasExternalUses)
%32:i32 = add %7, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %31, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %7
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -461362391
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1 (hasExternalUses)
%3:i32 = shl %2, 7:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -571473920
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 49500
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1861222400
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %31, %23
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 445531996
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
infer %32


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = shl %32, 7:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31 (hasExternalUses)
%33:i32 = lshr %32, 25:i32
infer %33


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
infer %35


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54
infer %55


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
infer %56


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = shl %56, 9:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55 (hasExternalUses)
%57:i32 = lshr %56, 23:i32
infer %57


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 488
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
infer %59


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1671568224
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73
infer %74


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483616
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
infer %75


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147479552
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = shl %75, 13:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74 (hasExternalUses)
%76:i32 = lshr %75, 19:i32
infer %76


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
infer %78


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16384
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31
infer %79


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 100674112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = shl %2, 7:i32
%4:i32 = lshr %2, 25:i32
%5:i32 = or %3, %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
infer %80


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483624
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = shl %80, 18:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2143027200
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79 (hasExternalUses)
%81:i32 = lshr %80, 14:i32
infer %81


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 131072
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22 (hasExternalUses)
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
infer %83


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1658116192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %0
%4:i32 = shl %3, 7:i32
%5:i32 = lshr %3, 25:i32
%6:i32 = or %4, %5
%7:i32 = xor %2, %6 (hasExternalUses)
%8:i32 = var
%9:i32 = add %0, %7
%10:i32 = shl %9, 9:i32
%11:i32 = lshr %9, 23:i32
%12:i32 = or %10, %11
%13:i32 = xor %8, %12 (hasExternalUses)
%14:i32 = add %7, %13
%15:i32 = shl %14, 13:i32
%16:i32 = lshr %14, 19:i32
%17:i32 = or %15, %16
%18:i32 = xor %1, %17 (hasExternalUses)
%19:i32 = add %18, %13
%20:i32 = shl %19, 18:i32
%21:i32 = lshr %19, 14:i32
%22:i32 = or %20, %21
%23:i32 = xor %0, %22
%24:i32 = var
%25:i32 = var
%26:i32 = var
%27:i32 = add %25, %26
%28:i32 = shl %27, 7:i32
%29:i32 = lshr %27, 25:i32
%30:i32 = or %28, %29
%31:i32 = xor %24, %30 (hasExternalUses)
%32:i32 = add %23, %31
%33:i32 = shl %32, 7:i32
%34:i32 = lshr %32, 25:i32
%35:i32 = or %33, %34
%36:i32 = var
%37:i32 = var
%38:i32 = var
%39:i32 = add %36, %38
%40:i32 = shl %39, 7:i32
%41:i32 = lshr %39, 25:i32
%42:i32 = or %40, %41
%43:i32 = xor %37, %42 (hasExternalUses)
%44:i32 = var
%45:i32 = add %38, %43
%46:i32 = shl %45, 9:i32
%47:i32 = lshr %45, 23:i32
%48:i32 = or %46, %47
%49:i32 = xor %44, %48 (hasExternalUses)
%50:i32 = add %43, %49
%51:i32 = shl %50, 13:i32
%52:i32 = lshr %50, 19:i32
%53:i32 = or %51, %52
%54:i32 = xor %36, %53 (hasExternalUses)
%55:i32 = xor %35, %54 (hasExternalUses)
%56:i32 = add %23, %55
%57:i32 = shl %56, 9:i32
%58:i32 = lshr %56, 23:i32
%59:i32 = or %57, %58
%60:i32 = var
%61:i32 = var
%62:i32 = var
%63:i32 = var
%64:i32 = add %63, %61
%65:i32 = shl %64, 7:i32
%66:i32 = lshr %64, 25:i32
%67:i32 = or %65, %66
%68:i32 = xor %62, %67 (hasExternalUses)
%69:i32 = add %61, %68
%70:i32 = shl %69, 9:i32
%71:i32 = lshr %69, 23:i32
%72:i32 = or %70, %71
%73:i32 = xor %60, %72 (hasExternalUses)
%74:i32 = xor %59, %73 (hasExternalUses)
%75:i32 = add %55, %74
%76:i32 = shl %75, 13:i32
%77:i32 = lshr %75, 19:i32
%78:i32 = or %76, %77
%79:i32 = xor %78, %31 (hasExternalUses)
%80:i32 = add %74, %79
%81:i32 = shl %80, 18:i32
%82:i32 = lshr %80, 14:i32
%83:i32 = or %81, %82
%84:i32 = xor %83, %23
infer %84


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 464568841
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
%1:i32 = addnw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 6
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,7))
%1:i1 = ult %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./pwhash_scryptsalsa208sha256_nosse.c.bc:salsa20_8()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
