; entering Souper's runOnFunction() for escrypt_gensalt_r()

; ModuleID = './crypto_scrypt-common.c.bc'
source_filename = "crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.escrypt_region_t = type { i8*, i8*, i32 }

@.str = private unnamed_addr constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1

; Function Attrs: nounwind
define hidden i8* @escrypt_parse_setting(i8* readonly %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3) local_unnamed_addr #0 {
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 36
  br i1 %6, label %7, label %30

7:                                                ; preds = %4
  %8 = getelementptr i8, i8* %0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 55
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = getelementptr i8, i8* %0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr i8, i8* %0, i32 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %18, i32 65) #7
  %20 = icmp eq i8* %19, null
  %21 = ptrtoint i8* %19 to i32
  %22 = sub i32 %21, ptrtoint ([65 x i8]* @.str to i32)
  %23 = select i1 %20, i32 0, i32 %22
  store i32 %23, i32* %1, align 4
  br i1 %20, label %30, label %24

24:                                               ; preds = %15
  %25 = getelementptr i8, i8* %0, i32 4
  %26 = tail call fastcc i8* @decode64_uint32(i32* %2, i8* %25)
  %27 = icmp eq i8* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = tail call fastcc i8* @decode64_uint32(i32* %3, i8* nonnull %26)
  br label %30

30:                                               ; preds = %15, %28, %24, %4, %7, %11
  %31 = phi i8* [ null, %11 ], [ null, %7 ], [ null, %4 ], [ null, %15 ], [ null, %24 ], [ %29, %28 ]
  ret i8* %31
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc i8* @decode64_uint32(i32* nocapture %0, i8* readonly %1) unnamed_addr #0 {
  %3 = getelementptr i8, i8* %1, i32 5
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %5, i32 65) #7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr i8, i8* %1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %11, i32 65) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %35, %29, %23, %17, %8, %2
  %15 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %17 ], [ 0, %23 ], [ 0, %29 ], [ %53, %35 ]
  %16 = phi i8* [ null, %2 ], [ null, %8 ], [ null, %17 ], [ null, %23 ], [ null, %29 ], [ %3, %35 ]
  store i32 %15, i32* %0, align 4
  ret i8* %16

17:                                               ; preds = %8
  %18 = getelementptr i8, i8* %1, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %20, i32 65) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %14, label %23

23:                                               ; preds = %17
  %24 = getelementptr i8, i8* %1, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  br i1 %28, label %14, label %29

29:                                               ; preds = %23
  %30 = getelementptr i8, i8* %1, i32 4
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %32, i32 65) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %14, label %35

35:                                               ; preds = %29
  %36 = ptrtoint i8* %27 to i32
  %37 = sub i32 %36, ptrtoint ([65 x i8]* @.str to i32)
  %38 = shl i32 %37, 18
  %39 = ptrtoint i8* %21 to i32
  %40 = sub i32 %39, ptrtoint ([65 x i8]* @.str to i32)
  %41 = shl i32 %40, 12
  %42 = ptrtoint i8* %12 to i32
  %43 = sub i32 %42, ptrtoint ([65 x i8]* @.str to i32)
  %44 = shl i32 %43, 6
  %45 = ptrtoint i8* %6 to i32
  %46 = sub i32 %45, ptrtoint ([65 x i8]* @.str to i32)
  %47 = or i32 %44, %46
  %48 = or i32 %41, %47
  %49 = or i32 %38, %48
  %50 = ptrtoint i8* %33 to i32
  %51 = sub i32 %50, ptrtoint ([65 x i8]* @.str to i32)
  %52 = shl i32 %51, 24
  %53 = or i32 %52, %49
  br label %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define hidden i8* @escrypt_r(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  %12 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  %13 = load i8, i8* %3, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %118

15:                                               ; preds = %6
  %16 = getelementptr i8, i8* %3, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 55
  br i1 %18, label %19, label %118

19:                                               ; preds = %15
  %20 = getelementptr i8, i8* %3, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 36
  br i1 %22, label %23, label %118

23:                                               ; preds = %19
  %24 = getelementptr i8, i8* %3, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  %29 = ptrtoint i8* %27 to i32
  %30 = sub i32 %29, ptrtoint ([65 x i8]* @.str to i32)
  br i1 %28, label %118, label %31

31:                                               ; preds = %23
  %32 = getelementptr i8, i8* %3, i32 4
  %33 = call fastcc i8* @decode64_uint32(i32* nonnull %8, i8* %32) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %118, label %35

35:                                               ; preds = %31
  %36 = call fastcc i8* @decode64_uint32(i32* nonnull %9, i8* nonnull %33) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %118, label %38

38:                                               ; preds = %35
  %39 = zext i32 %30 to i64
  %40 = shl nuw i64 1, %39
  %41 = ptrtoint i8* %36 to i32
  %42 = ptrtoint i8* %3 to i32
  %43 = sub i32 %41, %42
  %44 = tail call i8* @strrchr(i8* nonnull %36, i32 36)
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = ptrtoint i8* %44 to i32
  %48 = sub i32 %47, %41
  br label %51

49:                                               ; preds = %38
  %50 = tail call i32 @strlen(i8* nonnull %36) #8
  br label %51

51:                                               ; preds = %49, %46
  %52 = phi i32 [ %48, %46 ], [ %50, %49 ]
  %53 = add i32 %52, %43
  %54 = add i32 %53, 45
  %55 = icmp ugt i32 %54, %5
  %56 = icmp ult i32 %54, %52
  %57 = or i1 %55, %56
  br i1 %57, label %118, label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %8, align 4
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* nonnull %36, i32 %52, i64 %40, i32 %59, i32 %60, i8* nonnull %10, i32 32) #7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %118

63:                                               ; preds = %58
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* nonnull align 1 %3, i32 %53, i1 false)
  %64 = getelementptr i8, i8* %4, i32 %53
  %65 = getelementptr i8, i8* %64, i32 1
  store i8 36, i8* %64, align 1
  %66 = ptrtoint i8* %65 to i32
  %67 = ptrtoint i8* %4 to i32
  %68 = add i32 %67, %5
  %69 = sub i32 %68, %66
  br label %70

70:                                               ; preds = %104, %63
  %71 = phi i32 [ %69, %63 ], [ %110, %104 ]
  %72 = phi i8* [ %65, %63 ], [ %99, %104 ]
  %73 = phi i32 [ 0, %63 ], [ %79, %104 ]
  %74 = icmp ult i32 %73, 32
  br i1 %74, label %75, label %111

75:                                               ; preds = %70, %75
  %76 = phi i32 [ %79, %75 ], [ %73, %70 ]
  %77 = phi i32 [ %84, %75 ], [ 0, %70 ]
  %78 = phi i32 [ %85, %75 ], [ 0, %70 ]
  %79 = add nuw nsw i32 %76, 1
  %80 = getelementptr [32 x i8], [32 x i8]* %7, i32 0, i32 %76
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, %78
  %84 = or i32 %83, %77
  %85 = add nuw nsw i32 %78, 8
  %86 = icmp ult i32 %78, 16
  %87 = icmp ult i32 %76, 31
  %88 = and i1 %87, %86
  br i1 %88, label %75, label %89

89:                                               ; preds = %75, %95
  %90 = phi i32 [ %102, %95 ], [ 0, %75 ]
  %91 = phi i32 [ %101, %95 ], [ %84, %75 ]
  %92 = phi i32 [ %100, %95 ], [ %71, %75 ]
  %93 = phi i8* [ %99, %95 ], [ %72, %75 ]
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %89
  %96 = and i32 %91, 63
  %97 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr i8, i8* %93, i32 1
  store i8 %98, i8* %93, align 1
  %100 = add i32 %92, -1
  %101 = lshr i32 %91, 6
  %102 = add nuw nsw i32 %90, 6
  %103 = icmp ult i32 %102, %85
  br i1 %103, label %89, label %104

104:                                              ; preds = %95
  %105 = icmp eq i8* %99, null
  %106 = ptrtoint i8* %99 to i32
  %107 = ptrtoint i8* %72 to i32
  %108 = sub i32 %107, %106
  %109 = select i1 %105, i32 0, i32 %108
  %110 = add i32 %109, %71
  br i1 %105, label %111, label %70

111:                                              ; preds = %70, %104, %89
  %112 = phi i8* [ null, %89 ], [ %72, %70 ], [ null, %104 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #7
  %113 = icmp ne i8* %112, null
  %114 = getelementptr i8, i8* %4, i32 %5
  %115 = icmp ult i8* %112, %114
  %116 = and i1 %113, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %111
  store i8 0, i8* %112, align 1
  br label %118

118:                                              ; preds = %31, %23, %6, %15, %19, %111, %58, %51, %35, %117
  %119 = phi i8* [ %4, %117 ], [ null, %35 ], [ null, %51 ], [ null, %58 ], [ null, %111 ], [ null, %19 ], [ null, %15 ], [ null, %6 ], [ null, %23 ], [ null, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  ret i8* %119
}

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i32 @strlen(i8* nocapture %0) local_unnamed_addr #3

declare i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i32 %4, i64 %5, i32 %6, i32 %7, i8* %8, i32 %9) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind
define hidden i8* @escrypt_gensalt_r(i32 %0, i32 %1, i32 %2, i8* nocapture readonly %3, i32 %4, i8* %5, i32 %6) local_unnamed_addr #5 {
  %8 = shl i32 %4, 3
  %9 = or i32 %8, 4
  %10 = udiv i32 %9, 6
  %11 = add nuw nsw i32 %10, 15
  %12 = icmp ugt i32 %11, %6
  %13 = icmp ult i32 %10, %4
  %14 = or i1 %13, %12
  %15 = icmp ugt i32 %0, 63
  %16 = or i1 %15, %14
  br i1 %16, label %92, label %17

17:                                               ; preds = %7
  %18 = zext i32 %1 to i64
  %19 = zext i32 %2 to i64
  %20 = mul nuw i64 %19, %18
  %21 = icmp ugt i64 %20, 1073741823
  br i1 %21, label %92, label %22

22:                                               ; preds = %17
  %23 = getelementptr i8, i8* %5, i32 1
  store i8 36, i8* %5, align 1
  %24 = getelementptr i8, i8* %5, i32 2
  store i8 55, i8* %23, align 1
  %25 = getelementptr i8, i8* %5, i32 3
  store i8 36, i8* %24, align 1
  %26 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %0
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %25, align 1
  %28 = ptrtoint i8* %5 to i32
  br i1 false, label %92, label %29

29:                                               ; preds = %22
  %30 = getelementptr i8, i8* %5, i32 4
  %31 = and i32 %1, 63
  %32 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %31
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %30, align 1
  br i1 false, label %92, label %123

34:                                               ; preds = %143
  %35 = ptrtoint i8* %149 to i32
  %36 = add i32 %28, %6
  %37 = sub i32 %36, %35
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %92, label %39

39:                                               ; preds = %34
  %40 = and i32 %2, 63
  %41 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %40
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %149, align 1
  %43 = icmp eq i32 %37, 1
  br i1 %43, label %92, label %94

44:                                               ; preds = %115
  %45 = ptrtoint i8* %121 to i32
  %46 = sub i32 %36, %45
  br label %47

47:                                               ; preds = %81, %44
  %48 = phi i32 [ %46, %44 ], [ %87, %81 ]
  %49 = phi i8* [ %121, %44 ], [ %76, %81 ]
  %50 = phi i32 [ 0, %44 ], [ %56, %81 ]
  %51 = icmp ult i32 %50, %4
  br i1 %51, label %52, label %88

52:                                               ; preds = %47, %52
  %53 = phi i32 [ %56, %52 ], [ %50, %47 ]
  %54 = phi i32 [ %61, %52 ], [ 0, %47 ]
  %55 = phi i32 [ %62, %52 ], [ 0, %47 ]
  %56 = add nuw i32 %53, 1
  %57 = getelementptr i8, i8* %3, i32 %53
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, %55
  %61 = or i32 %60, %54
  %62 = add nuw nsw i32 %55, 8
  %63 = icmp ult i32 %55, 16
  %64 = icmp ult i32 %56, %4
  %65 = and i1 %64, %63
  br i1 %65, label %52, label %66

66:                                               ; preds = %52, %72
  %67 = phi i32 [ %79, %72 ], [ 0, %52 ]
  %68 = phi i32 [ %78, %72 ], [ %61, %52 ]
  %69 = phi i32 [ %77, %72 ], [ %48, %52 ]
  %70 = phi i8* [ %76, %72 ], [ %49, %52 ]
  %71 = icmp eq i32 %69, 0
  br i1 %71, label %92, label %72

72:                                               ; preds = %66
  %73 = and i32 %68, 63
  %74 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %73
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr i8, i8* %70, i32 1
  store i8 %75, i8* %70, align 1
  %77 = add i32 %69, -1
  %78 = lshr i32 %68, 6
  %79 = add nuw nsw i32 %67, 6
  %80 = icmp ult i32 %79, %62
  br i1 %80, label %66, label %81

81:                                               ; preds = %72
  %82 = icmp eq i8* %76, null
  %83 = ptrtoint i8* %76 to i32
  %84 = ptrtoint i8* %49 to i32
  %85 = sub i32 %84, %83
  %86 = select i1 %82, i32 0, i32 %85
  %87 = add i32 %86, %48
  br i1 %82, label %92, label %47

88:                                               ; preds = %47
  %89 = getelementptr i8, i8* %5, i32 %6
  %90 = icmp ult i8* %49, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  store i8 0, i8* %49, align 1
  br label %92

92:                                               ; preds = %81, %66, %22, %29, %123, %129, %136, %34, %39, %94, %101, %108, %88, %115, %143, %17, %7, %91
  %93 = phi i8* [ %5, %91 ], [ null, %7 ], [ null, %17 ], [ null, %143 ], [ null, %115 ], [ null, %88 ], [ null, %108 ], [ null, %101 ], [ null, %94 ], [ null, %39 ], [ null, %34 ], [ null, %136 ], [ null, %129 ], [ null, %123 ], [ null, %29 ], [ null, %22 ], [ null, %66 ], [ null, %81 ]
  ret i8* %93

94:                                               ; preds = %39
  %95 = getelementptr i8, i8* %5, i32 10
  %96 = lshr i32 %2, 6
  %97 = and i32 %96, 63
  %98 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %97
  %99 = load i8, i8* %98, align 1
  store i8 %99, i8* %95, align 1
  %100 = icmp eq i32 %37, 2
  br i1 %100, label %92, label %101

101:                                              ; preds = %94
  %102 = getelementptr i8, i8* %5, i32 11
  %103 = lshr i32 %2, 12
  %104 = and i32 %103, 63
  %105 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %104
  %106 = load i8, i8* %105, align 1
  store i8 %106, i8* %102, align 1
  %107 = icmp eq i32 %37, 3
  br i1 %107, label %92, label %108

108:                                              ; preds = %101
  %109 = getelementptr i8, i8* %5, i32 12
  %110 = lshr i32 %2, 18
  %111 = and i32 %110, 63
  %112 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %111
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %109, align 1
  %114 = icmp eq i32 %37, 4
  br i1 %114, label %92, label %115

115:                                              ; preds = %108
  %116 = getelementptr i8, i8* %5, i32 13
  %117 = lshr i32 %2, 24
  %118 = and i32 %117, 63
  %119 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %118
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr i8, i8* %5, i32 14
  store i8 %120, i8* %116, align 1
  %122 = icmp eq i8* %121, null
  br i1 %122, label %92, label %44

123:                                              ; preds = %29
  %124 = getelementptr i8, i8* %5, i32 5
  %125 = lshr i32 %1, 6
  %126 = and i32 %125, 63
  %127 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %126
  %128 = load i8, i8* %127, align 1
  store i8 %128, i8* %124, align 1
  br i1 false, label %92, label %129

129:                                              ; preds = %123
  %130 = getelementptr i8, i8* %5, i32 6
  %131 = lshr i32 %1, 12
  %132 = and i32 %131, 63
  %133 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %130, align 1
  %135 = icmp eq i32 %6, 7
  br i1 %135, label %92, label %136

136:                                              ; preds = %129
  %137 = getelementptr i8, i8* %5, i32 7
  %138 = lshr i32 %1, 18
  %139 = and i32 %138, 63
  %140 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %139
  %141 = load i8, i8* %140, align 1
  store i8 %141, i8* %137, align 1
  %142 = icmp eq i32 %6, 8
  br i1 %142, label %92, label %143

143:                                              ; preds = %136
  %144 = getelementptr i8, i8* %5, i32 8
  %145 = lshr i32 %1, 24
  %146 = and i32 %145, 63
  %147 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %146
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr i8, i8* %5, i32 9
  store i8 %148, i8* %144, align 1
  %150 = icmp eq i8* %149, null
  br i1 %150, label %92, label %34
}

; Function Attrs: nounwind
define i32 @crypto_pwhash_scryptsalsa208sha256_ll(i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) local_unnamed_addr #0 {
  %10 = alloca %struct.escrypt_region_t, align 4
  %11 = bitcast %struct.escrypt_region_t* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #7
  %12 = call i32 @escrypt_init_local(%struct.escrypt_region_t* nonnull %10) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* nonnull %10, i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) #7
  %16 = call i32 @escrypt_free_local(%struct.escrypt_region_t* nonnull %10) #7
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %15, i32 -1
  br label %19

19:                                               ; preds = %14, %9
  %20 = phi i32 [ -1, %9 ], [ %18, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #7
  ret i32 %20
}

declare i32 @escrypt_init_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

declare i32 @escrypt_free_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8* %0, i32 %1, i32 %2) local_unnamed_addr #6

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = shl i32 %4, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
infer %1 (demandedBits=11111111111111111111111111111011)

; *****
; For LLVM instruction:
;  %9 = or i32 %8, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
%2:i32 = or 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = udiv i32 %9, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
%2:i32 = or 4:i32, %1
%3:i32 = udiv %2, 6:i32
infer %3

; *****
; For LLVM instruction:
;  %11 = add nuw nsw i32 %10, 15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
%2:i32 = or 4:i32, %1
%3:i32 = udiv %2, 6:i32 (hasExternalUses)
%4:i32 = addnw 15:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %12 = icmp ugt i32 %11, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32 (hasExternalUses)
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
infer %6

; *****
; For LLVM instruction:
;  %13 = icmp ult i32 %10, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 3:i32
%2:i32 = or 4:i32, %1
%3:i32 = udiv %2, 6:i32 (hasExternalUses)
%4:i1 = ult %3, %0
infer %4

; *****
; For LLVM instruction:
;  %14 = or i1 %13, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
infer %8

; *****
; For LLVM instruction:
;  %15 = icmp ugt i32 %0, 63
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 63:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = or i1 %15, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
infer %11

; *****
; For LLVM instruction:
;  %18 = zext i32 %1 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %19 = zext i32 %2 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = mul nuw i64 %19, %18
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %21 = icmp ugt i64 %20, 1073741823
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
infer %5

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = ptrtoint i8* %5 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = and i32 %1, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = and 63:i32, %0
infer %6

; *****
; For LLVM instruction:
;  %33 = load i8, i8* %32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = ptrtoint i8* %149 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0

; *****
; For LLVM instruction:
;  %36 = add i32 %28, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
infer %15

; *****
; For LLVM instruction:
;  %37 = sub i32 %36, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14
infer %18

; *****
; For LLVM instruction:
;  %38 = icmp eq i32 %37, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
infer %19

; *****
; For LLVM instruction:
;  %40 = and i32 %2, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = and 63:i32, %2
infer %6

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = icmp eq i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
infer %20

; *****
; For LLVM instruction:
;  %45 = ptrtoint i8* %121 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0

; *****
; For LLVM instruction:
;  %46 = sub i32 %36, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
pc %22 0:i1
%23:i1 = eq 4:i32, %18
pc %23 0:i1
%24:i32 = var
%25:i1 = eq 0:i32, %24
pc %25 0:i1
%26:i32 = sub %17, %24
infer %26

; *****
; For LLVM instruction:
;  %48 = phi i32 [ %46, %44 ], [ %87, %81 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = phi i32 [ 0, %44 ], [ %56, %81 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = icmp ult i32 %50, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = phi i32 [ %56, %52 ], [ %50, %47 ]
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
infer %0

; *****
; For LLVM instruction:
;  %54 = phi i32 [ %61, %52 ], [ 0, %47 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = phi i32 [ %62, %52 ], [ 0, %47 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
infer %0

; *****
; For LLVM instruction:
;  %56 = add nuw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = addnuw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i8, i8* %57, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = zext i8 %58 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %60 = shl nuw nsw i32 %59, %55
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = shlnw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %61 = or i32 %60, %54
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%4:i32 = shlnw %2, %3
%5:i32 = or %0, %4
infer %5

; *****
; For LLVM instruction:
;  %62 = add nuw nsw i32 %55, 8
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i32 = addnw 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = icmp ult i32 %55, 16
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i1 = ult %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %64 = icmp ult i32 %56, %4
; Looking for a replacement for:
%0:i32 = var (range=[0,-1))
%1:i32 = addnuw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %65 = and i1 %64, %63
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i1 = ult %0, 16:i32
%2:i32 = var (range=[0,-1))
%3:i32 = addnuw 1:i32, %2 (hasExternalUses)
%4:i32 = var
%5:i1 = ult %3, %4
%6:i1 = and %1, %5
infer %6

; *****
; For LLVM instruction:
;  %67 = phi i32 [ %79, %72 ], [ 0, %52 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
infer %0

; *****
; For LLVM instruction:
;  %68 = phi i32 [ %78, %72 ], [ %61, %52 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = phi i32 [ %77, %72 ], [ %48, %52 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = icmp eq i32 %69, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = and i32 %68, 63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 63:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %75 = load i8, i8* %74, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = add i32 %69, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = add 4294967295:i32, %0
infer %2

; *****
; For LLVM instruction:
;  %78 = lshr i32 %68, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %79 = add nuw nsw i32 %67, 6
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = icmp ult i32 %79, %62
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0 (hasExternalUses)
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = addnw 8:i32, %2 (hasExternalUses)
%4:i1 = ult %1, %3
infer %4

; *****
; For LLVM instruction:
;  %82 = icmp eq i8* %76, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = ptrtoint i8* %76 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = ptrtoint i8* %49 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = sub i32 %84, %83
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %86 = select i1 %82, i32 0, i32 %85
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = sub %2, %0
%4:i32 = select %1, 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %87 = add i32 %86, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq 0:i32, %1 (hasExternalUses)
%3:i32 = var
%4:i32 = sub %3, %1
%5:i32 = select %2, 0:i32, %4
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %90 = icmp ult i8* %49, %89
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %96 = lshr i32 %2, 6
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 6:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %97 = and i32 %96, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 6:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %99 = load i8, i8* %98, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = icmp eq i32 %37, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
infer %21

; *****
; For LLVM instruction:
;  %103 = lshr i32 %2, 12
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 12:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %104 = and i32 %103, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 12:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %106 = load i8, i8* %105, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %107 = icmp eq i32 %37, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
infer %22

; *****
; For LLVM instruction:
;  %110 = lshr i32 %2, 18
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 18:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %111 = and i32 %110, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 18:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %113 = load i8, i8* %112, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %114 = icmp eq i32 %37, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
pc %22 0:i1
%23:i1 = eq 4:i32, %18
infer %23

; *****
; For LLVM instruction:
;  %117 = lshr i32 %2, 24
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 24:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %118 = and i32 %117, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %2, 24:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %120 = load i8, i8* %119, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %122 = icmp eq i8* %121, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %125 = lshr i32 %1, 6
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 6:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %126 = and i32 %125, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 6:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %128 = load i8, i8* %127, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %131 = lshr i32 %1, 12
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 12:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %132 = and i32 %131, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 12:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %134 = load i8, i8* %133, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %135 = icmp eq i32 %6, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
infer %12

; *****
; For LLVM instruction:
;  %138 = lshr i32 %1, 18
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 18:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %139 = and i32 %138, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 18:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %141 = load i8, i8* %140, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %142 = icmp eq i32 %6, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
infer %13

; *****
; For LLVM instruction:
;  %145 = lshr i32 %1, 24
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 24:i32
infer %6 (demandedBits=00000000000000000000000000111111)

; *****
; For LLVM instruction:
;  %146 = and i32 %145, 63
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 24:i32
%7:i32 = and 63:i32, %6
infer %7

; *****
; For LLVM instruction:
;  %148 = load i8, i8* %147, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %150 = icmp eq i8* %149, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1024
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1055
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14
infer %18


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1168
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3217
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
infer %19


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
infer %20


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
pc %22 0:i1
%23:i1 = eq 4:i32, %18
pc %23 0:i1
%24:i32 = var
%25:i1 = eq 0:i32, %24
pc %25 0:i1
%26:i32 = sub %17, %24
infer %26


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 78
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483570
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
infer %21


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
infer %22


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
pc %12 0:i1
%13:i1 = eq 8:i32, %0
pc %13 0:i1
%14:i32 = var
%15:i1 = eq 0:i32, %14
pc %15 0:i1
%16:i32 = var
%17:i32 = add %0, %16 (hasExternalUses)
%18:i32 = sub %17, %14 (hasExternalUses)
%19:i1 = eq 0:i32, %18
pc %19 0:i1
%20:i1 = eq 1:i32, %18
pc %20 0:i1
%21:i1 = eq 2:i32, %18
pc %21 0:i1
%22:i1 = eq 3:i32, %18
pc %22 0:i1
%23:i1 = eq 4:i32, %18
infer %23


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 12:i32
infer %6 (demandedBits=00000000000000000000000000111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mulnuw %1, %3
%5:i1 = ult 1073741823:i64, %4
pc %5 0:i1
%6:i32 = lshr %0, 12:i32
%7:i32 = and 63:i32, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
infer %12


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './crypto_scrypt-common.c.bc'
source_filename = "crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.escrypt_region_t = type { i8*, i8*, i32 }

@.str = private unnamed_addr constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1

; Function Attrs: nounwind
define hidden i8* @escrypt_parse_setting(i8* readonly %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3) local_unnamed_addr #0 {
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 36
  br i1 %6, label %7, label %30

7:                                                ; preds = %4
  %8 = getelementptr i8, i8* %0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 55
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = getelementptr i8, i8* %0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr i8, i8* %0, i32 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %18, i32 65) #7
  %20 = icmp eq i8* %19, null
  %21 = ptrtoint i8* %19 to i32
  %22 = sub i32 %21, ptrtoint ([65 x i8]* @.str to i32)
  %23 = select i1 %20, i32 0, i32 %22
  store i32 %23, i32* %1, align 4
  br i1 %20, label %30, label %24

24:                                               ; preds = %15
  %25 = getelementptr i8, i8* %0, i32 4
  %26 = tail call fastcc i8* @decode64_uint32(i32* %2, i8* %25)
  %27 = icmp eq i8* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = tail call fastcc i8* @decode64_uint32(i32* %3, i8* nonnull %26)
  br label %30

30:                                               ; preds = %15, %28, %24, %4, %7, %11
  %31 = phi i8* [ null, %11 ], [ null, %7 ], [ null, %4 ], [ null, %15 ], [ null, %24 ], [ %29, %28 ]
  ret i8* %31
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc i8* @decode64_uint32(i32* nocapture %0, i8* readonly %1) unnamed_addr #0 {
  %3 = getelementptr i8, i8* %1, i32 5
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %5, i32 65) #7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr i8, i8* %1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %11, i32 65) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %35, %29, %23, %17, %8, %2
  %15 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %17 ], [ 0, %23 ], [ 0, %29 ], [ %53, %35 ]
  %16 = phi i8* [ null, %2 ], [ null, %8 ], [ null, %17 ], [ null, %23 ], [ null, %29 ], [ %3, %35 ]
  store i32 %15, i32* %0, align 4
  ret i8* %16

17:                                               ; preds = %8
  %18 = getelementptr i8, i8* %1, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %20, i32 65) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %14, label %23

23:                                               ; preds = %17
  %24 = getelementptr i8, i8* %1, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  br i1 %28, label %14, label %29

29:                                               ; preds = %23
  %30 = getelementptr i8, i8* %1, i32 4
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %32, i32 65) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %14, label %35

35:                                               ; preds = %29
  %36 = ptrtoint i8* %27 to i32
  %37 = sub i32 %36, ptrtoint ([65 x i8]* @.str to i32)
  %38 = shl i32 %37, 18
  %39 = ptrtoint i8* %21 to i32
  %40 = sub i32 %39, ptrtoint ([65 x i8]* @.str to i32)
  %41 = shl i32 %40, 12
  %42 = ptrtoint i8* %12 to i32
  %43 = sub i32 %42, ptrtoint ([65 x i8]* @.str to i32)
  %44 = shl i32 %43, 6
  %45 = ptrtoint i8* %6 to i32
  %46 = sub i32 %45, ptrtoint ([65 x i8]* @.str to i32)
  %47 = or i32 %44, %46
  %48 = or i32 %41, %47
  %49 = or i32 %38, %48
  %50 = ptrtoint i8* %33 to i32
  %51 = sub i32 %50, ptrtoint ([65 x i8]* @.str to i32)
  %52 = shl i32 %51, 24
  %53 = or i32 %52, %49
  br label %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define hidden i8* @escrypt_r(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  %12 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  %13 = load i8, i8* %3, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %118

15:                                               ; preds = %6
  %16 = getelementptr i8, i8* %3, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 55
  br i1 %18, label %19, label %118

19:                                               ; preds = %15
  %20 = getelementptr i8, i8* %3, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 36
  br i1 %22, label %23, label %118

23:                                               ; preds = %19
  %24 = getelementptr i8, i8* %3, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  %29 = ptrtoint i8* %27 to i32
  %30 = sub i32 %29, ptrtoint ([65 x i8]* @.str to i32)
  br i1 %28, label %118, label %31

31:                                               ; preds = %23
  %32 = getelementptr i8, i8* %3, i32 4
  %33 = call fastcc i8* @decode64_uint32(i32* nonnull %8, i8* %32) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %118, label %35

35:                                               ; preds = %31
  %36 = call fastcc i8* @decode64_uint32(i32* nonnull %9, i8* nonnull %33) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %118, label %38

38:                                               ; preds = %35
  %39 = zext i32 %30 to i64
  %40 = shl nuw i64 1, %39
  %41 = ptrtoint i8* %36 to i32
  %42 = ptrtoint i8* %3 to i32
  %43 = sub i32 %41, %42
  %44 = tail call i8* @strrchr(i8* nonnull %36, i32 36)
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = ptrtoint i8* %44 to i32
  %48 = sub i32 %47, %41
  br label %51

49:                                               ; preds = %38
  %50 = tail call i32 @strlen(i8* nonnull %36) #8
  br label %51

51:                                               ; preds = %49, %46
  %52 = phi i32 [ %48, %46 ], [ %50, %49 ]
  %53 = add i32 %52, %43
  %54 = add i32 %53, 45
  %55 = icmp ugt i32 %54, %5
  %56 = icmp ult i32 %54, %52
  %57 = or i1 %55, %56
  br i1 %57, label %118, label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %8, align 4
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* nonnull %36, i32 %52, i64 %40, i32 %59, i32 %60, i8* nonnull %10, i32 32) #7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %118

63:                                               ; preds = %58
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* nonnull align 1 %3, i32 %53, i1 false)
  %64 = getelementptr i8, i8* %4, i32 %53
  %65 = getelementptr i8, i8* %64, i32 1
  store i8 36, i8* %64, align 1
  %66 = ptrtoint i8* %65 to i32
  %67 = ptrtoint i8* %4 to i32
  %68 = add i32 %67, %5
  %69 = sub i32 %68, %66
  br label %70

70:                                               ; preds = %104, %63
  %71 = phi i32 [ %69, %63 ], [ %110, %104 ]
  %72 = phi i8* [ %65, %63 ], [ %99, %104 ]
  %73 = phi i32 [ 0, %63 ], [ %79, %104 ]
  %74 = icmp ult i32 %73, 32
  br i1 %74, label %75, label %111

75:                                               ; preds = %70, %75
  %76 = phi i32 [ %79, %75 ], [ %73, %70 ]
  %77 = phi i32 [ %84, %75 ], [ 0, %70 ]
  %78 = phi i32 [ %85, %75 ], [ 0, %70 ]
  %79 = add nuw nsw i32 %76, 1
  %80 = getelementptr [32 x i8], [32 x i8]* %7, i32 0, i32 %76
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, %78
  %84 = or i32 %83, %77
  %85 = add nuw nsw i32 %78, 8
  %86 = icmp ult i32 %78, 16
  %87 = icmp ult i32 %76, 31
  %88 = and i1 %87, %86
  br i1 %88, label %75, label %89

89:                                               ; preds = %75, %95
  %90 = phi i32 [ %102, %95 ], [ 0, %75 ]
  %91 = phi i32 [ %101, %95 ], [ %84, %75 ]
  %92 = phi i32 [ %100, %95 ], [ %71, %75 ]
  %93 = phi i8* [ %99, %95 ], [ %72, %75 ]
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %89
  %96 = and i32 %91, 63
  %97 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr i8, i8* %93, i32 1
  store i8 %98, i8* %93, align 1
  %100 = add i32 %92, -1
  %101 = lshr i32 %91, 6
  %102 = add nuw nsw i32 %90, 6
  %103 = icmp ult i32 %102, %85
  br i1 %103, label %89, label %104

104:                                              ; preds = %95
  %105 = icmp eq i8* %99, null
  %106 = ptrtoint i8* %99 to i32
  %107 = ptrtoint i8* %72 to i32
  %108 = sub i32 %107, %106
  %109 = select i1 %105, i32 0, i32 %108
  %110 = add i32 %109, %71
  br i1 %105, label %111, label %70

111:                                              ; preds = %70, %104, %89
  %112 = phi i8* [ null, %89 ], [ %72, %70 ], [ null, %104 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #7
  %113 = icmp ne i8* %112, null
  %114 = getelementptr i8, i8* %4, i32 %5
  %115 = icmp ult i8* %112, %114
  %116 = and i1 %113, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %111
  store i8 0, i8* %112, align 1
  br label %118

118:                                              ; preds = %31, %23, %6, %15, %19, %111, %58, %51, %35, %117
  %119 = phi i8* [ %4, %117 ], [ null, %35 ], [ null, %51 ], [ null, %58 ], [ null, %111 ], [ null, %19 ], [ null, %15 ], [ null, %6 ], [ null, %23 ], [ null, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  ret i8* %119
}

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i32 @strlen(i8* nocapture %0) local_unnamed_addr #3

declare i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i32 %4, i64 %5, i32 %6, i32 %7, i8* %8, i32 %9) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind
define hidden i8* @escrypt_gensalt_r(i32 %0, i32 %1, i32 %2, i8* nocapture readonly %3, i32 %4, i8* %5, i32 %6) local_unnamed_addr #5 {
  %8 = shl i32 %4, 3
  %9 = or i32 %8, 4
  %10 = udiv i32 %9, 6
  %11 = add nuw nsw i32 %10, 15
  %12 = icmp ugt i32 %11, %6
  %13 = icmp ult i32 %10, %4
  %14 = or i1 %13, %12
  %15 = icmp ugt i32 %0, 63
  %16 = or i1 %15, %14
  br i1 %16, label %92, label %17

17:                                               ; preds = %7
  %18 = zext i32 %1 to i64
  %19 = zext i32 %2 to i64
  %20 = mul nuw i64 %19, %18
  %21 = icmp ugt i64 %20, 1073741823
  br i1 %21, label %92, label %22

22:                                               ; preds = %17
  %23 = getelementptr i8, i8* %5, i32 1
  store i8 36, i8* %5, align 1
  %24 = getelementptr i8, i8* %5, i32 2
  store i8 55, i8* %23, align 1
  %25 = getelementptr i8, i8* %5, i32 3
  store i8 36, i8* %24, align 1
  %26 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %0
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %25, align 1
  %28 = ptrtoint i8* %5 to i32
  br i1 false, label %92, label %29

29:                                               ; preds = %22
  %30 = getelementptr i8, i8* %5, i32 4
  %31 = and i32 %1, 63
  %32 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %31
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %30, align 1
  br i1 false, label %92, label %123

34:                                               ; preds = %143
  %35 = ptrtoint i8* %149 to i32
  %36 = add i32 %28, %6
  %37 = sub i32 %36, %35
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %92, label %39

39:                                               ; preds = %34
  %40 = and i32 %2, 63
  %41 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %40
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %149, align 1
  %43 = icmp eq i32 %37, 1
  br i1 %43, label %92, label %94

44:                                               ; preds = %115
  %45 = ptrtoint i8* %121 to i32
  %46 = sub i32 %36, %45
  br label %47

47:                                               ; preds = %81, %44
  %48 = phi i32 [ %46, %44 ], [ %87, %81 ]
  %49 = phi i8* [ %121, %44 ], [ %76, %81 ]
  %50 = phi i32 [ 0, %44 ], [ %56, %81 ]
  %51 = icmp ult i32 %50, %4
  br i1 %51, label %52, label %88

52:                                               ; preds = %47, %52
  %53 = phi i32 [ %56, %52 ], [ %50, %47 ]
  %54 = phi i32 [ %61, %52 ], [ 0, %47 ]
  %55 = phi i32 [ %62, %52 ], [ 0, %47 ]
  %56 = add nuw i32 %53, 1
  %57 = getelementptr i8, i8* %3, i32 %53
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, %55
  %61 = or i32 %60, %54
  %62 = add nuw nsw i32 %55, 8
  %63 = icmp ult i32 %55, 16
  %64 = icmp ult i32 %56, %4
  %65 = and i1 %64, %63
  br i1 %65, label %52, label %66

66:                                               ; preds = %52, %72
  %67 = phi i32 [ %79, %72 ], [ 0, %52 ]
  %68 = phi i32 [ %78, %72 ], [ %61, %52 ]
  %69 = phi i32 [ %77, %72 ], [ %48, %52 ]
  %70 = phi i8* [ %76, %72 ], [ %49, %52 ]
  %71 = icmp eq i32 %69, 0
  br i1 %71, label %92, label %72

72:                                               ; preds = %66
  %73 = and i32 %68, 63
  %74 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %73
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr i8, i8* %70, i32 1
  store i8 %75, i8* %70, align 1
  %77 = add i32 %69, -1
  %78 = lshr i32 %68, 6
  %79 = add nuw nsw i32 %67, 6
  %80 = icmp ult i32 %79, %62
  br i1 %80, label %66, label %81

81:                                               ; preds = %72
  %82 = icmp eq i8* %76, null
  %83 = ptrtoint i8* %76 to i32
  %84 = ptrtoint i8* %49 to i32
  %85 = sub i32 %84, %83
  %86 = select i1 %82, i32 0, i32 %85
  %87 = add i32 %86, %48
  br i1 %82, label %92, label %47

88:                                               ; preds = %47
  %89 = getelementptr i8, i8* %5, i32 %6
  %90 = icmp ult i8* %49, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  store i8 0, i8* %49, align 1
  br label %92

92:                                               ; preds = %81, %66, %22, %29, %123, %129, %136, %34, %39, %94, %101, %108, %88, %115, %143, %17, %7, %91
  %93 = phi i8* [ %5, %91 ], [ null, %7 ], [ null, %17 ], [ null, %143 ], [ null, %115 ], [ null, %88 ], [ null, %108 ], [ null, %101 ], [ null, %94 ], [ null, %39 ], [ null, %34 ], [ null, %136 ], [ null, %129 ], [ null, %123 ], [ null, %29 ], [ null, %22 ], [ null, %66 ], [ null, %81 ]
  ret i8* %93

94:                                               ; preds = %39
  %95 = getelementptr i8, i8* %5, i32 10
  %96 = lshr i32 %2, 6
  %97 = and i32 %96, 63
  %98 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %97
  %99 = load i8, i8* %98, align 1
  store i8 %99, i8* %95, align 1
  %100 = icmp eq i32 %37, 2
  br i1 %100, label %92, label %101

101:                                              ; preds = %94
  %102 = getelementptr i8, i8* %5, i32 11
  %103 = lshr i32 %2, 12
  %104 = and i32 %103, 63
  %105 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %104
  %106 = load i8, i8* %105, align 1
  store i8 %106, i8* %102, align 1
  %107 = icmp eq i32 %37, 3
  br i1 %107, label %92, label %108

108:                                              ; preds = %101
  %109 = getelementptr i8, i8* %5, i32 12
  %110 = lshr i32 %2, 18
  %111 = and i32 %110, 63
  %112 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %111
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %109, align 1
  %114 = icmp eq i32 %37, 4
  br i1 %114, label %92, label %115

115:                                              ; preds = %108
  %116 = getelementptr i8, i8* %5, i32 13
  %117 = lshr i32 %2, 24
  %118 = and i32 %117, 63
  %119 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %118
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr i8, i8* %5, i32 14
  store i8 %120, i8* %116, align 1
  %122 = icmp eq i8* %121, null
  br i1 %122, label %92, label %44

123:                                              ; preds = %29
  %124 = getelementptr i8, i8* %5, i32 5
  %125 = lshr i32 %1, 6
  %126 = and i32 %125, 63
  %127 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %126
  %128 = load i8, i8* %127, align 1
  store i8 %128, i8* %124, align 1
  br i1 false, label %92, label %129

129:                                              ; preds = %123
  %130 = getelementptr i8, i8* %5, i32 6
  %131 = lshr i32 %1, 12
  %132 = and i32 %131, 63
  %133 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %130, align 1
  %135 = icmp eq i32 %6, 7
  br i1 %135, label %92, label %136

136:                                              ; preds = %129
  %137 = getelementptr i8, i8* %5, i32 7
  %138 = lshr i32 %1, 18
  %139 = and i32 %138, 63
  %140 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %139
  %141 = load i8, i8* %140, align 1
  store i8 %141, i8* %137, align 1
  %142 = icmp eq i32 %6, 8
  br i1 %142, label %92, label %143

143:                                              ; preds = %136
  %144 = getelementptr i8, i8* %5, i32 8
  %145 = lshr i32 %1, 24
  %146 = and i32 %145, 63
  %147 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %146
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr i8, i8* %5, i32 9
  store i8 %148, i8* %144, align 1
  %150 = icmp eq i8* %149, null
  br i1 %150, label %92, label %34
}

; Function Attrs: nounwind
define i32 @crypto_pwhash_scryptsalsa208sha256_ll(i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) local_unnamed_addr #0 {
  %10 = alloca %struct.escrypt_region_t, align 4
  %11 = bitcast %struct.escrypt_region_t* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #7
  %12 = call i32 @escrypt_init_local(%struct.escrypt_region_t* nonnull %10) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* nonnull %10, i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) #7
  %16 = call i32 @escrypt_free_local(%struct.escrypt_region_t* nonnull %10) #7
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %15, i32 -1
  br label %19

19:                                               ; preds = %14, %9
  %20 = phi i32 [ -1, %9 ], [ %18, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #7
  ret i32 %20
}

declare i32 @escrypt_init_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

declare i32 @escrypt_free_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8* %0, i32 %1, i32 %2) local_unnamed_addr #6

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; Replacing "  %135 = icmp eq i32 %6, 7"
; from ""
; with "i1 false" in:
"%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 3:i32
%3:i32 = or 4:i32, %2
%4:i32 = udiv %3, 6:i32
%5:i32 = addnw 15:i32, %4
%6:i1 = ult %0, %5
%7:i1 = ult %4, %1
%8:i1 = or %6, %7
%9:i32 = var
%10:i1 = ult 63:i32, %9
%11:i1 = or %8, %10
pc %11 0:i1
%12:i1 = eq 7:i32, %0
cand %12 0:i1
"
; with "i1 false"

Module after replacement:
; ModuleID = './crypto_scrypt-common.c.bc'
source_filename = "crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.escrypt_region_t = type { i8*, i8*, i32 }

@.str = private unnamed_addr constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1

; Function Attrs: nounwind
define hidden i8* @escrypt_parse_setting(i8* readonly %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3) local_unnamed_addr #0 {
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 36
  br i1 %6, label %7, label %30

7:                                                ; preds = %4
  %8 = getelementptr i8, i8* %0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 55
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = getelementptr i8, i8* %0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr i8, i8* %0, i32 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %18, i32 65) #7
  %20 = icmp eq i8* %19, null
  %21 = ptrtoint i8* %19 to i32
  %22 = sub i32 %21, ptrtoint ([65 x i8]* @.str to i32)
  %23 = select i1 %20, i32 0, i32 %22
  store i32 %23, i32* %1, align 4
  br i1 %20, label %30, label %24

24:                                               ; preds = %15
  %25 = getelementptr i8, i8* %0, i32 4
  %26 = tail call fastcc i8* @decode64_uint32(i32* %2, i8* %25)
  %27 = icmp eq i8* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = tail call fastcc i8* @decode64_uint32(i32* %3, i8* nonnull %26)
  br label %30

30:                                               ; preds = %15, %28, %24, %4, %7, %11
  %31 = phi i8* [ null, %11 ], [ null, %7 ], [ null, %4 ], [ null, %15 ], [ null, %24 ], [ %29, %28 ]
  ret i8* %31
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc i8* @decode64_uint32(i32* nocapture %0, i8* readonly %1) unnamed_addr #0 {
  %3 = getelementptr i8, i8* %1, i32 5
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %5, i32 65) #7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr i8, i8* %1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %11, i32 65) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %35, %29, %23, %17, %8, %2
  %15 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %17 ], [ 0, %23 ], [ 0, %29 ], [ %53, %35 ]
  %16 = phi i8* [ null, %2 ], [ null, %8 ], [ null, %17 ], [ null, %23 ], [ null, %29 ], [ %3, %35 ]
  store i32 %15, i32* %0, align 4
  ret i8* %16

17:                                               ; preds = %8
  %18 = getelementptr i8, i8* %1, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %20, i32 65) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %14, label %23

23:                                               ; preds = %17
  %24 = getelementptr i8, i8* %1, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  br i1 %28, label %14, label %29

29:                                               ; preds = %23
  %30 = getelementptr i8, i8* %1, i32 4
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %32, i32 65) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %14, label %35

35:                                               ; preds = %29
  %36 = ptrtoint i8* %27 to i32
  %37 = sub i32 %36, ptrtoint ([65 x i8]* @.str to i32)
  %38 = shl i32 %37, 18
  %39 = ptrtoint i8* %21 to i32
  %40 = sub i32 %39, ptrtoint ([65 x i8]* @.str to i32)
  %41 = shl i32 %40, 12
  %42 = ptrtoint i8* %12 to i32
  %43 = sub i32 %42, ptrtoint ([65 x i8]* @.str to i32)
  %44 = shl i32 %43, 6
  %45 = ptrtoint i8* %6 to i32
  %46 = sub i32 %45, ptrtoint ([65 x i8]* @.str to i32)
  %47 = or i32 %44, %46
  %48 = or i32 %41, %47
  %49 = or i32 %38, %48
  %50 = ptrtoint i8* %33 to i32
  %51 = sub i32 %50, ptrtoint ([65 x i8]* @.str to i32)
  %52 = shl i32 %51, 24
  %53 = or i32 %52, %49
  br label %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define hidden i8* @escrypt_r(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  %12 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  %13 = load i8, i8* %3, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %118

15:                                               ; preds = %6
  %16 = getelementptr i8, i8* %3, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 55
  br i1 %18, label %19, label %118

19:                                               ; preds = %15
  %20 = getelementptr i8, i8* %3, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 36
  br i1 %22, label %23, label %118

23:                                               ; preds = %19
  %24 = getelementptr i8, i8* %3, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  %29 = ptrtoint i8* %27 to i32
  %30 = sub i32 %29, ptrtoint ([65 x i8]* @.str to i32)
  br i1 %28, label %118, label %31

31:                                               ; preds = %23
  %32 = getelementptr i8, i8* %3, i32 4
  %33 = call fastcc i8* @decode64_uint32(i32* nonnull %8, i8* %32) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %118, label %35

35:                                               ; preds = %31
  %36 = call fastcc i8* @decode64_uint32(i32* nonnull %9, i8* nonnull %33) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %118, label %38

38:                                               ; preds = %35
  %39 = zext i32 %30 to i64
  %40 = shl nuw i64 1, %39
  %41 = ptrtoint i8* %36 to i32
  %42 = ptrtoint i8* %3 to i32
  %43 = sub i32 %41, %42
  %44 = tail call i8* @strrchr(i8* nonnull %36, i32 36)
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = ptrtoint i8* %44 to i32
  %48 = sub i32 %47, %41
  br label %51

49:                                               ; preds = %38
  %50 = tail call i32 @strlen(i8* nonnull %36) #8
  br label %51

51:                                               ; preds = %49, %46
  %52 = phi i32 [ %48, %46 ], [ %50, %49 ]
  %53 = add i32 %52, %43
  %54 = add i32 %53, 45
  %55 = icmp ugt i32 %54, %5
  %56 = icmp ult i32 %54, %52
  %57 = or i1 %55, %56
  br i1 %57, label %118, label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %8, align 4
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* nonnull %36, i32 %52, i64 %40, i32 %59, i32 %60, i8* nonnull %10, i32 32) #7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %118

63:                                               ; preds = %58
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* nonnull align 1 %3, i32 %53, i1 false)
  %64 = getelementptr i8, i8* %4, i32 %53
  %65 = getelementptr i8, i8* %64, i32 1
  store i8 36, i8* %64, align 1
  %66 = ptrtoint i8* %65 to i32
  %67 = ptrtoint i8* %4 to i32
  %68 = add i32 %67, %5
  %69 = sub i32 %68, %66
  br label %70

70:                                               ; preds = %104, %63
  %71 = phi i32 [ %69, %63 ], [ %110, %104 ]
  %72 = phi i8* [ %65, %63 ], [ %99, %104 ]
  %73 = phi i32 [ 0, %63 ], [ %79, %104 ]
  %74 = icmp ult i32 %73, 32
  br i1 %74, label %75, label %111

75:                                               ; preds = %70, %75
  %76 = phi i32 [ %79, %75 ], [ %73, %70 ]
  %77 = phi i32 [ %84, %75 ], [ 0, %70 ]
  %78 = phi i32 [ %85, %75 ], [ 0, %70 ]
  %79 = add nuw nsw i32 %76, 1
  %80 = getelementptr [32 x i8], [32 x i8]* %7, i32 0, i32 %76
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, %78
  %84 = or i32 %83, %77
  %85 = add nuw nsw i32 %78, 8
  %86 = icmp ult i32 %78, 16
  %87 = icmp ult i32 %76, 31
  %88 = and i1 %87, %86
  br i1 %88, label %75, label %89

89:                                               ; preds = %75, %95
  %90 = phi i32 [ %102, %95 ], [ 0, %75 ]
  %91 = phi i32 [ %101, %95 ], [ %84, %75 ]
  %92 = phi i32 [ %100, %95 ], [ %71, %75 ]
  %93 = phi i8* [ %99, %95 ], [ %72, %75 ]
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %89
  %96 = and i32 %91, 63
  %97 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr i8, i8* %93, i32 1
  store i8 %98, i8* %93, align 1
  %100 = add i32 %92, -1
  %101 = lshr i32 %91, 6
  %102 = add nuw nsw i32 %90, 6
  %103 = icmp ult i32 %102, %85
  br i1 %103, label %89, label %104

104:                                              ; preds = %95
  %105 = icmp eq i8* %99, null
  %106 = ptrtoint i8* %99 to i32
  %107 = ptrtoint i8* %72 to i32
  %108 = sub i32 %107, %106
  %109 = select i1 %105, i32 0, i32 %108
  %110 = add i32 %109, %71
  br i1 %105, label %111, label %70

111:                                              ; preds = %70, %104, %89
  %112 = phi i8* [ null, %89 ], [ %72, %70 ], [ null, %104 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #7
  %113 = icmp ne i8* %112, null
  %114 = getelementptr i8, i8* %4, i32 %5
  %115 = icmp ult i8* %112, %114
  %116 = and i1 %113, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %111
  store i8 0, i8* %112, align 1
  br label %118

118:                                              ; preds = %31, %23, %6, %15, %19, %111, %58, %51, %35, %117
  %119 = phi i8* [ %4, %117 ], [ null, %35 ], [ null, %51 ], [ null, %58 ], [ null, %111 ], [ null, %19 ], [ null, %15 ], [ null, %6 ], [ null, %23 ], [ null, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  ret i8* %119
}

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i32 @strlen(i8* nocapture %0) local_unnamed_addr #3

declare i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i32 %4, i64 %5, i32 %6, i32 %7, i8* %8, i32 %9) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind
define hidden i8* @escrypt_gensalt_r(i32 %0, i32 %1, i32 %2, i8* nocapture readonly %3, i32 %4, i8* %5, i32 %6) local_unnamed_addr #5 {
  %8 = shl i32 %4, 3
  %9 = or i32 %8, 4
  %10 = udiv i32 %9, 6
  %11 = add nuw nsw i32 %10, 15
  %12 = icmp ugt i32 %11, %6
  %13 = icmp ult i32 %10, %4
  %14 = or i1 %13, %12
  %15 = icmp ugt i32 %0, 63
  %16 = or i1 %15, %14
  br i1 %16, label %92, label %17

17:                                               ; preds = %7
  %18 = zext i32 %1 to i64
  %19 = zext i32 %2 to i64
  %20 = mul nuw i64 %19, %18
  %21 = icmp ugt i64 %20, 1073741823
  br i1 %21, label %92, label %22

22:                                               ; preds = %17
  %23 = getelementptr i8, i8* %5, i32 1
  store i8 36, i8* %5, align 1
  %24 = getelementptr i8, i8* %5, i32 2
  store i8 55, i8* %23, align 1
  %25 = getelementptr i8, i8* %5, i32 3
  store i8 36, i8* %24, align 1
  %26 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %0
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %25, align 1
  %28 = ptrtoint i8* %5 to i32
  br i1 false, label %92, label %29

29:                                               ; preds = %22
  %30 = getelementptr i8, i8* %5, i32 4
  %31 = and i32 %1, 63
  %32 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %31
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %30, align 1
  br i1 false, label %92, label %123

34:                                               ; preds = %142
  %35 = ptrtoint i8* %148 to i32
  %36 = add i32 %28, %6
  %37 = sub i32 %36, %35
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %92, label %39

39:                                               ; preds = %34
  %40 = and i32 %2, 63
  %41 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %40
  %42 = load i8, i8* %41, align 1
  store i8 %42, i8* %148, align 1
  %43 = icmp eq i32 %37, 1
  br i1 %43, label %92, label %94

44:                                               ; preds = %115
  %45 = ptrtoint i8* %121 to i32
  %46 = sub i32 %36, %45
  br label %47

47:                                               ; preds = %81, %44
  %48 = phi i32 [ %46, %44 ], [ %87, %81 ]
  %49 = phi i8* [ %121, %44 ], [ %76, %81 ]
  %50 = phi i32 [ 0, %44 ], [ %56, %81 ]
  %51 = icmp ult i32 %50, %4
  br i1 %51, label %52, label %88

52:                                               ; preds = %47, %52
  %53 = phi i32 [ %56, %52 ], [ %50, %47 ]
  %54 = phi i32 [ %61, %52 ], [ 0, %47 ]
  %55 = phi i32 [ %62, %52 ], [ 0, %47 ]
  %56 = add nuw i32 %53, 1
  %57 = getelementptr i8, i8* %3, i32 %53
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, %55
  %61 = or i32 %60, %54
  %62 = add nuw nsw i32 %55, 8
  %63 = icmp ult i32 %55, 16
  %64 = icmp ult i32 %56, %4
  %65 = and i1 %64, %63
  br i1 %65, label %52, label %66

66:                                               ; preds = %52, %72
  %67 = phi i32 [ %79, %72 ], [ 0, %52 ]
  %68 = phi i32 [ %78, %72 ], [ %61, %52 ]
  %69 = phi i32 [ %77, %72 ], [ %48, %52 ]
  %70 = phi i8* [ %76, %72 ], [ %49, %52 ]
  %71 = icmp eq i32 %69, 0
  br i1 %71, label %92, label %72

72:                                               ; preds = %66
  %73 = and i32 %68, 63
  %74 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %73
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr i8, i8* %70, i32 1
  store i8 %75, i8* %70, align 1
  %77 = add i32 %69, -1
  %78 = lshr i32 %68, 6
  %79 = add nuw nsw i32 %67, 6
  %80 = icmp ult i32 %79, %62
  br i1 %80, label %66, label %81

81:                                               ; preds = %72
  %82 = icmp eq i8* %76, null
  %83 = ptrtoint i8* %76 to i32
  %84 = ptrtoint i8* %49 to i32
  %85 = sub i32 %84, %83
  %86 = select i1 %82, i32 0, i32 %85
  %87 = add i32 %86, %48
  br i1 %82, label %92, label %47

88:                                               ; preds = %47
  %89 = getelementptr i8, i8* %5, i32 %6
  %90 = icmp ult i8* %49, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  store i8 0, i8* %49, align 1
  br label %92

92:                                               ; preds = %81, %66, %22, %29, %123, %129, %135, %34, %39, %94, %101, %108, %88, %115, %142, %17, %7, %91
  %93 = phi i8* [ %5, %91 ], [ null, %7 ], [ null, %17 ], [ null, %142 ], [ null, %115 ], [ null, %88 ], [ null, %108 ], [ null, %101 ], [ null, %94 ], [ null, %39 ], [ null, %34 ], [ null, %135 ], [ null, %129 ], [ null, %123 ], [ null, %29 ], [ null, %22 ], [ null, %66 ], [ null, %81 ]
  ret i8* %93

94:                                               ; preds = %39
  %95 = getelementptr i8, i8* %5, i32 10
  %96 = lshr i32 %2, 6
  %97 = and i32 %96, 63
  %98 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %97
  %99 = load i8, i8* %98, align 1
  store i8 %99, i8* %95, align 1
  %100 = icmp eq i32 %37, 2
  br i1 %100, label %92, label %101

101:                                              ; preds = %94
  %102 = getelementptr i8, i8* %5, i32 11
  %103 = lshr i32 %2, 12
  %104 = and i32 %103, 63
  %105 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %104
  %106 = load i8, i8* %105, align 1
  store i8 %106, i8* %102, align 1
  %107 = icmp eq i32 %37, 3
  br i1 %107, label %92, label %108

108:                                              ; preds = %101
  %109 = getelementptr i8, i8* %5, i32 12
  %110 = lshr i32 %2, 18
  %111 = and i32 %110, 63
  %112 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %111
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %109, align 1
  %114 = icmp eq i32 %37, 4
  br i1 %114, label %92, label %115

115:                                              ; preds = %108
  %116 = getelementptr i8, i8* %5, i32 13
  %117 = lshr i32 %2, 24
  %118 = and i32 %117, 63
  %119 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %118
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr i8, i8* %5, i32 14
  store i8 %120, i8* %116, align 1
  %122 = icmp eq i8* %121, null
  br i1 %122, label %92, label %44

123:                                              ; preds = %29
  %124 = getelementptr i8, i8* %5, i32 5
  %125 = lshr i32 %1, 6
  %126 = and i32 %125, 63
  %127 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %126
  %128 = load i8, i8* %127, align 1
  store i8 %128, i8* %124, align 1
  br i1 false, label %92, label %129

129:                                              ; preds = %123
  %130 = getelementptr i8, i8* %5, i32 6
  %131 = lshr i32 %1, 12
  %132 = and i32 %131, 63
  %133 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %130, align 1
  br i1 false, label %92, label %135

135:                                              ; preds = %129
  %136 = getelementptr i8, i8* %5, i32 7
  %137 = lshr i32 %1, 18
  %138 = and i32 %137, 63
  %139 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %138
  %140 = load i8, i8* %139, align 1
  store i8 %140, i8* %136, align 1
  %141 = icmp eq i32 %6, 8
  br i1 %141, label %92, label %142

142:                                              ; preds = %135
  %143 = getelementptr i8, i8* %5, i32 8
  %144 = lshr i32 %1, 24
  %145 = and i32 %144, 63
  %146 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %145
  %147 = load i8, i8* %146, align 1
  %148 = getelementptr i8, i8* %5, i32 9
  store i8 %147, i8* %143, align 1
  %149 = icmp eq i8* %148, null
  br i1 %149, label %92, label %34
}

; Function Attrs: nounwind
define i32 @crypto_pwhash_scryptsalsa208sha256_ll(i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) local_unnamed_addr #0 {
  %10 = alloca %struct.escrypt_region_t, align 4
  %11 = bitcast %struct.escrypt_region_t* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #7
  %12 = call i32 @escrypt_init_local(%struct.escrypt_region_t* nonnull %10) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* nonnull %10, i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) #7
  %16 = call i32 @escrypt_free_local(%struct.escrypt_region_t* nonnull %10) #7
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %15, i32 -1
  br label %19

19:                                               ; preds = %14, %9
  %20 = phi i32 [ -1, %9 ], [ %18, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #7
  ret i32 %20
}

declare i32 @escrypt_init_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

declare i32 @escrypt_free_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8* %0, i32 %1, i32 %2) local_unnamed_addr #6

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

#########################################################
; exiting Souper's runOnFunction() for escrypt_gensalt_r()
rescanning function after transformation was applied

