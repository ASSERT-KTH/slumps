; entering Souper's runOnFunction() for escrypt_r()

; ModuleID = './crypto_scrypt-common.c.bc'
source_filename = "crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.escrypt_region_t = type { i8*, i8*, i32 }

@.str = private unnamed_addr constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1

; Function Attrs: nounwind
define hidden i8* @escrypt_parse_setting(i8* readonly %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3) local_unnamed_addr #0 {
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 36
  br i1 %6, label %7, label %30

7:                                                ; preds = %4
  %8 = getelementptr i8, i8* %0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 55
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = getelementptr i8, i8* %0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = getelementptr i8, i8* %0, i32 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %18, i32 65) #7
  %20 = icmp eq i8* %19, null
  %21 = ptrtoint i8* %19 to i32
  %22 = sub i32 %21, ptrtoint ([65 x i8]* @.str to i32)
  %23 = select i1 %20, i32 0, i32 %22
  store i32 %23, i32* %1, align 4
  br i1 %20, label %30, label %24

24:                                               ; preds = %15
  %25 = getelementptr i8, i8* %0, i32 4
  %26 = tail call fastcc i8* @decode64_uint32(i32* %2, i8* %25)
  %27 = icmp eq i8* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = tail call fastcc i8* @decode64_uint32(i32* %3, i8* nonnull %26)
  br label %30

30:                                               ; preds = %15, %28, %24, %4, %7, %11
  %31 = phi i8* [ null, %11 ], [ null, %7 ], [ null, %4 ], [ null, %15 ], [ null, %24 ], [ %29, %28 ]
  ret i8* %31
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define internal fastcc i8* @decode64_uint32(i32* nocapture %0, i8* readonly %1) unnamed_addr #0 {
  %3 = getelementptr i8, i8* %1, i32 5
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %5, i32 65) #7
  %7 = icmp eq i8* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr i8, i8* %1, i32 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %11, i32 65) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %35, %29, %23, %17, %8, %2
  %15 = phi i32 [ 0, %2 ], [ 0, %8 ], [ 0, %17 ], [ 0, %23 ], [ 0, %29 ], [ %53, %35 ]
  %16 = phi i8* [ null, %2 ], [ null, %8 ], [ null, %17 ], [ null, %23 ], [ null, %29 ], [ %3, %35 ]
  store i32 %15, i32* %0, align 4
  ret i8* %16

17:                                               ; preds = %8
  %18 = getelementptr i8, i8* %1, i32 2
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %20, i32 65) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %14, label %23

23:                                               ; preds = %17
  %24 = getelementptr i8, i8* %1, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  br i1 %28, label %14, label %29

29:                                               ; preds = %23
  %30 = getelementptr i8, i8* %1, i32 4
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %32, i32 65) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %14, label %35

35:                                               ; preds = %29
  %36 = ptrtoint i8* %27 to i32
  %37 = sub i32 %36, ptrtoint ([65 x i8]* @.str to i32)
  %38 = shl i32 %37, 18
  %39 = ptrtoint i8* %21 to i32
  %40 = sub i32 %39, ptrtoint ([65 x i8]* @.str to i32)
  %41 = shl i32 %40, 12
  %42 = ptrtoint i8* %12 to i32
  %43 = sub i32 %42, ptrtoint ([65 x i8]* @.str to i32)
  %44 = shl i32 %43, 6
  %45 = ptrtoint i8* %6 to i32
  %46 = sub i32 %45, ptrtoint ([65 x i8]* @.str to i32)
  %47 = or i32 %44, %46
  %48 = or i32 %41, %47
  %49 = or i32 %38, %48
  %50 = ptrtoint i8* %33 to i32
  %51 = sub i32 %50, ptrtoint ([65 x i8]* @.str to i32)
  %52 = shl i32 %51, 24
  %53 = or i32 %52, %49
  br label %14
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #1

; Function Attrs: nounwind
define hidden i8* @escrypt_r(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [32 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #7
  %11 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  %12 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  %13 = load i8, i8* %3, align 1
  %14 = icmp eq i8 %13, 36
  br i1 %14, label %15, label %118

15:                                               ; preds = %6
  %16 = getelementptr i8, i8* %3, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 55
  br i1 %18, label %19, label %118

19:                                               ; preds = %15
  %20 = getelementptr i8, i8* %3, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 36
  br i1 %22, label %23, label %118

23:                                               ; preds = %19
  %24 = getelementptr i8, i8* %3, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = tail call i8* @memchr(i8* nonnull dereferenceable(65) getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), i32 %26, i32 65) #7
  %28 = icmp eq i8* %27, null
  %29 = ptrtoint i8* %27 to i32
  %30 = sub i32 %29, ptrtoint ([65 x i8]* @.str to i32)
  br i1 %28, label %118, label %31

31:                                               ; preds = %23
  %32 = getelementptr i8, i8* %3, i32 4
  %33 = call fastcc i8* @decode64_uint32(i32* nonnull %8, i8* %32) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %118, label %35

35:                                               ; preds = %31
  %36 = call fastcc i8* @decode64_uint32(i32* nonnull %9, i8* nonnull %33) #7
  %37 = icmp eq i8* %36, null
  br i1 %37, label %118, label %38

38:                                               ; preds = %35
  %39 = zext i32 %30 to i64
  %40 = shl nuw i64 1, %39
  %41 = ptrtoint i8* %36 to i32
  %42 = ptrtoint i8* %3 to i32
  %43 = sub i32 %41, %42
  %44 = tail call i8* @strrchr(i8* nonnull %36, i32 36)
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %38
  %47 = ptrtoint i8* %44 to i32
  %48 = sub i32 %47, %41
  br label %51

49:                                               ; preds = %38
  %50 = tail call i32 @strlen(i8* nonnull %36) #8
  br label %51

51:                                               ; preds = %49, %46
  %52 = phi i32 [ %48, %46 ], [ %50, %49 ]
  %53 = add i32 %52, %43
  %54 = add i32 %53, 45
  %55 = icmp ugt i32 %54, %5
  %56 = icmp ult i32 %54, %52
  %57 = or i1 %55, %56
  br i1 %57, label %118, label %58

58:                                               ; preds = %51
  %59 = load i32, i32* %8, align 4
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* nonnull %36, i32 %52, i64 %40, i32 %59, i32 %60, i8* nonnull %10, i32 32) #7
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %118

63:                                               ; preds = %58
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %4, i8* nonnull align 1 %3, i32 %53, i1 false)
  %64 = getelementptr i8, i8* %4, i32 %53
  %65 = getelementptr i8, i8* %64, i32 1
  store i8 36, i8* %64, align 1
  %66 = ptrtoint i8* %65 to i32
  %67 = ptrtoint i8* %4 to i32
  %68 = add i32 %67, %5
  %69 = sub i32 %68, %66
  br label %70

70:                                               ; preds = %104, %63
  %71 = phi i32 [ %69, %63 ], [ %110, %104 ]
  %72 = phi i8* [ %65, %63 ], [ %99, %104 ]
  %73 = phi i32 [ 0, %63 ], [ %79, %104 ]
  %74 = icmp ult i32 %73, 32
  br i1 %74, label %75, label %111

75:                                               ; preds = %70, %75
  %76 = phi i32 [ %79, %75 ], [ %73, %70 ]
  %77 = phi i32 [ %84, %75 ], [ 0, %70 ]
  %78 = phi i32 [ %85, %75 ], [ 0, %70 ]
  %79 = add nuw nsw i32 %76, 1
  %80 = getelementptr [32 x i8], [32 x i8]* %7, i32 0, i32 %76
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = shl nuw nsw i32 %82, %78
  %84 = or i32 %83, %77
  %85 = add nuw nsw i32 %78, 8
  %86 = icmp ult i32 %78, 16
  %87 = icmp ult i32 %76, 31
  %88 = and i1 %87, %86
  br i1 %88, label %75, label %89

89:                                               ; preds = %75, %95
  %90 = phi i32 [ %102, %95 ], [ 0, %75 ]
  %91 = phi i32 [ %101, %95 ], [ %84, %75 ]
  %92 = phi i32 [ %100, %95 ], [ %71, %75 ]
  %93 = phi i8* [ %99, %95 ], [ %72, %75 ]
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %111, label %95

95:                                               ; preds = %89
  %96 = and i32 %91, 63
  %97 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr i8, i8* %93, i32 1
  store i8 %98, i8* %93, align 1
  %100 = add i32 %92, -1
  %101 = lshr i32 %91, 6
  %102 = add nuw nsw i32 %90, 6
  %103 = icmp ult i32 %102, %85
  br i1 %103, label %89, label %104

104:                                              ; preds = %95
  %105 = icmp eq i8* %99, null
  %106 = ptrtoint i8* %99 to i32
  %107 = ptrtoint i8* %72 to i32
  %108 = sub i32 %107, %106
  %109 = select i1 %105, i32 0, i32 %108
  %110 = add i32 %109, %71
  br i1 %105, label %111, label %70

111:                                              ; preds = %70, %104, %89
  %112 = phi i8* [ null, %89 ], [ %72, %70 ], [ null, %104 ]
  call void @sodium_memzero(i8* nonnull %10, i32 32) #7
  %113 = icmp ne i8* %112, null
  %114 = getelementptr i8, i8* %4, i32 %5
  %115 = icmp ult i8* %112, %114
  %116 = and i1 %113, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %111
  store i8 0, i8* %112, align 1
  br label %118

118:                                              ; preds = %31, %23, %6, %15, %19, %111, %58, %51, %35, %117
  %119 = phi i8* [ %4, %117 ], [ null, %35 ], [ null, %51 ], [ null, %58 ], [ null, %111 ], [ null, %19 ], [ null, %15 ], [ null, %6 ], [ null, %23 ], [ null, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #7
  ret i8* %119
}

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8* %0, i32 %1) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i32 @strlen(i8* nocapture %0) local_unnamed_addr #3

declare i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* %3, i32 %4, i64 %5, i32 %6, i32 %7, i8* %8, i32 %9) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @sodium_memzero(i8* %0, i32 %1) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind
define hidden i8* @escrypt_gensalt_r(i32 %0, i32 %1, i32 %2, i8* nocapture readonly %3, i32 %4, i8* %5, i32 %6) local_unnamed_addr #5 {
  %8 = shl i32 %4, 3
  %9 = or i32 %8, 4
  %10 = udiv i32 %9, 6
  %11 = add nuw nsw i32 %10, 15
  %12 = icmp ugt i32 %11, %6
  %13 = icmp ult i32 %10, %4
  %14 = or i1 %13, %12
  %15 = icmp ugt i32 %0, 63
  %16 = or i1 %15, %14
  br i1 %16, label %94, label %17

17:                                               ; preds = %7
  %18 = zext i32 %1 to i64
  %19 = zext i32 %2 to i64
  %20 = mul nuw i64 %19, %18
  %21 = icmp ugt i64 %20, 1073741823
  br i1 %21, label %94, label %22

22:                                               ; preds = %17
  %23 = getelementptr i8, i8* %5, i32 1
  store i8 36, i8* %5, align 1
  %24 = getelementptr i8, i8* %5, i32 2
  store i8 55, i8* %23, align 1
  %25 = getelementptr i8, i8* %5, i32 3
  store i8 36, i8* %24, align 1
  %26 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %0
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %25, align 1
  %28 = ptrtoint i8* %5 to i32
  %29 = icmp eq i32 %6, 4
  br i1 %29, label %94, label %30

30:                                               ; preds = %22
  %31 = getelementptr i8, i8* %5, i32 4
  %32 = and i32 %1, 63
  %33 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %32
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %31, align 1
  %35 = icmp eq i32 %6, 5
  br i1 %35, label %94, label %125

36:                                               ; preds = %146
  %37 = ptrtoint i8* %152 to i32
  %38 = add i32 %28, %6
  %39 = sub i32 %38, %37
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %94, label %41

41:                                               ; preds = %36
  %42 = and i32 %2, 63
  %43 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %42
  %44 = load i8, i8* %43, align 1
  store i8 %44, i8* %152, align 1
  %45 = icmp eq i32 %39, 1
  br i1 %45, label %94, label %96

46:                                               ; preds = %117
  %47 = ptrtoint i8* %123 to i32
  %48 = sub i32 %38, %47
  br label %49

49:                                               ; preds = %83, %46
  %50 = phi i32 [ %48, %46 ], [ %89, %83 ]
  %51 = phi i8* [ %123, %46 ], [ %78, %83 ]
  %52 = phi i32 [ 0, %46 ], [ %58, %83 ]
  %53 = icmp ult i32 %52, %4
  br i1 %53, label %54, label %90

54:                                               ; preds = %49, %54
  %55 = phi i32 [ %58, %54 ], [ %52, %49 ]
  %56 = phi i32 [ %63, %54 ], [ 0, %49 ]
  %57 = phi i32 [ %64, %54 ], [ 0, %49 ]
  %58 = add nuw i32 %55, 1
  %59 = getelementptr i8, i8* %3, i32 %55
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, %57
  %63 = or i32 %62, %56
  %64 = add nuw nsw i32 %57, 8
  %65 = icmp ult i32 %57, 16
  %66 = icmp ult i32 %58, %4
  %67 = and i1 %66, %65
  br i1 %67, label %54, label %68

68:                                               ; preds = %54, %74
  %69 = phi i32 [ %81, %74 ], [ 0, %54 ]
  %70 = phi i32 [ %80, %74 ], [ %63, %54 ]
  %71 = phi i32 [ %79, %74 ], [ %50, %54 ]
  %72 = phi i8* [ %78, %74 ], [ %51, %54 ]
  %73 = icmp eq i32 %71, 0
  br i1 %73, label %94, label %74

74:                                               ; preds = %68
  %75 = and i32 %70, 63
  %76 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %75
  %77 = load i8, i8* %76, align 1
  %78 = getelementptr i8, i8* %72, i32 1
  store i8 %77, i8* %72, align 1
  %79 = add i32 %71, -1
  %80 = lshr i32 %70, 6
  %81 = add nuw nsw i32 %69, 6
  %82 = icmp ult i32 %81, %64
  br i1 %82, label %68, label %83

83:                                               ; preds = %74
  %84 = icmp eq i8* %78, null
  %85 = ptrtoint i8* %78 to i32
  %86 = ptrtoint i8* %51 to i32
  %87 = sub i32 %86, %85
  %88 = select i1 %84, i32 0, i32 %87
  %89 = add i32 %88, %50
  br i1 %84, label %94, label %49

90:                                               ; preds = %49
  %91 = getelementptr i8, i8* %5, i32 %6
  %92 = icmp ult i8* %51, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %90
  store i8 0, i8* %51, align 1
  br label %94

94:                                               ; preds = %83, %68, %22, %30, %125, %132, %139, %36, %41, %96, %103, %110, %90, %117, %146, %17, %7, %93
  %95 = phi i8* [ %5, %93 ], [ null, %7 ], [ null, %17 ], [ null, %146 ], [ null, %117 ], [ null, %90 ], [ null, %110 ], [ null, %103 ], [ null, %96 ], [ null, %41 ], [ null, %36 ], [ null, %139 ], [ null, %132 ], [ null, %125 ], [ null, %30 ], [ null, %22 ], [ null, %68 ], [ null, %83 ]
  ret i8* %95

96:                                               ; preds = %41
  %97 = getelementptr i8, i8* %5, i32 10
  %98 = lshr i32 %2, 6
  %99 = and i32 %98, 63
  %100 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %99
  %101 = load i8, i8* %100, align 1
  store i8 %101, i8* %97, align 1
  %102 = icmp eq i32 %39, 2
  br i1 %102, label %94, label %103

103:                                              ; preds = %96
  %104 = getelementptr i8, i8* %5, i32 11
  %105 = lshr i32 %2, 12
  %106 = and i32 %105, 63
  %107 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %106
  %108 = load i8, i8* %107, align 1
  store i8 %108, i8* %104, align 1
  %109 = icmp eq i32 %39, 3
  br i1 %109, label %94, label %110

110:                                              ; preds = %103
  %111 = getelementptr i8, i8* %5, i32 12
  %112 = lshr i32 %2, 18
  %113 = and i32 %112, 63
  %114 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %113
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %111, align 1
  %116 = icmp eq i32 %39, 4
  br i1 %116, label %94, label %117

117:                                              ; preds = %110
  %118 = getelementptr i8, i8* %5, i32 13
  %119 = lshr i32 %2, 24
  %120 = and i32 %119, 63
  %121 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %120
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr i8, i8* %5, i32 14
  store i8 %122, i8* %118, align 1
  %124 = icmp eq i8* %123, null
  br i1 %124, label %94, label %46

125:                                              ; preds = %30
  %126 = getelementptr i8, i8* %5, i32 5
  %127 = lshr i32 %1, 6
  %128 = and i32 %127, 63
  %129 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %128
  %130 = load i8, i8* %129, align 1
  store i8 %130, i8* %126, align 1
  %131 = icmp eq i32 %6, 6
  br i1 %131, label %94, label %132

132:                                              ; preds = %125
  %133 = getelementptr i8, i8* %5, i32 6
  %134 = lshr i32 %1, 12
  %135 = and i32 %134, 63
  %136 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %135
  %137 = load i8, i8* %136, align 1
  store i8 %137, i8* %133, align 1
  %138 = icmp eq i32 %6, 7
  br i1 %138, label %94, label %139

139:                                              ; preds = %132
  %140 = getelementptr i8, i8* %5, i32 7
  %141 = lshr i32 %1, 18
  %142 = and i32 %141, 63
  %143 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %142
  %144 = load i8, i8* %143, align 1
  store i8 %144, i8* %140, align 1
  %145 = icmp eq i32 %6, 8
  br i1 %145, label %94, label %146

146:                                              ; preds = %139
  %147 = getelementptr i8, i8* %5, i32 8
  %148 = lshr i32 %1, 24
  %149 = and i32 %148, 63
  %150 = getelementptr [65 x i8], [65 x i8]* @.str, i32 0, i32 %149
  %151 = load i8, i8* %150, align 1
  %152 = getelementptr i8, i8* %5, i32 9
  store i8 %151, i8* %147, align 1
  %153 = icmp eq i8* %152, null
  br i1 %153, label %94, label %36
}

; Function Attrs: nounwind
define i32 @crypto_pwhash_scryptsalsa208sha256_ll(i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) local_unnamed_addr #0 {
  %10 = alloca %struct.escrypt_region_t, align 4
  %11 = bitcast %struct.escrypt_region_t* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %11) #7
  %12 = call i32 @escrypt_init_local(%struct.escrypt_region_t* nonnull %10) #7
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* nonnull %10, i8* nonnull %0, i32 %1, i8* nonnull %2, i32 %3, i64 %4, i32 %5, i32 %6, i8* nonnull %7, i32 %8) #7
  %16 = call i32 @escrypt_free_local(%struct.escrypt_region_t* nonnull %10) #7
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 %15, i32 -1
  br label %19

19:                                               ; preds = %14, %9
  %20 = phi i32 [ -1, %9 ], [ %18, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %11) #7
  ret i32 %20
}

declare i32 @escrypt_init_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

declare i32 @escrypt_free_local(%struct.escrypt_region_t* %0) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8* %0, i32 %1, i32 %2) local_unnamed_addr #6

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = icmp eq i8 %13, 36
; Looking for a replacement for:
%0:i8 = var
%1:i1 = eq 36:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = icmp eq i8 %17, 55
; Looking for a replacement for:
%0:i8 = var
%1:i1 = eq 55:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %20, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = icmp eq i8 %21, 36
; Looking for a replacement for:
%0:i8 = var
%1:i1 = eq 36:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %24, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = zext i8 %25 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %28 = icmp eq i8* %27, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = ptrtoint i8* %27 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = sub i32 %29, ptrtoint ([65 x i8]* @.str to i32)
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = icmp eq i8* %33, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = icmp eq i8* %36, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = zext i32 %30 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var (nonZero)
%3:i32 = sub %0, %2
%4:i64 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %40 = shl nuw i64 1, %39
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var (nonZero)
%3:i32 = sub %0, %2
%4:i64 = zext %3
%5:i64 = shlnuw 1:i64, %4
infer %5

; *****
; For LLVM instruction:
;  %41 = ptrtoint i8* %36 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0

; *****
; For LLVM instruction:
;  %42 = ptrtoint i8* %3 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = sub i32 %41, %42
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var
%3:i32 = sub %0, %2
infer %3

; *****
; For LLVM instruction:
;  %45 = icmp eq i8* %44, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = ptrtoint i8* %44 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
infer %0

; *****
; For LLVM instruction:
;  %48 = sub i32 %47, %41
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var
%3:i1 = eq 0:i32, %2
pc %3 0:i1
%4:i32 = sub %2, %0
infer %4

; *****
; For LLVM instruction:
;  %50 = tail call i32 @strlen(i8* nonnull %36) #8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = phi i32 [ %48, %46 ], [ %50, %49 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5

; *****
; For LLVM instruction:
;  %53 = add i32 %52, %43
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7
infer %8

; *****
; For LLVM instruction:
;  %54 = add i32 %53, 45
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7 (hasExternalUses)
%9:i32 = add 45:i32, %8
infer %9

; *****
; For LLVM instruction:
;  %55 = icmp ugt i32 %54, %5
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9 (hasExternalUses)
%11:i1 = ult %0, %10
infer %11

; *****
; For LLVM instruction:
;  %56 = icmp ult i32 %54, %52
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7 (hasExternalUses)
%9:i32 = add 45:i32, %8 (hasExternalUses)
%10:i1 = ult %9, %5
infer %10

; *****
; For LLVM instruction:
;  %57 = or i1 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
infer %13

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = call i32 @escrypt_kdf_nosse(%struct.escrypt_region_t* %0, i8* %1, i32 %2, i8* nonnull %36, i32 %52, i64 %40, i32 %59, i32 %60, i8* nonnull %10, i32 32) #7
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = icmp eq i32 %61, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = ptrtoint i8* %65 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = ptrtoint i8* %4 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = add i32 %67, %5
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
infer %15

; *****
; For LLVM instruction:
;  %69 = sub i32 %68, %66
; Looking for a replacement for:
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
%16:i32 = var
%17:i32 = sub %15, %16
infer %17

; *****
; For LLVM instruction:
;  %71 = phi i32 [ %69, %63 ], [ %110, %104 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = phi i32 [ 0, %63 ], [ %79, %104 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = icmp ult i32 %73, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %76 = phi i32 [ %79, %75 ], [ %73, %70 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = phi i32 [ %84, %75 ], [ 0, %70 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = phi i32 [ %85, %75 ], [ 0, %70 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
infer %0

; *****
; For LLVM instruction:
;  %79 = add nuw nsw i32 %76, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = load i8, i8* %80, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = zext i8 %81 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %83 = shl nuw nsw i32 %82, %78
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = shlnw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %84 = or i32 %83, %77
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%4:i32 = shlnw %2, %3
%5:i32 = or %0, %4
infer %5

; *****
; For LLVM instruction:
;  %85 = add nuw nsw i32 %78, 8
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i32 = addnw 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = icmp ult i32 %78, 16
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i1 = ult %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %87 = icmp ult i32 %76, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 31:i32
infer %1

; *****
; For LLVM instruction:
;  %88 = and i1 %87, %86
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 31:i32
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i1 = ult %2, 16:i32
%4:i1 = and %1, %3
infer %4

; *****
; For LLVM instruction:
;  %90 = phi i32 [ %102, %95 ], [ 0, %75 ]
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
infer %0

; *****
; For LLVM instruction:
;  %91 = phi i32 [ %101, %95 ], [ %84, %75 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %92 = phi i32 [ %100, %95 ], [ %71, %75 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = icmp eq i32 %92, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %96 = and i32 %91, 63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 63:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %98 = load i8, i8* %97, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = add i32 %92, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = add 4294967295:i32, %0
infer %2

; *****
; For LLVM instruction:
;  %101 = lshr i32 %91, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %102 = add nuw nsw i32 %90, 6
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %103 = icmp ult i32 %102, %85
; Looking for a replacement for:
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0 (hasExternalUses)
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = addnw 8:i32, %2 (hasExternalUses)
%4:i1 = ult %1, %3
infer %4

; *****
; For LLVM instruction:
;  %105 = icmp eq i8* %99, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %106 = ptrtoint i8* %99 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %107 = ptrtoint i8* %72 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %108 = sub i32 %107, %106
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %109 = select i1 %105, i32 0, i32 %108
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = sub %2, %0
%4:i32 = select %1, 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %110 = add i32 %109, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq 0:i32, %1 (hasExternalUses)
%3:i32 = var
%4:i32 = sub %3, %1
%5:i32 = select %2, 0:i32, %4
%6:i32 = add %0, %5
infer %6

; *****
; For LLVM instruction:
;  %113 = icmp ne i8* %112, null
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %115 = icmp ult i8* %112, %114
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i32 = var
%4:i1 = ult %2, %3
infer %4

; *****
; For LLVM instruction:
;  %116 = and i1 %113, %115
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i1 = ne 0:i32, %2
%4:i32 = var
%5:i1 = ult %2, %4
%6:i1 = and %3, %5
infer %6
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var (nonZero)
%3:i32 = sub %0, %2
%4:i64 = zext %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var (nonZero)
%3:i32 = sub %0, %2
%4:i64 = zext %3
%5:i64 = shlnuw 1:i64, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967296
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var (nonZero)
%2:i32 = sub %0, %1
%3:i64 = zext %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var
%3:i32 = sub %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = var
%3:i1 = eq 0:i32, %2
pc %3 0:i1
%4:i32 = sub %2, %0
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4194305
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7 (hasExternalUses)
%9:i32 = add 45:i32, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 45
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 46
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9 (hasExternalUses)
%11:i1 = ult %0, %10
infer %11


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = sub %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
%6:i32 = var
%7:i32 = sub %2, %6
%8:i32 = add %5, %7 (hasExternalUses)
%9:i32 = add 45:i32, %8 (hasExternalUses)
%10:i1 = ult %9, %5
infer %10


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
infer %13


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 513
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = sub %2, %3
%5:i32 = var
%6:i32 = phi %1, %4, %5
%7:i32 = var
%8:i32 = sub %3, %7
%9:i32 = add %6, %8 (hasExternalUses)
%10:i32 = add 45:i32, %9
%11:i1 = ult %0, %10
%12:i1 = ult %10, %6
%13:i1 = or %11, %12
pc %13 0:i1
%14:i32 = var
%15:i32 = add %0, %14
%16:i32 = var
%17:i32 = sub %15, %16
infer %17


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 513
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 32:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870913
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = shlnw %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%4:i32 = shlnw %2, %3
%5:i32 = or %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = zext %0
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = shlnw %1, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i32 = addnw 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i1 = ult %0, 16:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 31:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 31:i32
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i1 = ult %2, 16:i32
%4:i1 = and %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%1:i1 = ult %0, 16:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ult %0, 31:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 63:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
pc %1 0:i1
%2:i32 = add 4294967295:i32, %0
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134742015
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0) (nonNegative) (range=[0,19))
%1:i32 = addnw 6:i32, %0 (hasExternalUses)
%2:i32 = var (knownBits=0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonNegative) (range=[0,17))
%3:i32 = addnw 8:i32, %2 (hasExternalUses)
%4:i1 = ult %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i32 = sub %2, %0
%4:i32 = select %1, 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq 0:i32, %1 (hasExternalUses)
%3:i32 = var
%4:i32 = sub %3, %1
%5:i32 = select %2, 0:i32, %4
%6:i32 = add %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i32 = var
%4:i1 = ult %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i1 = ne 0:i32, %2
%4:i32 = var
%5:i1 = ult %2, %4
%6:i1 = and %3, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i1 = ne 0:i32, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0 = block 3
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1, 0:i32
%3:i32 = var
%4:i1 = ult %2, %3

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for escrypt_r()

