; entering Souper's runOnFunction() for crypto_generichash_blake2b()

; ModuleID = './generichash_blake2b.c.bc'
source_filename = "crypto_generichash/blake2b/ref/generichash_blake2b.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.crypto_generichash_blake2b_state = type { [384 x i8] }
%struct.blake2b_state = type <{ [8 x i64], [2 x i64], [2 x i64], [256 x i8], i32, i8 }>

@.str = private unnamed_addr constant [20 x i8] c"outlen <= UINT8_MAX\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"crypto_generichash/blake2b/ref/generichash_blake2b.c\00", align 1
@__func__.crypto_generichash_blake2b_final = private unnamed_addr constant [33 x i8] c"crypto_generichash_blake2b_final\00", align 1

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b(i8* nonnull %0, i32 %1, i8* %2, i64 %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = add i32 %1, -1
  %8 = icmp ugt i32 %7, 63
  %9 = icmp ugt i32 %5, 64
  %10 = or i1 %8, %9
  br i1 %10, label %15, label %11

11:                                               ; preds = %6
  %12 = trunc i32 %1 to i8
  %13 = trunc i32 %5 to i8
  %14 = tail call i32 @blake2b(i8* nonnull %0, i8* %2, i8* %4, i8 zeroext %12, i64 %3, i8 zeroext %13) #3
  br label %15

15:                                               ; preds = %6, %11
  %16 = phi i32 [ %14, %11 ], [ -1, %6 ]
  ret i32 %16
}

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) local_unnamed_addr #1

declare i32 @blake2b(i8* %0, i8* %1, i8* %2, i8 zeroext %3, i64 %4, i8 zeroext %5) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b_salt_personal(i8* nonnull %0, i32 %1, i8* %2, i64 %3, i8* %4, i32 %5, i8* %6, i8* %7) local_unnamed_addr #0 {
  %9 = add i32 %1, -1
  %10 = icmp ugt i32 %9, 63
  %11 = icmp ugt i32 %5, 64
  %12 = or i1 %10, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %8
  %14 = trunc i32 %1 to i8
  %15 = trunc i32 %5 to i8
  %16 = tail call i32 @blake2b_salt_personal(i8* nonnull %0, i8* %2, i8* %4, i8 zeroext %14, i64 %3, i8 zeroext %15, i8* %6, i8* %7) #3
  br label %17

17:                                               ; preds = %8, %13
  %18 = phi i32 [ %16, %13 ], [ -1, %8 ]
  ret i32 %18
}

declare i32 @blake2b_salt_personal(i8* %0, i8* %1, i8* %2, i8 zeroext %3, i64 %4, i8 zeroext %5, i8* %6, i8* %7) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b_init(%struct.crypto_generichash_blake2b_state* nonnull %0, i8* %1, i32 %2, i32 %3) local_unnamed_addr #0 {
  %5 = add i32 %3, -1
  %6 = icmp ugt i32 %5, 63
  %7 = icmp ugt i32 %2, 64
  %8 = or i1 %7, %6
  br i1 %8, label %23, label %9

9:                                                ; preds = %4
  %10 = icmp eq i8* %1, null
  %11 = icmp eq i32 %2, 0
  %12 = or i1 %10, %11
  %13 = bitcast %struct.crypto_generichash_blake2b_state* %0 to %struct.blake2b_state*
  %14 = trunc i32 %3 to i8
  br i1 %12, label %15, label %18

15:                                               ; preds = %9
  %16 = tail call i32 @blake2b_init(%struct.blake2b_state* nonnull %13, i8 zeroext %14) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %22, label %23

18:                                               ; preds = %9
  %19 = trunc i32 %2 to i8
  %20 = tail call i32 @blake2b_init_key(%struct.blake2b_state* nonnull %13, i8 zeroext %14, i8* nonnull %1, i8 zeroext %19) #3
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %15, %18
  br label %23

23:                                               ; preds = %18, %15, %4, %22
  %24 = phi i32 [ 0, %22 ], [ -1, %4 ], [ -1, %15 ], [ -1, %18 ]
  ret i32 %24
}

declare i32 @blake2b_init(%struct.blake2b_state* %0, i8 zeroext %1) local_unnamed_addr #2

declare i32 @blake2b_init_key(%struct.blake2b_state* %0, i8 zeroext %1, i8* %2, i8 zeroext %3) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b_init_salt_personal(%struct.crypto_generichash_blake2b_state* nonnull %0, i8* %1, i32 %2, i32 %3, i8* %4, i8* %5) local_unnamed_addr #0 {
  %7 = add i32 %3, -1
  %8 = icmp ugt i32 %7, 63
  %9 = icmp ugt i32 %2, 64
  %10 = or i1 %9, %8
  br i1 %10, label %25, label %11

11:                                               ; preds = %6
  %12 = icmp eq i8* %1, null
  %13 = icmp eq i32 %2, 0
  %14 = or i1 %12, %13
  %15 = bitcast %struct.crypto_generichash_blake2b_state* %0 to %struct.blake2b_state*
  %16 = trunc i32 %3 to i8
  br i1 %14, label %17, label %20

17:                                               ; preds = %11
  %18 = tail call i32 @blake2b_init_salt_personal(%struct.blake2b_state* nonnull %15, i8 zeroext %16, i8* %4, i8* %5) #3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %24, label %25

20:                                               ; preds = %11
  %21 = trunc i32 %2 to i8
  %22 = tail call i32 @blake2b_init_key_salt_personal(%struct.blake2b_state* nonnull %15, i8 zeroext %16, i8* nonnull %1, i8 zeroext %21, i8* %4, i8* %5) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %17, %20
  br label %25

25:                                               ; preds = %20, %17, %6, %24
  %26 = phi i32 [ 0, %24 ], [ -1, %6 ], [ -1, %17 ], [ -1, %20 ]
  ret i32 %26
}

declare i32 @blake2b_init_salt_personal(%struct.blake2b_state* %0, i8 zeroext %1, i8* %2, i8* %3) local_unnamed_addr #2

declare i32 @blake2b_init_key_salt_personal(%struct.blake2b_state* %0, i8 zeroext %1, i8* %2, i8 zeroext %3, i8* %4, i8* %5) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b_update(%struct.crypto_generichash_blake2b_state* nonnull %0, i8* %1, i64 %2) local_unnamed_addr #0 {
  %4 = bitcast %struct.crypto_generichash_blake2b_state* %0 to %struct.blake2b_state*
  %5 = tail call i32 @blake2b_update(%struct.blake2b_state* nonnull %4, i8* %1, i64 %2) #3
  ret i32 %5
}

declare i32 @blake2b_update(%struct.blake2b_state* %0, i8* %1, i64 %2) local_unnamed_addr #2

; Function Attrs: nounwind
define i32 @crypto_generichash_blake2b_final(%struct.crypto_generichash_blake2b_state* nonnull %0, i8* nonnull %1, i32 %2) local_unnamed_addr #0 {
  %4 = icmp ult i32 %2, 256
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i32 0, i32 0), i32 107, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__func__.crypto_generichash_blake2b_final, i32 0, i32 0)) #4
  unreachable

6:                                                ; preds = %3
  %7 = bitcast %struct.crypto_generichash_blake2b_state* %0 to %struct.blake2b_state*
  %8 = trunc i32 %2 to i8
  %9 = tail call i32 @blake2b_final(%struct.blake2b_state* nonnull %7, i8* nonnull %1, i8 zeroext %8) #3
  ret i32 %9
}

declare i32 @blake2b_final(%struct.blake2b_state* %0, i8* %1, i8 zeroext %2) local_unnamed_addr #2

; Function Attrs: nounwind
define hidden i32 @_crypto_generichash_blake2b_pick_best_implementation() local_unnamed_addr #0 {
  %1 = tail call i32 @blake2b_pick_best_implementation() #3
  ret i32 %1
}

declare i32 @blake2b_pick_best_implementation() local_unnamed_addr #2

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %7 = add i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = icmp ugt i32 %7, 63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = icmp ugt i32 %5, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 64:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = or i1 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
infer %5

; *****
; For LLVM instruction:
;  %12 = trunc i32 %1 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
pc %5 0:i1
%6:i8 = trunc %0
infer %6

; *****
; For LLVM instruction:
;  %13 = trunc i32 %5 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
pc %5 0:i1
%6:i8 = trunc %3
infer %6

; *****
; For LLVM instruction:
;  %14 = tail call i32 @blake2b(i8* nonnull %0, i8* %2, i8* %4, i8 zeroext %12, i64 %3, i8 zeroext %13) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = phi i32 [ %14, %11 ], [ -1, %6 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 4294967295:i32
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 64:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ult 64:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
pc %5 0:i1
%6:i8 = trunc %0
infer %6


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
%2:i1 = ult 63:i32, %1
%3:i32 = var
%4:i1 = ult 64:i32, %3
%5:i1 = or %2, %4
pc %5 0:i1
%6:i8 = trunc %3
infer %6


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 4294967295:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for crypto_generichash_blake2b()

