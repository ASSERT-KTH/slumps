; entering Souper's runOnFunction() for crypto_scalarmult_ed25519_scalarbytes()

; ModuleID = './scalarmult_ed25519_ref10.c.bc'
source_filename = "crypto_scalarmult/ed25519/ref10/scalarmult_ed25519_ref10.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ge25519_p3 = type { [10 x i32], [10 x i32], [10 x i32], [10 x i32] }

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 1)
  ret i32 %4
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519(i8* %0, i8* %1, i8* %2, i32 %3) unnamed_addr #0 {
  %5 = alloca %struct.ge25519_p3, align 4
  %6 = alloca %struct.ge25519_p3, align 4
  %7 = bitcast %struct.ge25519_p3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %7) #4
  %8 = bitcast %struct.ge25519_p3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #4
  %9 = tail call i32 @ge25519_is_canonical(i8* %2) #4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %145, label %11

11:                                               ; preds = %4
  %12 = tail call i32 @ge25519_has_small_order(i8* %2) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %145

14:                                               ; preds = %11
  %15 = call i32 @ge25519_frombytes(%struct.ge25519_p3* nonnull %6, i8* %2) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %145

17:                                               ; preds = %14
  %18 = call i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* nonnull %6) #4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %145, label %20

20:                                               ; preds = %17, %20
  %21 = phi i32 [ %25, %20 ], [ 0, %17 ]
  %22 = getelementptr i8, i8* %1, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr i8, i8* %0, i32 %21
  store i8 %23, i8* %24, align 1
  %25 = add nuw nsw i32 %21, 1
  %26 = icmp eq i32 %25, 32
  br i1 %26, label %27, label %20

27:                                               ; preds = %20
  %28 = icmp eq i32 %3, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr i8, i8* %0, i32 31
  %31 = load i8, i8* %30, align 1
  br label %38

32:                                               ; preds = %27
  %33 = load i8, i8* %0, align 1
  %34 = and i8 %33, -8
  store i8 %34, i8* %0, align 1
  %35 = getelementptr i8, i8* %0, i32 31
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 64
  store i8 %37, i8* %35, align 1
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i8 [ %31, %29 ], [ %37, %32 ]
  %40 = getelementptr i8, i8* %0, i32 31
  %41 = and i8 %39, 127
  store i8 %41, i8* %40, align 1
  call void @ge25519_scalarmult(%struct.ge25519_p3* nonnull %5, i8* nonnull %0, %struct.ge25519_p3* nonnull %6) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %5) #4
  %42 = load i8, i8* %0, align 1
  %43 = xor i8 %42, 1
  %44 = getelementptr i8, i8* %0, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = or i8 %45, %43
  %47 = getelementptr i8, i8* %0, i32 2
  %48 = load i8, i8* %47, align 1
  %49 = or i8 %46, %48
  %50 = getelementptr i8, i8* %0, i32 3
  %51 = load i8, i8* %50, align 1
  %52 = or i8 %49, %51
  %53 = getelementptr i8, i8* %0, i32 4
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  %56 = getelementptr i8, i8* %0, i32 5
  %57 = load i8, i8* %56, align 1
  %58 = or i8 %55, %57
  %59 = getelementptr i8, i8* %0, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %58, %60
  %62 = getelementptr i8, i8* %0, i32 7
  %63 = load i8, i8* %62, align 1
  %64 = or i8 %61, %63
  %65 = getelementptr i8, i8* %0, i32 8
  %66 = load i8, i8* %65, align 1
  %67 = or i8 %64, %66
  %68 = getelementptr i8, i8* %0, i32 9
  %69 = load i8, i8* %68, align 1
  %70 = or i8 %67, %69
  %71 = getelementptr i8, i8* %0, i32 10
  %72 = load i8, i8* %71, align 1
  %73 = or i8 %70, %72
  %74 = getelementptr i8, i8* %0, i32 11
  %75 = load i8, i8* %74, align 1
  %76 = or i8 %73, %75
  %77 = getelementptr i8, i8* %0, i32 12
  %78 = load i8, i8* %77, align 1
  %79 = or i8 %76, %78
  %80 = getelementptr i8, i8* %0, i32 13
  %81 = load i8, i8* %80, align 1
  %82 = or i8 %79, %81
  %83 = getelementptr i8, i8* %0, i32 14
  %84 = load i8, i8* %83, align 1
  %85 = or i8 %82, %84
  %86 = getelementptr i8, i8* %0, i32 15
  %87 = load i8, i8* %86, align 1
  %88 = or i8 %85, %87
  %89 = getelementptr i8, i8* %0, i32 16
  %90 = load i8, i8* %89, align 1
  %91 = or i8 %88, %90
  %92 = getelementptr i8, i8* %0, i32 17
  %93 = load i8, i8* %92, align 1
  %94 = or i8 %91, %93
  %95 = getelementptr i8, i8* %0, i32 18
  %96 = load i8, i8* %95, align 1
  %97 = or i8 %94, %96
  %98 = getelementptr i8, i8* %0, i32 19
  %99 = load i8, i8* %98, align 1
  %100 = or i8 %97, %99
  %101 = getelementptr i8, i8* %0, i32 20
  %102 = load i8, i8* %101, align 1
  %103 = or i8 %100, %102
  %104 = getelementptr i8, i8* %0, i32 21
  %105 = load i8, i8* %104, align 1
  %106 = or i8 %103, %105
  %107 = getelementptr i8, i8* %0, i32 22
  %108 = load i8, i8* %107, align 1
  %109 = or i8 %106, %108
  %110 = getelementptr i8, i8* %0, i32 23
  %111 = load i8, i8* %110, align 1
  %112 = or i8 %109, %111
  %113 = getelementptr i8, i8* %0, i32 24
  %114 = load i8, i8* %113, align 1
  %115 = or i8 %112, %114
  %116 = getelementptr i8, i8* %0, i32 25
  %117 = load i8, i8* %116, align 1
  %118 = or i8 %115, %117
  %119 = getelementptr i8, i8* %0, i32 26
  %120 = load i8, i8* %119, align 1
  %121 = or i8 %118, %120
  %122 = getelementptr i8, i8* %0, i32 27
  %123 = load i8, i8* %122, align 1
  %124 = or i8 %121, %123
  %125 = getelementptr i8, i8* %0, i32 28
  %126 = load i8, i8* %125, align 1
  %127 = or i8 %124, %126
  %128 = getelementptr i8, i8* %0, i32 29
  %129 = load i8, i8* %128, align 1
  %130 = or i8 %127, %129
  %131 = getelementptr i8, i8* %0, i32 30
  %132 = load i8, i8* %131, align 1
  %133 = or i8 %130, %132
  %134 = load i8, i8* %40, align 1
  %135 = and i8 %134, 127
  %136 = or i8 %133, %135
  %137 = zext i8 %136 to i32
  %138 = add nuw nsw i32 %137, 511
  %139 = and i32 %138, 256
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %38
  %142 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %143 = icmp ne i32 %142, 0
  %144 = sext i1 %143 to i32
  br label %145

145:                                              ; preds = %141, %38, %4, %17, %11, %14
  %146 = phi i32 [ -1, %14 ], [ -1, %11 ], [ -1, %17 ], [ -1, %4 ], [ -1, %38 ], [ %144, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %7) #4
  ret i32 %146
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_noclamp(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @_crypto_scalarmult_ed25519(i8* nonnull %0, i8* nonnull %1, i8* nonnull %2, i32 0)
  ret i32 %4
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 1)
  ret i32 %3
}

; Function Attrs: nounwind
define internal fastcc i32 @_crypto_scalarmult_ed25519_base(i8* %0, i8* %1, i32 %2) unnamed_addr #0 {
  %4 = alloca %struct.ge25519_p3, align 4
  %5 = bitcast %struct.ge25519_p3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #4
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %11, %6 ]
  %8 = getelementptr i8, i8* %1, i32 %7
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr i8, i8* %0, i32 %7
  store i8 %9, i8* %10, align 1
  %11 = add nuw nsw i32 %7, 1
  %12 = icmp eq i32 %11, 32
  br i1 %12, label %13, label %6

13:                                               ; preds = %6
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  %16 = getelementptr i8, i8* %0, i32 31
  %17 = load i8, i8* %16, align 1
  br label %24

18:                                               ; preds = %13
  %19 = load i8, i8* %0, align 1
  %20 = and i8 %19, -8
  store i8 %20, i8* %0, align 1
  %21 = getelementptr i8, i8* %0, i32 31
  %22 = load i8, i8* %21, align 1
  %23 = or i8 %22, 64
  store i8 %23, i8* %21, align 1
  br label %24

24:                                               ; preds = %15, %18
  %25 = phi i8 [ %17, %15 ], [ %23, %18 ]
  %26 = getelementptr i8, i8* %0, i32 31
  %27 = and i8 %25, 127
  store i8 %27, i8* %26, align 1
  call void @ge25519_scalarmult_base(%struct.ge25519_p3* nonnull %4, i8* nonnull %0) #4
  call void @ge25519_p3_tobytes(i8* nonnull %0, %struct.ge25519_p3* nonnull %4) #4
  %28 = load i8, i8* %0, align 1
  %29 = xor i8 %28, 1
  %30 = getelementptr i8, i8* %0, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = or i8 %31, %29
  %33 = getelementptr i8, i8* %0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = or i8 %32, %34
  %36 = getelementptr i8, i8* %0, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = or i8 %35, %37
  %39 = getelementptr i8, i8* %0, i32 4
  %40 = load i8, i8* %39, align 1
  %41 = or i8 %38, %40
  %42 = getelementptr i8, i8* %0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = or i8 %41, %43
  %45 = getelementptr i8, i8* %0, i32 6
  %46 = load i8, i8* %45, align 1
  %47 = or i8 %44, %46
  %48 = getelementptr i8, i8* %0, i32 7
  %49 = load i8, i8* %48, align 1
  %50 = or i8 %47, %49
  %51 = getelementptr i8, i8* %0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = or i8 %50, %52
  %54 = getelementptr i8, i8* %0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = or i8 %53, %55
  %57 = getelementptr i8, i8* %0, i32 10
  %58 = load i8, i8* %57, align 1
  %59 = or i8 %56, %58
  %60 = getelementptr i8, i8* %0, i32 11
  %61 = load i8, i8* %60, align 1
  %62 = or i8 %59, %61
  %63 = getelementptr i8, i8* %0, i32 12
  %64 = load i8, i8* %63, align 1
  %65 = or i8 %62, %64
  %66 = getelementptr i8, i8* %0, i32 13
  %67 = load i8, i8* %66, align 1
  %68 = or i8 %65, %67
  %69 = getelementptr i8, i8* %0, i32 14
  %70 = load i8, i8* %69, align 1
  %71 = or i8 %68, %70
  %72 = getelementptr i8, i8* %0, i32 15
  %73 = load i8, i8* %72, align 1
  %74 = or i8 %71, %73
  %75 = getelementptr i8, i8* %0, i32 16
  %76 = load i8, i8* %75, align 1
  %77 = or i8 %74, %76
  %78 = getelementptr i8, i8* %0, i32 17
  %79 = load i8, i8* %78, align 1
  %80 = or i8 %77, %79
  %81 = getelementptr i8, i8* %0, i32 18
  %82 = load i8, i8* %81, align 1
  %83 = or i8 %80, %82
  %84 = getelementptr i8, i8* %0, i32 19
  %85 = load i8, i8* %84, align 1
  %86 = or i8 %83, %85
  %87 = getelementptr i8, i8* %0, i32 20
  %88 = load i8, i8* %87, align 1
  %89 = or i8 %86, %88
  %90 = getelementptr i8, i8* %0, i32 21
  %91 = load i8, i8* %90, align 1
  %92 = or i8 %89, %91
  %93 = getelementptr i8, i8* %0, i32 22
  %94 = load i8, i8* %93, align 1
  %95 = or i8 %92, %94
  %96 = getelementptr i8, i8* %0, i32 23
  %97 = load i8, i8* %96, align 1
  %98 = or i8 %95, %97
  %99 = getelementptr i8, i8* %0, i32 24
  %100 = load i8, i8* %99, align 1
  %101 = or i8 %98, %100
  %102 = getelementptr i8, i8* %0, i32 25
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %101, %103
  %105 = getelementptr i8, i8* %0, i32 26
  %106 = load i8, i8* %105, align 1
  %107 = or i8 %104, %106
  %108 = getelementptr i8, i8* %0, i32 27
  %109 = load i8, i8* %108, align 1
  %110 = or i8 %107, %109
  %111 = getelementptr i8, i8* %0, i32 28
  %112 = load i8, i8* %111, align 1
  %113 = or i8 %110, %112
  %114 = getelementptr i8, i8* %0, i32 29
  %115 = load i8, i8* %114, align 1
  %116 = or i8 %113, %115
  %117 = getelementptr i8, i8* %0, i32 30
  %118 = load i8, i8* %117, align 1
  %119 = or i8 %116, %118
  %120 = load i8, i8* %26, align 1
  %121 = and i8 %120, 127
  %122 = or i8 %119, %121
  %123 = zext i8 %122 to i32
  %124 = add nuw nsw i32 %123, 511
  %125 = and i32 %124, 256
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %24
  %128 = call i32 @sodium_is_zero(i8* nonnull %1, i32 32) #4
  %129 = icmp ne i32 %128, 0
  %130 = sext i1 %129 to i32
  br label %131

131:                                              ; preds = %127, %24
  %132 = phi i32 [ -1, %24 ], [ %130, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #4
  ret i32 %132
}

; Function Attrs: nounwind
define i32 @crypto_scalarmult_ed25519_base_noclamp(i8* nonnull %0, i8* nonnull %1) local_unnamed_addr #0 {
  %3 = tail call fastcc i32 @_crypto_scalarmult_ed25519_base(i8* nonnull %0, i8* nonnull %1, i32 0)
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_bytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: norecurse nounwind readnone
define i32 @crypto_scalarmult_ed25519_scalarbytes() local_unnamed_addr #1 {
  ret i32 32
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare i32 @ge25519_is_canonical(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_has_small_order(i8* %0) local_unnamed_addr #3

declare i32 @ge25519_frombytes(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

declare i32 @ge25519_is_on_main_subgroup(%struct.ge25519_p3* %0) local_unnamed_addr #3

declare void @ge25519_scalarmult(%struct.ge25519_p3* %0, i8* %1, %struct.ge25519_p3* %2) local_unnamed_addr #3

declare void @ge25519_p3_tobytes(i8* %0, %struct.ge25519_p3* %1) local_unnamed_addr #3

declare i32 @sodium_is_zero(i8* %0, i32 %1) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg %0, i8* nocapture %1) #2

declare void @ge25519_scalarmult_base(%struct.ge25519_p3* %0, i8* %1) local_unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crypto_scalarmult_ed25519_scalarbytes()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
