; entering Souper's runOnFunction() for randombytes_close()

; ModuleID = './randombytes.c.bc'
source_filename = "randombytes/randombytes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.randombytes_implementation = type { i8* ()*, i32 ()*, void ()*, i32 (i32)*, void (i8*, i32)*, i32 ()* }

@implementation = internal unnamed_addr global %struct.randombytes_implementation* null, align 4
@randombytes_buf_deterministic.nonce = internal constant [12 x i8] c"LibsodiumDRG", align 1
@.str = private unnamed_addr constant [20 x i8] c"buf_len <= SIZE_MAX\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"randombytes/randombytes.c\00", align 1
@__func__.randombytes = private unnamed_addr constant [12 x i8] c"randombytes\00", align 1
@randombytes_sysrandom_implementation = external global %struct.randombytes_implementation, align 4

; Function Attrs: nofree norecurse nounwind writeonly
define i32 @randombytes_set_implementation(%struct.randombytes_implementation* nonnull %0) local_unnamed_addr #0 {
  store %struct.randombytes_implementation* %0, %struct.randombytes_implementation** @implementation, align 4
  ret i32 0
}

; Function Attrs: nounwind
define i8* @randombytes_implementation_name() local_unnamed_addr #1 {
  tail call fastcc void @randombytes_init_if_needed()
  %1 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %2 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %1, i32 0, i32 0
  %3 = load i8* ()*, i8* ()** %2, align 4
  %4 = tail call i8* %3() #5
  ret i8* %4
}

; Function Attrs: nounwind
define internal fastcc void @randombytes_init_if_needed() unnamed_addr #1 {
  %1 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %2 = icmp eq %struct.randombytes_implementation* %1, null
  br i1 %2, label %3, label %9

3:                                                ; preds = %0
  store %struct.randombytes_implementation* @randombytes_sysrandom_implementation, %struct.randombytes_implementation** @implementation, align 4
  tail call fastcc void @randombytes_init_if_needed() #5
  %4 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %5 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %4, i32 0, i32 2
  %6 = load void ()*, void ()** %5, align 4
  %7 = icmp eq void ()* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void %6() #5
  br label %9

9:                                                ; preds = %8, %3, %0
  ret void
}

; Function Attrs: nounwind
define i32 @randombytes_random() local_unnamed_addr #1 {
  tail call fastcc void @randombytes_init_if_needed()
  %1 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %2 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %1, i32 0, i32 1
  %3 = load i32 ()*, i32 ()** %2, align 4
  %4 = tail call i32 %3() #5
  ret i32 %4
}

; Function Attrs: nounwind
define void @randombytes_stir() local_unnamed_addr #1 {
  tail call fastcc void @randombytes_init_if_needed()
  %1 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %2 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %1, i32 0, i32 2
  %3 = load void ()*, void ()** %2, align 4
  %4 = icmp eq void ()* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %0
  tail call void %3() #5
  br label %6

6:                                                ; preds = %0, %5
  ret void
}

; Function Attrs: nounwind
define i32 @randombytes_uniform(i32 %0) local_unnamed_addr #1 {
  tail call fastcc void @randombytes_init_if_needed()
  %2 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %3 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %2, i32 0, i32 3
  %4 = load i32 (i32)*, i32 (i32)** %3, align 4
  %5 = icmp eq i32 (i32)* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 %4(i32 %0) #5
  br label %21

8:                                                ; preds = %1
  %9 = icmp ult i32 %0, 2
  br i1 %9, label %21, label %10

10:                                               ; preds = %8
  %11 = sub i32 0, %0
  %12 = urem i32 %11, %0
  br label %13

13:                                               ; preds = %13, %10
  tail call fastcc void @randombytes_init_if_needed() #5
  %14 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %15 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %14, i32 0, i32 1
  %16 = load i32 ()*, i32 ()** %15, align 4
  %17 = tail call i32 %16() #5
  %18 = icmp ult i32 %17, %12
  br i1 %18, label %13, label %19

19:                                               ; preds = %13
  %20 = urem i32 %17, %0
  br label %21

21:                                               ; preds = %8, %19, %6
  %22 = phi i32 [ %7, %6 ], [ %20, %19 ], [ 0, %8 ]
  ret i32 %22
}

; Function Attrs: nounwind
define void @randombytes_buf(i8* nonnull %0, i32 %1) local_unnamed_addr #1 {
  tail call fastcc void @randombytes_init_if_needed()
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %6 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %5, i32 0, i32 4
  %7 = load void (i8*, i32)*, void (i8*, i32)** %6, align 4
  tail call void %7(i8* nonnull %0, i32 %1) #5
  br label %8

8:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind
define void @randombytes_buf_deterministic(i8* nonnull %0, i32 %1, i8* nonnull %2) local_unnamed_addr #1 {
  %4 = zext i32 %1 to i64
  %5 = tail call i32 @crypto_stream_chacha20_ietf(i8* nonnull %0, i64 %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @randombytes_buf_deterministic.nonce, i32 0, i32 0), i8* nonnull %2) #5
  ret void
}

declare i32 @crypto_stream_chacha20_ietf(i8* %0, i64 %1, i8* %2, i8* %3) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone
define i32 @randombytes_seedbytes() local_unnamed_addr #3 {
  ret i32 32
}

; Function Attrs: nounwind
define i32 @randombytes_close() local_unnamed_addr #1 {
  %1 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %2 = icmp eq %struct.randombytes_implementation* %1, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %0
  %4 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %1, i32 0, i32 5
  %5 = load i32 ()*, i32 ()** %4, align 4
  %6 = icmp eq i32 ()* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i32 %5() #5
  br label %9

9:                                                ; preds = %0, %3, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %3 ], [ 0, %0 ]
  ret i32 %10
}

; Function Attrs: nounwind
define void @randombytes(i8* nonnull %0, i64 %1) local_unnamed_addr #1 {
  %3 = icmp ult i64 %1, 4294967296
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i32 0, i32 0), i32 197, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.randombytes, i32 0, i32 0)) #6
  unreachable

5:                                                ; preds = %2
  %6 = trunc i64 %1 to i32
  tail call fastcc void @randombytes_init_if_needed() #5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %5
  %9 = load %struct.randombytes_implementation*, %struct.randombytes_implementation** @implementation, align 4
  %10 = getelementptr inbounds %struct.randombytes_implementation, %struct.randombytes_implementation* %9, i32 0, i32 4
  %11 = load void (i8*, i32)*, void (i8*, i32)** %10, align 4
  tail call void %11(i8* nonnull %0, i32 %6) #5
  br label %12

12:                                               ; preds = %5, %8
  ret void
}

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{!"clang version 10.0.0 (https://github.com/llvm/llvm-project d32170dbd5b0d54436537b6b75beaf44324e0c28)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = icmp eq %struct.randombytes_implementation* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = icmp eq i32 ()* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = tail call i32 %5() #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = phi i32 [ %8, %7 ], [ 0, %3 ], [ 0, %0 ]
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, %1, 0:i32, 0:i32
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i32 = phi %0, %1, 0:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for randombytes_close()

; entering Souper's runOnFunction() for randombytes()
