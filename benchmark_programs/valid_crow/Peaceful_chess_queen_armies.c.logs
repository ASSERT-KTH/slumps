
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for releaseNode()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.Node_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for releaseNode()

; entering Souper's runOnFunction() for makeList()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for makeList()

; entering Souper's runOnFunction() for releaseList()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.List_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for releaseList()

; entering Souper's runOnFunction() for addNode()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.List_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq %struct.Node_t* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq %struct.Node_t* %8, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for addNode()

; entering Souper's runOnFunction() for removeAt()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.List_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq %struct.Node_t* %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %17, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec13 = add i32 %21, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp14 = icmp ugt i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq %struct.Node_t* %26, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %length25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec26 = add i32 %38, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for removeAt()

; entering Souper's runOnFunction() for isAttacking()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %x4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @abs(i32 %sub) #5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %y6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %y7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call9 = call i32 @abs(i32 %sub8) #5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %call, %call9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i32 = var
%7:i32 = var
%8:i32 = subnsw %6, %7 (hasExternalUses)
%9:i1 = slt 0:i32, %8
%10:i32 = subnsw 0:i32, %8
%11:i32 = select %9, %8, %10
%12:i1 = eq %5, %11
infer %12

; *****
; For LLVM instruction:
;  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2 (hasExternalUses)
%4:i1 = slt 0:i32, %3
%5:i32 = subnsw 0:i32, %3
%6:i32 = select %4, %3, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %7, %8 (hasExternalUses)
%10:i1 = slt 0:i32, %9
%11:i32 = subnsw 0:i32, %9
%12:i32 = select %10, %9, %11
%13:i1 = eq %6, %12
%14:i1 = phi %0, 1:i1, 1:i1, %13
infer %14
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2097152
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i32 = var
%7:i32 = var
%8:i32 = subnsw %6, %7 (hasExternalUses)
%9:i1 = slt 0:i32, %8
%10:i32 = subnsw 0:i32, %8
%11:i32 = select %9, %8, %10
%12:i1 = eq %5, %11
infer %12


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2 (hasExternalUses)
%4:i1 = slt 0:i32, %3
%5:i32 = subnsw 0:i32, %3
%6:i32 = select %4, %3, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %7, %8 (hasExternalUses)
%10:i1 = slt 0:i32, %9
%11:i32 = subnsw 0:i32, %9
%12:i32 = select %10, %9, %11
%13:i1 = eq %6, %12
%14:i1 = phi %0, 1:i1, 1:i1, %13
infer %14


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for isAttacking()

; entering Souper's runOnFunction() for place()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.List_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq %struct.List_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne %struct.Node_t* %11, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %x11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %x12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp eq i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %y15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %y16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp eq i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %placingBlack, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %18 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne %struct.Node_t* %24, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %x28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %x29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp eq i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %y33, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %y34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp35 = icmp eq i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %placingBlack, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool37 = trunc i8 %31 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %placingBlack, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool45 = trunc i8 %35 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub50 = sub i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %length51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub52 = sub i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc55 = add nsw i32 %49, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %placingBlack, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool57 = trunc i8 %50 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %length59, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub60 = sub i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %54 = load i1, i1* %retval, align 1
; Looking for a replacement for:
%0:i1 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00000001)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for place()

; entering Souper's runOnFunction() for printBoard()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.List_t* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq %struct.List_t* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i8* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne %struct.Node_t* %8, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul6, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp10 = icmp ne %struct.Node_t* %19, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %x13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul14 = mul nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %y16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %mul14, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp ult i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp ne i32 %30, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp23 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %arrayidx27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %35 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %36, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul31 = mul i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub i32 %38, %mul31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mul %1, %2
%4:i32 = sub %0, %3
infer %4

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem32 = urem i32 %41, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem33 = urem i32 %42, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = icmp eq i32 %rem32, %rem33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i32 = var
%3:i32 = urem %2, 2:i32
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = eq 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 22789806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mul %1, %2
%4:i32 = sub %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i32 = var
%3:i32 = urem %2, 2:i32
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printBoard()

; entering Souper's runOnFunction() for test()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %q.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %q.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %q.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for test()

; entering Souper's runOnFunction() for main()

; ModuleID = './Peaceful_chess_queen_armies.c.bc'
source_filename = "./Peaceful_chess_queen_armies.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Node_t = type { %struct.Position_t, %struct.Node_t* }
%struct.Position_t = type { i32, i32 }
%struct.List_t = type { %struct.Node_t*, %struct.Node_t*, i32 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"B \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"W \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"# \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"%d black and %d white queens on a %d x %d board:\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"No solution exists.\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @releaseNode(%struct.Node_t* %head) #0 {
entry:
  %head.addr = alloca %struct.Node_t*, align 4
  store %struct.Node_t* %head, %struct.Node_t** %head.addr, align 4
  %0 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %cmp = icmp eq %struct.Node_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %1, i32 0, i32 1
  %2 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %next1 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next1, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %head.addr, align 4
  %5 = bitcast %struct.Node_t* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @makeList(%struct.List_t* noalias sret align 4 %agg.result) #0 {
entry:
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %agg.result, i32 0, i32 2
  store i32 0, i32* %length, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @releaseList(%struct.List_t* %lst) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %1, i32 0, i32 0
  %2 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  call void @releaseNode(%struct.Node_t* %2)
  %3 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head1 = getelementptr inbounds %struct.List_t, %struct.List_t* %3, i32 0, i32 0
  store %struct.Node_t* null, %struct.Node_t** %head1, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addNode(%struct.List_t* %lst, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %newNode = alloca %struct.Node_t*, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %1 = bitcast i8* %call to %struct.Node_t*
  store %struct.Node_t* %1, %struct.Node_t** %newNode, align 4
  %2 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %cmp1 = icmp eq %struct.Node_t* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end3:                                          ; preds = %if.end
  %3 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %3, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next, align 4
  %4 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %pos4 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %4, i32 0, i32 0
  %5 = bitcast %struct.Position_t* %pos4 to i8*
  %6 = bitcast %struct.Position_t* %pos to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %7 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %7, i32 0, i32 0
  %8 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  %cmp5 = icmp eq %struct.Node_t* %8, null
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end3
  %9 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %10 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %10, i32 0, i32 1
  store %struct.Node_t* %9, %struct.Node_t** %tail, align 4
  %11 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head7 = getelementptr inbounds %struct.List_t, %struct.List_t* %11, i32 0, i32 0
  store %struct.Node_t* %9, %struct.Node_t** %head7, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end3
  %12 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %13 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail8 = getelementptr inbounds %struct.List_t, %struct.List_t* %13, i32 0, i32 1
  %14 = load %struct.Node_t*, %struct.Node_t** %tail8, align 4
  %next9 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %14, i32 0, i32 1
  store %struct.Node_t* %12, %struct.Node_t** %next9, align 4
  %15 = load %struct.Node_t*, %struct.Node_t** %newNode, align 4
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail10 = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 1
  store %struct.Node_t* %15, %struct.Node_t** %tail10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  %17 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 2
  %18 = load i32, i32* %length, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %length, align 4
  ret void
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @removeAt(%struct.List_t* %lst, i32 %pos) #0 {
entry:
  %lst.addr = alloca %struct.List_t*, align 4
  %pos.addr = alloca i32, align 4
  %temp = alloca %struct.Node_t*, align 4
  %temp11 = alloca %struct.Node_t*, align 4
  %rem = alloca %struct.Node_t*, align 4
  %i = alloca i32, align 4
  store %struct.List_t* %lst, %struct.List_t** %lst.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end27

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %pos.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %2 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %2, i32 0, i32 0
  %3 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %3, %struct.Node_t** %temp, align 4
  %4 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail = getelementptr inbounds %struct.List_t, %struct.List_t* %4, i32 0, i32 1
  %5 = load %struct.Node_t*, %struct.Node_t** %tail, align 4
  %6 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head3 = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head3, align 4
  %cmp4 = icmp eq %struct.Node_t* %5, %7
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then2
  %8 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail6 = getelementptr inbounds %struct.List_t, %struct.List_t* %8, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %tail6, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.then2
  %9 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 1
  %11 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  %12 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head9 = getelementptr inbounds %struct.List_t, %struct.List_t* %12, i32 0, i32 0
  store %struct.Node_t* %11, %struct.Node_t** %head9, align 4
  %13 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %next10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next10, align 4
  %14 = load %struct.Node_t*, %struct.Node_t** %temp, align 4
  %15 = bitcast %struct.Node_t* %14 to i8*
  call void @free(i8* %15)
  %16 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %16, i32 0, i32 2
  %17 = load i32, i32* %length, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %length, align 4
  br label %if.end27

if.else:                                          ; preds = %if.end
  %18 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %head12 = getelementptr inbounds %struct.List_t, %struct.List_t* %18, i32 0, i32 0
  %19 = load %struct.Node_t*, %struct.Node_t** %head12, align 4
  store %struct.Node_t* %19, %struct.Node_t** %temp11, align 4
  %20 = load i32, i32* %pos.addr, align 4
  store i32 %20, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %21 = load i32, i32* %i, align 4
  %dec13 = add i32 %21, -1
  store i32 %dec13, i32* %i, align 4
  %cmp14 = icmp ugt i32 %21, 1
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %22, i32 0, i32 1
  %23 = load %struct.Node_t*, %struct.Node_t** %next15, align 4
  store %struct.Node_t* %23, %struct.Node_t** %temp11, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next16 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 1
  %25 = load %struct.Node_t*, %struct.Node_t** %next16, align 4
  store %struct.Node_t* %25, %struct.Node_t** %rem, align 4
  %26 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %27 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail17 = getelementptr inbounds %struct.List_t, %struct.List_t* %27, i32 0, i32 1
  %28 = load %struct.Node_t*, %struct.Node_t** %tail17, align 4
  %cmp18 = icmp eq %struct.Node_t* %26, %28
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %while.end
  %29 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %30 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %tail20 = getelementptr inbounds %struct.List_t, %struct.List_t* %30, i32 0, i32 1
  store %struct.Node_t* %29, %struct.Node_t** %tail20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %while.end
  %31 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next22 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %31, i32 0, i32 1
  %32 = load %struct.Node_t*, %struct.Node_t** %next22, align 4
  %33 = load %struct.Node_t*, %struct.Node_t** %temp11, align 4
  %next23 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  store %struct.Node_t* %32, %struct.Node_t** %next23, align 4
  %34 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %next24 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %34, i32 0, i32 1
  store %struct.Node_t* null, %struct.Node_t** %next24, align 4
  %35 = load %struct.Node_t*, %struct.Node_t** %rem, align 4
  %36 = bitcast %struct.Node_t* %35 to i8*
  call void @free(i8* %36)
  %37 = load %struct.List_t*, %struct.List_t** %lst.addr, align 4
  %length25 = getelementptr inbounds %struct.List_t, %struct.List_t* %37, i32 0, i32 2
  %38 = load i32, i32* %length25, align 4
  %dec26 = add i32 %38, -1
  store i32 %dec26, i32* %length25, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then, %if.end21, %if.end7
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %queen, %struct.Position_t* byval(%struct.Position_t) align 4 %pos) #0 {
entry:
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %0 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %1 = load i32, i32* %x1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %2 = load i32, i32* %y, align 4
  %y2 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %3 = load i32, i32* %y2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %x4 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 0
  %4 = load i32, i32* %x4, align 4
  %x5 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %5 = load i32, i32* %x5, align 4
  %sub = sub nsw i32 %4, %5
  %call = call i32 @abs(i32 %sub) #6
  %y6 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %queen, i32 0, i32 1
  %6 = load i32, i32* %y6, align 4
  %y7 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %7 = load i32, i32* %y7, align 4
  %sub8 = sub nsw i32 %6, %7
  %call9 = call i32 @abs(i32 %sub8) #6
  %cmp10 = icmp eq i32 %call, %call9
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp10, %lor.rhs ]
  ret i1 %8
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @place(i32 %m, i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %retval = alloca i1, align 1
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %placingBlack = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca %struct.Position_t, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  store i8 1, i8* %placingBlack, align 1
  %0 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc54, %if.end4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body, label %for.end56

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %5, %6
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %x, align 4
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %8 = load i32, i32* %j, align 4
  store i32 %8, i32* %y, align 4
  %9 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %9, i32 0, i32 0
  %10 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %10, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %for.body8
  %11 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp9 = icmp ne %struct.Node_t* %11, null
  br i1 %cmp9, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos10 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %12, i32 0, i32 0
  %x11 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos10, i32 0, i32 0
  %13 = load i32, i32* %x11, align 4
  %x12 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %14 = load i32, i32* %x12, align 4
  %cmp13 = icmp eq i32 %13, %14
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false18

land.lhs.true:                                    ; preds = %while.body
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos14 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 0
  %y15 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos14, i32 0, i32 1
  %16 = load i32, i32* %y15, align 4
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %17 = load i32, i32* %y16, align 4
  %cmp17 = icmp eq i32 %16, %17
  br i1 %cmp17, label %if.then21, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %while.body
  %18 = load i8, i8* %placingBlack, align 1
  %tobool = trunc i8 %18 to i1
  br i1 %tobool, label %if.end22, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %lor.lhs.false18
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos20 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %19, i32 0, i32 0
  %call = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos20, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true
  br label %inner

if.end22:                                         ; preds = %land.lhs.true19, %lor.lhs.false18
  %20 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %20, i32 0, i32 1
  %21 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %21, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head23 = getelementptr inbounds %struct.List_t, %struct.List_t* %22, i32 0, i32 0
  %23 = load %struct.Node_t*, %struct.Node_t** %head23, align 4
  store %struct.Node_t* %23, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.cond24:                                     ; preds = %if.end42, %while.end
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp25 = icmp ne %struct.Node_t* %24, null
  br i1 %cmp25, label %while.body26, label %while.end44

while.body26:                                     ; preds = %while.cond24
  %25 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos27 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %25, i32 0, i32 0
  %x28 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos27, i32 0, i32 0
  %26 = load i32, i32* %x28, align 4
  %x29 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %27 = load i32, i32* %x29, align 4
  %cmp30 = icmp eq i32 %26, %27
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false36

land.lhs.true31:                                  ; preds = %while.body26
  %28 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos32 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %28, i32 0, i32 0
  %y33 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos32, i32 0, i32 1
  %29 = load i32, i32* %y33, align 4
  %y34 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 1
  %30 = load i32, i32* %y34, align 4
  %cmp35 = icmp eq i32 %29, %30
  br i1 %cmp35, label %if.then41, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %land.lhs.true31, %while.body26
  %31 = load i8, i8* %placingBlack, align 1
  %tobool37 = trunc i8 %31 to i1
  br i1 %tobool37, label %land.lhs.true38, label %if.end42

land.lhs.true38:                                  ; preds = %lor.lhs.false36
  %32 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos39 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %32, i32 0, i32 0
  %call40 = call zeroext i1 @isAttacking(%struct.Position_t* byval(%struct.Position_t) align 4 %pos39, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  br i1 %call40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %land.lhs.true38, %land.lhs.true31
  br label %inner

if.end42:                                         ; preds = %land.lhs.true38, %lor.lhs.false36
  %33 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next43 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %33, i32 0, i32 1
  %34 = load %struct.Node_t*, %struct.Node_t** %next43, align 4
  store %struct.Node_t* %34, %struct.Node_t** %queenNode, align 4
  br label %while.cond24

while.end44:                                      ; preds = %while.cond24
  %35 = load i8, i8* %placingBlack, align 1
  %tobool45 = trunc i8 %35 to i1
  br i1 %tobool45, label %if.then46, label %if.else

if.then46:                                        ; preds = %while.end44
  %36 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  call void @addNode(%struct.List_t* %36, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  store i8 0, i8* %placingBlack, align 1
  br label %if.end53

if.else:                                          ; preds = %while.end44
  %37 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  call void @addNode(%struct.List_t* %37, %struct.Position_t* byval(%struct.Position_t) align 4 %pos)
  %38 = load i32, i32* %m.addr, align 4
  %sub = sub nsw i32 %38, 1
  %39 = load i32, i32* %n.addr, align 4
  %40 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %41 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %call47 = call zeroext i1 @place(i32 %sub, i32 %39, %struct.List_t* %40, %struct.List_t* %41)
  br i1 %call47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %if.else
  store i1 true, i1* %retval, align 1
  br label %return

if.end49:                                         ; preds = %if.else
  %42 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %43 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length = getelementptr inbounds %struct.List_t, %struct.List_t* %43, i32 0, i32 2
  %44 = load i32, i32* %length, align 4
  %sub50 = sub i32 %44, 1
  call void @removeAt(%struct.List_t* %42, i32 %sub50)
  %45 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %46 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %length51 = getelementptr inbounds %struct.List_t, %struct.List_t* %46, i32 0, i32 2
  %47 = load i32, i32* %length51, align 4
  %sub52 = sub i32 %47, 1
  call void @removeAt(%struct.List_t* %45, i32 %sub52)
  store i8 1, i8* %placingBlack, align 1
  br label %if.end53

if.end53:                                         ; preds = %if.end49, %if.then46
  br label %inner

inner:                                            ; preds = %if.end53, %if.then41, %if.then21
  br label %for.inc

for.inc:                                          ; preds = %inner
  %48 = load i32, i32* %j, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc54

for.inc54:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %49, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond

for.end56:                                        ; preds = %for.cond
  %50 = load i8, i8* %placingBlack, align 1
  %tobool57 = trunc i8 %50 to i1
  br i1 %tobool57, label %if.end61, label %if.then58

if.then58:                                        ; preds = %for.end56
  %51 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %52 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %length59 = getelementptr inbounds %struct.List_t, %struct.List_t* %52, i32 0, i32 2
  %53 = load i32, i32* %length59, align 4
  %sub60 = sub i32 %53, 1
  call void @removeAt(%struct.List_t* %51, i32 %sub60)
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %for.end56
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end61, %if.then48, %if.then3
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind optnone
define hidden void @printBoard(i32 %n, %struct.List_t* %pBlackQueens, %struct.List_t* %pWhiteQueens) #0 {
entry:
  %n.addr = alloca i32, align 4
  %pBlackQueens.addr = alloca %struct.List_t*, align 4
  %pWhiteQueens.addr = alloca %struct.List_t*, align 4
  %length = alloca i32, align 4
  %queenNode = alloca %struct.Node_t*, align 4
  %board = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.List_t* %pBlackQueens, %struct.List_t** %pBlackQueens.addr, align 4
  store %struct.List_t* %pWhiteQueens, %struct.List_t** %pWhiteQueens.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %length, align 4
  %2 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %cmp = icmp eq %struct.List_t* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %cmp1 = icmp eq %struct.List_t* %3, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %4, i32 1)
  store i8* %call, i8** %board, align 4
  %5 = load i8*, i8** %board, align 4
  %cmp2 = icmp eq i8* %5, null
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void @exit(i32 1) #5
  unreachable

if.end4:                                          ; preds = %if.end
  %6 = load %struct.List_t*, %struct.List_t** %pBlackQueens.addr, align 4
  %head = getelementptr inbounds %struct.List_t, %struct.List_t* %6, i32 0, i32 0
  %7 = load %struct.Node_t*, %struct.Node_t** %head, align 4
  store %struct.Node_t* %7, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end4
  %8 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp5 = icmp ne %struct.Node_t* %8, null
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %board, align 4
  %10 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos = getelementptr inbounds %struct.Node_t, %struct.Node_t* %10, i32 0, i32 0
  %x = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos, i32 0, i32 0
  %11 = load i32, i32* %x, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul nsw i32 %11, %12
  %13 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos7 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %13, i32 0, i32 0
  %y = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos7, i32 0, i32 1
  %14 = load i32, i32* %y, align 4
  %add = add nsw i32 %mul6, %14
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %add
  store i8 1, i8* %arrayidx, align 1
  %15 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next = getelementptr inbounds %struct.Node_t, %struct.Node_t* %15, i32 0, i32 1
  %16 = load %struct.Node_t*, %struct.Node_t** %next, align 4
  store %struct.Node_t* %16, %struct.Node_t** %queenNode, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load %struct.List_t*, %struct.List_t** %pWhiteQueens.addr, align 4
  %head8 = getelementptr inbounds %struct.List_t, %struct.List_t* %17, i32 0, i32 0
  %18 = load %struct.Node_t*, %struct.Node_t** %head8, align 4
  store %struct.Node_t* %18, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %cmp10 = icmp ne %struct.Node_t* %19, null
  br i1 %cmp10, label %while.body11, label %while.end20

while.body11:                                     ; preds = %while.cond9
  %20 = load i8*, i8** %board, align 4
  %21 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos12 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %21, i32 0, i32 0
  %x13 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos12, i32 0, i32 0
  %22 = load i32, i32* %x13, align 4
  %23 = load i32, i32* %n.addr, align 4
  %mul14 = mul nsw i32 %22, %23
  %24 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %pos15 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %24, i32 0, i32 0
  %y16 = getelementptr inbounds %struct.Position_t, %struct.Position_t* %pos15, i32 0, i32 1
  %25 = load i32, i32* %y16, align 4
  %add17 = add nsw i32 %mul14, %25
  %arrayidx18 = getelementptr inbounds i8, i8* %20, i32 %add17
  store i8 2, i8* %arrayidx18, align 1
  %26 = load %struct.Node_t*, %struct.Node_t** %queenNode, align 4
  %next19 = getelementptr inbounds %struct.Node_t, %struct.Node_t* %26, i32 0, i32 1
  %27 = load %struct.Node_t*, %struct.Node_t** %next19, align 4
  store %struct.Node_t* %27, %struct.Node_t** %queenNode, align 4
  br label %while.cond9

while.end20:                                      ; preds = %while.cond9
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end20
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %length, align 4
  %cmp21 = icmp ult i32 %28, %29
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4
  %cmp22 = icmp ne i32 %30, 0
  br i1 %cmp22, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %for.body
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %31, %32
  %cmp23 = icmp eq i32 %rem, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %for.body
  %33 = load i8*, i8** %board, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx27, align 1
  %conv = sext i8 %35 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb29
  ]

sw.bb:                                            ; preds = %if.end26
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end26
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %sw.epilog

sw.default:                                       ; preds = %if.end26
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %36, %37
  store i32 %div, i32* %j, align 4
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %40 = load i32, i32* %n.addr, align 4
  %mul31 = mul i32 %39, %40
  %sub = sub i32 %38, %mul31
  store i32 %sub, i32* %k, align 4
  %41 = load i32, i32* %j, align 4
  %rem32 = urem i32 %41, 2
  %42 = load i32, i32* %k, align 4
  %rem33 = urem i32 %42, 2
  %cmp34 = icmp eq i32 %rem32, %rem33
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %sw.default
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end39

if.else:                                          ; preds = %sw.default
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then36
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end39, %sw.bb29, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %43 = load i32, i32* %i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @test(i32 %n, i32 %q) #0 {
entry:
  %n.addr = alloca i32, align 4
  %q.addr = alloca i32, align 4
  %blackQueens = alloca %struct.List_t, align 4
  %whiteQueens = alloca %struct.List_t, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %q, i32* %q.addr, align 4
  call void @makeList(%struct.List_t* sret align 4 %blackQueens)
  call void @makeList(%struct.List_t* sret align 4 %whiteQueens)
  %0 = load i32, i32* %q.addr, align 4
  %1 = load i32, i32* %q.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0), i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load i32, i32* %q.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call zeroext i1 @place(i32 %4, i32 %5, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br i1 %call1, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %n.addr, align 4
  call void @printBoard(i32 %6, %struct.List_t* %blackQueens, %struct.List_t* %whiteQueens)
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @releaseList(%struct.List_t* %blackQueens)
  call void @releaseList(%struct.List_t* %whiteQueens)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @test(i32 2, i32 1)
  call void @test(i32 3, i32 1)
  call void @test(i32 3, i32 2)
  call void @test(i32 4, i32 1)
  call void @test(i32 4, i32 2)
  call void @test(i32 4, i32 3)
  call void @test(i32 5, i32 1)
  call void @test(i32 5, i32 2)
  call void @test(i32 5, i32 3)
  call void @test(i32 5, i32 4)
  call void @test(i32 5, i32 5)
  call void @test(i32 6, i32 1)
  call void @test(i32 6, i32 2)
  call void @test(i32 6, i32 3)
  call void @test(i32 6, i32 4)
  call void @test(i32 6, i32 5)
  call void @test(i32 6, i32 6)
  call void @test(i32 7, i32 1)
  call void @test(i32 7, i32 2)
  call void @test(i32 7, i32 3)
  call void @test(i32 7, i32 4)
  call void @test(i32 7, i32 5)
  call void @test(i32 7, i32 6)
  call void @test(i32 7, i32 7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }
attributes #6 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
