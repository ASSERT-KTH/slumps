
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for getElement()

; ModuleID = './Chinese_zodiac.c.bc'
source_filename = "./Chinese_zodiac.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Rat\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Ox\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Tiger\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Rabbit\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Dragon\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Goat\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"Monkey\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Rooster\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Pig\00", align 1
@animals = hidden global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [5 x i8] c"Wood\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Fire\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Earth\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@elements = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)], align 16
@.str.17 = private unnamed_addr constant [5 x i8] c"yang\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"yin\00", align 1
@__const.main.years = private unnamed_addr constant [6 x i32] [i32 1935, i32 1938, i32 1968, i32 1972, i32 1976, i32 2017], align 16
@.str.19 = private unnamed_addr constant [35 x i8] c"%d is the year of the %s %s (%s).\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @getElement(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %element = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 10
  %div = sdiv i32 %rem, 2
  %conv = sitofp i32 %div to double
  %1 = call double @llvm.floor.f64(double %conv)
  %conv1 = fptosi double %1 to i32
  store i32 %conv1, i32* %element, align 4
  %2 = load i32, i32* %element, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @elements, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  ret i8* %3
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @getAnimal(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 12
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @animals, i32 0, i32 %rem
  %1 = load i8*, i8** %arrayidx, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @getYY(i32 %year) #0 {
entry:
  %retval = alloca i8*, align 4
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i8*, i8** %retval, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %years = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %year = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %years to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.years to i8*), i32 24, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %years, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %year, align 4
  %4 = load i32, i32* %year, align 4
  %5 = load i32, i32* %year, align 4
  %call = call i8* @getElement(i32 %5)
  %6 = load i32, i32* %year, align 4
  %call1 = call i8* @getAnimal(i32 %6)
  %7 = load i32, i32* %year, align 4
  %call2 = call i8* @getYY(i32 %7)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i32 0, i32 0), i32 %4, i8* %call, i8* %call1, i8* %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %year.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %sub, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %div = sdiv i32 %rem, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 10:i32
%3:i32 = sdiv %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %conv1 = fptosi double %1 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %element, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 10:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 10:i32
%3:i32 = sdiv %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 10:i32

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for getElement()

; entering Souper's runOnFunction() for getAnimal()

; ModuleID = './Chinese_zodiac.c.bc'
source_filename = "./Chinese_zodiac.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Rat\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Ox\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Tiger\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Rabbit\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Dragon\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Goat\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"Monkey\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Rooster\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Pig\00", align 1
@animals = hidden global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [5 x i8] c"Wood\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Fire\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Earth\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@elements = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)], align 16
@.str.17 = private unnamed_addr constant [5 x i8] c"yang\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"yin\00", align 1
@__const.main.years = private unnamed_addr constant [6 x i32] [i32 1935, i32 1938, i32 1968, i32 1972, i32 1976, i32 2017], align 16
@.str.19 = private unnamed_addr constant [35 x i8] c"%d is the year of the %s %s (%s).\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @getElement(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %element = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 10
  %div = sdiv i32 %rem, 2
  %conv = sitofp i32 %div to double
  %1 = call double @llvm.floor.f64(double %conv)
  %conv1 = fptosi double %1 to i32
  store i32 %conv1, i32* %element, align 4
  %2 = load i32, i32* %element, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @elements, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  ret i8* %3
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @getAnimal(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 12
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @animals, i32 0, i32 %rem
  %1 = load i8*, i8** %arrayidx, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @getYY(i32 %year) #0 {
entry:
  %retval = alloca i8*, align 4
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i8*, i8** %retval, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %years = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %year = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %years to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.years to i8*), i32 24, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %years, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %year, align 4
  %4 = load i32, i32* %year, align 4
  %5 = load i32, i32* %year, align 4
  %call = call i8* @getElement(i32 %5)
  %6 = load i32, i32* %year, align 4
  %call1 = call i8* @getAnimal(i32 %6)
  %7 = load i32, i32* %year, align 4
  %call2 = call i8* @getYY(i32 %7)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i32 0, i32 0), i32 %4, i8* %call, i8* %call1, i8* %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %year.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %sub, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 12:i32
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 4:i32
%2:i32 = srem %1, 12:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for getAnimal()

; entering Souper's runOnFunction() for getYY()

; ModuleID = './Chinese_zodiac.c.bc'
source_filename = "./Chinese_zodiac.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Rat\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Ox\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Tiger\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Rabbit\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Dragon\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Goat\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"Monkey\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Rooster\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Pig\00", align 1
@animals = hidden global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [5 x i8] c"Wood\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Fire\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Earth\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@elements = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)], align 16
@.str.17 = private unnamed_addr constant [5 x i8] c"yang\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"yin\00", align 1
@__const.main.years = private unnamed_addr constant [6 x i32] [i32 1935, i32 1938, i32 1968, i32 1972, i32 1976, i32 2017], align 16
@.str.19 = private unnamed_addr constant [35 x i8] c"%d is the year of the %s %s (%s).\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @getElement(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %element = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 10
  %div = sdiv i32 %rem, 2
  %conv = sitofp i32 %div to double
  %1 = call double @llvm.floor.f64(double %conv)
  %conv1 = fptosi double %1 to i32
  store i32 %conv1, i32* %element, align 4
  %2 = load i32, i32* %element, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @elements, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  ret i8* %3
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @getAnimal(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 12
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @animals, i32 0, i32 %rem
  %1 = load i8*, i8** %arrayidx, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @getYY(i32 %year) #0 {
entry:
  %retval = alloca i8*, align 4
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i8*, i8** %retval, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %years = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %year = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %years to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.years to i8*), i32 24, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %years, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %year, align 4
  %4 = load i32, i32* %year, align 4
  %5 = load i32, i32* %year, align 4
  %call = call i8* @getElement(i32 %5)
  %6 = load i32, i32* %year, align 4
  %call1 = call i8* @getAnimal(i32 %6)
  %7 = load i32, i32* %year, align 4
  %call2 = call i8* @getYY(i32 %7)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i32 0, i32 0), i32 %4, i8* %call, i8* %call1, i8* %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %year.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for getYY()

; entering Souper's runOnFunction() for main()

; ModuleID = './Chinese_zodiac.c.bc'
source_filename = "./Chinese_zodiac.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Rat\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Ox\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Tiger\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Rabbit\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Dragon\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Goat\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"Monkey\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Rooster\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"Pig\00", align 1
@animals = hidden global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.12 = private unnamed_addr constant [5 x i8] c"Wood\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Fire\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Earth\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@elements = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0)], align 16
@.str.17 = private unnamed_addr constant [5 x i8] c"yang\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"yin\00", align 1
@__const.main.years = private unnamed_addr constant [6 x i32] [i32 1935, i32 1938, i32 1968, i32 1972, i32 1976, i32 2017], align 16
@.str.19 = private unnamed_addr constant [35 x i8] c"%d is the year of the %s %s (%s).\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @getElement(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %element = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 10
  %div = sdiv i32 %rem, 2
  %conv = sitofp i32 %div to double
  %1 = call double @llvm.floor.f64(double %conv)
  %conv1 = fptosi double %1 to i32
  store i32 %conv1, i32* %element, align 4
  %2 = load i32, i32* %element, align 4
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @elements, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  ret i8* %3
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @getAnimal(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 4
  %rem = srem i32 %sub, 12
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @animals, i32 0, i32 %rem
  %1 = load i8*, i8** %arrayidx, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @getYY(i32 %year) #0 {
entry:
  %retval = alloca i8*, align 4
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %rem = srem i32 %0, 2
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %1 = load i8*, i8** %retval, align 4
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %years = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %year = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %years to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.years to i8*), i32 24, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32], [6 x i32]* %years, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %year, align 4
  %4 = load i32, i32* %year, align 4
  %5 = load i32, i32* %year, align 4
  %call = call i8* @getElement(i32 %5)
  %6 = load i32, i32* %year, align 4
  %call1 = call i8* @getAnimal(i32 %6)
  %7 = load i32, i32* %year, align 4
  %call2 = call i8* @getYY(i32 %7)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i32 0, i32 0), i32 %4, i8* %call, i8* %call1, i8* %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
