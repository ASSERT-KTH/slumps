
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Regular_expressions.c.bc'
source_filename = "./Regular_expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.re_pattern_buffer = type { i32, i8*, [4 x i8*], i32, i8 }
%struct.regmatch_t = type { i32, i32 }

@.str = private unnamed_addr constant [8 x i8] c"string$\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"this is a matching string\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"this is not a matching string!\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"istyfied\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"'%s' %smatched with '%s'\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"did not \00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"a[a-z]+\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"mod string: '%s'\0A\00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"the string '%s' is the same: no matching!\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %preg = alloca %struct.re_pattern_buffer, align 4
  %substmatch = alloca [1 x %struct.regmatch_t], align 4
  %tp = alloca i8*, align 4
  %t1 = alloca i8*, align 4
  %t2 = alloca i8*, align 4
  %ss = alloca i8*, align 4
  %ns = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %tp, align 4
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i32 0, i32 0), i8** %t1, align 4
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0), i8** %t2, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8** %ss, align 4
  %call = call i32 @regcomp(%struct.re_pattern_buffer* %preg, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 1)
  %0 = load i8*, i8** %t1, align 4
  %1 = load i8*, i8** %t1, align 4
  %call1 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %1, i32 0, %struct.regmatch_t* null, i32 0)
  %cmp = icmp eq i32 %call1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0)
  %3 = load i8*, i8** %tp, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i32 0, i32 0), i8* %0, i8* %cond, i8* %3)
  %4 = load i8*, i8** %t2, align 4
  %5 = load i8*, i8** %t2, align 4
  %call3 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %5, i32 0, %struct.regmatch_t* null, i32 0)
  %cmp4 = icmp eq i32 %call3, 0
  %6 = zext i1 %cmp4 to i64
  %cond5 = select i1 %cmp4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0)
  %7 = load i8*, i8** %tp, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i32 0, i32 0), i8* %4, i8* %cond5, i8* %7)
  call void @regfree(%struct.re_pattern_buffer* %preg)
  %call7 = call i32 @regcomp(%struct.re_pattern_buffer* %preg, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 1)
  %8 = load i8*, i8** %t1, align 4
  %arraydecay = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %call8 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %8, i32 1, %struct.regmatch_t* %arraydecay, i32 0)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_so = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx, i32 0, i32 0
  %9 = load i32, i32* %rm_so, align 4
  %add = add nsw i32 %9, 1
  %10 = load i8*, i8** %ss, align 4
  %call10 = call i32 @strlen(i8* %10) #4
  %add11 = add i32 %add, %call10
  %11 = load i8*, i8** %t1, align 4
  %call12 = call i32 @strlen(i8* %11) #4
  %arrayidx13 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_eo = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx13, i32 0, i32 1
  %12 = load i32, i32* %rm_eo, align 4
  %sub = sub i32 %call12, %12
  %add14 = add i32 %add11, %sub
  %add15 = add i32 %add14, 2
  %call16 = call noalias i8* @malloc(i32 %add15)
  store i8* %call16, i8** %ns, align 4
  %13 = load i8*, i8** %ns, align 4
  %14 = load i8*, i8** %t1, align 4
  %arrayidx17 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_so18 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx17, i32 0, i32 0
  %15 = load i32, i32* %rm_so18, align 4
  %add19 = add nsw i32 %15, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %13, i8* align 1 %14, i32 %add19, i1 false)
  %16 = load i8*, i8** %ns, align 4
  %arrayidx20 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_so21 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx20, i32 0, i32 0
  %17 = load i32, i32* %rm_so21, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8*, i8** %ss, align 4
  %19 = load i8*, i8** %ss, align 4
  %call23 = call i32 @strlen(i8* %19) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx22, i8* align 1 %18, i32 %call23, i1 false)
  %20 = load i8*, i8** %ns, align 4
  %arrayidx24 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_so25 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx24, i32 0, i32 0
  %21 = load i32, i32* %rm_so25, align 4
  %22 = load i8*, i8** %ss, align 4
  %call26 = call i32 @strlen(i8* %22) #4
  %add27 = add i32 %21, %call26
  %arrayidx28 = getelementptr inbounds i8, i8* %20, i32 %add27
  %23 = load i8*, i8** %t1, align 4
  %arrayidx29 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_eo30 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx29, i32 0, i32 1
  %24 = load i32, i32* %rm_eo30, align 4
  %arrayidx31 = getelementptr inbounds i8, i8* %23, i32 %24
  %25 = load i8*, i8** %t1, align 4
  %arrayidx32 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_eo33 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx32, i32 0, i32 1
  %26 = load i32, i32* %rm_eo33, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %25, i32 %26
  %call35 = call i32 @strlen(i8* %arrayidx34) #4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx28, i8* align 1 %arrayidx31, i32 %call35, i1 false)
  %27 = load i8*, i8** %ns, align 4
  %arrayidx36 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_so37 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx36, i32 0, i32 0
  %28 = load i32, i32* %rm_so37, align 4
  %29 = load i8*, i8** %ss, align 4
  %call38 = call i32 @strlen(i8* %29) #4
  %add39 = add i32 %28, %call38
  %30 = load i8*, i8** %t1, align 4
  %arrayidx40 = getelementptr inbounds [1 x %struct.regmatch_t], [1 x %struct.regmatch_t]* %substmatch, i32 0, i32 0
  %rm_eo41 = getelementptr inbounds %struct.regmatch_t, %struct.regmatch_t* %arrayidx40, i32 0, i32 1
  %31 = load i32, i32* %rm_eo41, align 4
  %arrayidx42 = getelementptr inbounds i8, i8* %30, i32 %31
  %call43 = call i32 @strlen(i8* %arrayidx42) #4
  %add44 = add i32 %add39, %call43
  %arrayidx45 = getelementptr inbounds i8, i8* %27, i32 %add44
  store i8 0, i8* %arrayidx45, align 1
  %32 = load i8*, i8** %ns, align 4
  %call46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i32 0, i32 0), i8* %32)
  %33 = load i8*, i8** %ns, align 4
  call void @free(i8* %33)
  br label %if.end

if.else:                                          ; preds = %entry
  %34 = load i8*, i8** %t1, align 4
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i32 0, i32 0), i8* %34)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @regfree(%struct.re_pattern_buffer* %preg)
  ret i32 0
}

declare i32 @regcomp(%struct.re_pattern_buffer* %0, i8* %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

declare i32 @regexec(%struct.re_pattern_buffer* %0, i8* %1, i32 %2, %struct.regmatch_t* %3, i32 %4) #1

declare void @regfree(%struct.re_pattern_buffer* %0) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call1 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %1, i32 0, %struct.regmatch_t* null, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %5, i32 0, %struct.regmatch_t* null, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %call3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call8 = call i32 @regexec(%struct.re_pattern_buffer* %preg, i8* %8, i32 1, %struct.regmatch_t* %arraydecay, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %call8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %rm_so, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call10 = call i32 @strlen(i8* %10) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add i32 %add, %call10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %call12 = call i32 @strlen(i8* %11) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %rm_eo, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call12, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add14 = add i32 %add11, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sub %4, %5
%7:i32 = add %3, %6
infer %7

; *****
; For LLVM instruction:
;  %add15 = add i32 %add14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sub %4, %5
%7:i32 = add %3, %6
%8:i32 = add 2:i32, %7
infer %8

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %rm_so18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add19 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %rm_so21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call23 = call i32 @strlen(i8* %19) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %rm_so25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call26 = call i32 @strlen(i8* %22) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add i32 %21, %call26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %rm_eo30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %rm_eo33, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call35 = call i32 @strlen(i8* %arrayidx34) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %rm_so37, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call38 = call i32 @strlen(i8* %29) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add39 = add i32 %28, %call38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %rm_eo41, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call43 = call i32 @strlen(i8* %arrayidx42) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add44 = add i32 %add39, %call43
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = add %0, %3
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sub %4, %5
%7:i32 = add %3, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sub %4, %5
%7:i32 = add %3, %6
%8:i32 = add 2:i32, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = add %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sub %4, %5
%7:i32 = add %3, %6

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
