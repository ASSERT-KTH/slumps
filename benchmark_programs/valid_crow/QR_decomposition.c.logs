
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for matrix_new()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for matrix_new()

; entering Souper's runOnFunction() for matrix_delete()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for matrix_delete()

; entering Souper's runOnFunction() for matrix_transpose()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for matrix_transpose()

; entering Souper's runOnFunction() for matrix_copy()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = mul nsw i32 %8, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for matrix_copy()

; entering Souper's runOnFunction() for matrix_mul()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %m3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %11, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %14, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc21 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for matrix_mul()

; entering Souper's runOnFunction() for matrix_minor()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %m5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %13, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %17, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for matrix_minor()

; entering Souper's runOnFunction() for vmadd()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for vmadd()

; entering Souper's runOnFunction() for vmul()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for vmul()

; entering Souper's runOnFunction() for vnorm()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for vnorm()

; entering Souper's runOnFunction() for vdiv()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for vdiv()

; entering Souper's runOnFunction() for mcol()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for mcol()

; entering Souper's runOnFunction() for matrix_show()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for matrix_show()

; entering Souper's runOnFunction() for householder()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %m2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %7, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %m4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %m7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne %struct.mat_t* %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %m11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = fcmp ogt double %31, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %m18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp slt i32 %33, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %36, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp21, i32 1, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
infer %3

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %m23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %m25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %m27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %m29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp34 = icmp ne %struct.mat_t* %54, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %59, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %n46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp47 = icmp slt i32 %66, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %m50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub51 = sub nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp52 = icmp slt i32 %69, %sub51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp58 = icmp sgt i32 %77, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %i44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %84, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for householder()

; entering Souper's runOnFunction() for main()

; ModuleID = './QR_decomposition.c.bc'
source_filename = "./QR_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.mat_t = type { i32, i32, double** }

@.str = private unnamed_addr constant [7 x i8] c" %8.3f\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@in = hidden global [5 x [3 x double]] [[3 x double] [double 1.200000e+01, double -5.100000e+01, double 4.000000e+00], [3 x double] [double 6.000000e+00, double 1.670000e+02, double -6.800000e+01], [3 x double] [double -4.000000e+00, double 2.400000e+01, double -4.100000e+01], [3 x double] [double -1.000000e+00, double 1.000000e+00, double 0.000000e+00], [3 x double] [double 2.000000e+00, double 0.000000e+00, double 3.000000e+00]], align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Q * R\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_new(i32 %m, i32 %n) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.mat_t*
  store %struct.mat_t* %0, %struct.mat_t** %x, align 4
  %1 = load i32, i32* %m.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to double**
  %3 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  store double** %2, double*** %v, align 4
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %4, %5
  %call3 = call noalias i8* @calloc(i32 8, i32 %mul2)
  %6 = bitcast i8* %call3 to double*
  %7 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %7, i32 0, i32 2
  %8 = load double**, double*** %v4, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 0
  store double* %6, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v5, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 0
  %13 = load double*, double** %arrayidx6, align 4
  %14 = load i32, i32* %n.addr, align 4
  %15 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %14, %15
  %add.ptr = getelementptr inbounds double, double* %13, i32 %mul7
  %16 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v8 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %16, i32 0, i32 2
  %17 = load double**, double*** %v8, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds double*, double** %17, i32 %18
  store double* %add.ptr, double** %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %m.addr, align 4
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %m10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 0
  store i32 %20, i32* %m10, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %n11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 1
  store i32 %22, i32* %n11, align 4
  %24 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %24
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_delete(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 2
  %1 = load double**, double*** %v, align 4
  %arrayidx = getelementptr inbounds double*, double** %1, i32 0
  %2 = load double*, double** %arrayidx, align 4
  %3 = bitcast double* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 2
  %5 = load double**, double*** %v1, align 4
  %6 = bitcast double** %5 to i8*
  call void @free(i8* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %8 = bitcast %struct.mat_t* %7 to i8*
  call void @free(i8* %8)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_transpose(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca double, align 8
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 2
  %6 = load double**, double*** %v, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx5, align 8
  store double %10, double* %t, align 8
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 2
  %12 = load double**, double*** %v6, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx7, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v9, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %20, i32 %21
  store double %16, double* %arrayidx11, align 8
  %22 = load double, double* %t, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v12, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx13, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds double, double* %26, i32 %27
  store double %22, double* %arrayidx14, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %29, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_copy(i32 %n, double* %a, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a.addr = alloca double*, align 4
  %m.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %a, double** %a.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %m.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %2)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %m.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load double*, double** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %0
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx5, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %15, i32 %16
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_mul(%struct.mat_t* %x, %struct.mat_t* %y) #0 {
entry:
  %retval = alloca %struct.mat_t*, align 4
  %x.addr = alloca %struct.mat_t*, align 4
  %y.addr = alloca %struct.mat_t*, align 4
  %r = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store %struct.mat_t* %y, %struct.mat_t** %y.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %m = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 0
  %3 = load i32, i32* %m, align 4
  %cmp = icmp ne i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mat_t* null, %struct.mat_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 0
  %5 = load i32, i32* %m1, align 4
  %6 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %5, i32 %7)
  store %struct.mat_t* %call, %struct.mat_t** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m3 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %9, i32 0, i32 0
  %10 = load i32, i32* %m3, align 4
  %cmp4 = icmp slt i32 %8, %10
  br i1 %cmp4, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.body
  %11 = load i32, i32* %j, align 4
  %12 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %n6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 1
  %13 = load i32, i32* %n6, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %k, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body8
  %14 = load i32, i32* %k, align 4
  %15 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n10 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %15, i32 0, i32 1
  %16 = load i32, i32* %n10, align 4
  %cmp11 = icmp slt i32 %14, %16
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %17, i32 0, i32 2
  %18 = load double**, double*** %v, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx, align 4
  %21 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx13, align 8
  %23 = load %struct.mat_t*, %struct.mat_t** %y.addr, align 4
  %v14 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %23, i32 0, i32 2
  %24 = load double**, double*** %v14, align 4
  %25 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx15, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx16, align 8
  %mul = fmul double %22, %28
  %29 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  %v17 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %29, i32 0, i32 2
  %30 = load double**, double*** %v17, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx18, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx19, align 8
  %add = fadd double %34, %mul
  store double %add, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %35 = load i32, i32* %k, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %36 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %36, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %37 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %37, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  %38 = load %struct.mat_t*, %struct.mat_t** %r, align 4
  store %struct.mat_t* %38, %struct.mat_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end25, %if.then
  %39 = load %struct.mat_t*, %struct.mat_t** %retval, align 4
  ret %struct.mat_t* %39
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @matrix_minor(%struct.mat_t* %x, i32 %d) #0 {
entry:
  %x.addr = alloca %struct.mat_t*, align 4
  %d.addr = alloca i32, align 4
  %m = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %x, %struct.mat_t** %x.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %2, i32 0, i32 1
  %3 = load i32, i32* %n, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %1, i32 %3)
  store %struct.mat_t* %call, %struct.mat_t** %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %d.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %d.addr, align 4
  store i32 %12, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc21, %for.end
  %13 = load i32, i32* %i3, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %m5 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m5, align 4
  %cmp6 = icmp slt i32 %13, %15
  br i1 %cmp6, label %for.body7, label %for.end23

for.body7:                                        ; preds = %for.cond4
  %16 = load i32, i32* %d.addr, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc18, %for.body7
  %17 = load i32, i32* %j, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %n9 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %18, i32 0, i32 1
  %19 = load i32, i32* %n9, align 4
  %cmp10 = icmp slt i32 %17, %19
  br i1 %cmp10, label %for.body11, label %for.end20

for.body11:                                       ; preds = %for.cond8
  %20 = load %struct.mat_t*, %struct.mat_t** %x.addr, align 4
  %v12 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %20, i32 0, i32 2
  %21 = load double**, double*** %v12, align 4
  %22 = load i32, i32* %i3, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %21, i32 %22
  %23 = load double*, double** %arrayidx13, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx14, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  %v15 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v15, align 4
  %28 = load i32, i32* %i3, align 4
  %arrayidx16 = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx16, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds double, double* %29, i32 %30
  store double %25, double* %arrayidx17, align 8
  br label %for.inc18

for.inc18:                                        ; preds = %for.body11
  %31 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %31, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond8

for.end20:                                        ; preds = %for.cond8
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i3, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i3, align 4
  br label %for.cond4

for.end23:                                        ; preds = %for.cond4
  %33 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  ret %struct.mat_t* %33
}

; Function Attrs: noinline nounwind optnone
define hidden double* @vmadd(double* %a, double* %b, double %s, double* %c, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %s.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double %s, double* %s.addr, align 8
  store double* %c, double** %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %s.addr, align 8
  %6 = load double*, double** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx1, align 8
  %mul = fmul double %5, %8
  %add = fadd double %4, %mul
  %9 = load double*, double** %c.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %9, i32 %10
  store double %add, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %c.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.mat_t* @vmul(double* %v, i32 %n) #0 {
entry:
  %v.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i12 = alloca i32, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %call = call %struct.mat_t* @matrix_new(i32 %0, i32 %1)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load double*, double** %v.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %mul = fmul double -2.000000e+00, %8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %mul5 = fmul double %mul, %11
  %12 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v6 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %12, i32 0, i32 2
  %13 = load double**, double*** %v6, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %13, i32 %14
  %15 = load double*, double** %arrayidx7, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds double, double* %15, i32 %16
  store double %mul5, double* %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  store i32 0, i32* %i12, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc19, %for.end11
  %19 = load i32, i32* %i12, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp14 = icmp slt i32 %19, %20
  br i1 %cmp14, label %for.body15, label %for.end21

for.body15:                                       ; preds = %for.cond13
  %21 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  %v16 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %21, i32 0, i32 2
  %22 = load double**, double*** %v16, align 4
  %23 = load i32, i32* %i12, align 4
  %arrayidx17 = getelementptr inbounds double*, double** %22, i32 %23
  %24 = load double*, double** %arrayidx17, align 4
  %25 = load i32, i32* %i12, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %25
  %26 = load double, double* %arrayidx18, align 8
  %add = fadd double %26, 1.000000e+00
  store double %add, double* %arrayidx18, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %for.body15
  %27 = load i32, i32* %i12, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i12, align 4
  br label %for.cond13

for.end21:                                        ; preds = %for.cond13
  %28 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  ret %struct.mat_t* %28
}

; Function Attrs: noinline nounwind optnone
define hidden double @vnorm(double* %x, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %sum = alloca double, align 8
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx1, align 8
  %mul = fmul double %4, %7
  %8 = load double, double* %sum, align 8
  %add = fadd double %8, %mul
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double, double* %sum, align 8
  %11 = call double @llvm.sqrt.f64(double %10)
  ret double %11
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double* @vdiv(double* %x, double %d, double* %y, i32 %n) #0 {
entry:
  %x.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %y, double** %y.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double*, double** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %5 = load double, double* %d.addr, align 8
  %div = fdiv double %4, %5
  %6 = load double*, double** %y.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %6, i32 %7
  store double %div, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double*, double** %y.addr, align 4
  ret double* %9
}

; Function Attrs: noinline nounwind optnone
define hidden double* @mcol(%struct.mat_t* %m, double* %v, i32 %c) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %v.addr = alloca double*, align 4
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store double* %v, double** %v.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %3, i32 0, i32 2
  %4 = load double**, double*** %v2, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %c.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = load double*, double** %v.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %9, i32 %10
  store double %8, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double*, double** %v.addr, align 4
  ret double* %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @matrix_show(%struct.mat_t* %m) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %1, i32 0, i32 0
  %2 = load i32, i32* %m1, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %4, i32 0, i32 1
  %5 = load i32, i32* %n, align 4
  %cmp3 = icmp slt i32 %3, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %6, i32 0, i32 2
  %7 = load double**, double*** %v, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx5, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %13, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @householder(%struct.mat_t* %m, %struct.mat_t** %R, %struct.mat_t** %Q) #0 {
entry:
  %m.addr = alloca %struct.mat_t*, align 4
  %R.addr = alloca %struct.mat_t**, align 4
  %Q.addr = alloca %struct.mat_t**, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %z = alloca %struct.mat_t*, align 4
  %z1 = alloca %struct.mat_t*, align 4
  %k = alloca i32, align 4
  %saved_stack5 = alloca i8*, align 4
  %__vla_expr1 = alloca i32, align 4
  %__vla_expr2 = alloca i32, align 4
  %a = alloca double, align 8
  %i = alloca i32, align 4
  %i44 = alloca i32, align 4
  store %struct.mat_t* %m, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t** %R, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t** %Q, %struct.mat_t*** %Q.addr, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m1 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %0, i32 0, i32 0
  %1 = load i32, i32* %m1, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca %struct.mat_t*, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  %3 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  store %struct.mat_t* %3, %struct.mat_t** %z, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %entry
  %4 = load i32, i32* %k, align 4
  %5 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n = getelementptr inbounds %struct.mat_t, %struct.mat_t* %5, i32 0, i32 1
  %6 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %7 = load i32, i32* %k, align 4
  %8 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m2 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %8, i32 0, i32 0
  %9 = load i32, i32* %m2, align 4
  %sub = sub nsw i32 %9, 1
  %cmp3 = icmp slt i32 %7, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %10, label %for.body, label %for.end40

for.body:                                         ; preds = %land.end
  %11 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m4 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %11, i32 0, i32 0
  %12 = load i32, i32* %m4, align 4
  %13 = call i8* @llvm.stacksave()
  store i8* %13, i8** %saved_stack5, align 4
  %vla6 = alloca double, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  %14 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m7 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %14, i32 0, i32 0
  %15 = load i32, i32* %m7, align 4
  %vla8 = alloca double, i32 %15, align 16
  store i32 %15, i32* %__vla_expr2, align 4
  %16 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %17 = load i32, i32* %k, align 4
  %call = call %struct.mat_t* @matrix_minor(%struct.mat_t* %16, i32 %17)
  store %struct.mat_t* %call, %struct.mat_t** %z1, align 4
  %18 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %19 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp9 = icmp ne %struct.mat_t* %18, %19
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %20 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %21 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %21, %struct.mat_t** %z, align 4
  %22 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %23 = load i32, i32* %k, align 4
  %call10 = call double* @mcol(%struct.mat_t* %22, double* %vla8, i32 %23)
  %24 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m11 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %24, i32 0, i32 0
  %25 = load i32, i32* %m11, align 4
  %call12 = call double @vnorm(double* %vla8, i32 %25)
  store double %call12, double* %a, align 8
  %26 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %v = getelementptr inbounds %struct.mat_t, %struct.mat_t* %26, i32 0, i32 2
  %27 = load double**, double*** %v, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds double*, double** %27, i32 %28
  %29 = load double*, double** %arrayidx, align 4
  %30 = load i32, i32* %k, align 4
  %arrayidx13 = getelementptr inbounds double, double* %29, i32 %30
  %31 = load double, double* %arrayidx13, align 8
  %cmp14 = fcmp ogt double %31, 0.000000e+00
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %32 = load double, double* %a, align 8
  %fneg = fneg double %32
  store double %fneg, double* %a, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc, %if.end16
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m18 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %34, i32 0, i32 0
  %35 = load i32, i32* %m18, align 4
  %cmp19 = icmp slt i32 %33, %35
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond17
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %k, align 4
  %cmp21 = icmp eq i32 %36, %37
  %38 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 0
  %conv = sitofp i32 %cond to double
  %39 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds double, double* %vla6, i32 %39
  store double %conv, double* %arrayidx22, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body20
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond17

for.end:                                          ; preds = %for.cond17
  %41 = load double, double* %a, align 8
  %42 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m23 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %42, i32 0, i32 0
  %43 = load i32, i32* %m23, align 4
  %call24 = call double* @vmadd(double* %vla8, double* %vla6, double %41, double* %vla6, i32 %43)
  %44 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m25 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %44, i32 0, i32 0
  %45 = load i32, i32* %m25, align 4
  %call26 = call double @vnorm(double* %vla6, i32 %45)
  %46 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m27 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %46, i32 0, i32 0
  %47 = load i32, i32* %m27, align 4
  %call28 = call double* @vdiv(double* %vla6, double %call26, double* %vla6, i32 %47)
  %48 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m29 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %48, i32 0, i32 0
  %49 = load i32, i32* %m29, align 4
  %call30 = call %struct.mat_t* @vmul(double* %vla6, i32 %49)
  %50 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %50
  store %struct.mat_t* %call30, %struct.mat_t** %arrayidx31, align 4
  %51 = load i32, i32* %k, align 4
  %arrayidx32 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %51
  %52 = load %struct.mat_t*, %struct.mat_t** %arrayidx32, align 4
  %53 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %call33 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %52, %struct.mat_t* %53)
  store %struct.mat_t* %call33, %struct.mat_t** %z1, align 4
  %54 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %55 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %cmp34 = icmp ne %struct.mat_t* %54, %55
  br i1 %cmp34, label %if.then36, label %if.end37

if.then36:                                        ; preds = %for.end
  %56 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %56)
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %for.end
  %57 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  store %struct.mat_t* %57, %struct.mat_t** %z, align 4
  %58 = load i8*, i8** %saved_stack5, align 4
  call void @llvm.stackrestore(i8* %58)
  br label %for.inc38

for.inc38:                                        ; preds = %if.end37
  %59 = load i32, i32* %k, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %k, align 4
  br label %for.cond

for.end40:                                        ; preds = %land.end
  %60 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  call void @matrix_delete(%struct.mat_t* %60)
  %arrayidx41 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %61 = load %struct.mat_t*, %struct.mat_t** %arrayidx41, align 16
  %62 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %61, %struct.mat_t** %62, align 4
  %arrayidx42 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %63 = load %struct.mat_t*, %struct.mat_t** %arrayidx42, align 16
  %64 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call43 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %63, %struct.mat_t* %64)
  %65 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %call43, %struct.mat_t** %65, align 4
  store i32 1, i32* %i44, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc63, %for.end40
  %66 = load i32, i32* %i44, align 4
  %67 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %n46 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %67, i32 0, i32 1
  %68 = load i32, i32* %n46, align 4
  %cmp47 = icmp slt i32 %66, %68
  br i1 %cmp47, label %land.rhs49, label %land.end54

land.rhs49:                                       ; preds = %for.cond45
  %69 = load i32, i32* %i44, align 4
  %70 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %m50 = getelementptr inbounds %struct.mat_t, %struct.mat_t* %70, i32 0, i32 0
  %71 = load i32, i32* %m50, align 4
  %sub51 = sub nsw i32 %71, 1
  %cmp52 = icmp slt i32 %69, %sub51
  br label %land.end54

land.end54:                                       ; preds = %land.rhs49, %for.cond45
  %72 = phi i1 [ false, %for.cond45 ], [ %cmp52, %land.rhs49 ]
  br i1 %72, label %for.body55, label %for.end65

for.body55:                                       ; preds = %land.end54
  %73 = load i32, i32* %i44, align 4
  %arrayidx56 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %73
  %74 = load %struct.mat_t*, %struct.mat_t** %arrayidx56, align 4
  %75 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %76 = load %struct.mat_t*, %struct.mat_t** %75, align 4
  %call57 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %74, %struct.mat_t* %76)
  store %struct.mat_t* %call57, %struct.mat_t** %z1, align 4
  %77 = load i32, i32* %i44, align 4
  %cmp58 = icmp sgt i32 %77, 1
  br i1 %cmp58, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body55
  %78 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %79 = load %struct.mat_t*, %struct.mat_t** %78, align 4
  call void @matrix_delete(%struct.mat_t* %79)
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %for.body55
  %80 = load %struct.mat_t*, %struct.mat_t** %z1, align 4
  %81 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  store %struct.mat_t* %80, %struct.mat_t** %81, align 4
  %82 = load i32, i32* %i44, align 4
  %arrayidx62 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 %82
  %83 = load %struct.mat_t*, %struct.mat_t** %arrayidx62, align 4
  call void @matrix_delete(%struct.mat_t* %83)
  br label %for.inc63

for.inc63:                                        ; preds = %if.end61
  %84 = load i32, i32* %i44, align 4
  %inc64 = add nsw i32 %84, 1
  store i32 %inc64, i32* %i44, align 4
  br label %for.cond45

for.end65:                                        ; preds = %land.end54
  %arrayidx66 = getelementptr inbounds %struct.mat_t*, %struct.mat_t** %vla, i32 0
  %85 = load %struct.mat_t*, %struct.mat_t** %arrayidx66, align 16
  call void @matrix_delete(%struct.mat_t* %85)
  %86 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %87 = load %struct.mat_t*, %struct.mat_t** %86, align 4
  %88 = load %struct.mat_t*, %struct.mat_t** %m.addr, align 4
  %call67 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %87, %struct.mat_t* %88)
  store %struct.mat_t* %call67, %struct.mat_t** %z, align 4
  %89 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  %90 = load %struct.mat_t*, %struct.mat_t** %89, align 4
  call void @matrix_delete(%struct.mat_t* %90)
  %91 = load %struct.mat_t*, %struct.mat_t** %z, align 4
  %92 = load %struct.mat_t**, %struct.mat_t*** %R.addr, align 4
  store %struct.mat_t* %91, %struct.mat_t** %92, align 4
  %93 = load %struct.mat_t**, %struct.mat_t*** %Q.addr, align 4
  %94 = load %struct.mat_t*, %struct.mat_t** %93, align 4
  call void @matrix_transpose(%struct.mat_t* %94)
  %95 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %95)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %R = alloca %struct.mat_t*, align 4
  %Q = alloca %struct.mat_t*, align 4
  %x = alloca %struct.mat_t*, align 4
  %m = alloca %struct.mat_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.mat_t* @matrix_copy(i32 3, double* getelementptr inbounds ([5 x [3 x double]], [5 x [3 x double]]* @in, i32 0, i32 0, i32 0), i32 5)
  store %struct.mat_t* %call, %struct.mat_t** %x, align 4
  %0 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @householder(%struct.mat_t* %0, %struct.mat_t** %R, %struct.mat_t** %Q)
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %1 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_show(%struct.mat_t* %1)
  %call2 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  %2 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_show(%struct.mat_t* %2)
  %3 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  %4 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  %call3 = call %struct.mat_t* @matrix_mul(%struct.mat_t* %3, %struct.mat_t* %4)
  store %struct.mat_t* %call3, %struct.mat_t** %m, align 4
  %call4 = call i32 @puts(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  %5 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_show(%struct.mat_t* %5)
  %6 = load %struct.mat_t*, %struct.mat_t** %x, align 4
  call void @matrix_delete(%struct.mat_t* %6)
  %7 = load %struct.mat_t*, %struct.mat_t** %R, align 4
  call void @matrix_delete(%struct.mat_t* %7)
  %8 = load %struct.mat_t*, %struct.mat_t** %Q, align 4
  call void @matrix_delete(%struct.mat_t* %8)
  %9 = load %struct.mat_t*, %struct.mat_t** %m, align 4
  call void @matrix_delete(%struct.mat_t* %9)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
