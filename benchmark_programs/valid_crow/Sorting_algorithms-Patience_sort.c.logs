
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for patienceSort()

; ModuleID = './Sorting_algorithms-Patience_sort.c.bc'
source_filename = "./Sorting_algorithms-Patience_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [54 x i8] c"Usage : %s <integers to be sorted separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32* @patienceSort(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %pickedRow = alloca i32, align 4
  %count = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32, i32* %size.addr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %3 = mul nuw i32 %0, %1
  %vla = alloca i32, i32 %3, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 %1, i32* %__vla_expr1, align 4
  %4 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @calloc(i32 4, i32 %4)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %count, align 4
  %6 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %6, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call1 to i32*
  store i32* %7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %size.addr, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i32*, i32** %count, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body4
  %15 = load i32*, i32** %count, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sgt i32 %17, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %j, align 4
  %19 = mul nsw i32 %18, %1
  %arrayidx8 = getelementptr inbounds i32, i32* %vla, i32 %19
  %20 = load i32*, i32** %count, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %arrayidx8, i32 %sub
  %23 = load i32, i32* %arrayidx10, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %23, %26
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body4
  %27 = load i32*, i32** %arr.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx13, align 4
  %30 = load i32, i32* %j, align 4
  %31 = mul nsw i32 %30, %1
  %arrayidx14 = getelementptr inbounds i32, i32* %vla, i32 %31
  %32 = load i32*, i32** %count, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx14, i32 %34
  store i32 %29, i32* %arrayidx16, align 4
  %35 = load i32*, i32** %count, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx17, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx17, align 4
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %38, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %39, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  %40 = mul nsw i32 0, %1
  %arrayidx22 = getelementptr inbounds i32, i32* %vla, i32 %40
  %41 = load i32*, i32** %count, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %41, i32 0
  %42 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %42, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %arrayidx22, i32 %sub24
  %43 = load i32, i32* %arrayidx25, align 4
  store i32 %43, i32* %min, align 4
  store i32 0, i32* %pickedRow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc65, %for.end21
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %44, %45
  br i1 %cmp27, label %for.body28, label %for.end67

for.body28:                                       ; preds = %for.cond26
  store i32 0, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc46, %for.body28
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %size.addr, align 4
  %cmp30 = icmp slt i32 %46, %47
  br i1 %cmp30, label %for.body31, label %for.end48

for.body31:                                       ; preds = %for.cond29
  %48 = load i32*, i32** %count, align 4
  %49 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %48, i32 %49
  %50 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sgt i32 %50, 0
  br i1 %cmp33, label %land.lhs.true34, label %if.end45

land.lhs.true34:                                  ; preds = %for.body31
  %51 = load i32, i32* %j, align 4
  %52 = mul nsw i32 %51, %1
  %arrayidx35 = getelementptr inbounds i32, i32* %vla, i32 %52
  %53 = load i32*, i32** %count, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %55, 1
  %arrayidx38 = getelementptr inbounds i32, i32* %arrayidx35, i32 %sub37
  %56 = load i32, i32* %arrayidx38, align 4
  %57 = load i32, i32* %min, align 4
  %cmp39 = icmp slt i32 %56, %57
  br i1 %cmp39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %land.lhs.true34
  %58 = load i32, i32* %j, align 4
  %59 = mul nsw i32 %58, %1
  %arrayidx41 = getelementptr inbounds i32, i32* %vla, i32 %59
  %60 = load i32*, i32** %count, align 4
  %61 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %60, i32 %61
  %62 = load i32, i32* %arrayidx42, align 4
  %sub43 = sub nsw i32 %62, 1
  %arrayidx44 = getelementptr inbounds i32, i32* %arrayidx41, i32 %sub43
  %63 = load i32, i32* %arrayidx44, align 4
  store i32 %63, i32* %min, align 4
  %64 = load i32, i32* %j, align 4
  store i32 %64, i32* %pickedRow, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %land.lhs.true34, %for.body31
  br label %for.inc46

for.inc46:                                        ; preds = %if.end45
  %65 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %65, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond29

for.end48:                                        ; preds = %for.cond29
  %66 = load i32, i32* %min, align 4
  %67 = load i32*, i32** %sortedArr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %66, i32* %arrayidx49, align 4
  %69 = load i32*, i32** %count, align 4
  %70 = load i32, i32* %pickedRow, align 4
  %arrayidx50 = getelementptr inbounds i32, i32* %69, i32 %70
  %71 = load i32, i32* %arrayidx50, align 4
  %dec = add nsw i32 %71, -1
  store i32 %dec, i32* %arrayidx50, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.end48
  %72 = load i32, i32* %j, align 4
  %73 = load i32, i32* %size.addr, align 4
  %cmp52 = icmp slt i32 %72, %73
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %74 = load i32*, i32** %count, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %74, i32 %75
  %76 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp sgt i32 %76, 0
  br i1 %cmp55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %for.body53
  %77 = load i32, i32* %j, align 4
  %78 = mul nsw i32 %77, %1
  %arrayidx57 = getelementptr inbounds i32, i32* %vla, i32 %78
  %79 = load i32*, i32** %count, align 4
  %80 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %79, i32 %80
  %81 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %81, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %arrayidx57, i32 %sub59
  %82 = load i32, i32* %arrayidx60, align 4
  store i32 %82, i32* %min, align 4
  %83 = load i32, i32* %j, align 4
  store i32 %83, i32* %pickedRow, align 4
  br label %for.end64

if.end61:                                         ; preds = %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %84 = load i32, i32* %j, align 4
  %inc63 = add nsw i32 %84, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %if.then56, %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %85 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %85, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond26

for.end67:                                        ; preds = %for.cond26
  %86 = load i32*, i32** %count, align 4
  %87 = bitcast i32* %86 to i8*
  call void @free(i8* %87)
  %88 = bitcast i32* %vla to i8*
  call void @free(i8* %88)
  %89 = load i32*, i32** %sortedArr, align 4
  %90 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %90)
  ret i32* %89
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32* @patienceSort(i32* %11, i32 %sub6)
  store i32* %call7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %argC.addr, align 4
  %sub9 = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub9
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %sortedArr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx12, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %17)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %18 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = mul nuw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = mul nsw i32 %18, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp sge i32 %23, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = mul nsw i32 %30, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = mul nsw i32 0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub24 = sub nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp27 = icmp slt i32 %44, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp slt i32 %46, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sgt i32 %50, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = mul nsw i32 %51, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %arrayidx36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub37 = sub nsw i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %min, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %56, %57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = mul nsw i32 %58, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %arrayidx42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub43 = sub nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %arrayidx44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc47 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %min, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %pickedRow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %arrayidx50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %71, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp slt i32 %72, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %arrayidx54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp55 = icmp sgt i32 %76, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = mul nsw i32 %77, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %arrayidx58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub59 = sub nsw i32 %81, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %arrayidx60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc63 = add nsw i32 %84, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc66 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2098929800
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
second query is UNSAT-- this guess works

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Sorting_algorithms-Patience_sort.c.bc'
source_filename = "./Sorting_algorithms-Patience_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [54 x i8] c"Usage : %s <integers to be sorted separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32* @patienceSort(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %pickedRow = alloca i32, align 4
  %count = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32, i32* %size.addr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %3 = mul nuw i32 %0, %1
  %vla = alloca i32, i32 %3, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 %1, i32* %__vla_expr1, align 4
  %4 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @calloc(i32 4, i32 %4)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %count, align 4
  %6 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %6, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call1 to i32*
  store i32* %7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %size.addr, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i32*, i32** %count, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body4
  %15 = load i32*, i32** %count, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sgt i32 %17, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %j, align 4
  %19 = mul nsw i32 %18, %1
  %arrayidx8 = getelementptr inbounds i32, i32* %vla, i32 %19
  %20 = load i32*, i32** %count, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %arrayidx8, i32 %sub
  %23 = load i32, i32* %arrayidx10, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %23, %26
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body4
  %27 = load i32*, i32** %arr.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx13, align 4
  %30 = load i32, i32* %j, align 4
  %31 = mul nsw i32 %30, %1
  %arrayidx14 = getelementptr inbounds i32, i32* %vla, i32 %31
  %32 = load i32*, i32** %count, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx14, i32 %34
  store i32 %29, i32* %arrayidx16, align 4
  %35 = load i32*, i32** %count, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx17, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx17, align 4
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %38, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %39, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  %40 = mul nsw i32 0, %1
  %arrayidx22 = getelementptr inbounds i32, i32* %vla, i32 %40
  %41 = load i32*, i32** %count, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %41, i32 0
  %42 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %42, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %arrayidx22, i32 %sub24
  %43 = load i32, i32* %arrayidx25, align 4
  store i32 %43, i32* %min, align 4
  store i32 0, i32* %pickedRow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc65, %for.end21
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %44, %45
  br i1 %cmp27, label %for.body28, label %for.end67

for.body28:                                       ; preds = %for.cond26
  store i32 0, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc46, %for.body28
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %size.addr, align 4
  %cmp30 = icmp slt i32 %46, %47
  br i1 %cmp30, label %for.body31, label %for.end48

for.body31:                                       ; preds = %for.cond29
  %48 = load i32*, i32** %count, align 4
  %49 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %48, i32 %49
  %50 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sgt i32 %50, 0
  br i1 %cmp33, label %land.lhs.true34, label %if.end45

land.lhs.true34:                                  ; preds = %for.body31
  %51 = load i32, i32* %j, align 4
  %52 = mul nsw i32 %51, %1
  %arrayidx35 = getelementptr inbounds i32, i32* %vla, i32 %52
  %53 = load i32*, i32** %count, align 4
  %54 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %55, 1
  %arrayidx38 = getelementptr inbounds i32, i32* %arrayidx35, i32 %sub37
  %56 = load i32, i32* %arrayidx38, align 4
  %57 = load i32, i32* %min, align 4
  %cmp39 = icmp slt i32 %56, %57
  br i1 %cmp39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %land.lhs.true34
  %58 = load i32, i32* %j, align 4
  %59 = mul nsw i32 %58, %1
  %arrayidx41 = getelementptr inbounds i32, i32* %vla, i32 %59
  %60 = load i32*, i32** %count, align 4
  %61 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %60, i32 %61
  %62 = load i32, i32* %arrayidx42, align 4
  %sub43 = sub nsw i32 %62, 1
  %arrayidx44 = getelementptr inbounds i32, i32* %arrayidx41, i32 %sub43
  %63 = load i32, i32* %arrayidx44, align 4
  store i32 %63, i32* %min, align 4
  %64 = load i32, i32* %j, align 4
  store i32 %64, i32* %pickedRow, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %land.lhs.true34, %for.body31
  br label %for.inc46

for.inc46:                                        ; preds = %if.end45
  %65 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %65, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond29

for.end48:                                        ; preds = %for.cond29
  %66 = load i32, i32* %min, align 4
  %67 = load i32*, i32** %sortedArr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %66, i32* %arrayidx49, align 4
  %69 = load i32*, i32** %count, align 4
  %70 = load i32, i32* %pickedRow, align 4
  %arrayidx50 = getelementptr inbounds i32, i32* %69, i32 %70
  %71 = load i32, i32* %arrayidx50, align 4
  %dec = add nsw i32 %71, -1
  store i32 %dec, i32* %arrayidx50, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.end48
  %72 = load i32, i32* %j, align 4
  %73 = load i32, i32* %size.addr, align 4
  %cmp52 = icmp slt i32 %72, %73
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %74 = load i32*, i32** %count, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %74, i32 %75
  %76 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp sgt i32 %76, 0
  br i1 %cmp55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %for.body53
  %77 = load i32, i32* %j, align 4
  %78 = mul nsw i32 %77, %1
  %arrayidx57 = getelementptr inbounds i32, i32* %vla, i32 %78
  %79 = load i32*, i32** %count, align 4
  %80 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %79, i32 %80
  %81 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %81, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %arrayidx57, i32 %sub59
  %82 = load i32, i32* %arrayidx60, align 4
  store i32 %82, i32* %min, align 4
  %83 = load i32, i32* %j, align 4
  store i32 %83, i32* %pickedRow, align 4
  br label %for.end64

if.end61:                                         ; preds = %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %84 = load i32, i32* %j, align 4
  %inc63 = add nsw i32 %84, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %if.then56, %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %85 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %85, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond26

for.end67:                                        ; preds = %for.cond26
  %86 = load i32*, i32** %count, align 4
  %87 = bitcast i32* %86 to i8*
  call void @free(i8* %87)
  %88 = bitcast i32* %vla to i8*
  call void @free(i8* %88)
  %89 = load i32*, i32** %sortedArr, align 4
  %90 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %90)
  ret i32* %89
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32* @patienceSort(i32* %11, i32 %sub6)
  store i32* %call7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %argC.addr, align 4
  %sub9 = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub9
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %sortedArr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx12, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %17)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %18 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %40 = mul nsw i32 0, %1"
; from ""
; with "i32 0" in:
"%0:i32 = var
%1:i32 = mulnsw 0:i32, %0
cand %1 0:i32
"
; with "i32 0"

Module after replacement:
; ModuleID = './Sorting_algorithms-Patience_sort.c.bc'
source_filename = "./Sorting_algorithms-Patience_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [54 x i8] c"Usage : %s <integers to be sorted separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32* @patienceSort(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %pickedRow = alloca i32, align 4
  %count = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32, i32* %size.addr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %3 = mul nuw i32 %0, %1
  %vla = alloca i32, i32 %3, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 %1, i32* %__vla_expr1, align 4
  %4 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @calloc(i32 4, i32 %4)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %count, align 4
  %6 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %6, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call1 to i32*
  store i32* %7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %size.addr, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i32*, i32** %count, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body4
  %15 = load i32*, i32** %count, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sgt i32 %17, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %j, align 4
  %19 = mul nsw i32 %18, %1
  %arrayidx8 = getelementptr inbounds i32, i32* %vla, i32 %19
  %20 = load i32*, i32** %count, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %arrayidx8, i32 %sub
  %23 = load i32, i32* %arrayidx10, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %23, %26
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body4
  %27 = load i32*, i32** %arr.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx13, align 4
  %30 = load i32, i32* %j, align 4
  %31 = mul nsw i32 %30, %1
  %arrayidx14 = getelementptr inbounds i32, i32* %vla, i32 %31
  %32 = load i32*, i32** %count, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx14, i32 %34
  store i32 %29, i32* %arrayidx16, align 4
  %35 = load i32*, i32** %count, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx17, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx17, align 4
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %38, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %39, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  %arrayidx22 = getelementptr inbounds i32, i32* %vla, i32 0
  %40 = load i32*, i32** %count, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %40, i32 0
  %41 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %41, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %arrayidx22, i32 %sub24
  %42 = load i32, i32* %arrayidx25, align 4
  store i32 %42, i32* %min, align 4
  store i32 0, i32* %pickedRow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc65, %for.end21
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %43, %44
  br i1 %cmp27, label %for.body28, label %for.end67

for.body28:                                       ; preds = %for.cond26
  store i32 0, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc46, %for.body28
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %size.addr, align 4
  %cmp30 = icmp slt i32 %45, %46
  br i1 %cmp30, label %for.body31, label %for.end48

for.body31:                                       ; preds = %for.cond29
  %47 = load i32*, i32** %count, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %47, i32 %48
  %49 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sgt i32 %49, 0
  br i1 %cmp33, label %land.lhs.true34, label %if.end45

land.lhs.true34:                                  ; preds = %for.body31
  %50 = load i32, i32* %j, align 4
  %51 = mul nsw i32 %50, %1
  %arrayidx35 = getelementptr inbounds i32, i32* %vla, i32 %51
  %52 = load i32*, i32** %count, align 4
  %53 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %54, 1
  %arrayidx38 = getelementptr inbounds i32, i32* %arrayidx35, i32 %sub37
  %55 = load i32, i32* %arrayidx38, align 4
  %56 = load i32, i32* %min, align 4
  %cmp39 = icmp slt i32 %55, %56
  br i1 %cmp39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %land.lhs.true34
  %57 = load i32, i32* %j, align 4
  %58 = mul nsw i32 %57, %1
  %arrayidx41 = getelementptr inbounds i32, i32* %vla, i32 %58
  %59 = load i32*, i32** %count, align 4
  %60 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx42, align 4
  %sub43 = sub nsw i32 %61, 1
  %arrayidx44 = getelementptr inbounds i32, i32* %arrayidx41, i32 %sub43
  %62 = load i32, i32* %arrayidx44, align 4
  store i32 %62, i32* %min, align 4
  %63 = load i32, i32* %j, align 4
  store i32 %63, i32* %pickedRow, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %land.lhs.true34, %for.body31
  br label %for.inc46

for.inc46:                                        ; preds = %if.end45
  %64 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %64, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond29

for.end48:                                        ; preds = %for.cond29
  %65 = load i32, i32* %min, align 4
  %66 = load i32*, i32** %sortedArr, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %66, i32 %67
  store i32 %65, i32* %arrayidx49, align 4
  %68 = load i32*, i32** %count, align 4
  %69 = load i32, i32* %pickedRow, align 4
  %arrayidx50 = getelementptr inbounds i32, i32* %68, i32 %69
  %70 = load i32, i32* %arrayidx50, align 4
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %arrayidx50, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.end48
  %71 = load i32, i32* %j, align 4
  %72 = load i32, i32* %size.addr, align 4
  %cmp52 = icmp slt i32 %71, %72
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %73 = load i32*, i32** %count, align 4
  %74 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %73, i32 %74
  %75 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp sgt i32 %75, 0
  br i1 %cmp55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %for.body53
  %76 = load i32, i32* %j, align 4
  %77 = mul nsw i32 %76, %1
  %arrayidx57 = getelementptr inbounds i32, i32* %vla, i32 %77
  %78 = load i32*, i32** %count, align 4
  %79 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %78, i32 %79
  %80 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %80, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %arrayidx57, i32 %sub59
  %81 = load i32, i32* %arrayidx60, align 4
  store i32 %81, i32* %min, align 4
  %82 = load i32, i32* %j, align 4
  store i32 %82, i32* %pickedRow, align 4
  br label %for.end64

if.end61:                                         ; preds = %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %83 = load i32, i32* %j, align 4
  %inc63 = add nsw i32 %83, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %if.then56, %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %84 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %84, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond26

for.end67:                                        ; preds = %for.cond26
  %85 = load i32*, i32** %count, align 4
  %86 = bitcast i32* %85 to i8*
  call void @free(i8* %86)
  %87 = bitcast i32* %vla to i8*
  call void @free(i8* %87)
  %88 = load i32*, i32** %sortedArr, align 4
  %89 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %89)
  ret i32* %88
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32* @patienceSort(i32* %11, i32 %sub6)
  store i32* %call7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %argC.addr, align 4
  %sub9 = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub9
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %sortedArr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx12, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %17)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %18 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for patienceSort()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for patienceSort()

; ModuleID = './Sorting_algorithms-Patience_sort.c.bc'
source_filename = "./Sorting_algorithms-Patience_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [54 x i8] c"Usage : %s <integers to be sorted separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32* @patienceSort(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %pickedRow = alloca i32, align 4
  %count = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32, i32* %size.addr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %3 = mul nuw i32 %0, %1
  %vla = alloca i32, i32 %3, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 %1, i32* %__vla_expr1, align 4
  %4 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @calloc(i32 4, i32 %4)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %count, align 4
  %6 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %6, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call1 to i32*
  store i32* %7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %size.addr, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i32*, i32** %count, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body4
  %15 = load i32*, i32** %count, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sgt i32 %17, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %j, align 4
  %19 = mul nsw i32 %18, %1
  %arrayidx8 = getelementptr inbounds i32, i32* %vla, i32 %19
  %20 = load i32*, i32** %count, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %arrayidx8, i32 %sub
  %23 = load i32, i32* %arrayidx10, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %23, %26
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body4
  %27 = load i32*, i32** %arr.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx13, align 4
  %30 = load i32, i32* %j, align 4
  %31 = mul nsw i32 %30, %1
  %arrayidx14 = getelementptr inbounds i32, i32* %vla, i32 %31
  %32 = load i32*, i32** %count, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx14, i32 %34
  store i32 %29, i32* %arrayidx16, align 4
  %35 = load i32*, i32** %count, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx17, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx17, align 4
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %38, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %39, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  %arrayidx22 = getelementptr inbounds i32, i32* %vla, i32 0
  %40 = load i32*, i32** %count, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %40, i32 0
  %41 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %41, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %arrayidx22, i32 %sub24
  %42 = load i32, i32* %arrayidx25, align 4
  store i32 %42, i32* %min, align 4
  store i32 0, i32* %pickedRow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc65, %for.end21
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %43, %44
  br i1 %cmp27, label %for.body28, label %for.end67

for.body28:                                       ; preds = %for.cond26
  store i32 0, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc46, %for.body28
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %size.addr, align 4
  %cmp30 = icmp slt i32 %45, %46
  br i1 %cmp30, label %for.body31, label %for.end48

for.body31:                                       ; preds = %for.cond29
  %47 = load i32*, i32** %count, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %47, i32 %48
  %49 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sgt i32 %49, 0
  br i1 %cmp33, label %land.lhs.true34, label %if.end45

land.lhs.true34:                                  ; preds = %for.body31
  %50 = load i32, i32* %j, align 4
  %51 = mul nsw i32 %50, %1
  %arrayidx35 = getelementptr inbounds i32, i32* %vla, i32 %51
  %52 = load i32*, i32** %count, align 4
  %53 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %54, 1
  %arrayidx38 = getelementptr inbounds i32, i32* %arrayidx35, i32 %sub37
  %55 = load i32, i32* %arrayidx38, align 4
  %56 = load i32, i32* %min, align 4
  %cmp39 = icmp slt i32 %55, %56
  br i1 %cmp39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %land.lhs.true34
  %57 = load i32, i32* %j, align 4
  %58 = mul nsw i32 %57, %1
  %arrayidx41 = getelementptr inbounds i32, i32* %vla, i32 %58
  %59 = load i32*, i32** %count, align 4
  %60 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx42, align 4
  %sub43 = sub nsw i32 %61, 1
  %arrayidx44 = getelementptr inbounds i32, i32* %arrayidx41, i32 %sub43
  %62 = load i32, i32* %arrayidx44, align 4
  store i32 %62, i32* %min, align 4
  %63 = load i32, i32* %j, align 4
  store i32 %63, i32* %pickedRow, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %land.lhs.true34, %for.body31
  br label %for.inc46

for.inc46:                                        ; preds = %if.end45
  %64 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %64, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond29

for.end48:                                        ; preds = %for.cond29
  %65 = load i32, i32* %min, align 4
  %66 = load i32*, i32** %sortedArr, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %66, i32 %67
  store i32 %65, i32* %arrayidx49, align 4
  %68 = load i32*, i32** %count, align 4
  %69 = load i32, i32* %pickedRow, align 4
  %arrayidx50 = getelementptr inbounds i32, i32* %68, i32 %69
  %70 = load i32, i32* %arrayidx50, align 4
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %arrayidx50, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.end48
  %71 = load i32, i32* %j, align 4
  %72 = load i32, i32* %size.addr, align 4
  %cmp52 = icmp slt i32 %71, %72
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %73 = load i32*, i32** %count, align 4
  %74 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %73, i32 %74
  %75 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp sgt i32 %75, 0
  br i1 %cmp55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %for.body53
  %76 = load i32, i32* %j, align 4
  %77 = mul nsw i32 %76, %1
  %arrayidx57 = getelementptr inbounds i32, i32* %vla, i32 %77
  %78 = load i32*, i32** %count, align 4
  %79 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %78, i32 %79
  %80 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %80, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %arrayidx57, i32 %sub59
  %81 = load i32, i32* %arrayidx60, align 4
  store i32 %81, i32* %min, align 4
  %82 = load i32, i32* %j, align 4
  store i32 %82, i32* %pickedRow, align 4
  br label %for.end64

if.end61:                                         ; preds = %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %83 = load i32, i32* %j, align 4
  %inc63 = add nsw i32 %83, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %if.then56, %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %84 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %84, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond26

for.end67:                                        ; preds = %for.cond26
  %85 = load i32*, i32** %count, align 4
  %86 = bitcast i32* %85 to i8*
  call void @free(i8* %86)
  %87 = bitcast i32* %vla to i8*
  call void @free(i8* %87)
  %88 = load i32*, i32** %sortedArr, align 4
  %89 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %89)
  ret i32* %88
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32* @patienceSort(i32* %11, i32 %sub6)
  store i32* %call7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %argC.addr, align 4
  %sub9 = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub9
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %sortedArr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx12, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %17)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %18 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = mul nuw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnuw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = mul nsw i32 %18, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp sge i32 %23, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = mul nsw i32 %30, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub24 = sub nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp27 = icmp slt i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp slt i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sgt i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = mul nsw i32 %50, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %arrayidx36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub37 = sub nsw i32 %54, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %min, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = mul nsw i32 %57, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %arrayidx42, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub43 = sub nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %arrayidx44, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc47 = add nsw i32 %64, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %min, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %pickedRow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %arrayidx50, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %70, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp slt i32 %71, %72
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %arrayidx54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp55 = icmp sgt i32 %75, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = mul nsw i32 %76, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %arrayidx58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub59 = sub nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %arrayidx60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc63 = add nsw i32 %83, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc66 = add nsw i32 %84, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for patienceSort()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Sorting_algorithms-Patience_sort.c.bc'
source_filename = "./Sorting_algorithms-Patience_sort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [54 x i8] c"Usage : %s <integers to be sorted separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32* @patienceSort(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %pickedRow = alloca i32, align 4
  %count = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %1 = load i32, i32* %size.addr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %3 = mul nuw i32 %0, %1
  %vla = alloca i32, i32 %3, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  store i32 %1, i32* %__vla_expr1, align 4
  %4 = load i32, i32* %size.addr, align 4
  %call = call noalias i8* @calloc(i32 4, i32 %4)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %count, align 4
  %6 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %6, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call1 to i32*
  store i32* %7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %size.addr, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %12 = load i32*, i32** %count, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx, align 4
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body4
  %15 = load i32*, i32** %count, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sgt i32 %17, 0
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %18 = load i32, i32* %j, align 4
  %19 = mul nsw i32 %18, %1
  %arrayidx8 = getelementptr inbounds i32, i32* %vla, i32 %19
  %20 = load i32*, i32** %count, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %arrayidx8, i32 %sub
  %23 = load i32, i32* %arrayidx10, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sge i32 %23, %26
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %for.body4
  %27 = load i32*, i32** %arr.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx13, align 4
  %30 = load i32, i32* %j, align 4
  %31 = mul nsw i32 %30, %1
  %arrayidx14 = getelementptr inbounds i32, i32* %vla, i32 %31
  %32 = load i32*, i32** %count, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %32, i32 %33
  %34 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %arrayidx14, i32 %34
  store i32 %29, i32* %arrayidx16, align 4
  %35 = load i32*, i32** %count, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx17, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %arrayidx17, align 4
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %38 = load i32, i32* %j, align 4
  %inc18 = add nsw i32 %38, 1
  store i32 %inc18, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  br label %for.inc19

for.inc19:                                        ; preds = %for.end
  %39 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %39, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end21:                                        ; preds = %for.cond
  %arrayidx22 = getelementptr inbounds i32, i32* %vla, i32 0
  %40 = load i32*, i32** %count, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %40, i32 0
  %41 = load i32, i32* %arrayidx23, align 4
  %sub24 = sub nsw i32 %41, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %arrayidx22, i32 %sub24
  %42 = load i32, i32* %arrayidx25, align 4
  store i32 %42, i32* %min, align 4
  store i32 0, i32* %pickedRow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc65, %for.end21
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %43, %44
  br i1 %cmp27, label %for.body28, label %for.end67

for.body28:                                       ; preds = %for.cond26
  store i32 0, i32* %j, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc46, %for.body28
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %size.addr, align 4
  %cmp30 = icmp slt i32 %45, %46
  br i1 %cmp30, label %for.body31, label %for.end48

for.body31:                                       ; preds = %for.cond29
  %47 = load i32*, i32** %count, align 4
  %48 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %47, i32 %48
  %49 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sgt i32 %49, 0
  br i1 %cmp33, label %land.lhs.true34, label %if.end45

land.lhs.true34:                                  ; preds = %for.body31
  %50 = load i32, i32* %j, align 4
  %51 = mul nsw i32 %50, %1
  %arrayidx35 = getelementptr inbounds i32, i32* %vla, i32 %51
  %52 = load i32*, i32** %count, align 4
  %53 = load i32, i32* %j, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %52, i32 %53
  %54 = load i32, i32* %arrayidx36, align 4
  %sub37 = sub nsw i32 %54, 1
  %arrayidx38 = getelementptr inbounds i32, i32* %arrayidx35, i32 %sub37
  %55 = load i32, i32* %arrayidx38, align 4
  %56 = load i32, i32* %min, align 4
  %cmp39 = icmp slt i32 %55, %56
  br i1 %cmp39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %land.lhs.true34
  %57 = load i32, i32* %j, align 4
  %58 = mul nsw i32 %57, %1
  %arrayidx41 = getelementptr inbounds i32, i32* %vla, i32 %58
  %59 = load i32*, i32** %count, align 4
  %60 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx42, align 4
  %sub43 = sub nsw i32 %61, 1
  %arrayidx44 = getelementptr inbounds i32, i32* %arrayidx41, i32 %sub43
  %62 = load i32, i32* %arrayidx44, align 4
  store i32 %62, i32* %min, align 4
  %63 = load i32, i32* %j, align 4
  store i32 %63, i32* %pickedRow, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %land.lhs.true34, %for.body31
  br label %for.inc46

for.inc46:                                        ; preds = %if.end45
  %64 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %64, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond29

for.end48:                                        ; preds = %for.cond29
  %65 = load i32, i32* %min, align 4
  %66 = load i32*, i32** %sortedArr, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %66, i32 %67
  store i32 %65, i32* %arrayidx49, align 4
  %68 = load i32*, i32** %count, align 4
  %69 = load i32, i32* %pickedRow, align 4
  %arrayidx50 = getelementptr inbounds i32, i32* %68, i32 %69
  %70 = load i32, i32* %arrayidx50, align 4
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %arrayidx50, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc62, %for.end48
  %71 = load i32, i32* %j, align 4
  %72 = load i32, i32* %size.addr, align 4
  %cmp52 = icmp slt i32 %71, %72
  br i1 %cmp52, label %for.body53, label %for.end64

for.body53:                                       ; preds = %for.cond51
  %73 = load i32*, i32** %count, align 4
  %74 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %73, i32 %74
  %75 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp sgt i32 %75, 0
  br i1 %cmp55, label %if.then56, label %if.end61

if.then56:                                        ; preds = %for.body53
  %76 = load i32, i32* %j, align 4
  %77 = mul nsw i32 %76, %1
  %arrayidx57 = getelementptr inbounds i32, i32* %vla, i32 %77
  %78 = load i32*, i32** %count, align 4
  %79 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %78, i32 %79
  %80 = load i32, i32* %arrayidx58, align 4
  %sub59 = sub nsw i32 %80, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %arrayidx57, i32 %sub59
  %81 = load i32, i32* %arrayidx60, align 4
  store i32 %81, i32* %min, align 4
  %82 = load i32, i32* %j, align 4
  store i32 %82, i32* %pickedRow, align 4
  br label %for.end64

if.end61:                                         ; preds = %for.body53
  br label %for.inc62

for.inc62:                                        ; preds = %if.end61
  %83 = load i32, i32* %j, align 4
  %inc63 = add nsw i32 %83, 1
  store i32 %inc63, i32* %j, align 4
  br label %for.cond51

for.end64:                                        ; preds = %if.then56, %for.cond51
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %84 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %84, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond26

for.end67:                                        ; preds = %for.cond26
  %85 = load i32*, i32** %count, align 4
  %86 = bitcast i32* %85 to i8*
  call void @free(i8* %86)
  %87 = bitcast i32* %vla to i8*
  call void @free(i8* %87)
  %88 = load i32*, i32** %sortedArr, align 4
  %89 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %89)
  ret i32* %88
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %sortedArr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32* @patienceSort(i32* %11, i32 %sub6)
  store i32* %call7, i32** %sortedArr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc14, %for.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %argC.addr, align 4
  %sub9 = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub9
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %sortedArr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx12, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %17)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %18 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond8

for.end16:                                        ; preds = %for.cond8
  br label %if.end

if.end:                                           ; preds = %for.end16, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %sub, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @atoi(i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %13, %sub9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483644
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
