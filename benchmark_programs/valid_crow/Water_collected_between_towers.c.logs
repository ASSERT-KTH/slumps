
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for getWater()

; ModuleID = './Water_collected_between_towers.c.bc'
source_filename = "./Water_collected_between_towers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [60 x i8] c"Usage : %s <followed by space separated series of integers>\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Water collected : %d\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @getWater(i32* %arr, i32 %start, i32 %end, i32 %cutoff) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %cutoff.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %cutoff, i32* %cutoff.addr, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %start.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %end.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %arr.addr, align 4
  %4 = load i32, i32* %cutoff.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp sgt i32 %5, %8
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %9 = load i32*, i32** %arr.addr, align 4
  %10 = load i32, i32* %cutoff.addr, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx3, align 4
  %12 = load i32*, i32** %arr.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %sub = sub nsw i32 %11, %14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %15 = load i32, i32* %sum, align 4
  %add = add nsw i32 %15, %cond
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %sum, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @netWater(i32* %arr, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ref1 = alloca i32, align 4
  %ref2 = alloca i32, align 4
  %marker = alloca i32, align 4
  %markerSet = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %markerSet, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc43, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %sub = sub nsw i32 %2, 1
  %cmp1 = icmp slt i32 %1, %sub
  br i1 %cmp1, label %for.body, label %for.end45

for.body:                                         ; preds = %for.cond
  br label %start

start:                                            ; preds = %if.then36, %if.then14, %for.body
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %size.addr, align 4
  %sub2 = sub nsw i32 %4, 2
  %cmp3 = icmp ne i32 %3, %sub2
  br i1 %cmp3, label %land.lhs.true, label %if.end42

land.lhs.true:                                    ; preds = %start
  %5 = load i32*, i32** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %arr.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add = add nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %add
  %10 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sgt i32 %7, %10
  br i1 %cmp5, label %if.then6, label %if.end42

if.then6:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %i, align 4
  store i32 %11, i32* %ref1, align 4
  %12 = load i32, i32* %ref1, align 4
  %add7 = add nsw i32 %12, 1
  store i32 %add7, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %if.then6
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %size.addr, align 4
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %arr.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx11, align 4
  %18 = load i32*, i32** %arr.addr, align 4
  %19 = load i32, i32* %ref1, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp sge i32 %17, %20
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.body10
  %21 = load i32, i32* %j, align 4
  store i32 %21, i32* %ref2, align 4
  %22 = load i32*, i32** %arr.addr, align 4
  %23 = load i32, i32* %ref1, align 4
  %add15 = add nsw i32 %23, 1
  %24 = load i32, i32* %ref2, align 4
  %sub16 = sub nsw i32 %24, 1
  %25 = load i32, i32* %ref1, align 4
  %call = call i32 @getWater(i32* %22, i32 %add15, i32 %sub16, i32 %25)
  %26 = load i32, i32* %sum, align 4
  %add17 = add nsw i32 %26, %call
  store i32 %add17, i32* %sum, align 4
  %27 = load i32, i32* %ref2, align 4
  store i32 %27, i32* %i, align 4
  br label %start

if.else:                                          ; preds = %for.body10
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %size.addr, align 4
  %sub18 = sub nsw i32 %29, 1
  %cmp19 = icmp ne i32 %28, %sub18
  br i1 %cmp19, label %land.lhs.true20, label %if.end33

land.lhs.true20:                                  ; preds = %if.else
  %30 = load i32*, i32** %arr.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx21, align 4
  %33 = load i32*, i32** %arr.addr, align 4
  %34 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %34, 1
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %add22
  %35 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp slt i32 %32, %35
  br i1 %cmp24, label %land.lhs.true25, label %if.end33

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %36 = load i32, i32* %markerSet, align 4
  %cmp26 = icmp eq i32 %36, 0
  br i1 %cmp26, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true25
  %37 = load i32*, i32** %arr.addr, align 4
  %38 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %38, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %37, i32 %add27
  %39 = load i32, i32* %arrayidx28, align 4
  %40 = load i32*, i32** %arr.addr, align 4
  %41 = load i32, i32* %marker, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp sge i32 %39, %42
  br i1 %cmp30, label %if.then31, label %if.end33

if.then31:                                        ; preds = %lor.lhs.false, %land.lhs.true25
  %43 = load i32, i32* %j, align 4
  %add32 = add nsw i32 %43, 1
  store i32 %add32, i32* %marker, align 4
  store i32 1, i32* %markerSet, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %lor.lhs.false, %land.lhs.true20, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %44 = load i32, i32* %j, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %45 = load i32, i32* %markerSet, align 4
  %cmp35 = icmp eq i32 %45, 1
  br i1 %cmp35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %for.end
  %46 = load i32*, i32** %arr.addr, align 4
  %47 = load i32, i32* %ref1, align 4
  %add37 = add nsw i32 %47, 1
  %48 = load i32, i32* %marker, align 4
  %sub38 = sub nsw i32 %48, 1
  %49 = load i32, i32* %marker, align 4
  %call39 = call i32 @getWater(i32* %46, i32 %add37, i32 %sub38, i32 %49)
  %50 = load i32, i32* %sum, align 4
  %add40 = add nsw i32 %50, %call39
  store i32 %add40, i32* %sum, align 4
  %51 = load i32, i32* %marker, align 4
  store i32 %51, i32* %i, align 4
  store i32 0, i32* %markerSet, align 4
  br label %start

if.end41:                                         ; preds = %for.end
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %land.lhs.true, %start
  br label %for.inc43

for.inc43:                                        ; preds = %if.end42
  %52 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %52, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond

for.end45:                                        ; preds = %for.cond
  %53 = load i32, i32* %sum, align 4
  store i32 %53, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end45, %if.then
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32 @netWater(i32* %11, i32 %sub6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %call7)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %start.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %end.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %cutoff.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %5, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %cutoff.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %15, %cond
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for getWater()

; entering Souper's runOnFunction() for netWater()

; ModuleID = './Water_collected_between_towers.c.bc'
source_filename = "./Water_collected_between_towers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [60 x i8] c"Usage : %s <followed by space separated series of integers>\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Water collected : %d\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @getWater(i32* %arr, i32 %start, i32 %end, i32 %cutoff) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %cutoff.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %cutoff, i32* %cutoff.addr, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %start.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %end.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %arr.addr, align 4
  %4 = load i32, i32* %cutoff.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp sgt i32 %5, %8
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %9 = load i32*, i32** %arr.addr, align 4
  %10 = load i32, i32* %cutoff.addr, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx3, align 4
  %12 = load i32*, i32** %arr.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %sub = sub nsw i32 %11, %14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %15 = load i32, i32* %sum, align 4
  %add = add nsw i32 %15, %cond
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %sum, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @netWater(i32* %arr, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ref1 = alloca i32, align 4
  %ref2 = alloca i32, align 4
  %marker = alloca i32, align 4
  %markerSet = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %markerSet, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc43, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %sub = sub nsw i32 %2, 1
  %cmp1 = icmp slt i32 %1, %sub
  br i1 %cmp1, label %for.body, label %for.end45

for.body:                                         ; preds = %for.cond
  br label %start

start:                                            ; preds = %if.then36, %if.then14, %for.body
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %size.addr, align 4
  %sub2 = sub nsw i32 %4, 2
  %cmp3 = icmp ne i32 %3, %sub2
  br i1 %cmp3, label %land.lhs.true, label %if.end42

land.lhs.true:                                    ; preds = %start
  %5 = load i32*, i32** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %arr.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add = add nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %add
  %10 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sgt i32 %7, %10
  br i1 %cmp5, label %if.then6, label %if.end42

if.then6:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %i, align 4
  store i32 %11, i32* %ref1, align 4
  %12 = load i32, i32* %ref1, align 4
  %add7 = add nsw i32 %12, 1
  store i32 %add7, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %if.then6
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %size.addr, align 4
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %arr.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx11, align 4
  %18 = load i32*, i32** %arr.addr, align 4
  %19 = load i32, i32* %ref1, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp sge i32 %17, %20
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.body10
  %21 = load i32, i32* %j, align 4
  store i32 %21, i32* %ref2, align 4
  %22 = load i32*, i32** %arr.addr, align 4
  %23 = load i32, i32* %ref1, align 4
  %add15 = add nsw i32 %23, 1
  %24 = load i32, i32* %ref2, align 4
  %sub16 = sub nsw i32 %24, 1
  %25 = load i32, i32* %ref1, align 4
  %call = call i32 @getWater(i32* %22, i32 %add15, i32 %sub16, i32 %25)
  %26 = load i32, i32* %sum, align 4
  %add17 = add nsw i32 %26, %call
  store i32 %add17, i32* %sum, align 4
  %27 = load i32, i32* %ref2, align 4
  store i32 %27, i32* %i, align 4
  br label %start

if.else:                                          ; preds = %for.body10
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %size.addr, align 4
  %sub18 = sub nsw i32 %29, 1
  %cmp19 = icmp ne i32 %28, %sub18
  br i1 %cmp19, label %land.lhs.true20, label %if.end33

land.lhs.true20:                                  ; preds = %if.else
  %30 = load i32*, i32** %arr.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx21, align 4
  %33 = load i32*, i32** %arr.addr, align 4
  %34 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %34, 1
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %add22
  %35 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp slt i32 %32, %35
  br i1 %cmp24, label %land.lhs.true25, label %if.end33

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %36 = load i32, i32* %markerSet, align 4
  %cmp26 = icmp eq i32 %36, 0
  br i1 %cmp26, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true25
  %37 = load i32*, i32** %arr.addr, align 4
  %38 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %38, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %37, i32 %add27
  %39 = load i32, i32* %arrayidx28, align 4
  %40 = load i32*, i32** %arr.addr, align 4
  %41 = load i32, i32* %marker, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp sge i32 %39, %42
  br i1 %cmp30, label %if.then31, label %if.end33

if.then31:                                        ; preds = %lor.lhs.false, %land.lhs.true25
  %43 = load i32, i32* %j, align 4
  %add32 = add nsw i32 %43, 1
  store i32 %add32, i32* %marker, align 4
  store i32 1, i32* %markerSet, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %lor.lhs.false, %land.lhs.true20, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %44 = load i32, i32* %j, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %45 = load i32, i32* %markerSet, align 4
  %cmp35 = icmp eq i32 %45, 1
  br i1 %cmp35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %for.end
  %46 = load i32*, i32** %arr.addr, align 4
  %47 = load i32, i32* %ref1, align 4
  %add37 = add nsw i32 %47, 1
  %48 = load i32, i32* %marker, align 4
  %sub38 = sub nsw i32 %48, 1
  %49 = load i32, i32* %marker, align 4
  %call39 = call i32 @getWater(i32* %46, i32 %add37, i32 %sub38, i32 %49)
  %50 = load i32, i32* %sum, align 4
  %add40 = add nsw i32 %50, %call39
  store i32 %add40, i32* %sum, align 4
  %51 = load i32, i32* %marker, align 4
  store i32 %51, i32* %i, align 4
  store i32 0, i32* %markerSet, align 4
  br label %start

if.end41:                                         ; preds = %for.end
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %land.lhs.true, %start
  br label %for.inc43

for.inc43:                                        ; preds = %if.end42
  %52 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %52, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond

for.end45:                                        ; preds = %for.cond
  %53 = load i32, i32* %sum, align 4
  store i32 %53, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end45, %if.then
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32 @netWater(i32* %11, i32 %sub6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %call7)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub2 = sub nsw i32 %4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %3, %sub2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 2:i32
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sgt i32 %7, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %ref1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %ref1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sge i32 %17, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %ref1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %ref2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub16 = sub nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %ref1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @getWater(i32* %22, i32 %add15, i32 %sub16, i32 %25)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %26, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %ref2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub18 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %28, %sub18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add22 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %32, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %markerSet, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp eq i32 %36, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %marker, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp sge i32 %39, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add32 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %markerSet, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp35 = icmp eq i32 %45, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %ref1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %marker, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub38 = sub nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %marker, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call39 = call i32 @getWater(i32* %46, i32 %add37, i32 %sub38, i32 %49)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add40 = add nsw i32 %50, %call39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %marker, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc44 = add nsw i32 %52, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 2:i32
%3:i1 = ne %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = ne %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for netWater()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Water_collected_between_towers.c.bc'
source_filename = "./Water_collected_between_towers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [60 x i8] c"Usage : %s <followed by space separated series of integers>\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"Water collected : %d\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @getWater(i32* %arr, i32 %start, i32 %end, i32 %cutoff) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %cutoff.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %start, i32* %start.addr, align 4
  store i32 %end, i32* %end.addr, align 4
  store i32 %cutoff, i32* %cutoff.addr, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %start.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %end.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %arr.addr, align 4
  %4 = load i32, i32* %cutoff.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp sgt i32 %5, %8
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %9 = load i32*, i32** %arr.addr, align 4
  %10 = load i32, i32* %cutoff.addr, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx3, align 4
  %12 = load i32*, i32** %arr.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %sub = sub nsw i32 %11, %14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %15 = load i32, i32* %sum, align 4
  %add = add nsw i32 %15, %cond
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %sum, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @netWater(i32* %arr, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ref1 = alloca i32, align 4
  %ref2 = alloca i32, align 4
  %marker = alloca i32, align 4
  %markerSet = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %markerSet, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc43, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %size.addr, align 4
  %sub = sub nsw i32 %2, 1
  %cmp1 = icmp slt i32 %1, %sub
  br i1 %cmp1, label %for.body, label %for.end45

for.body:                                         ; preds = %for.cond
  br label %start

start:                                            ; preds = %if.then36, %if.then14, %for.body
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %size.addr, align 4
  %sub2 = sub nsw i32 %4, 2
  %cmp3 = icmp ne i32 %3, %sub2
  br i1 %cmp3, label %land.lhs.true, label %if.end42

land.lhs.true:                                    ; preds = %start
  %5 = load i32*, i32** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %arr.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add = add nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %add
  %10 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sgt i32 %7, %10
  br i1 %cmp5, label %if.then6, label %if.end42

if.then6:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %i, align 4
  store i32 %11, i32* %ref1, align 4
  %12 = load i32, i32* %ref1, align 4
  %add7 = add nsw i32 %12, 1
  store i32 %add7, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %if.then6
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %size.addr, align 4
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %for.body10, label %for.end

for.body10:                                       ; preds = %for.cond8
  %15 = load i32*, i32** %arr.addr, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx11, align 4
  %18 = load i32*, i32** %arr.addr, align 4
  %19 = load i32, i32* %ref1, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp sge i32 %17, %20
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.body10
  %21 = load i32, i32* %j, align 4
  store i32 %21, i32* %ref2, align 4
  %22 = load i32*, i32** %arr.addr, align 4
  %23 = load i32, i32* %ref1, align 4
  %add15 = add nsw i32 %23, 1
  %24 = load i32, i32* %ref2, align 4
  %sub16 = sub nsw i32 %24, 1
  %25 = load i32, i32* %ref1, align 4
  %call = call i32 @getWater(i32* %22, i32 %add15, i32 %sub16, i32 %25)
  %26 = load i32, i32* %sum, align 4
  %add17 = add nsw i32 %26, %call
  store i32 %add17, i32* %sum, align 4
  %27 = load i32, i32* %ref2, align 4
  store i32 %27, i32* %i, align 4
  br label %start

if.else:                                          ; preds = %for.body10
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %size.addr, align 4
  %sub18 = sub nsw i32 %29, 1
  %cmp19 = icmp ne i32 %28, %sub18
  br i1 %cmp19, label %land.lhs.true20, label %if.end33

land.lhs.true20:                                  ; preds = %if.else
  %30 = load i32*, i32** %arr.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx21, align 4
  %33 = load i32*, i32** %arr.addr, align 4
  %34 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %34, 1
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %add22
  %35 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp slt i32 %32, %35
  br i1 %cmp24, label %land.lhs.true25, label %if.end33

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %36 = load i32, i32* %markerSet, align 4
  %cmp26 = icmp eq i32 %36, 0
  br i1 %cmp26, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true25
  %37 = load i32*, i32** %arr.addr, align 4
  %38 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %38, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %37, i32 %add27
  %39 = load i32, i32* %arrayidx28, align 4
  %40 = load i32*, i32** %arr.addr, align 4
  %41 = load i32, i32* %marker, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp sge i32 %39, %42
  br i1 %cmp30, label %if.then31, label %if.end33

if.then31:                                        ; preds = %lor.lhs.false, %land.lhs.true25
  %43 = load i32, i32* %j, align 4
  %add32 = add nsw i32 %43, 1
  store i32 %add32, i32* %marker, align 4
  store i32 1, i32* %markerSet, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %lor.lhs.false, %land.lhs.true20, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %for.inc

for.inc:                                          ; preds = %if.end34
  %44 = load i32, i32* %j, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  %45 = load i32, i32* %markerSet, align 4
  %cmp35 = icmp eq i32 %45, 1
  br i1 %cmp35, label %if.then36, label %if.end41

if.then36:                                        ; preds = %for.end
  %46 = load i32*, i32** %arr.addr, align 4
  %47 = load i32, i32* %ref1, align 4
  %add37 = add nsw i32 %47, 1
  %48 = load i32, i32* %marker, align 4
  %sub38 = sub nsw i32 %48, 1
  %49 = load i32, i32* %marker, align 4
  %call39 = call i32 @getWater(i32* %46, i32 %add37, i32 %sub38, i32 %49)
  %50 = load i32, i32* %sum, align 4
  %add40 = add nsw i32 %50, %call39
  store i32 %add40, i32* %sum, align 4
  %51 = load i32, i32* %marker, align 4
  store i32 %51, i32* %i, align 4
  store i32 0, i32* %markerSet, align 4
  br label %start

if.end41:                                         ; preds = %for.end
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %land.lhs.true, %start
  br label %for.inc43

for.inc43:                                        ; preds = %if.end42
  %52 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %52, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond

for.end45:                                        ; preds = %for.cond
  %53 = load i32, i32* %sum, align 4
  store i32 %53, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end45, %if.then
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul i32 %sub, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  store i32* %2, i32** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %call3 = call i32 @atoi(i8* %7)
  %8 = load i32*, i32** %arr, align 4
  %9 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 %9, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %sub4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32*, i32** %arr, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %sub6 = sub nsw i32 %12, 1
  %call7 = call i32 @netWater(i32* %11, i32 %sub6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i32 0, i32 0), i32 %call7)
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %sub, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @atoi(i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @netWater(i32* %11, i32 %sub6)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483644
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
