
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for is_prime()

; ModuleID = './Emirp_primes.c.bc'
source_filename = "./Emirp_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c" %u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%u\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %0, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem1 = urem i32 %1, 3
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 1, i32* %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.end
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul i32 %2, %3
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %mul, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %p, align 4
  %add = add i32 %6, 4
  store i32 %add, i32* %p, align 4
  %rem3 = urem i32 %5, %add
  %cmp4 = icmp eq i32 %rem3, 0
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %while.body
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %p, align 4
  %add6 = add i32 %8, 2
  store i32 %add6, i32* %p, align 4
  %rem7 = urem i32 %7, %add6
  %cmp8 = icmp eq i32 %rem7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false5, %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %lor.lhs.false5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then9, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @reverse(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %mul = mul i32 %1, 10
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 10
  %add = add i32 %mul, %rem
  store i32 %add, i32* %r, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 10
  store i32 %div, i32* %n.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_emirp(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 @reverse(i32 %0)
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  %call1 = call i32 @is_prime(i32 %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %r, align 4
  %call2 = call i32 @is_prime(i32 %4)
  %tobool3 = icmp ne i32 %call2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %argc.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %1 = load i32, i32* %c, align 4
  %cmp = icmp ult i32 %1, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x, align 4
  %call = call i32 @is_emirp(i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %x, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %3)
  %4 = load i32, i32* %c, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %x, align 4
  %add = add i32 %5, 2
  store i32 %add, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 7701, i32* %x, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc11, %sw.bb2
  %6 = load i32, i32* %x, align 4
  %cmp4 = icmp ult i32 %6, 8000
  br i1 %cmp4, label %for.body5, label %for.end13

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %x, align 4
  %call6 = call i32 @is_emirp(i32 %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body5
  %8 = load i32, i32* %x, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %8)
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body5
  br label %for.inc11

for.inc11:                                        ; preds = %if.end10
  %9 = load i32, i32* %x, align 4
  %add12 = add i32 %9, 2
  store i32 %add12, i32* %x, align 4
  br label %for.cond3

for.end13:                                        ; preds = %for.cond3
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %sw.default
  %10 = load i32, i32* %x, align 4
  %call15 = call i32 @is_emirp(i32 %10)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.cond14
  %11 = load i32, i32* %c, align 4
  %inc17 = add i32 %11, 1
  store i32 %inc17, i32* %c, align 4
  %cmp18 = icmp eq i32 %inc17, 10000
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %land.lhs.true
  %12 = load i32, i32* %x, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %12)
  br label %for.end24

if.end21:                                         ; preds = %land.lhs.true, %for.cond14
  br label %for.inc22

for.inc22:                                        ; preds = %if.end21
  %13 = load i32, i32* %x, align 4
  %add23 = add i32 %13, 2
  store i32 %add23, i32* %x, align 4
  br label %for.cond14

for.end24:                                        ; preds = %if.then19
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end24, %for.end13, %for.end
  %call25 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem1 = urem i32 %1, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %rem1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %mul, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = var
%4:i1 = ult %2, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem3 = urem i32 %5, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 4:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %rem3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 4:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
%4:i1 = eq 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem7 = urem i32 %7, %add6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %rem7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
%4:i1 = eq 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 2:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 3:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
%3:i32 = var
%4:i1 = ult %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 4:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = add 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 4:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
%4:i1 = eq 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = add 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 2:i32, %1 (hasExternalUses)
%3:i32 = urem %0, %2
%4:i1 = eq 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_prime()

; entering Souper's runOnFunction() for reverse()

; ModuleID = './Emirp_primes.c.bc'
source_filename = "./Emirp_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c" %u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%u\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %0, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem1 = urem i32 %1, 3
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 1, i32* %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.end
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul i32 %2, %3
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %mul, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %p, align 4
  %add = add i32 %6, 4
  store i32 %add, i32* %p, align 4
  %rem3 = urem i32 %5, %add
  %cmp4 = icmp eq i32 %rem3, 0
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %while.body
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %p, align 4
  %add6 = add i32 %8, 2
  store i32 %add6, i32* %p, align 4
  %rem7 = urem i32 %7, %add6
  %cmp8 = icmp eq i32 %rem7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false5, %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %lor.lhs.false5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then9, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @reverse(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %mul = mul i32 %1, 10
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 10
  %add = add i32 %mul, %rem
  store i32 %add, i32* %r, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 10
  store i32 %div, i32* %n.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_emirp(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 @reverse(i32 %0)
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  %call1 = call i32 @is_prime(i32 %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %r, align 4
  %call2 = call i32 @is_prime(i32 %4)
  %tobool3 = icmp ne i32 %call2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %argc.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %1 = load i32, i32* %c, align 4
  %cmp = icmp ult i32 %1, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x, align 4
  %call = call i32 @is_emirp(i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %x, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %3)
  %4 = load i32, i32* %c, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %x, align 4
  %add = add i32 %5, 2
  store i32 %add, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 7701, i32* %x, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc11, %sw.bb2
  %6 = load i32, i32* %x, align 4
  %cmp4 = icmp ult i32 %6, 8000
  br i1 %cmp4, label %for.body5, label %for.end13

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %x, align 4
  %call6 = call i32 @is_emirp(i32 %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body5
  %8 = load i32, i32* %x, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %8)
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body5
  br label %for.inc11

for.inc11:                                        ; preds = %if.end10
  %9 = load i32, i32* %x, align 4
  %add12 = add i32 %9, 2
  store i32 %add12, i32* %x, align 4
  br label %for.cond3

for.end13:                                        ; preds = %for.cond3
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %sw.default
  %10 = load i32, i32* %x, align 4
  %call15 = call i32 @is_emirp(i32 %10)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.cond14
  %11 = load i32, i32* %c, align 4
  %inc17 = add i32 %11, 1
  store i32 %inc17, i32* %c, align 4
  %cmp18 = icmp eq i32 %inc17, 10000
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %land.lhs.true
  %12 = load i32, i32* %x, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %12)
  br label %for.end24

if.end21:                                         ; preds = %land.lhs.true, %for.cond14
  br label %for.inc22

for.inc22:                                        ; preds = %if.end21
  %13 = load i32, i32* %x, align 4
  %add23 = add i32 %13, 2
  store i32 %add23, i32* %x, align 4
  br label %for.cond14

for.end24:                                        ; preds = %if.then19
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end24, %for.end13, %for.end
  %call25 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %2, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 %mul, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 10:i32, %0
%2:i32 = var
%3:i32 = urem %2, 10:i32
%4:i32 = add %1, %3
infer %4

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %3, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 10:i32, %0
%2:i32 = var
%3:i32 = urem %2, 10:i32
%4:i32 = add %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 54
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 10:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = urem %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 85041980
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for reverse()

; entering Souper's runOnFunction() for is_emirp()

; ModuleID = './Emirp_primes.c.bc'
source_filename = "./Emirp_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c" %u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%u\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %0, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem1 = urem i32 %1, 3
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 1, i32* %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.end
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul i32 %2, %3
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %mul, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %p, align 4
  %add = add i32 %6, 4
  store i32 %add, i32* %p, align 4
  %rem3 = urem i32 %5, %add
  %cmp4 = icmp eq i32 %rem3, 0
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %while.body
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %p, align 4
  %add6 = add i32 %8, 2
  store i32 %add6, i32* %p, align 4
  %rem7 = urem i32 %7, %add6
  %cmp8 = icmp eq i32 %rem7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false5, %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %lor.lhs.false5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then9, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @reverse(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %mul = mul i32 %1, 10
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 10
  %add = add i32 %mul, %rem
  store i32 %add, i32* %r, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 10
  store i32 %div, i32* %n.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_emirp(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 @reverse(i32 %0)
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  %call1 = call i32 @is_prime(i32 %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %r, align 4
  %call2 = call i32 @is_prime(i32 %4)
  %tobool3 = icmp ne i32 %call2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %argc.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %1 = load i32, i32* %c, align 4
  %cmp = icmp ult i32 %1, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x, align 4
  %call = call i32 @is_emirp(i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %x, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %3)
  %4 = load i32, i32* %c, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %x, align 4
  %add = add i32 %5, 2
  store i32 %add, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 7701, i32* %x, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc11, %sw.bb2
  %6 = load i32, i32* %x, align 4
  %cmp4 = icmp ult i32 %6, 8000
  br i1 %cmp4, label %for.body5, label %for.end13

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %x, align 4
  %call6 = call i32 @is_emirp(i32 %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body5
  %8 = load i32, i32* %x, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %8)
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body5
  br label %for.inc11

for.inc11:                                        ; preds = %if.end10
  %9 = load i32, i32* %x, align 4
  %add12 = add i32 %9, 2
  store i32 %add12, i32* %x, align 4
  br label %for.cond3

for.end13:                                        ; preds = %for.cond3
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %sw.default
  %10 = load i32, i32* %x, align 4
  %call15 = call i32 @is_emirp(i32 %10)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.cond14
  %11 = load i32, i32* %c, align 4
  %inc17 = add i32 %11, 1
  store i32 %inc17, i32* %c, align 4
  %cmp18 = icmp eq i32 %inc17, 10000
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %land.lhs.true
  %12 = load i32, i32* %x, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %12)
  br label %for.end24

if.end21:                                         ; preds = %land.lhs.true, %for.cond14
  br label %for.inc22

for.inc22:                                        ; preds = %if.end21
  %13 = load i32, i32* %x, align 4
  %add23 = add i32 %13, 2
  store i32 %add23, i32* %x, align 4
  br label %for.cond14

for.end24:                                        ; preds = %if.then19
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end24, %for.end13, %for.end
  %call25 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @reverse(i32 %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @is_prime(i32 %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @is_prime(i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ]
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, 0:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %land.ext = zext i1 %5 to i32
; Looking for a replacement for:
%0 = block 3
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, 0:i1, %2
%4:i32 = zext %3
infer %4
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, 0:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 3
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, 0:i1, %2
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_emirp()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Emirp_primes.c.bc'
source_filename = "./Emirp_primes.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c" %u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%u\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_prime(i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %p = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %0, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem1 = urem i32 %1, 3
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 1, i32* %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.end
  %2 = load i32, i32* %p, align 4
  %3 = load i32, i32* %p, align 4
  %mul = mul i32 %2, %3
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %mul, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %p, align 4
  %add = add i32 %6, 4
  store i32 %add, i32* %p, align 4
  %rem3 = urem i32 %5, %add
  %cmp4 = icmp eq i32 %rem3, 0
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %while.body
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32, i32* %p, align 4
  %add6 = add i32 %8, 2
  store i32 %add6, i32* %p, align 4
  %rem7 = urem i32 %7, %add6
  %cmp8 = icmp eq i32 %rem7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false5, %while.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %lor.lhs.false5
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then9, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @reverse(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %mul = mul i32 %1, 10
  %2 = load i32, i32* %n.addr, align 4
  %rem = urem i32 %2, 10
  %add = add i32 %mul, %rem
  store i32 %add, i32* %r, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 10
  store i32 %div, i32* %n.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_emirp(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call i32 @reverse(i32 %0)
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %r, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp ne i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  %call1 = call i32 @is_prime(i32 %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %r, align 4
  %call2 = call i32 @is_prime(i32 %4)
  %tobool3 = icmp ne i32 %call2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %c, align 4
  %0 = load i32, i32* %argc.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %1 = load i32, i32* %c, align 4
  %cmp = icmp ult i32 %1, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x, align 4
  %call = call i32 @is_emirp(i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %x, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %3)
  %4 = load i32, i32* %c, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %c, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %x, align 4
  %add = add i32 %5, 2
  store i32 %add, i32* %x, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 7701, i32* %x, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc11, %sw.bb2
  %6 = load i32, i32* %x, align 4
  %cmp4 = icmp ult i32 %6, 8000
  br i1 %cmp4, label %for.body5, label %for.end13

for.body5:                                        ; preds = %for.cond3
  %7 = load i32, i32* %x, align 4
  %call6 = call i32 @is_emirp(i32 %7)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.body5
  %8 = load i32, i32* %x, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %8)
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.body5
  br label %for.inc11

for.inc11:                                        ; preds = %if.end10
  %9 = load i32, i32* %x, align 4
  %add12 = add i32 %9, 2
  store i32 %add12, i32* %x, align 4
  br label %for.cond3

for.end13:                                        ; preds = %for.cond3
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 11, i32* %x, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %sw.default
  %10 = load i32, i32* %x, align 4
  %call15 = call i32 @is_emirp(i32 %10)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %for.cond14
  %11 = load i32, i32* %c, align 4
  %inc17 = add i32 %11, 1
  store i32 %inc17, i32* %c, align 4
  %cmp18 = icmp eq i32 %inc17, 10000
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %land.lhs.true
  %12 = load i32, i32* %x, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %12)
  br label %for.end24

if.end21:                                         ; preds = %land.lhs.true, %for.cond14
  br label %for.inc22

for.inc22:                                        ; preds = %if.end21
  %13 = load i32, i32* %x, align 4
  %add23 = add i32 %13, 2
  store i32 %add23, i32* %x, align 4
  br label %for.cond14

for.end24:                                        ; preds = %if.then19
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end24, %for.end13, %for.end
  %call25 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 20:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @is_emirp(i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %6, 8000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 8000:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @is_emirp(i32 %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne i32 %call6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call15 = call i32 @is_emirp(i32 %10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i32 %call15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq i32 %inc17, 10000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 10000:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 20:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 8000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i1 = eq 10000:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
