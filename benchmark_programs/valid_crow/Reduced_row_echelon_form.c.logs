
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for NewMatrix()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %y_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %x_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %y_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 %7, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %dim_y3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul i32 %11, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %y_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %x_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for NewMatrix()

; entering Souper's runOnFunction() for MtxSetRow()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %irow.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for MtxSetRow()

; entering Souper's runOnFunction() for InitMatrix()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %y_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y_dim.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for InitMatrix()

; entering Souper's runOnFunction() for MtxDisplay()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dim_y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %iy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for MtxDisplay()

; entering Souper's runOnFunction() for MtxMulAndAddRows()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %ixrdest.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %ixrsrc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %mplr.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %11, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %17, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for MtxMulAndAddRows()

; entering Souper's runOnFunction() for MtxSwapRows()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %rix1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rix2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %rix1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %rix2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %10, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for MtxSwapRows()

; entering Souper's runOnFunction() for MtxNormalizeRow()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %rix.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %lead.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %7, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %lv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %13, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for MtxNormalizeRow()

; entering Souper's runOnFunction() for MtxToReducedREForm()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %dim_y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %rowCount, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dim_x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %4, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 0, %13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %rowCount, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %dim_x7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %19, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %rowCount, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp ne i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %lv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %iix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc21 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %rix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for MtxToReducedREForm()

; entering Souper's runOnFunction() for main()

; ModuleID = './Reduced_row_echelon_form.c.bc'
source_filename = "./Reduced_row_echelon_form.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sMtx = type { i32, i32, i32*, i32** }

@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%s %3d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main.r1 = internal global [4 x i32] [i32 1, i32 2, i32 -1, i32 -4], align 16
@main.r2 = internal global [4 x i32] [i32 2, i32 3, i32 -1, i32 -11], align 16
@main.r3 = internal global [4 x i32] [i32 -2, i32 0, i32 -3, i32 22], align 16
@main.im = internal global [3 x i32*] [i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r1, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r2, i32 0, i32 0), i32* getelementptr inbounds ([4 x i32], [4 x i32]* @main.r3, i32 0, i32 0)], align 4
@.str.5 = private unnamed_addr constant [9 x i8] c"Initial\0A\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Reduced R-E form\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @NewMatrix(i32 %x_dim, i32 %y_dim) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca %struct.sMtx*, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  %call = call i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.sMtx*
  store %struct.sMtx* %0, %struct.sMtx** %m, align 4
  %1 = load i32, i32* %x_dim.addr, align 4
  %2 = load i32, i32* %y_dim.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %n, align 4
  %3 = load i32, i32* %x_dim.addr, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  store i32 %3, i32* %dim_x, align 4
  %5 = load i32, i32* %y_dim.addr, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 1
  store i32 %5, i32* %dim_y, align 4
  %7 = load i32, i32* %n, align 4
  %mul1 = mul i32 %7, 4
  %call2 = call i8* @malloc(i32 %mul1)
  %8 = bitcast i8* %call2 to i32*
  %9 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 2
  store i32* %8, i32** %m_stor, align 4
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %dim_y3 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %10, i32 0, i32 1
  %11 = load i32, i32* %dim_y3, align 4
  %mul4 = mul i32 %11, 4
  %call5 = call i8* @malloc(i32 %mul4)
  %12 = bitcast i8* %call5 to i32**
  %13 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %13, i32 0, i32 3
  store i32** %12, i32*** %mtx, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %m_stor6 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %16, i32 0, i32 2
  %17 = load i32*, i32** %m_stor6, align 4
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %x_dim.addr, align 4
  %mul7 = mul nsw i32 %18, %19
  %add.ptr = getelementptr inbounds i32, i32* %17, i32 %mul7
  %20 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %mtx8 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 3
  %21 = load i32**, i32*** %mtx8, align 4
  %22 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %21, i32 %22
  store i32* %add.ptr, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %n, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %24
}

declare i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSetRow(%struct.sMtx* %m, i32 %irow, i32* %v) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %irow.addr = alloca i32, align 4
  %v.addr = alloca i32*, align 4
  %ix = alloca i32, align 4
  %mr = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %irow, i32* %irow.addr, align 4
  store i32* %v, i32** %v.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %irow.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %mr, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %ix, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %v.addr, align 4
  %8 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx1, align 4
  %10 = load i32*, i32** %mr, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sMtx* @InitMatrix(i32 %x_dim, i32 %y_dim, i32** %v) #0 {
entry:
  %x_dim.addr = alloca i32, align 4
  %y_dim.addr = alloca i32, align 4
  %v.addr = alloca i32**, align 4
  %m = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  store i32 %x_dim, i32* %x_dim.addr, align 4
  store i32 %y_dim, i32* %y_dim.addr, align 4
  store i32** %v, i32*** %v.addr, align 4
  %0 = load i32, i32* %x_dim.addr, align 4
  %1 = load i32, i32* %y_dim.addr, align 4
  %call = call %struct.sMtx* @NewMatrix(i32 %0, i32 %1)
  store %struct.sMtx* %call, %struct.sMtx** %m, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %iy, align 4
  %3 = load i32, i32* %y_dim.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  %5 = load i32, i32* %iy, align 4
  %6 = load i32**, i32*** %v.addr, align 4
  %7 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  call void @MtxSetRow(%struct.sMtx* %4, i32 %5, i32* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %iy, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %iy, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct.sMtx*, %struct.sMtx** %m, align 4
  ret %struct.sMtx* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxDisplay(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %iy = alloca i32, align 4
  %ix = alloca i32, align 4
  %sc = alloca i8*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 0, i32* %iy, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %iy, align 4
  %1 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %1, i32 0, i32 1
  %2 = load i32, i32* %dim_y, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8** %sc, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %ix, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 0
  %5 = load i32, i32* %dim_x, align 4
  %cmp2 = icmp slt i32 %3, %5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %sc, align 4
  %7 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %7, i32 0, i32 3
  %8 = load i32**, i32*** %mtx, align 4
  %9 = load i32, i32* %iy, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx, align 4
  %11 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* %6, i32 %12)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0), i8** %sc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %iy, align 4
  %inc8 = add nsw i32 %14, 1
  store i32 %inc8, i32* %iy, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @MtxMulAndAddRows(%struct.sMtx* %m, i32 %ixrdest, i32 %ixrsrc, i32 %mplr) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %ixrdest.addr = alloca i32, align 4
  %ixrsrc.addr = alloca i32, align 4
  %mplr.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %srow = alloca i32*, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %ixrdest, i32* %ixrdest.addr, align 4
  store i32 %ixrsrc, i32* %ixrsrc.addr, align 4
  store i32 %mplr, i32* %mplr.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %ixrdest.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %4, i32 0, i32 3
  %5 = load i32**, i32*** %mtx1, align 4
  %6 = load i32, i32* %ixrsrc.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx2, align 4
  store i32* %7, i32** %srow, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %ix, align 4
  %9 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %9, i32 0, i32 0
  %10 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %8, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %mplr.addr, align 4
  %12 = load i32*, i32** %srow, align 4
  %13 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx3, align 4
  %mul = mul nsw i32 %11, %14
  %15 = load i32*, i32** %drow, align 4
  %16 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %17, %mul
  store i32 %add, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxSwapRows(%struct.sMtx* %m, i32 %rix1, i32 %rix2) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix1.addr = alloca i32, align 4
  %rix2.addr = alloca i32, align 4
  %r1 = alloca i32*, align 4
  %r2 = alloca i32*, align 4
  %temp = alloca i32, align 4
  %ix = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix1, i32* %rix1.addr, align 4
  store i32 %rix2, i32* %rix2.addr, align 4
  %0 = load i32, i32* %rix1.addr, align 4
  %1 = load i32, i32* %rix2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %2, i32 0, i32 3
  %3 = load i32**, i32*** %mtx, align 4
  %4 = load i32, i32* %rix1.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %3, i32 %4
  %5 = load i32*, i32** %arrayidx, align 4
  store i32* %5, i32** %r1, align 4
  %6 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx1 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %6, i32 0, i32 3
  %7 = load i32**, i32*** %mtx1, align 4
  %8 = load i32, i32* %rix2.addr, align 4
  %arrayidx2 = getelementptr inbounds i32*, i32** %7, i32 %8
  %9 = load i32*, i32** %arrayidx2, align 4
  store i32* %9, i32** %r2, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %ix, align 4
  %11 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %11, i32 0, i32 0
  %12 = load i32, i32* %dim_x, align 4
  %cmp3 = icmp slt i32 %10, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %r1, align 4
  %14 = load i32, i32* %ix, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  store i32 %15, i32* %temp, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32*, i32** %r2, align 4
  %18 = load i32, i32* %ix, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx5, align 4
  %20 = load i32*, i32** %r1, align 4
  %21 = load i32, i32* %ix, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx6, align 4
  %22 = load i32, i32* %temp, align 4
  %23 = load i32*, i32** %r2, align 4
  %24 = load i32, i32* %ix, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %arrayidx7, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxNormalizeRow(%struct.sMtx* %m, i32 %rix, i32 %lead) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %rix.addr = alloca i32, align 4
  %lead.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %drow = alloca i32*, align 4
  %lv = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  store i32 %rix, i32* %rix.addr, align 4
  store i32 %lead, i32* %lead.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 3
  %1 = load i32**, i32*** %mtx, align 4
  %2 = load i32, i32* %rix.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %1, i32 %2
  %3 = load i32*, i32** %arrayidx, align 4
  store i32* %3, i32** %drow, align 4
  %4 = load i32*, i32** %drow, align 4
  %5 = load i32, i32* %lead.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  store i32 %6, i32* %lv, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %ix, align 4
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 0
  %9 = load i32, i32* %dim_x, align 4
  %cmp = icmp slt i32 %7, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %lv, align 4
  %11 = load i32*, i32** %drow, align 4
  %12 = load i32, i32* %ix, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %div = sdiv i32 %13, %10
  store i32 %div, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @MtxToReducedREForm(%struct.sMtx* %m) #0 {
entry:
  %m.addr = alloca %struct.sMtx*, align 4
  %lead = alloca i32, align 4
  %rix = alloca i32, align 4
  %iix = alloca i32, align 4
  %lv = alloca i32, align 4
  %rowCount = alloca i32, align 4
  store %struct.sMtx* %m, %struct.sMtx** %m.addr, align 4
  %0 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_y = getelementptr inbounds %struct.sMtx, %struct.sMtx* %0, i32 0, i32 1
  %1 = load i32, i32* %dim_y, align 4
  store i32 %1, i32* %rowCount, align 4
  store i32 0, i32* %lead, align 4
  store i32 0, i32* %rix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load i32, i32* %rix, align 4
  %3 = load i32, i32* %rowCount, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %lead, align 4
  %5 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x = getelementptr inbounds %struct.sMtx, %struct.sMtx* %5, i32 0, i32 0
  %6 = load i32, i32* %dim_x, align 4
  %cmp1 = icmp sge i32 %4, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end25

if.end:                                           ; preds = %for.body
  %7 = load i32, i32* %rix, align 4
  store i32 %7, i32* %iix, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %if.end
  %8 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx = getelementptr inbounds %struct.sMtx, %struct.sMtx* %8, i32 0, i32 3
  %9 = load i32**, i32*** %mtx, align 4
  %10 = load i32, i32* %iix, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx, align 4
  %12 = load i32, i32* %lead, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 0, %13
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %iix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %iix, align 4
  %15 = load i32, i32* %iix, align 4
  %16 = load i32, i32* %rowCount, align 4
  %cmp4 = icmp eq i32 %15, %16
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %while.body
  %17 = load i32, i32* %rix, align 4
  store i32 %17, i32* %iix, align 4
  %18 = load i32, i32* %lead, align 4
  %inc6 = add nsw i32 %18, 1
  store i32 %inc6, i32* %lead, align 4
  %19 = load i32, i32* %lead, align 4
  %20 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %dim_x7 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %20, i32 0, i32 0
  %21 = load i32, i32* %dim_x7, align 4
  %cmp8 = icmp eq i32 %19, %21
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then5
  br label %for.end25

if.end10:                                         ; preds = %if.then5
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %22 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %23 = load i32, i32* %iix, align 4
  %24 = load i32, i32* %rix, align 4
  call void @MtxSwapRows(%struct.sMtx* %22, i32 %23, i32 %24)
  %25 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %26 = load i32, i32* %rix, align 4
  %27 = load i32, i32* %lead, align 4
  call void @MtxNormalizeRow(%struct.sMtx* %25, i32 %26, i32 %27)
  store i32 0, i32* %iix, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %while.end
  %28 = load i32, i32* %iix, align 4
  %29 = load i32, i32* %rowCount, align 4
  %cmp13 = icmp slt i32 %28, %29
  br i1 %cmp13, label %for.body14, label %for.end

for.body14:                                       ; preds = %for.cond12
  %30 = load i32, i32* %iix, align 4
  %31 = load i32, i32* %rix, align 4
  %cmp15 = icmp ne i32 %30, %31
  br i1 %cmp15, label %if.then16, label %if.end20

if.then16:                                        ; preds = %for.body14
  %32 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %mtx17 = getelementptr inbounds %struct.sMtx, %struct.sMtx* %32, i32 0, i32 3
  %33 = load i32**, i32*** %mtx17, align 4
  %34 = load i32, i32* %iix, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %33, i32 %34
  %35 = load i32*, i32** %arrayidx18, align 4
  %36 = load i32, i32* %lead, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx19, align 4
  store i32 %37, i32* %lv, align 4
  %38 = load %struct.sMtx*, %struct.sMtx** %m.addr, align 4
  %39 = load i32, i32* %iix, align 4
  %40 = load i32, i32* %rix, align 4
  %41 = load i32, i32* %lv, align 4
  %sub = sub nsw i32 0, %41
  call void @MtxMulAndAddRows(%struct.sMtx* %38, i32 %39, i32 %40, i32 %sub)
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %for.body14
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %42 = load i32, i32* %iix, align 4
  %inc21 = add nsw i32 %42, 1
  store i32 %inc21, i32* %iix, align 4
  br label %for.cond12

for.end:                                          ; preds = %for.cond12
  %43 = load i32, i32* %lead, align 4
  %inc22 = add nsw i32 %43, 1
  store i32 %inc22, i32* %lead, align 4
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %44 = load i32, i32* %rix, align 4
  %inc24 = add nsw i32 %44, 1
  store i32 %inc24, i32* %rix, align 4
  br label %for.cond

for.end25:                                        ; preds = %if.then, %if.then9, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %m1 = alloca %struct.sMtx*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sMtx* @InitMatrix(i32 4, i32 3, i32** getelementptr inbounds ([3 x i32*], [3 x i32*]* @main.im, i32 0, i32 0))
  store %struct.sMtx* %call, %struct.sMtx** %m1, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0))
  %0 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %0)
  %1 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxToReducedREForm(%struct.sMtx* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i32 0, i32 0))
  %2 = load %struct.sMtx*, %struct.sMtx** %m1, align 4
  call void @MtxDisplay(%struct.sMtx* %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
