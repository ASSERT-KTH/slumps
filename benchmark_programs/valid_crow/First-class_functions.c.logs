
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for functionA()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for functionA()

; entering Souper's runOnFunction() for functionB()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for functionB()

; entering Souper's runOnFunction() for Function1()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for Function1()

; entering Souper's runOnFunction() for WhichFunc()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %idx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for WhichFunc()

; entering Souper's runOnFunction() for InvokeComposed()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for InvokeComposed()

; entering Souper's runOnFunction() for Compose()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for Compose()

; entering Souper's runOnFunction() for CallComposed()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for CallComposed()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './First-class_functions.c.bc'
source_filename = "./First-class_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sComposition = type { double (double)*, double (double)* }

@funcListA = hidden global [4 x double (double)*] [double (double)* @functionA, double (double)* @sin, double (double)* @cos, double (double)* @tan], align 16
@funcListB = hidden global [4 x double (double)*] [double (double)* @functionB, double (double)* @asin, double (double)* @acos, double (double)* @atan], align 16
@.str = private unnamed_addr constant [32 x i8] c"Function1(functionA, 3.0) = %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Compostion %d(0.9) = %f\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden double @functionA(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = load double, double* %v.addr, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %v.addr, align 8
  %mul1 = fmul double %mul, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden double @functionB(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %1 = call double @llvm.log.f64(double %0)
  %div = fdiv double %1, 3.000000e+00
  %2 = call double @llvm.exp.f64(double %div)
  ret double %2
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.exp.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @Function1(double (double)* %f2, double %val) #0 {
entry:
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f2.addr, align 4
  %1 = load double, double* %val.addr, align 8
  %call = call double %0(double %1)
  ret double %call
}

; Function Attrs: noinline nounwind optnone
define hidden double (double)* @WhichFunc(i32 %idx) #0 {
entry:
  %idx.addr = alloca i32, align 4
  store i32 %idx, i32* %idx.addr, align 4
  %0 = load i32, i32* %idx.addr, align 4
  %cmp = icmp slt i32 %0, 4
  %1 = zext i1 %cmp to i64
  %cond = select i1 %cmp, double (double)* @functionA, double (double)* @functionB
  ret double (double)* %cond
}

; Function Attrs: nounwind readnone
declare double @sin(double %0) #2

; Function Attrs: nounwind readnone
declare double @cos(double %0) #2

; Function Attrs: nounwind readnone
declare double @tan(double %0) #2

; Function Attrs: nounwind readnone
declare double @asin(double %0) #2

; Function Attrs: nounwind readnone
declare double @acos(double %0) #2

; Function Attrs: nounwind readnone
declare double @atan(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden double @InvokeComposed(double (double)* %f1, double (double)* %f2, double %val) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %val.addr = alloca double, align 8
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load double (double)*, double (double)** %f1.addr, align 4
  %1 = load double (double)*, double (double)** %f2.addr, align 4
  %2 = load double, double* %val.addr, align 8
  %call = call double %1(double %2)
  %call1 = call double %0(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sComposition* @Compose(double (double)* %f1, double (double)* %f2) #0 {
entry:
  %f1.addr = alloca double (double)*, align 4
  %f2.addr = alloca double (double)*, align 4
  %comp = alloca %struct.sComposition*, align 4
  store double (double)* %f1, double (double)** %f1.addr, align 4
  store double (double)* %f2, double (double)** %f2.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sComposition*
  store %struct.sComposition* %0, %struct.sComposition** %comp, align 4
  %1 = load double (double)*, double (double)** %f1.addr, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f11 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 0
  store double (double)* %1, double (double)** %f11, align 4
  %3 = load double (double)*, double (double)** %f2.addr, align 4
  %4 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  %f22 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %4, i32 0, i32 1
  store double (double)* %3, double (double)** %f22, align 4
  %5 = load %struct.sComposition*, %struct.sComposition** %comp, align 4
  ret %struct.sComposition* %5
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden double @CallComposed(%struct.sComposition* %comp, double %val) #0 {
entry:
  %comp.addr = alloca %struct.sComposition*, align 4
  %val.addr = alloca double, align 8
  store %struct.sComposition* %comp, %struct.sComposition** %comp.addr, align 4
  store double %val, double* %val.addr, align 8
  %0 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f1 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %0, i32 0, i32 0
  %1 = load double (double)*, double (double)** %f1, align 4
  %2 = load %struct.sComposition*, %struct.sComposition** %comp.addr, align 4
  %f2 = getelementptr inbounds %struct.sComposition, %struct.sComposition* %2, i32 0, i32 1
  %3 = load double (double)*, double (double)** %f2, align 4
  %4 = load double, double* %val.addr, align 8
  %call = call double %3(double %4)
  %call1 = call double %1(double %call)
  ret double %call1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ix = alloca i32, align 4
  %c = alloca %struct.sComposition*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call double (double)* @WhichFunc(i32 0)
  %call1 = call double @Function1(double (double)* %call, double 3.000000e+00)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0), double %call1)
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListA, i32 0, i32 %1
  %2 = load double (double)*, double (double)** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx3 = getelementptr inbounds [4 x double (double)*], [4 x double (double)*]* @funcListB, i32 0, i32 %3
  %4 = load double (double)*, double (double)** %arrayidx3, align 4
  %call4 = call %struct.sComposition* @Compose(double (double)* %2, double (double)* %4)
  store %struct.sComposition* %call4, %struct.sComposition** %c, align 4
  %5 = load i32, i32* %ix, align 4
  %6 = load %struct.sComposition*, %struct.sComposition** %c, align 4
  %call5 = call double @CallComposed(%struct.sComposition* %6, double 9.000000e-01)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), i32 %5, double %call5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
