
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for compare_card()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %face, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %face1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for compare_card()

; entering Souper's runOnFunction() for equals_card()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %face, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %face1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %suit, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %suit2, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv, %conv3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for equals_card()

; entering Souper's runOnFunction() for are_distinct()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for are_distinct()

; entering Souper's runOnFunction() for is_straight()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %add, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 4:i32, %1
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %2, 12
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %4, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 4:i32, %1
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 12:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_straight()

; entering Souper's runOnFunction() for is_flush()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %suit1, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %suit, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %conv, %conv2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for is_flush()

; entering Souper's runOnFunction() for analyze_hand()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 14
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 14:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, 14
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 14:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @tolower(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i8* %5, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %6, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (nonZero)
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call11 = call i32 @tolower(i32 %conv10) #4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv12 = trunc i32 %call11 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %suit, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i8* %13, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %suit, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add21 = add nsw i32 %16, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call22 = call i32 @are_distinct()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %17, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp slt i32 %20, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %face37, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc41 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp slt i32 %25, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp sgt i32 %27, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %gs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc51 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc54 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %gs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp57 = icmp slt i32 %31, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp61 = icmp eq i32 %33, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc66 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %found, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool68 = icmp ne i32 %35, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp slt i32 %36, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %arrayidx76, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp77 = icmp eq i32 %38, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc82 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %found, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool84 = icmp ne i32 %40, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call88 = call i32 @is_flush()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call89 = call i32 @is_straight()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %flush, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool90 = icmp ne i32 %41, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %straight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool91 = icmp ne i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %flush, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool93 = icmp ne i32 %43, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %straight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool96 = icmp ne i32 %44, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 14:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 14:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 432013312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (nonZero)
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (nonZero)

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for analyze_hand()

; entering Souper's runOnFunction() for main()

; ModuleID = './Poker_hand_analyser.c.bc'
source_filename = "./Poker_hand_analyser.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.card = type { i32, i8 }

@cards = hidden global [5 x %struct.card] zeroinitializer, align 16
@.str = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"23456789tjqka\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"shdc\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"four-of-a-kind\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"full-house\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"three-of-a-kind\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"two-pairs\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"one-pair\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"straight-flush\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"straight\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"high-card\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"2h 2d 2c kc qd\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"2h 5h 7d 8c 9s\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"ah 2d 3c 4c 5d\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"2h 3h 2d 3c 3d\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"2h 7h 2d 3c 3d\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"2h 7h 7d 7c 7s\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"th jh qh kh ah\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"4h 4s ks 5d ts\00", align 1
@.str.20 = private unnamed_addr constant [15 x i8] c"qc tc 7c 6c 4c\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"ah ah 7c 6c 4c\00", align 1
@__const.main.hands = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0)], align 16
@.str.22 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare_card(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %c1 = alloca %struct.card, align 4
  %c2 = alloca %struct.card, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.card*
  %2 = bitcast %struct.card* %c1 to i8*
  %3 = bitcast %struct.card* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %b.addr, align 4
  %5 = bitcast i8* %4 to %struct.card*
  %6 = bitcast %struct.card* %c2 to i8*
  %7 = bitcast %struct.card* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %8 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %9 = load i32, i32* %face1, align 4
  %sub = sub nsw i32 %8, %9
  ret i32 %sub
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @equals_card(%struct.card* byval(%struct.card) align 4 %c1, %struct.card* byval(%struct.card) align 4 %c2) #0 {
entry:
  %retval = alloca i32, align 4
  %face = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 0
  %0 = load i32, i32* %face, align 4
  %face1 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 0
  %1 = load i32, i32* %face1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %suit = getelementptr inbounds %struct.card, %struct.card* %c1, i32 0, i32 1
  %2 = load i8, i8* %suit, align 4
  %conv = sext i8 %2 to i32
  %suit2 = getelementptr inbounds %struct.card, %struct.card* %c2, i32 0, i32 1
  %3 = load i8, i8* %suit2, align 4
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @are_distinct() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 5
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %3
  %4 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %4
  %call = call i32 @equals_card(%struct.card* byval(%struct.card) align 4 %arrayidx, %struct.card* byval(%struct.card) align 4 %arrayidx4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %j, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end7, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_straight() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  call void @qsort(i8* bitcast ([5 x %struct.card]* @cards to i8*), i32 5, i32 8, i32 (i8*, i8*)* @compare_card)
  %0 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp = icmp eq i32 %add, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 4, i32 0), align 16
  %cmp1 = icmp eq i32 %2, 12
  br i1 %cmp1, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 0), align 16
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %land.lhs.true3, label %if.end6

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 3, i32 0), align 8
  %cmp4 = icmp eq i32 %4, 3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %land.lhs.true3
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %land.lhs.true3, %land.lhs.true, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @is_flush() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %suit = alloca i8, align 1
  %0 = load i8, i8* getelementptr inbounds ([5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 0, i32 1), align 4
  store i8 %0, i8* %suit, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %2
  %suit1 = getelementptr inbounds %struct.card, %struct.card* %arrayidx, i32 0, i32 1
  %3 = load i8, i8* %suit1, align 4
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* %suit, align 1
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp ne i32 %conv, %conv2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @analyze_hand(i8* %hand) #0 {
entry:
  %retval = alloca i8*, align 4
  %hand.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %suit = alloca i8, align 1
  %cp = alloca i8*, align 4
  %found = alloca i32, align 4
  %flush = alloca i32, align 4
  %straight = alloca i32, align 4
  %groups = alloca [13 x i32], align 16
  store i8* %hand, i8** %hand.addr, align 4
  store i32 0, i32* %gs, align 4
  %0 = load i8*, i8** %hand.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %cmp = icmp ne i32 %call, 14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 14
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %hand.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call2 = call i32 @tolower(i32 %conv) #4
  %call3 = call i8* @strchr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i32 %call2)
  store i8* %call3, i8** %cp, align 4
  %5 = load i8*, i8** %cp, align 4
  %cmp4 = icmp eq i8* %5, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end7:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %div = sdiv i32 %6, 3
  store i32 %div, i32* %j, align 4
  %7 = load i8*, i8** %cp, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([14 x i8]* @.str.1 to i32)
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %8
  %face = getelementptr inbounds %struct.card, %struct.card* %arrayidx8, i32 0, i32 0
  store i32 %sub.ptr.sub, i32* %face, align 8
  %9 = load i8*, i8** %hand.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %9, i32 %add
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %11 to i32
  %call11 = call i32 @tolower(i32 %conv10) #4
  %conv12 = trunc i32 %call11 to i8
  store i8 %conv12, i8* %suit, align 1
  %12 = load i8, i8* %suit, align 1
  %conv13 = sext i8 %12 to i32
  %call14 = call i8* @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  store i8* %call14, i8** %cp, align 4
  %13 = load i8*, i8** %cp, align 4
  %cmp15 = icmp eq i8* %13, null
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end7
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end7
  %14 = load i8, i8* %suit, align 1
  %15 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %15
  %suit20 = getelementptr inbounds %struct.card, %struct.card* %arrayidx19, i32 0, i32 1
  store i8 %14, i8* %suit20, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %16 = load i32, i32* %i, align 4
  %add21 = add nsw i32 %16, 3
  store i32 %add21, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call22 = call i32 @are_distinct()
  %tobool = icmp ne i32 %call22, 0
  br i1 %tobool, label %if.end24, label %if.then23

if.then23:                                        ; preds = %for.end
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end24:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc30, %if.end24
  %17 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %17, 13
  br i1 %cmp26, label %for.body28, label %for.end31

for.body28:                                       ; preds = %for.cond25
  %18 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %18
  store i32 0, i32* %arrayidx29, align 4
  br label %for.inc30

for.inc30:                                        ; preds = %for.body28
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc40, %for.end31
  %20 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %20, 5
  br i1 %cmp33, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond32
  %21 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [5 x %struct.card], [5 x %struct.card]* @cards, i32 0, i32 %21
  %face37 = getelementptr inbounds %struct.card, %struct.card* %arrayidx36, i32 0, i32 0
  %22 = load i32, i32* %face37, align 8
  %arrayidx38 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %22
  %23 = load i32, i32* %arrayidx38, align 4
  %inc39 = add nsw i32 %23, 1
  store i32 %inc39, i32* %arrayidx38, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body35
  %24 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %24, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond32

for.end42:                                        ; preds = %for.cond32
  store i32 0, i32* %i, align 4
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc53, %for.end42
  %25 = load i32, i32* %i, align 4
  %cmp44 = icmp slt i32 %25, 13
  br i1 %cmp44, label %for.body46, label %for.end55

for.body46:                                       ; preds = %for.cond43
  %26 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %27, 0
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %for.body46
  %28 = load i32, i32* %gs, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %gs, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %for.body46
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %29 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %29, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond43

for.end55:                                        ; preds = %for.cond43
  %30 = load i32, i32* %gs, align 4
  switch i32 %30, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb71
    i32 4, label %sw.bb87
  ]

sw.bb:                                            ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc65, %sw.bb
  %31 = load i32, i32* %i, align 4
  %cmp57 = icmp slt i32 %31, 13
  br i1 %cmp57, label %for.body59, label %for.end67

for.body59:                                       ; preds = %for.cond56
  %32 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %33, 4
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %for.body59
  store i32 1, i32* %found, align 4
  br label %for.end67

if.end64:                                         ; preds = %for.body59
  br label %for.inc65

for.inc65:                                        ; preds = %if.end64
  %34 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %34, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond56

for.end67:                                        ; preds = %if.then63, %for.cond56
  %35 = load i32, i32* %found, align 4
  %tobool68 = icmp ne i32 %35, 0
  br i1 %tobool68, label %if.then69, label %if.end70

if.then69:                                        ; preds = %for.end67
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end70:                                         ; preds = %for.end67
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb71:                                          ; preds = %for.end55
  store i32 0, i32* %found, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc81, %sw.bb71
  %36 = load i32, i32* %i, align 4
  %cmp73 = icmp slt i32 %36, 13
  br i1 %cmp73, label %for.body75, label %for.end83

for.body75:                                       ; preds = %for.cond72
  %37 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [13 x i32], [13 x i32]* %groups, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp eq i32 %38, 3
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.body75
  store i32 1, i32* %found, align 4
  br label %for.end83

if.end80:                                         ; preds = %for.body75
  br label %for.inc81

for.inc81:                                        ; preds = %if.end80
  %39 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %39, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond72

for.end83:                                        ; preds = %if.then79, %for.cond72
  %40 = load i32, i32* %found, align 4
  %tobool84 = icmp ne i32 %40, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.end83
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.end86:                                         ; preds = %for.end83
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.bb87:                                          ; preds = %for.end55
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8** %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.end55
  %call88 = call i32 @is_flush()
  store i32 %call88, i32* %flush, align 4
  %call89 = call i32 @is_straight()
  store i32 %call89, i32* %straight, align 4
  %41 = load i32, i32* %flush, align 4
  %tobool90 = icmp ne i32 %41, 0
  br i1 %tobool90, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.default
  %42 = load i32, i32* %straight, align 4
  %tobool91 = icmp ne i32 %42, 0
  br i1 %tobool91, label %if.then92, label %if.else

if.then92:                                        ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %sw.default
  %43 = load i32, i32* %flush, align 4
  %tobool93 = icmp ne i32 %43, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else95:                                        ; preds = %if.else
  %44 = load i32, i32* %straight, align 4
  %tobool96 = icmp ne i32 %44, 0
  br i1 %tobool96, label %if.then97, label %if.else98

if.then97:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), i8** %retval, align 4
  br label %return

if.else98:                                        ; preds = %if.else95
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.else98, %if.then97, %if.then94, %if.then92, %sw.bb87, %if.end86, %if.then85, %if.end70, %if.then69, %if.then23, %if.then17, %if.then6, %if.then
  %45 = load i8*, i8** %retval, align 4
  ret i8* %45
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i8* @strchr(i8* %0, i32 %1) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %type = alloca i8*, align 4
  %hands = alloca [10 x i8*], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i8*]* %hands to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i8*]* @__const.main.hands to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call = call i8* @analyze_hand(i8* %3)
  store i8* %call, i8** %type, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [10 x i8*], [10 x i8*]* %hands, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %6 = load i8*, i8** %type, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i8* %5, i8* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
