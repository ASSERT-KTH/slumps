
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for cholesky()

; ModuleID = './Cholesky_decomposition.c.bc'
source_filename = "./Cholesky_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%2.5f \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@__const.main.m1 = private unnamed_addr constant [9 x double] [double 2.500000e+01, double 1.500000e+01, double -5.000000e+00, double 1.500000e+01, double 1.800000e+01, double 0.000000e+00, double -5.000000e+00, double 0.000000e+00, double 1.100000e+01], align 16
@__const.main.m2 = private unnamed_addr constant [16 x double] [double 1.800000e+01, double 2.200000e+01, double 5.400000e+01, double 4.200000e+01, double 2.200000e+01, double 7.000000e+01, double 8.600000e+01, double 6.200000e+01, double 5.400000e+01, double 8.600000e+01, double 1.740000e+02, double 1.340000e+02, double 4.200000e+01, double 6.200000e+01, double 1.340000e+02, double 1.060000e+02], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double* @cholesky(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %L = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 %mul, i32 8)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %L, align 4
  %3 = load double*, double** %L, align 4
  %cmp = icmp eq double* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc33, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %for.body, label %for.end35

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc30, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %7, 1
  %cmp3 = icmp slt i32 %6, %add
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond2
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load double*, double** %L, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul8 = mul nsw i32 %11, %12
  %13 = load i32, i32* %k, align 4
  %add9 = add nsw i32 %mul8, %13
  %arrayidx = getelementptr inbounds double, double* %10, i32 %add9
  %14 = load double, double* %arrayidx, align 8
  %15 = load double*, double** %L, align 4
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %n.addr, align 4
  %mul10 = mul nsw i32 %16, %17
  %18 = load i32, i32* %k, align 4
  %add11 = add nsw i32 %mul10, %18
  %arrayidx12 = getelementptr inbounds double, double* %15, i32 %add11
  %19 = load double, double* %arrayidx12, align 8
  %mul13 = fmul double %14, %19
  %20 = load double, double* %s, align 8
  %add14 = fadd double %20, %mul13
  store double %add14, double* %s, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %21 = load i32, i32* %k, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %j, align 4
  %cmp15 = icmp eq i32 %22, %23
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %24 = load double*, double** %A.addr, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %25, %26
  %27 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %mul16, %27
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %add17
  %28 = load double, double* %arrayidx18, align 8
  %29 = load double, double* %s, align 8
  %sub = fsub double %28, %29
  %30 = call double @llvm.sqrt.f64(double %sub)
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %31 = load double*, double** %L, align 4
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %n.addr, align 4
  %mul19 = mul nsw i32 %32, %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %34
  %arrayidx21 = getelementptr inbounds double, double* %31, i32 %add20
  %35 = load double, double* %arrayidx21, align 8
  %div = fdiv double 1.000000e+00, %35
  %36 = load double*, double** %A.addr, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %n.addr, align 4
  %mul22 = mul nsw i32 %37, %38
  %39 = load i32, i32* %j, align 4
  %add23 = add nsw i32 %mul22, %39
  %arrayidx24 = getelementptr inbounds double, double* %36, i32 %add23
  %40 = load double, double* %arrayidx24, align 8
  %41 = load double, double* %s, align 8
  %sub25 = fsub double %40, %41
  %mul26 = fmul double %div, %sub25
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %30, %cond.true ], [ %mul26, %cond.false ]
  %42 = load double*, double** %L, align 4
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %43, %44
  %45 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %mul27, %45
  %arrayidx29 = getelementptr inbounds double, double* %42, i32 %add28
  store double %cond, double* %arrayidx29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %cond.end
  %46 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %46, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond2

for.end32:                                        ; preds = %for.cond2
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %47 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %47, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  %48 = load double*, double** %L, align 4
  ret double* %48
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show_matrix(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %A.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %9 = load i32, i32* %j, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %10, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %m1 = alloca [9 x double], align 16
  %c1 = alloca double*, align 4
  %m2 = alloca [16 x double], align 16
  %c2 = alloca double*, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = bitcast [9 x double]* %m1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([9 x double]* @__const.main.m1 to i8*), i32 72, i1 false)
  %arraydecay = getelementptr inbounds [9 x double], [9 x double]* %m1, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call double* @cholesky(double* %arraydecay, i32 %1)
  store double* %call, double** %c1, align 4
  %2 = load double*, double** %c1, align 4
  %3 = load i32, i32* %n, align 4
  call void @show_matrix(double* %2, i32 %3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %4 = load double*, double** %c1, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  store i32 4, i32* %n, align 4
  %6 = bitcast [16 x double]* %m2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %6, i8* align 16 bitcast ([16 x double]* @__const.main.m2 to i8*), i32 128, i1 false)
  %arraydecay2 = getelementptr inbounds [16 x double], [16 x double]* %m2, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %call3 = call double* @cholesky(double* %arraydecay2, i32 %7)
  store double* %call3, double** %c2, align 4
  %8 = load double*, double** %c2, align 4
  %9 = load i32, i32* %n, align 4
  call void @show_matrix(double* %8, i32 %9)
  %10 = load double*, double** %c2, align 4
  %11 = bitcast double* %10 to i8*
  call void @free(i8* %11)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp eq double* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %6, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul8 = mul nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %mul8, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul10 = mul nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %mul10, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul16 = mul nsw i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %mul16, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul19 = mul nsw i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add nsw i32 %mul19, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul22 = mul nsw i32 %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add nsw i32 %mul22, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul27 = mul nsw i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 %mul27, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cholesky()

; entering Souper's runOnFunction() for show_matrix()

; ModuleID = './Cholesky_decomposition.c.bc'
source_filename = "./Cholesky_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%2.5f \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@__const.main.m1 = private unnamed_addr constant [9 x double] [double 2.500000e+01, double 1.500000e+01, double -5.000000e+00, double 1.500000e+01, double 1.800000e+01, double 0.000000e+00, double -5.000000e+00, double 0.000000e+00, double 1.100000e+01], align 16
@__const.main.m2 = private unnamed_addr constant [16 x double] [double 1.800000e+01, double 2.200000e+01, double 5.400000e+01, double 4.200000e+01, double 2.200000e+01, double 7.000000e+01, double 8.600000e+01, double 6.200000e+01, double 5.400000e+01, double 8.600000e+01, double 1.740000e+02, double 1.340000e+02, double 4.200000e+01, double 6.200000e+01, double 1.340000e+02, double 1.060000e+02], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double* @cholesky(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %L = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 %mul, i32 8)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %L, align 4
  %3 = load double*, double** %L, align 4
  %cmp = icmp eq double* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc33, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %for.body, label %for.end35

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc30, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %7, 1
  %cmp3 = icmp slt i32 %6, %add
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond2
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load double*, double** %L, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul8 = mul nsw i32 %11, %12
  %13 = load i32, i32* %k, align 4
  %add9 = add nsw i32 %mul8, %13
  %arrayidx = getelementptr inbounds double, double* %10, i32 %add9
  %14 = load double, double* %arrayidx, align 8
  %15 = load double*, double** %L, align 4
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %n.addr, align 4
  %mul10 = mul nsw i32 %16, %17
  %18 = load i32, i32* %k, align 4
  %add11 = add nsw i32 %mul10, %18
  %arrayidx12 = getelementptr inbounds double, double* %15, i32 %add11
  %19 = load double, double* %arrayidx12, align 8
  %mul13 = fmul double %14, %19
  %20 = load double, double* %s, align 8
  %add14 = fadd double %20, %mul13
  store double %add14, double* %s, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %21 = load i32, i32* %k, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %j, align 4
  %cmp15 = icmp eq i32 %22, %23
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %24 = load double*, double** %A.addr, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %25, %26
  %27 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %mul16, %27
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %add17
  %28 = load double, double* %arrayidx18, align 8
  %29 = load double, double* %s, align 8
  %sub = fsub double %28, %29
  %30 = call double @llvm.sqrt.f64(double %sub)
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %31 = load double*, double** %L, align 4
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %n.addr, align 4
  %mul19 = mul nsw i32 %32, %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %34
  %arrayidx21 = getelementptr inbounds double, double* %31, i32 %add20
  %35 = load double, double* %arrayidx21, align 8
  %div = fdiv double 1.000000e+00, %35
  %36 = load double*, double** %A.addr, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %n.addr, align 4
  %mul22 = mul nsw i32 %37, %38
  %39 = load i32, i32* %j, align 4
  %add23 = add nsw i32 %mul22, %39
  %arrayidx24 = getelementptr inbounds double, double* %36, i32 %add23
  %40 = load double, double* %arrayidx24, align 8
  %41 = load double, double* %s, align 8
  %sub25 = fsub double %40, %41
  %mul26 = fmul double %div, %sub25
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %30, %cond.true ], [ %mul26, %cond.false ]
  %42 = load double*, double** %L, align 4
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %43, %44
  %45 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %mul27, %45
  %arrayidx29 = getelementptr inbounds double, double* %42, i32 %add28
  store double %cond, double* %arrayidx29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %cond.end
  %46 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %46, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond2

for.end32:                                        ; preds = %for.cond2
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %47 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %47, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  %48 = load double*, double** %L, align 4
  ret double* %48
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show_matrix(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %A.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %9 = load i32, i32* %j, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %10, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %m1 = alloca [9 x double], align 16
  %c1 = alloca double*, align 4
  %m2 = alloca [16 x double], align 16
  %c2 = alloca double*, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = bitcast [9 x double]* %m1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([9 x double]* @__const.main.m1 to i8*), i32 72, i1 false)
  %arraydecay = getelementptr inbounds [9 x double], [9 x double]* %m1, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call double* @cholesky(double* %arraydecay, i32 %1)
  store double* %call, double** %c1, align 4
  %2 = load double*, double** %c1, align 4
  %3 = load i32, i32* %n, align 4
  call void @show_matrix(double* %2, i32 %3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %4 = load double*, double** %c1, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  store i32 4, i32* %n, align 4
  %6 = bitcast [16 x double]* %m2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %6, i8* align 16 bitcast ([16 x double]* @__const.main.m2 to i8*), i32 128, i1 false)
  %arraydecay2 = getelementptr inbounds [16 x double], [16 x double]* %m2, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %call3 = call double* @cholesky(double* %arraydecay2, i32 %7)
  store double* %call3, double** %c2, align 4
  %8 = load double*, double** %c2, align 4
  %9 = load i32, i32* %n, align 4
  call void @show_matrix(double* %8, i32 %9)
  %10 = load double*, double** %c2, align 4
  %11 = bitcast double* %10 to i8*
  call void @free(i8* %11)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for show_matrix()

; entering Souper's runOnFunction() for main()

; ModuleID = './Cholesky_decomposition.c.bc'
source_filename = "./Cholesky_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%2.5f \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@__const.main.m1 = private unnamed_addr constant [9 x double] [double 2.500000e+01, double 1.500000e+01, double -5.000000e+00, double 1.500000e+01, double 1.800000e+01, double 0.000000e+00, double -5.000000e+00, double 0.000000e+00, double 1.100000e+01], align 16
@__const.main.m2 = private unnamed_addr constant [16 x double] [double 1.800000e+01, double 2.200000e+01, double 5.400000e+01, double 4.200000e+01, double 2.200000e+01, double 7.000000e+01, double 8.600000e+01, double 6.200000e+01, double 5.400000e+01, double 8.600000e+01, double 1.740000e+02, double 1.340000e+02, double 4.200000e+01, double 6.200000e+01, double 1.340000e+02, double 1.060000e+02], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double* @cholesky(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %L = alloca double*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %0, %1
  %call = call noalias i8* @calloc(i32 %mul, i32 8)
  %2 = bitcast i8* %call to double*
  store double* %2, double** %L, align 4
  %3 = load double*, double** %L, align 4
  %cmp = icmp eq double* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc33, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %for.body, label %for.end35

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc30, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %7, 1
  %cmp3 = icmp slt i32 %6, %add
  br i1 %cmp3, label %for.body4, label %for.end32

for.body4:                                        ; preds = %for.cond2
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body4
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %8, %9
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %10 = load double*, double** %L, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n.addr, align 4
  %mul8 = mul nsw i32 %11, %12
  %13 = load i32, i32* %k, align 4
  %add9 = add nsw i32 %mul8, %13
  %arrayidx = getelementptr inbounds double, double* %10, i32 %add9
  %14 = load double, double* %arrayidx, align 8
  %15 = load double*, double** %L, align 4
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %n.addr, align 4
  %mul10 = mul nsw i32 %16, %17
  %18 = load i32, i32* %k, align 4
  %add11 = add nsw i32 %mul10, %18
  %arrayidx12 = getelementptr inbounds double, double* %15, i32 %add11
  %19 = load double, double* %arrayidx12, align 8
  %mul13 = fmul double %14, %19
  %20 = load double, double* %s, align 8
  %add14 = fadd double %20, %mul13
  store double %add14, double* %s, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %21 = load i32, i32* %k, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %j, align 4
  %cmp15 = icmp eq i32 %22, %23
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %24 = load double*, double** %A.addr, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %25, %26
  %27 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %mul16, %27
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 %add17
  %28 = load double, double* %arrayidx18, align 8
  %29 = load double, double* %s, align 8
  %sub = fsub double %28, %29
  %30 = call double @llvm.sqrt.f64(double %sub)
  br label %cond.end

cond.false:                                       ; preds = %for.end
  %31 = load double*, double** %L, align 4
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %n.addr, align 4
  %mul19 = mul nsw i32 %32, %33
  %34 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %34
  %arrayidx21 = getelementptr inbounds double, double* %31, i32 %add20
  %35 = load double, double* %arrayidx21, align 8
  %div = fdiv double 1.000000e+00, %35
  %36 = load double*, double** %A.addr, align 4
  %37 = load i32, i32* %i, align 4
  %38 = load i32, i32* %n.addr, align 4
  %mul22 = mul nsw i32 %37, %38
  %39 = load i32, i32* %j, align 4
  %add23 = add nsw i32 %mul22, %39
  %arrayidx24 = getelementptr inbounds double, double* %36, i32 %add23
  %40 = load double, double* %arrayidx24, align 8
  %41 = load double, double* %s, align 8
  %sub25 = fsub double %40, %41
  %mul26 = fmul double %div, %sub25
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %30, %cond.true ], [ %mul26, %cond.false ]
  %42 = load double*, double** %L, align 4
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %43, %44
  %45 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %mul27, %45
  %arrayidx29 = getelementptr inbounds double, double* %42, i32 %add28
  store double %cond, double* %arrayidx29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %cond.end
  %46 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %46, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond2

for.end32:                                        ; preds = %for.cond2
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %47 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %47, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond

for.end35:                                        ; preds = %for.cond
  %48 = load double*, double** %L, align 4
  ret double* %48
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @show_matrix(double* %A, i32 %n) #0 {
entry:
  %A.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %A.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %arrayidx = getelementptr inbounds double, double* %4, i32 %add
  %8 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %9 = load i32, i32* %j, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %10 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %10, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %m1 = alloca [9 x double], align 16
  %c1 = alloca double*, align 4
  %m2 = alloca [16 x double], align 16
  %c2 = alloca double*, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = bitcast [9 x double]* %m1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([9 x double]* @__const.main.m1 to i8*), i32 72, i1 false)
  %arraydecay = getelementptr inbounds [9 x double], [9 x double]* %m1, i32 0, i32 0
  %1 = load i32, i32* %n, align 4
  %call = call double* @cholesky(double* %arraydecay, i32 %1)
  store double* %call, double** %c1, align 4
  %2 = load double*, double** %c1, align 4
  %3 = load i32, i32* %n, align 4
  call void @show_matrix(double* %2, i32 %3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %4 = load double*, double** %c1, align 4
  %5 = bitcast double* %4 to i8*
  call void @free(i8* %5)
  store i32 4, i32* %n, align 4
  %6 = bitcast [16 x double]* %m2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %6, i8* align 16 bitcast ([16 x double]* @__const.main.m2 to i8*), i32 128, i1 false)
  %arraydecay2 = getelementptr inbounds [16 x double], [16 x double]* %m2, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %call3 = call double* @cholesky(double* %arraydecay2, i32 %7)
  store double* %call3, double** %c2, align 4
  %8 = load double*, double** %c2, align 4
  %9 = load i32, i32* %n, align 4
  call void @show_matrix(double* %8, i32 %9)
  %10 = load double*, double** %c2, align 4
  %11 = bitcast double* %10 to i8*
  call void @free(i8* %11)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
