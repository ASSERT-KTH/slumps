
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for addVectors()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for addVectors()

; entering Souper's runOnFunction() for subVectors()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for subVectors()

; entering Souper's runOnFunction() for dotProduct()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for dotProduct()

; entering Souper's runOnFunction() for scaleVector()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for scaleVector()

; entering Souper's runOnFunction() for intersectionPoint()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for intersectionPoint()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Find_the_intersection_of_a_line_with_a_plane.c.bc'
source_filename = "./Find_the_intersection_of_a_line_with_a_plane.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [122 x i8] c"Usage : %s <line direction, point on line, normal to plane and point on plane given as (x,y,z) tuples separated by space>\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"(%lf,%lf,%lf)\00", align 1
@.str.2 = private unnamed_addr constant [73 x i8] c"Line and Plane do not intersect, either parallel or line is on the plane\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Intersection point is (%lf,%lf,%lf)\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @addVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subVectors(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %sub = fsub double %0, %1
  store double %sub, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %sub5 = fsub double %2, %3
  store double %sub5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %sub8 = fsub double %4, %5
  store double %sub8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %a, %struct.vector* byval(%struct.vector) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %b, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  ret double %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @scaleVector(%struct.vector* noalias sret align 8 %agg.result, double %l, %struct.vector* byval(%struct.vector) align 8 %a) #0 {
entry:
  %l.addr = alloca double, align 8
  store double %l, double* %l.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %0 = load double, double* %l.addr, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %2 = load double, double* %l.addr, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %4 = load double, double* %l.addr, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %a, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @intersectionPoint(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planeNormal, %struct.vector* byval(%struct.vector) align 8 %planePoint) #0 {
entry:
  %diff = alloca %struct.vector, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  call void @subVectors(%struct.vector* sret align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %linePoint, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  call void @addVectors(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planePoint)
  %call = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %diff, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %fneg = fneg double %call
  %call2 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lineVector, %struct.vector* byval(%struct.vector) align 8 %planeNormal)
  %div = fdiv double %fneg, %call2
  call void @scaleVector(%struct.vector* sret align 8 %agg.tmp1, double %div, %struct.vector* byval(%struct.vector) align 8 %lineVector)
  call void @addVectors(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %lV = alloca %struct.vector, align 8
  %lP = alloca %struct.vector, align 8
  %pN = alloca %struct.vector, align 8
  %pP = alloca %struct.vector, align 8
  %iP = alloca %struct.vector, align 8
  %tmp = alloca %struct.vector, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str, i32 0, i32 0))
  br label %if.end26

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 0
  %y = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 1
  %z = getelementptr inbounds %struct.vector, %struct.vector* %lV, i32 0, i32 2
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x, double* %y, double* %z)
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 3
  %4 = load i8*, i8** %arrayidx2, align 4
  %x3 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 0
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 1
  %z5 = getelementptr inbounds %struct.vector, %struct.vector* %pN, i32 0, i32 2
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x3, double* %y4, double* %z5)
  %call7 = call double @dotProduct(%struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %pN)
  %cmp8 = fcmp oeq double %call7, 0.000000e+00
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else11:                                        ; preds = %if.else
  %5 = load i8**, i8*** %argV.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %5, i32 2
  %6 = load i8*, i8** %arrayidx12, align 4
  %x13 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 0
  %y14 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 1
  %z15 = getelementptr inbounds %struct.vector, %struct.vector* %lP, i32 0, i32 2
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x13, double* %y14, double* %z15)
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %7, i32 4
  %8 = load i8*, i8** %arrayidx17, align 4
  %x18 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 0
  %y19 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 1
  %z20 = getelementptr inbounds %struct.vector, %struct.vector* %pP, i32 0, i32 2
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), double* %x18, double* %y19, double* %z20)
  call void @intersectionPoint(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %lV, %struct.vector* byval(%struct.vector) align 8 %lP, %struct.vector* byval(%struct.vector) align 8 %pN, %struct.vector* byval(%struct.vector) align 8 %pP)
  %9 = bitcast %struct.vector* %iP to i8*
  %10 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 24, i1 false)
  %x22 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 0
  %11 = load double, double* %x22, align 8
  %y23 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 1
  %12 = load double, double* %y23, align 8
  %z24 = getelementptr inbounds %struct.vector, %struct.vector* %iP, i32 0, i32 2
  %13 = load double, double* %z24, align 8
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %11, double %12, double %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = fcmp oeq double %call7, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
