
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for count_letters()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %8, 97
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 97:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sle i32 %9, 122
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 122:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %arrayidx11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i8 %12, 1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = add 1:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sge i32 %13, 65
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 65:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp sle i32 %14, 90
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 90:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub20 = sub nsw i32 %16, 65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 65:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add i8 %17, 1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = add 1:i8, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 97:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 122:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -97
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = add 1:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 65:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 90:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 65:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for count_letters()

; entering Souper's runOnFunction() for lcmp()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %conv, %conv3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = slt %1, %3
infer %4

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = zext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx10, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = zext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %conv8, %conv11
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = slt %1, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 26:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = slt %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for lcmp()

; entering Souper's runOnFunction() for scmp()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %2, i8* %5) #3
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for scmp()

; entering Souper's runOnFunction() for no_dup()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %inc, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %6, i8* %8) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc5 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for no_dup()

; entering Souper's runOnFunction() for find_mix()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @n_states, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call15 = call i32 @lcmp(i8* %28, i8* %31)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp eq i8* %35, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp eq i8* %41, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp37 = icmp eq i8* %47, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc52 = add nsw i32 %63, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc55 = add nsw i32 %64, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -30572540
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for find_mix()

; entering Souper's runOnFunction() for main()

; ModuleID = './State_name_puzzle.c.bc'
source_filename = "./State_name_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letters = type { [26 x i8], [2 x i8*] }

@.str = private unnamed_addr constant [9 x i8] c"New Kory\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Wen Kory\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"York New\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Kory New\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"Alabama\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Alaska\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"Arizona\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Arkansas\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"California\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"Colorado\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connecticut\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"Delaware\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Florida\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"Georgia\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Hawaii\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Idaho\00", align 1
@.str.16 = private unnamed_addr constant [9 x i8] c"Illinois\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Indiana\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Iowa\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Kansas\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"Kentucky\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Louisiana\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Maine\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"Maryland\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"Massachusetts\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"Michigan\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"Minnesota\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Mississippi\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"Missouri\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Montana\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Nebraska\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"Nevada\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"New Hampshire\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"New Jersey\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"New Mexico\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"New York\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"North Carolina\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"North Dakota\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Ohio\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"Oklahoma\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"Oregon\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"Pennsylvania\00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c"Rhode Island\00", align 1
@.str.43 = private unnamed_addr constant [15 x i8] c"South Carolina\00", align 1
@.str.44 = private unnamed_addr constant [13 x i8] c"South Dakota\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"Tennessee\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Texas\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"Utah\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"Vermont\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"Virginia\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Washington\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"West Virginia\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"Wisconsin\00", align 1
@.str.53 = private unnamed_addr constant [8 x i8] c"Wyoming\00", align 1
@states = hidden global [55 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.53, i32 0, i32 0)], align 16
@n_states = hidden global i32 55, align 4
@.str.54 = private unnamed_addr constant [20 x i8] c"%s + %s => %s + %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @count_letters(%struct.letters* %l, i8* %s) #0 {
entry:
  %l.addr = alloca %struct.letters*, align 4
  %s.addr = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.letters* %l, %struct.letters** %l.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name = getelementptr inbounds %struct.letters, %struct.letters* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %1 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name1 = getelementptr inbounds %struct.letters, %struct.letters* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name1, i32 0, i32 0
  store i8* %2, i8** %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %name3 = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name3, i32 0, i32 1
  store i8* %4, i8** %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %if.end23, %if.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %7 = load i8, i8* %6, align 1
  %conv = sext i8 %7 to i32
  store i32 %conv, i32* %c, align 4
  %tobool5 = icmp ne i32 %conv, 0
  br i1 %tobool5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %c, align 4
  %cmp = icmp sge i32 %8, 97
  br i1 %cmp, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32, i32* %c, align 4
  %cmp7 = icmp sle i32 %9, 122
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %land.lhs.true
  %10 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c10 = getelementptr inbounds %struct.letters, %struct.letters* %10, i32 0, i32 0
  %11 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %11, 97
  %arrayidx11 = getelementptr inbounds [26 x i8], [26 x i8]* %c10, i32 0, i32 %sub
  %12 = load i8, i8* %arrayidx11, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %arrayidx11, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %land.lhs.true, %while.body
  %13 = load i32, i32* %c, align 4
  %cmp13 = icmp sge i32 %13, 65
  br i1 %cmp13, label %land.lhs.true15, label %if.end23

land.lhs.true15:                                  ; preds = %if.end12
  %14 = load i32, i32* %c, align 4
  %cmp16 = icmp sle i32 %14, 90
  br i1 %cmp16, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true15
  %15 = load %struct.letters*, %struct.letters** %l.addr, align 4
  %c19 = getelementptr inbounds %struct.letters, %struct.letters* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %sub20 = sub nsw i32 %16, 65
  %arrayidx21 = getelementptr inbounds [26 x i8], [26 x i8]* %c19, i32 0, i32 %sub20
  %17 = load i8, i8* %arrayidx21, align 1
  %inc22 = add i8 %17, 1
  store i8 %inc22, i8* %arrayidx21, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %land.lhs.true15, %if.end12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lcmp(i8* %aa, i8* %bb) #0 {
entry:
  %retval = alloca i32, align 4
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %a = alloca %struct.letters*, align 4
  %b = alloca %struct.letters*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.letters*
  store %struct.letters* %1, %struct.letters** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.letters*
  store %struct.letters* %3, %struct.letters** %b, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 26
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.letters*, %struct.letters** %a, align 4
  %c = getelementptr inbounds %struct.letters, %struct.letters* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [26 x i8], [26 x i8]* %c, i32 0, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load %struct.letters*, %struct.letters** %b, align 4
  %c1 = getelementptr inbounds %struct.letters, %struct.letters* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [26 x i8], [26 x i8]* %c1, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %10 to i32
  %cmp4 = icmp sgt i32 %conv, %conv3
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.body
  %11 = load %struct.letters*, %struct.letters** %a, align 4
  %c6 = getelementptr inbounds %struct.letters, %struct.letters* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [26 x i8], [26 x i8]* %c6, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %13 to i32
  %14 = load %struct.letters*, %struct.letters** %b, align 4
  %c9 = getelementptr inbounds %struct.letters, %struct.letters* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [26 x i8], [26 x i8]* %c9, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %cmp12 = icmp slt i32 %conv8, %conv11
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then14, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @scmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  %call = call i32 @strcmp(i8* %2, i8* %5) #3
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @no_dup() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_states, align 4
  call void @qsort(i8* bitcast ([55 x i8*]* @states to i8*), i32 %0, i32 4, i32 (i8*, i8*)* @scmp)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %4 = load i32, i32* @n_states, align 4
  %cmp1 = icmp slt i32 %inc, %4
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx2 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 @strcmp(i8* %6, i8* %8) #3
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @n_states, align 4
  %cmp3 = icmp slt i32 %10, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx4, align 4
  %14 = load i32, i32* %j, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %inc5
  store i8* %13, i8** %arrayidx6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %j, align 4
  %add = add nsw i32 %15, 1
  store i32 %add, i32* @n_states, align 4
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @find_mix() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca %struct.letters*, align 4
  %p = alloca %struct.letters*, align 4
  call void @no_dup()
  %0 = load i32, i32* @n_states, align 4
  %1 = load i32, i32* @n_states, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 36)
  %3 = bitcast i8* %call to %struct.letters*
  store %struct.letters* %3, %struct.letters** %l, align 4
  store %struct.letters* %3, %struct.letters** %p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n_states, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* @n_states, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.letters*, %struct.letters** %p, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx, align 4
  call void @count_letters(%struct.letters* %9, i8* %11)
  %12 = load %struct.letters*, %struct.letters** %p, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [55 x i8*], [55 x i8*]* @states, i32 0, i32 %13
  %14 = load i8*, i8** %arrayidx4, align 4
  call void @count_letters(%struct.letters* %12, i8* %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %16 = load %struct.letters*, %struct.letters** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.letters, %struct.letters* %16, i32 1
  store %struct.letters* %incdec.ptr, %struct.letters** %p, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %18 = load %struct.letters*, %struct.letters** %l, align 4
  %19 = bitcast %struct.letters* %18 to i8*
  %20 = load i32, i32* %n, align 4
  call void @qsort(i8* %19, i32 %20, i32 36, i32 (i8*, i8*)* @lcmp)
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc54, %for.end7
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %n, align 4
  %cmp9 = icmp slt i32 %21, %22
  br i1 %cmp9, label %for.body10, label %for.end56

for.body10:                                       ; preds = %for.cond8
  %23 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %23, 1
  store i32 %add11, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc51, %for.body10
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n, align 4
  %cmp13 = icmp slt i32 %24, %25
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond12
  %26 = load %struct.letters*, %struct.letters** %l, align 4
  %27 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds %struct.letters, %struct.letters* %26, i32 %27
  %28 = bitcast %struct.letters* %add.ptr to i8*
  %29 = load %struct.letters*, %struct.letters** %l, align 4
  %30 = load i32, i32* %i, align 4
  %add.ptr14 = getelementptr inbounds %struct.letters, %struct.letters* %29, i32 %30
  %31 = bitcast %struct.letters* %add.ptr14 to i8*
  %call15 = call i32 @lcmp(i8* %28, i8* %31)
  %tobool = icmp ne i32 %call15, 0
  %lnot = xor i1 %tobool, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond12
  %32 = phi i1 [ false, %for.cond12 ], [ %lnot, %land.rhs ]
  br i1 %32, label %for.body16, label %for.end53

for.body16:                                       ; preds = %land.end
  %33 = load %struct.letters*, %struct.letters** %l, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds %struct.letters, %struct.letters* %33, i32 %34
  %name = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx17, i32 0, i32 1
  %arrayidx18 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name, i32 0, i32 0
  %35 = load i8*, i8** %arrayidx18, align 4
  %36 = load %struct.letters*, %struct.letters** %l, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds %struct.letters, %struct.letters* %36, i32 %37
  %name20 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx19, i32 0, i32 1
  %arrayidx21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name20, i32 0, i32 0
  %38 = load i8*, i8** %arrayidx21, align 4
  %cmp22 = icmp eq i8* %35, %38
  br i1 %cmp22, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %39 = load %struct.letters*, %struct.letters** %l, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx23 = getelementptr inbounds %struct.letters, %struct.letters* %39, i32 %40
  %name24 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx23, i32 0, i32 1
  %arrayidx25 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name24, i32 0, i32 1
  %41 = load i8*, i8** %arrayidx25, align 4
  %42 = load %struct.letters*, %struct.letters** %l, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.letters, %struct.letters* %42, i32 %43
  %name27 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx26, i32 0, i32 1
  %arrayidx28 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name27, i32 0, i32 0
  %44 = load i8*, i8** %arrayidx28, align 4
  %cmp29 = icmp eq i8* %41, %44
  br i1 %cmp29, label %if.then, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %45 = load %struct.letters*, %struct.letters** %l, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx31 = getelementptr inbounds %struct.letters, %struct.letters* %45, i32 %46
  %name32 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx31, i32 0, i32 1
  %arrayidx33 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name32, i32 0, i32 1
  %47 = load i8*, i8** %arrayidx33, align 4
  %48 = load %struct.letters*, %struct.letters** %l, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.letters, %struct.letters* %48, i32 %49
  %name35 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx34, i32 0, i32 1
  %arrayidx36 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name35, i32 0, i32 1
  %50 = load i8*, i8** %arrayidx36, align 4
  %cmp37 = icmp eq i8* %47, %50
  br i1 %cmp37, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false, %for.body16
  br label %for.inc51

if.end:                                           ; preds = %lor.lhs.false30
  %51 = load %struct.letters*, %struct.letters** %l, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds %struct.letters, %struct.letters* %51, i32 %52
  %name39 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx38, i32 0, i32 1
  %arrayidx40 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name39, i32 0, i32 0
  %53 = load i8*, i8** %arrayidx40, align 4
  %54 = load %struct.letters*, %struct.letters** %l, align 4
  %55 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds %struct.letters, %struct.letters* %54, i32 %55
  %name42 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx41, i32 0, i32 1
  %arrayidx43 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name42, i32 0, i32 1
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load %struct.letters*, %struct.letters** %l, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds %struct.letters, %struct.letters* %57, i32 %58
  %name45 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx44, i32 0, i32 1
  %arrayidx46 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name45, i32 0, i32 0
  %59 = load i8*, i8** %arrayidx46, align 4
  %60 = load %struct.letters*, %struct.letters** %l, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx47 = getelementptr inbounds %struct.letters, %struct.letters* %60, i32 %61
  %name48 = getelementptr inbounds %struct.letters, %struct.letters* %arrayidx47, i32 0, i32 1
  %arrayidx49 = getelementptr inbounds [2 x i8*], [2 x i8*]* %name48, i32 0, i32 1
  %62 = load i8*, i8** %arrayidx49, align 4
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.54, i32 0, i32 0), i8* %53, i8* %56, i8* %59, i8* %62)
  br label %for.inc51

for.inc51:                                        ; preds = %if.end, %if.then
  %63 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %63, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond12

for.end53:                                        ; preds = %land.end
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %64 = load i32, i32* %j, align 4
  %inc55 = add nsw i32 %64, 1
  store i32 %inc55, i32* %j, align 4
  br label %for.cond8

for.end56:                                        ; preds = %for.cond8
  %65 = load %struct.letters*, %struct.letters** %l, align 4
  %66 = bitcast %struct.letters* %65 to i8*
  call void @free(i8* %66)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @find_mix()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
