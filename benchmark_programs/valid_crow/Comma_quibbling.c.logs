
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for quib()

; ModuleID = './Comma_quibbling.c.bc'
source_filename = "./Comma_quibbling.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory!\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ABC\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"DEF\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@__const.main.test = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @quib(i8** %strs, i32 %size) #0 {
entry:
  %strs.addr = alloca i8**, align 4
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca i8*, align 4
  store i8** %strs, i8*** %strs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ugt i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %mul = mul i32 2, %1
  %add = add i32 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add i32 3, %cond
  store i32 %add1, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp2 = icmp ult i32 %2, %3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %strs.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strlen(i8* %6) #5
  %7 = load i32, i32* %len, align 4
  %add3 = add i32 %7, %call
  store i32 %add3, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %len, align 4
  %mul4 = mul i32 %9, 1
  %call5 = call noalias i8* @malloc(i32 %mul4)
  store i8* %call5, i8** %s, align 4
  %10 = load i8*, i8** %s, align 4
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %for.end
  %11 = load i8*, i8** %s, align 4
  %call6 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %size.addr, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %13 = load i8*, i8** %s, align 4
  %14 = load i8**, i8*** %strs.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 0
  %15 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i8* @strcat(i8* %13, i8* %15)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %sw.default
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %17, 1
  %cmp11 = icmp ult i32 %16, %sub
  br i1 %cmp11, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond10
  %18 = load i8*, i8** %s, align 4
  %19 = load i8**, i8*** %strs.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %19, i32 %20
  %21 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strcat(i8* %18, i8* %21)
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %size.addr, align 4
  %sub15 = sub i32 %23, 2
  %cmp16 = icmp ult i32 %22, %sub15
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body12
  %24 = load i8*, i8** %s, align 4
  %call18 = call i8* @strcat(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end20

if.else:                                          ; preds = %for.body12
  %25 = load i8*, i8** %s, align 4
  %call19 = call i8* @strcat(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %26 = load i32, i32* %i, align 4
  %inc22 = add i32 %26, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  %27 = load i8*, i8** %s, align 4
  %28 = load i8**, i8*** %strs.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 %29
  %30 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i8* @strcat(i8* %27, i8* %30)
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end23, %sw.bb7, %sw.bb
  %31 = load i8*, i8** %s, align 4
  %call26 = call i8* @strcat(i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %32 = load i8*, i8** %s, align 4
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #2

declare void @perror(i8* %0) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strcat(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [4 x i8*], align 16
  %s = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.test to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [4 x i8*], [4 x i8*]* %test, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %call = call i8* @quib(i8** %arraydecay, i32 %2)
  store i8* %call, i8** %s, align 4
  %3 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %s, align 4
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 2, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i32 = add 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
infer %4

; *****
; For LLVM instruction:
;  %add1 = add i32 3, %cond
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
%5:i32 = add 3:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %6) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add i32 %7, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %16, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub i32 %23, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = icmp ult i32 %22, %sub15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 2:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i32 = add 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i32 = add 1:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
%5:i32 = add 3:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i32 = add 1:i32, %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Comma_quibbling.c.bc'
source_filename = "./Comma_quibbling.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory!\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ABC\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"DEF\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@__const.main.test = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @quib(i8** %strs, i32 %size) #0 {
entry:
  %strs.addr = alloca i8**, align 4
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca i8*, align 4
  store i8** %strs, i8*** %strs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ugt i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %mul = mul i32 2, %1
  %add = add i32 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add i32 3, %cond
  store i32 %add1, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp2 = icmp ult i32 %2, %3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %strs.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strlen(i8* %6) #5
  %7 = load i32, i32* %len, align 4
  %add3 = add i32 %7, %call
  store i32 %add3, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %len, align 4
  %mul4 = mul i32 %9, 1
  %call5 = call noalias i8* @malloc(i32 %mul4)
  store i8* %call5, i8** %s, align 4
  %10 = load i8*, i8** %s, align 4
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %for.end
  %11 = load i8*, i8** %s, align 4
  %call6 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %size.addr, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %13 = load i8*, i8** %s, align 4
  %14 = load i8**, i8*** %strs.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 0
  %15 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i8* @strcat(i8* %13, i8* %15)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %sw.default
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %17, 1
  %cmp11 = icmp ult i32 %16, %sub
  br i1 %cmp11, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond10
  %18 = load i8*, i8** %s, align 4
  %19 = load i8**, i8*** %strs.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %19, i32 %20
  %21 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strcat(i8* %18, i8* %21)
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %size.addr, align 4
  %sub15 = sub i32 %23, 2
  %cmp16 = icmp ult i32 %22, %sub15
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body12
  %24 = load i8*, i8** %s, align 4
  %call18 = call i8* @strcat(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end20

if.else:                                          ; preds = %for.body12
  %25 = load i8*, i8** %s, align 4
  %call19 = call i8* @strcat(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %26 = load i32, i32* %i, align 4
  %inc22 = add i32 %26, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  %27 = load i8*, i8** %s, align 4
  %28 = load i8**, i8*** %strs.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 %29
  %30 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i8* @strcat(i8* %27, i8* %30)
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end23, %sw.bb7, %sw.bb
  %31 = load i8*, i8** %s, align 4
  %call26 = call i8* @strcat(i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %32 = load i8*, i8** %s, align 4
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #2

declare void @perror(i8* %0) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strcat(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [4 x i8*], align 16
  %s = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.test to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [4 x i8*], [4 x i8*]* %test, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %call = call i8* @quib(i8** %arraydecay, i32 %2)
  store i8* %call, i8** %s, align 4
  %3 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %s, align 4
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul4 = mul i32 %9, 1"
; from ""
; with "  %9 = load i32, i32* %len, align 4" in:
"%0:i32 = var
%1:i32 = mul 1:i32, %0
cand %1 %0
"
; with "  %9 = load i32, i32* %len, align 4"

Module after replacement:
; ModuleID = './Comma_quibbling.c.bc'
source_filename = "./Comma_quibbling.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory!\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ABC\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"DEF\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@__const.main.test = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @quib(i8** %strs, i32 %size) #0 {
entry:
  %strs.addr = alloca i8**, align 4
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca i8*, align 4
  store i8** %strs, i8*** %strs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ugt i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %mul = mul i32 2, %1
  %add = add i32 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add i32 3, %cond
  store i32 %add1, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp2 = icmp ult i32 %2, %3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %strs.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strlen(i8* %6) #5
  %7 = load i32, i32* %len, align 4
  %add3 = add i32 %7, %call
  store i32 %add3, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %len, align 4
  %call5 = call noalias i8* @malloc(i32 %9)
  store i8* %call5, i8** %s, align 4
  %10 = load i8*, i8** %s, align 4
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %for.end
  %11 = load i8*, i8** %s, align 4
  %call6 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %size.addr, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %13 = load i8*, i8** %s, align 4
  %14 = load i8**, i8*** %strs.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 0
  %15 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i8* @strcat(i8* %13, i8* %15)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %sw.default
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %17, 1
  %cmp11 = icmp ult i32 %16, %sub
  br i1 %cmp11, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond10
  %18 = load i8*, i8** %s, align 4
  %19 = load i8**, i8*** %strs.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %19, i32 %20
  %21 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strcat(i8* %18, i8* %21)
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %size.addr, align 4
  %sub15 = sub i32 %23, 2
  %cmp16 = icmp ult i32 %22, %sub15
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body12
  %24 = load i8*, i8** %s, align 4
  %call18 = call i8* @strcat(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end20

if.else:                                          ; preds = %for.body12
  %25 = load i8*, i8** %s, align 4
  %call19 = call i8* @strcat(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %26 = load i32, i32* %i, align 4
  %inc22 = add i32 %26, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  %27 = load i8*, i8** %s, align 4
  %28 = load i8**, i8*** %strs.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 %29
  %30 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i8* @strcat(i8* %27, i8* %30)
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end23, %sw.bb7, %sw.bb
  %31 = load i8*, i8** %s, align 4
  %call26 = call i8* @strcat(i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %32 = load i8*, i8** %s, align 4
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #2

declare void @perror(i8* %0) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strcat(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [4 x i8*], align 16
  %s = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.test to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [4 x i8*], [4 x i8*]* %test, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %call = call i8* @quib(i8** %arraydecay, i32 %2)
  store i8* %call, i8** %s, align 4
  %3 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %s, align 4
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for quib()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for quib()

; ModuleID = './Comma_quibbling.c.bc'
source_filename = "./Comma_quibbling.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory!\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ABC\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"DEF\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@__const.main.test = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @quib(i8** %strs, i32 %size) #0 {
entry:
  %strs.addr = alloca i8**, align 4
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca i8*, align 4
  store i8** %strs, i8*** %strs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ugt i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %mul = mul i32 2, %1
  %add = add i32 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add i32 3, %cond
  store i32 %add1, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp2 = icmp ult i32 %2, %3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %strs.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strlen(i8* %6) #5
  %7 = load i32, i32* %len, align 4
  %add3 = add i32 %7, %call
  store i32 %add3, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %len, align 4
  %call5 = call noalias i8* @malloc(i32 %9)
  store i8* %call5, i8** %s, align 4
  %10 = load i8*, i8** %s, align 4
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %for.end
  %11 = load i8*, i8** %s, align 4
  %call6 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %size.addr, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %13 = load i8*, i8** %s, align 4
  %14 = load i8**, i8*** %strs.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 0
  %15 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i8* @strcat(i8* %13, i8* %15)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %sw.default
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %17, 1
  %cmp11 = icmp ult i32 %16, %sub
  br i1 %cmp11, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond10
  %18 = load i8*, i8** %s, align 4
  %19 = load i8**, i8*** %strs.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %19, i32 %20
  %21 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strcat(i8* %18, i8* %21)
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %size.addr, align 4
  %sub15 = sub i32 %23, 2
  %cmp16 = icmp ult i32 %22, %sub15
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body12
  %24 = load i8*, i8** %s, align 4
  %call18 = call i8* @strcat(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end20

if.else:                                          ; preds = %for.body12
  %25 = load i8*, i8** %s, align 4
  %call19 = call i8* @strcat(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %26 = load i32, i32* %i, align 4
  %inc22 = add i32 %26, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  %27 = load i8*, i8** %s, align 4
  %28 = load i8**, i8*** %strs.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 %29
  %30 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i8* @strcat(i8* %27, i8* %30)
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end23, %sw.bb7, %sw.bb
  %31 = load i8*, i8** %s, align 4
  %call26 = call i8* @strcat(i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %32 = load i8*, i8** %s, align 4
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #2

declare void @perror(i8* %0) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strcat(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [4 x i8*], align 16
  %s = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.test to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [4 x i8*], [4 x i8*]* %test, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %call = call i8* @quib(i8** %arraydecay, i32 %2)
  store i8* %call, i8** %s, align 4
  %3 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %s, align 4
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 2, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i32 = add 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
infer %4

; *****
; For LLVM instruction:
;  %add1 = add i32 3, %cond
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = add 1:i32, %2
%4:i32 = phi %0, %3, 0:i32
%5:i32 = add 3:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %6) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add i32 %7, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %16, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub i32 %23, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = icmp ult i32 %22, %sub15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 2:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 2:i32
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for quib()

; entering Souper's runOnFunction() for main()

; ModuleID = './Comma_quibbling.c.bc'
source_filename = "./Comma_quibbling.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [24 x i8] c"Can't allocate memory!\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"ABC\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"DEF\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@__const.main.test = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @quib(i8** %strs, i32 %size) #0 {
entry:
  %strs.addr = alloca i8**, align 4
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca i8*, align 4
  store i8** %strs, i8*** %strs.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ugt i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %mul = mul i32 2, %1
  %add = add i32 %mul, 1
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ 0, %cond.false ]
  %add1 = add i32 3, %cond
  store i32 %add1, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp2 = icmp ult i32 %2, %3
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %strs.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 %5
  %6 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strlen(i8* %6) #5
  %7 = load i32, i32* %len, align 4
  %add3 = add i32 %7, %call
  store i32 %add3, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %len, align 4
  %call5 = call noalias i8* @malloc(i32 %9)
  store i8* %call5, i8** %s, align 4
  %10 = load i8*, i8** %s, align 4
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  call void @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %for.end
  %11 = load i8*, i8** %s, align 4
  %call6 = call i8* @strcpy(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %12 = load i32, i32* %size.addr, align 4
  switch i32 %12, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end
  %13 = load i8*, i8** %s, align 4
  %14 = load i8**, i8*** %strs.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 0
  %15 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i8* @strcat(i8* %13, i8* %15)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc21, %sw.default
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %17, 1
  %cmp11 = icmp ult i32 %16, %sub
  br i1 %cmp11, label %for.body12, label %for.end23

for.body12:                                       ; preds = %for.cond10
  %18 = load i8*, i8** %s, align 4
  %19 = load i8**, i8*** %strs.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %19, i32 %20
  %21 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strcat(i8* %18, i8* %21)
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %size.addr, align 4
  %sub15 = sub i32 %23, 2
  %cmp16 = icmp ult i32 %22, %sub15
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body12
  %24 = load i8*, i8** %s, align 4
  %call18 = call i8* @strcat(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end20

if.else:                                          ; preds = %for.body12
  %25 = load i8*, i8** %s, align 4
  %call19 = call i8* @strcat(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then17
  br label %for.inc21

for.inc21:                                        ; preds = %if.end20
  %26 = load i32, i32* %i, align 4
  %inc22 = add i32 %26, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond10

for.end23:                                        ; preds = %for.cond10
  %27 = load i8*, i8** %s, align 4
  %28 = load i8**, i8*** %strs.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 %29
  %30 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i8* @strcat(i8* %27, i8* %30)
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.end23, %sw.bb7, %sw.bb
  %31 = load i8*, i8** %s, align 4
  %call26 = call i8* @strcat(i8* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  %32 = load i8*, i8** %s, align 4
  ret i8* %32
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @malloc(i32 %0) #2

declare void @perror(i8* %0) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strcat(i8* %0, i8* %1) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test = alloca [4 x i8*], align 16
  %s = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.test to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [4 x i8*], [4 x i8*]* %test, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %call = call i8* @quib(i8** %arraydecay, i32 %2)
  store i8* %call, i8** %s, align 4
  %3 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %3)
  %4 = load i8*, i8** %s, align 4
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
