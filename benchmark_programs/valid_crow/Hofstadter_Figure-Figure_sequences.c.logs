
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for setsize()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %alloc1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 8, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i64* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for setsize()

; entering Souper's runOnFunction() for push()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %alloc1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %6, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %v.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for push()

; entering Souper's runOnFunction() for R()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for R()

; entering Souper's runOnFunction() for RS_append()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i64 @R(i32 %1)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i64 @S(i32 %2)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %call, %call1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i64 @S(i32 %3)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %s, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i64 %5, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i64 %inc, %6
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %s, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add i64 %8, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 1:i64, %0 (hasExternalUses)
%2:i64 = var
%3:i1 = ult %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for RS_append()

; entering Souper's runOnFunction() for S()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for S()

; entering Souper's runOnFunction() for main()

; ModuleID = './Hofstadter_Figure-Figure_sequences.c.bc'
source_filename = "./Hofstadter_Figure-Figure_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.xarray = type { i32, i32, i64* }
%struct._IO_FILE = type opaque

@rs = hidden global %struct.xarray zeroinitializer, align 4
@ss = hidden global %struct.xarray zeroinitializer, align 4
@.str = private unnamed_addr constant [12 x i8] c"R(1 .. 10):\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [13 x i8] c"%d not seen\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0Afirst 1000 ok\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @setsize(%struct.xarray* %a, i32 %size) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %n, align 4
  %2 = load i32, i32* %n, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %n, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %n, align 4
  %shl = shl i32 %5, 1
  store i32 %shl, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %6, i32 0, i32 1
  %7 = load i32, i32* %alloc1, align 4
  %8 = load i32, i32* %n, align 4
  %cmp2 = icmp ult i32 %7, %8
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.end
  %9 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %9, i32 0, i32 2
  %10 = load i64*, i64** %buf, align 4
  %11 = bitcast i64* %10 to i8*
  %12 = load i32, i32* %n, align 4
  %mul = mul i32 8, %12
  %call = call i8* @realloc(i8* %11, i32 %mul)
  %13 = bitcast i8* %call to i64*
  %14 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf4 = getelementptr inbounds %struct.xarray, %struct.xarray* %14, i32 0, i32 2
  store i64* %13, i64** %buf4, align 4
  %15 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf5 = getelementptr inbounds %struct.xarray, %struct.xarray* %15, i32 0, i32 2
  %16 = load i64*, i64** %buf5, align 4
  %tobool6 = icmp ne i64* %16, null
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.then3
  call void @abort() #4
  unreachable

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %n, align 4
  %18 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc9 = getelementptr inbounds %struct.xarray, %struct.xarray* %18, i32 0, i32 1
  store i32 %17, i32* %alloc9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end8, %while.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noreturn
declare void @abort() #2

; Function Attrs: noinline nounwind optnone
define hidden void @push(%struct.xarray* %a, i64 %v) #0 {
entry:
  %a.addr = alloca %struct.xarray*, align 4
  %v.addr = alloca i64, align 8
  store %struct.xarray* %a, %struct.xarray** %a.addr, align 4
  store i64 %v, i64* %v.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.xarray, %struct.xarray* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len = getelementptr inbounds %struct.xarray, %struct.xarray* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %cmp = icmp ule i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %5 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %alloc1 = getelementptr inbounds %struct.xarray, %struct.xarray* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc1, align 4
  %mul = mul i32 %6, 2
  call void @setsize(%struct.xarray* %4, i32 %mul)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i64, i64* %v.addr, align 8
  %8 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %buf = getelementptr inbounds %struct.xarray, %struct.xarray* %8, i32 0, i32 2
  %9 = load i64*, i64** %buf, align 4
  %10 = load %struct.xarray*, %struct.xarray** %a.addr, align 4
  %len2 = getelementptr inbounds %struct.xarray, %struct.xarray* %10, i32 0, i32 0
  %11 = load i32, i32* %len2, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %11
  store i64 %7, i64* %arrayidx, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @R(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @RS_append() #0 {
entry:
  %n = alloca i32, align 4
  %r = alloca i64, align 8
  %s = alloca i64, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @rs, i32 0, i32 0), align 4
  store i32 %0, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i64 @R(i32 %1)
  %2 = load i32, i32* %n, align 4
  %call1 = call i64 @S(i32 %2)
  %add = add i64 %call, %call1
  store i64 %add, i64* %r, align 8
  %3 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %call2 = call i64 @S(i32 %3)
  store i64 %call2, i64* %s, align 8
  %4 = load i64, i64* %r, align 8
  call void @push(%struct.xarray* @rs, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64, i64* %s, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %s, align 8
  %6 = load i64, i64* %r, align 8
  %cmp = icmp ult i64 %inc, %6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* %s, align 8
  call void @push(%struct.xarray* @ss, i64 %7)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %r, align 8
  %add3 = add i64 %8, 1
  call void @push(%struct.xarray* @ss, i64 %add3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @S(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 0), align 4
  %cmp = icmp ugt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @RS_append()
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i64*, i64** getelementptr inbounds (%struct.xarray, %struct.xarray* @ss, i32 0, i32 2), align 4
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i64, i64* %2, i32 %sub
  %4 = load i64, i64* %arrayidx, align 8
  ret i64 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %seen = alloca [1001 x i8], align 16
  store i32 0, i32* %retval, align 4
  call void @push(%struct.xarray* @rs, i64 1)
  call void @push(%struct.xarray* @ss, i64 2)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call1 = call i64 @R(i32 %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i64 %call1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = bitcast [1001 x i8]* %seen to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1001, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %4, 40
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %call6 = call i64 @R(i32 %5)
  %idxprom = trunc i64 %call6 to i32
  %arrayidx = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp sle i32 %7, 960
  br i1 %cmp11, label %for.body12, label %for.end18

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %call13 = call i64 @S(i32 %8)
  %idxprom14 = trunc i64 %call13 to i32
  %arrayidx15 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %idxprom14
  store i8 1, i8* %arrayidx15, align 1
  br label %for.inc16

for.inc16:                                        ; preds = %for.body12
  %9 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %9, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond10

for.end18:                                        ; preds = %for.cond10
  store i32 1, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc23, %for.end18
  %10 = load i32, i32* %i, align 4
  %cmp20 = icmp sle i32 %10, 1000
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond19
  %11 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [1001 x i8], [1001 x i8]* %seen, i32 0, i32 %11
  %12 = load i8, i8* %arrayidx21, align 1
  %conv = sext i8 %12 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond19
  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
  br i1 %13, label %for.body22, label %for.end25

for.body22:                                       ; preds = %land.end
  br label %for.inc23

for.inc23:                                        ; preds = %for.body22
  %14 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %14, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond19

for.end25:                                        ; preds = %land.end
  %15 = load i32, i32* %i, align 4
  %cmp26 = icmp sle i32 %15, 1000
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %for.end25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i32, i32* %i, align 4
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %17)
  call void @abort() #4
  unreachable

if.end:                                           ; preds = %for.end25
  %call29 = call i32 @puts(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i64 @R(i32 %1)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sle i32 %4, 40
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 40:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i64 @R(i32 %5)
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom = trunc i64 %call6 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sle i32 %7, 960
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 960:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i64 @S(i32 %8)
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom14 = trunc i64 %call13 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp sle i32 %10, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 1000:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %arrayidx21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = phi i1 [ false, %for.cond19 ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp sle i32 %15, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 1000:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 40:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 960:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 1000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
