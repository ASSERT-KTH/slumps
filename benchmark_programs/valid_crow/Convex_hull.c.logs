
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ccw()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %y2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %sub, %sub3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i32 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %y4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %y5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %9, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %x7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %x8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %13, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul10 = mul nsw i32 %sub6, %sub9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i32 = mulnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %mul, %mul10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i32 = mulnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %7, %8
%10:i32 = var
%11:i32 = var
%12:i32 = subnsw %10, %11
%13:i32 = mulnsw %9, %12
%14:i1 = slt %6, %13
infer %14
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i32 = mulnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741823
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = subnsw %3, %4
%6:i32 = mulnsw %2, %5
%7:i32 = var
%8:i32 = var
%9:i32 = subnsw %7, %8
%10:i32 = var
%11:i32 = var
%12:i32 = subnsw %10, %11
%13:i32 = mulnsw %9, %12
%14:i1 = slt %6, %13
infer %14


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ccw()

; entering Souper's runOnFunction() for comp()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %x3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for comp()

; entering Souper's runOnFunction() for freeNode()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.tNode* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for freeNode()

; entering Souper's runOnFunction() for pushBack()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.tNode* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne %struct.tNode* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pushBack()

; entering Souper's runOnFunction() for popBack()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.tNode* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq %struct.tNode* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne %struct.tNode* %8, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for popBack()

; entering Souper's runOnFunction() for print()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.tNode* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne %struct.tNode* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %y7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for print()

; entering Souper's runOnFunction() for convexHull()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp uge i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne %struct.tNode* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %18, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sge i32 %25, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp uge i32 %26, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp23 = icmp ne %struct.tNode* %30, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec35 = add i32 %39, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %hLen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec41 = add nsw i32 %44, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for convexHull()

; entering Souper's runOnFunction() for main()

; ModuleID = './Convex_hull.c.bc'
source_filename = "./Convex_hull.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.tPoint = type { i32, i32 }
%struct.tNode = type { %struct.tPoint, %struct.tNode* }

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"(%d, %d)\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c", (%d, %d)\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.points = private unnamed_addr constant [20 x %struct.tPoint] [%struct.tPoint { i32 16, i32 3 }, %struct.tPoint { i32 12, i32 17 }, %struct.tPoint { i32 0, i32 6 }, %struct.tPoint { i32 -4, i32 -6 }, %struct.tPoint { i32 16, i32 6 }, %struct.tPoint { i32 16, i32 -7 }, %struct.tPoint { i32 16, i32 -3 }, %struct.tPoint { i32 17, i32 -4 }, %struct.tPoint { i32 5, i32 19 }, %struct.tPoint { i32 19, i32 -8 }, %struct.tPoint { i32 3, i32 16 }, %struct.tPoint { i32 12, i32 13 }, %struct.tPoint { i32 3, i32 -4 }, %struct.tPoint { i32 17, i32 5 }, %struct.tPoint { i32 -3, i32 15 }, %struct.tPoint { i32 -3, i32 -9 }, %struct.tPoint { i32 0, i32 11 }, %struct.tPoint { i32 -9, i32 -3 }, %struct.tPoint { i32 -4, i32 -2 }, %struct.tPoint { i32 12, i32 10 }], align 16
@.str.4 = private unnamed_addr constant [14 x i8] c"Convex Hull: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @ccw(%struct.tPoint* %a, %struct.tPoint* %b, %struct.tPoint* %c) #0 {
entry:
  %a.addr = alloca %struct.tPoint*, align 4
  %b.addr = alloca %struct.tPoint*, align 4
  %c.addr = alloca %struct.tPoint*, align 4
  store %struct.tPoint* %a, %struct.tPoint** %a.addr, align 4
  store %struct.tPoint* %b, %struct.tPoint** %b.addr, align 4
  store %struct.tPoint* %c, %struct.tPoint** %c.addr, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %0, i32 0, i32 0
  %1 = load i32, i32* %x, align 4
  %2 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %2, i32 0, i32 0
  %3 = load i32, i32* %x1, align 4
  %sub = sub nsw i32 %1, %3
  %4 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %4, i32 0, i32 1
  %5 = load i32, i32* %y, align 4
  %6 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %6, i32 0, i32 1
  %7 = load i32, i32* %y2, align 4
  %sub3 = sub nsw i32 %5, %7
  %mul = mul nsw i32 %sub, %sub3
  %8 = load %struct.tPoint*, %struct.tPoint** %b.addr, align 4
  %y4 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %8, i32 0, i32 1
  %9 = load i32, i32* %y4, align 4
  %10 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %y5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %10, i32 0, i32 1
  %11 = load i32, i32* %y5, align 4
  %sub6 = sub nsw i32 %9, %11
  %12 = load %struct.tPoint*, %struct.tPoint** %c.addr, align 4
  %x7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %12, i32 0, i32 0
  %13 = load i32, i32* %x7, align 4
  %14 = load %struct.tPoint*, %struct.tPoint** %a.addr, align 4
  %x8 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %14, i32 0, i32 0
  %15 = load i32, i32* %x8, align 4
  %sub9 = sub nsw i32 %13, %15
  %mul10 = mul nsw i32 %sub6, %sub9
  %cmp = icmp sgt i32 %mul, %mul10
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @comp(i8* %lhs, i8* %rhs) #0 {
entry:
  %retval = alloca i32, align 4
  %lhs.addr = alloca i8*, align 4
  %rhs.addr = alloca i8*, align 4
  %lp = alloca %struct.tPoint, align 4
  %rp = alloca %struct.tPoint, align 4
  store i8* %lhs, i8** %lhs.addr, align 4
  store i8* %rhs, i8** %rhs.addr, align 4
  %0 = load i8*, i8** %lhs.addr, align 4
  %1 = bitcast i8* %0 to %struct.tPoint*
  %2 = bitcast %struct.tPoint* %lp to i8*
  %3 = bitcast %struct.tPoint* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  %4 = load i8*, i8** %rhs.addr, align 4
  %5 = bitcast i8* %4 to %struct.tPoint*
  %6 = bitcast %struct.tPoint* %rp to i8*
  %7 = bitcast %struct.tPoint* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %8 = load i32, i32* %x, align 4
  %x1 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %9 = load i32, i32* %x1, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %x2 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %rp, i32 0, i32 0
  %10 = load i32, i32* %x2, align 4
  %x3 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %lp, i32 0, i32 0
  %11 = load i32, i32* %x3, align 4
  %cmp4 = icmp slt i32 %10, %11
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @freeNode(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 1
  %2 = load %struct.tNode*, %struct.tNode** %next, align 4
  call void @freeNode(%struct.tNode* %2)
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next1, align 4
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @pushBack(%struct.tNode* %ptr, %struct.tPoint* byval(%struct.tPoint) align 4 %data) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.tNode*
  store %struct.tNode* %2, %struct.tNode** %ptr.addr, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %4 = bitcast %struct.tPoint* %data1 to i8*
  %5 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 %5, i32 8, i1 false)
  %6 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next, align 4
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %7, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %8 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next2 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next2, align 4
  %cmp3 = icmp ne %struct.tNode* %9, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next4, align 4
  store %struct.tNode* %11, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call5 = call noalias i8* @malloc(i32 12)
  %12 = bitcast i8* %call5 to %struct.tNode*
  %13 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  store %struct.tNode* %12, %struct.tNode** %next6, align 4
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  %15 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %15, i32 0, i32 0
  %16 = bitcast %struct.tPoint* %data8 to i8*
  %17 = bitcast %struct.tPoint* %data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %16, i8* align 4 %17, i32 8, i1 false)
  %18 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %18, i32 0, i32 1
  %19 = load %struct.tNode*, %struct.tNode** %next9, align 4
  %next10 = getelementptr inbounds %struct.tNode, %struct.tNode* %19, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next10, align 4
  %20 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %20, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %21 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %21
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @popBack(%struct.tNode* %ptr) #0 {
entry:
  %retval = alloca %struct.tNode*, align 4
  %ptr.addr = alloca %struct.tNode*, align 4
  %tmp = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %0, %struct.tNode** %tmp, align 4
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp eq %struct.tNode* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %2, i32 0, i32 1
  %3 = load %struct.tNode*, %struct.tNode** %next, align 4
  %cmp1 = icmp eq %struct.tNode* %3, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %5 = bitcast %struct.tNode* %4 to i8*
  call void @free(i8* %5)
  store %struct.tNode* null, %struct.tNode** %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end3
  %6 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next4 = getelementptr inbounds %struct.tNode, %struct.tNode* %6, i32 0, i32 1
  %7 = load %struct.tNode*, %struct.tNode** %next4, align 4
  %next5 = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next5, align 4
  %cmp6 = icmp ne %struct.tNode* %8, null
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %9, i32 0, i32 1
  %10 = load %struct.tNode*, %struct.tNode** %next7, align 4
  store %struct.tNode* %10, %struct.tNode** %tmp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next8 = getelementptr inbounds %struct.tNode, %struct.tNode* %11, i32 0, i32 1
  %12 = load %struct.tNode*, %struct.tNode** %next8, align 4
  %13 = bitcast %struct.tNode* %12 to i8*
  call void @free(i8* %13)
  %14 = load %struct.tNode*, %struct.tNode** %tmp, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 1
  store %struct.tNode* null, %struct.tNode** %next9, align 4
  %15 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  store %struct.tNode* %15, %struct.tNode** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %16 = load %struct.tNode*, %struct.tNode** %retval, align 4
  ret %struct.tNode* %16
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.tNode* %ptr) #0 {
entry:
  %ptr.addr = alloca %struct.tNode*, align 4
  store %struct.tNode* %ptr, %struct.tNode** %ptr.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %0 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp = icmp ne %struct.tNode* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %1, i32 0, i32 0
  %x = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data, i32 0, i32 0
  %2 = load i32, i32* %x, align 4
  %3 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data1 = getelementptr inbounds %struct.tNode, %struct.tNode* %3, i32 0, i32 0
  %y = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data1, i32 0, i32 1
  %4 = load i32, i32* %y, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i32 %4)
  %5 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %5, i32 0, i32 1
  %6 = load %struct.tNode*, %struct.tNode** %next, align 4
  store %struct.tNode* %6, %struct.tNode** %ptr.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %cmp3 = icmp ne %struct.tNode* %7, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data4 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 0
  %x5 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data4, i32 0, i32 0
  %9 = load i32, i32* %x5, align 4
  %10 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %data6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 0
  %y7 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %data6, i32 0, i32 1
  %11 = load i32, i32* %y7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %9, i32 %11)
  %12 = load %struct.tNode*, %struct.tNode** %ptr.addr, align 4
  %next9 = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 1
  %13 = load %struct.tNode*, %struct.tNode** %next9, align 4
  store %struct.tNode* %13, %struct.tNode** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.tNode* @convexHull(i32 %len, %struct.tPoint* %p) #0 {
entry:
  %len.addr = alloca i32, align 4
  %p.addr = alloca %struct.tPoint*, align 4
  %h = alloca %struct.tNode*, align 4
  %hptr = alloca %struct.tNode*, align 4
  %hLen = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.tPoint* %p, %struct.tPoint** %p.addr, align 4
  store %struct.tNode* null, %struct.tNode** %h, align 4
  store %struct.tNode* null, %struct.tNode** %hptr, align 4
  store i32 0, i32* %hLen, align 4
  %0 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %1 = bitcast %struct.tPoint* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @comp)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %5 = load i32, i32* %hLen, align 4
  %cmp1 = icmp uge i32 %5, 2
  br i1 %cmp1, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %6 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %6, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %while.body
  %7 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next = getelementptr inbounds %struct.tNode, %struct.tNode* %7, i32 0, i32 1
  %8 = load %struct.tNode*, %struct.tNode** %next, align 4
  %next3 = getelementptr inbounds %struct.tNode, %struct.tNode* %8, i32 0, i32 1
  %9 = load %struct.tNode*, %struct.tNode** %next3, align 4
  %cmp4 = icmp ne %struct.tNode* %9, null
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %10 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next6 = getelementptr inbounds %struct.tNode, %struct.tNode* %10, i32 0, i32 1
  %11 = load %struct.tNode*, %struct.tNode** %next6, align 4
  store %struct.tNode* %11, %struct.tNode** %hptr, align 4
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  %12 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data = getelementptr inbounds %struct.tNode, %struct.tNode* %12, i32 0, i32 0
  %13 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next7 = getelementptr inbounds %struct.tNode, %struct.tNode* %13, i32 0, i32 1
  %14 = load %struct.tNode*, %struct.tNode** %next7, align 4
  %data8 = getelementptr inbounds %struct.tNode, %struct.tNode* %14, i32 0, i32 0
  %15 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.tPoint, %struct.tPoint* %15, i32 %16
  %call = call zeroext i1 @ccw(%struct.tPoint* %data, %struct.tPoint* %data8, %struct.tPoint* %arrayidx)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %while.end10

if.end:                                           ; preds = %while.end
  %17 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call9 = call %struct.tNode* @popBack(%struct.tNode* %17)
  store %struct.tNode* %call9, %struct.tNode** %h, align 4
  %18 = load i32, i32* %hLen, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %hLen, align 4
  br label %while.cond

while.end10:                                      ; preds = %if.then, %while.cond
  %19 = load %struct.tNode*, %struct.tNode** %h, align 4
  %20 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %20, i32 %21
  %call12 = call %struct.tNode* @pushBack(%struct.tNode* %19, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx11)
  store %struct.tNode* %call12, %struct.tNode** %h, align 4
  %22 = load i32, i32* %hLen, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %hLen, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end10
  %23 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %24, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc40, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %25, 0
  br i1 %cmp15, label %for.body16, label %for.end42

for.body16:                                       ; preds = %for.cond14
  br label %while.cond17

while.cond17:                                     ; preds = %if.end33, %for.body16
  %26 = load i32, i32* %hLen, align 4
  %cmp18 = icmp uge i32 %26, 2
  br i1 %cmp18, label %while.body19, label %while.end36

while.body19:                                     ; preds = %while.cond17
  %27 = load %struct.tNode*, %struct.tNode** %h, align 4
  store %struct.tNode* %27, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %while.body24, %while.body19
  %28 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next21 = getelementptr inbounds %struct.tNode, %struct.tNode* %28, i32 0, i32 1
  %29 = load %struct.tNode*, %struct.tNode** %next21, align 4
  %next22 = getelementptr inbounds %struct.tNode, %struct.tNode* %29, i32 0, i32 1
  %30 = load %struct.tNode*, %struct.tNode** %next22, align 4
  %cmp23 = icmp ne %struct.tNode* %30, null
  br i1 %cmp23, label %while.body24, label %while.end26

while.body24:                                     ; preds = %while.cond20
  %31 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next25 = getelementptr inbounds %struct.tNode, %struct.tNode* %31, i32 0, i32 1
  %32 = load %struct.tNode*, %struct.tNode** %next25, align 4
  store %struct.tNode* %32, %struct.tNode** %hptr, align 4
  br label %while.cond20

while.end26:                                      ; preds = %while.cond20
  %33 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %data27 = getelementptr inbounds %struct.tNode, %struct.tNode* %33, i32 0, i32 0
  %34 = load %struct.tNode*, %struct.tNode** %hptr, align 4
  %next28 = getelementptr inbounds %struct.tNode, %struct.tNode* %34, i32 0, i32 1
  %35 = load %struct.tNode*, %struct.tNode** %next28, align 4
  %data29 = getelementptr inbounds %struct.tNode, %struct.tNode* %35, i32 0, i32 0
  %36 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %36, i32 %37
  %call31 = call zeroext i1 @ccw(%struct.tPoint* %data27, %struct.tPoint* %data29, %struct.tPoint* %arrayidx30)
  br i1 %call31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %while.end26
  br label %while.end36

if.end33:                                         ; preds = %while.end26
  %38 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call34 = call %struct.tNode* @popBack(%struct.tNode* %38)
  store %struct.tNode* %call34, %struct.tNode** %h, align 4
  %39 = load i32, i32* %hLen, align 4
  %dec35 = add i32 %39, -1
  store i32 %dec35, i32* %hLen, align 4
  br label %while.cond17

while.end36:                                      ; preds = %if.then32, %while.cond17
  %40 = load %struct.tNode*, %struct.tNode** %h, align 4
  %41 = load %struct.tPoint*, %struct.tPoint** %p.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds %struct.tPoint, %struct.tPoint* %41, i32 %42
  %call38 = call %struct.tNode* @pushBack(%struct.tNode* %40, %struct.tPoint* byval(%struct.tPoint) align 4 %arrayidx37)
  store %struct.tNode* %call38, %struct.tNode** %h, align 4
  %43 = load i32, i32* %hLen, align 4
  %inc39 = add i32 %43, 1
  store i32 %inc39, i32* %hLen, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %while.end36
  %44 = load i32, i32* %i, align 4
  %dec41 = add nsw i32 %44, -1
  store i32 %dec41, i32* %i, align 4
  br label %for.cond14

for.end42:                                        ; preds = %for.cond14
  %45 = load %struct.tNode*, %struct.tNode** %h, align 4
  %call43 = call %struct.tNode* @popBack(%struct.tNode* %45)
  %46 = load %struct.tNode*, %struct.tNode** %h, align 4
  ret %struct.tNode* %46
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %points = alloca [20 x %struct.tPoint], align 16
  %hull = alloca %struct.tNode*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [20 x %struct.tPoint]* %points to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([20 x %struct.tPoint]* @__const.main.points to i8*), i32 160, i1 false)
  %arraydecay = getelementptr inbounds [20 x %struct.tPoint], [20 x %struct.tPoint]* %points, i32 0, i32 0
  %call = call %struct.tNode* @convexHull(i32 20, %struct.tPoint* %arraydecay)
  store %struct.tNode* %call, %struct.tNode** %hull, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0))
  %1 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @print(%struct.tNode* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.tNode*, %struct.tNode** %hull, align 4
  call void @freeNode(%struct.tNode* %2)
  store %struct.tNode* null, %struct.tNode** %hull, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
