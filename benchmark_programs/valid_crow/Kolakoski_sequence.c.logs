
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for next_in_cycle()

; ModuleID = './Kolakoski_sequence.c.bc'
source_filename = "./Kolakoski_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.c0 = private unnamed_addr constant [2 x i32] [i32 1, i32 2], align 4
@__const.main.c1 = private unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@__const.main.c2 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 1, i32 2], align 16
@__const.main.c3 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 2, i32 1], align 16
@__const.main.clens = private unnamed_addr constant [4 x i32] [i32 2, i32 2, i32 4, i32 4], align 16
@__const.main.slens = private unnamed_addr constant [4 x i32] [i32 20, i32 20, i32 30, i32 30], align 16
@.str.4 = private unnamed_addr constant [47 x i8] c"First %d members of the sequence generated by \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Possible Kolakoski sequence? %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_in_cycle(i32* %c, i32 %len, i32 %index) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %index.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, %2
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 %rem
  %3 = load i32, i32* %arrayidx, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @kolakoski(i32* %c, i32* %s, i32 %clen, i32 %slen) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %s.addr = alloca i32*, align 4
  %clen.addr = alloca i32, align 4
  %slen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %clen, i32* %clen.addr, align 4
  store i32 %slen, i32* %slen.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end13
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %clen.addr, align 4
  %2 = load i32, i32* %k, align 4
  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
  %3 = load i32*, i32** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %call, i32* %arrayidx, align 4
  %5 = load i32*, i32** %s.addr, align 4
  %6 = load i32, i32* %k, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %while.body
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %s.addr, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %13 = load i32, i32* %slen.addr, align 4
  %cmp4 = icmp eq i32 %inc, %13
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %for.body
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %sub
  %16 = load i32, i32* %arrayidx6, align 4
  %17 = load i32*, i32** %s.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %while.body
  %20 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %20, 1
  store i32 %inc10, i32* %i, align 4
  %21 = load i32, i32* %slen.addr, align 4
  %cmp11 = icmp eq i32 %inc10, %21
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %return

if.end13:                                         ; preds = %if.end9
  %22 = load i32, i32* %k, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %k, align 4
  br label %while.body

return:                                           ; preds = %if.then12, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @possible_kolakoski(i32* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %count = alloca i32, align 4
  %rle = alloca i32*, align 4
  %result = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %j, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %prev, align 4
  store i32 1, i32* %count, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %rle, align 4
  store i32 1, i32* %result, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %prev, align 4
  %cmp2 = icmp eq i32 %8, %9
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i32, i32* %count, align 4
  %12 = load i32*, i32** %rle, align 4
  %13 = load i32, i32* %j, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx4, align 4
  store i32 1, i32* %count, align 4
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx5, align 4
  store i32 %16, i32* %prev, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc15, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %18, %19
  br i1 %cmp8, label %for.body9, label %for.end17

for.body9:                                        ; preds = %for.cond7
  %20 = load i32*, i32** %rle, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx10, align 4
  %23 = load i32*, i32** %s.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %22, %25
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body9
  store i32 0, i32* %result, align 4
  br label %for.end17

if.end14:                                         ; preds = %for.body9
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %26 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond7

for.end17:                                        ; preds = %if.then13, %for.cond7
  %27 = load i32*, i32** %rle, align 4
  %28 = bitcast i32* %27 to i8*
  call void @free(i8* %28)
  %29 = load i32, i32* %result, align 4
  ret i32 %29
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_array(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp2 = icmp slt i32 %5, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %clen = alloca i32, align 4
  %slen = alloca i32, align 4
  %s = alloca i32*, align 4
  %c0 = alloca [2 x i32], align 4
  %c1 = alloca [2 x i32], align 4
  %c2 = alloca [4 x i32], align 16
  %c3 = alloca [4 x i32], align 16
  %cs = alloca [4 x i32*], align 16
  %p = alloca i32, align 4
  %clens = alloca [4 x i32], align 16
  %slens = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x i32]* %c0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.main.c0 to i8*), i32 8, i1 false)
  %1 = bitcast [2 x i32]* %c1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([2 x i32]* @__const.main.c1 to i8*), i32 8, i1 false)
  %2 = bitcast [4 x i32]* %c2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x i32]* @__const.main.c2 to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %c3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([4 x i32]* @__const.main.c3 to i8*), i32 16, i1 false)
  %arrayinit.begin = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 0
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %c0, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [2 x i32], [2 x i32]* %c1, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %c2, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i32*, i32** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [4 x i32], [4 x i32]* %c3, i32 0, i32 0
  store i32* %arraydecay5, i32** %arrayinit.element4, align 4
  %4 = bitcast [4 x i32]* %clens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([4 x i32]* @__const.main.clens to i8*), i32 16, i1 false)
  %5 = bitcast [4 x i32]* %slens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %5, i8* align 16 bitcast ([4 x i32]* @__const.main.slens to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %clens, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %clen, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %slens, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %slen, align 4
  %11 = load i32, i32* %slen, align 4
  %call = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call to i32*
  store i32* %12, i32** %s, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %13
  %14 = load i32*, i32** %arrayidx7, align 4
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %clen, align 4
  %17 = load i32, i32* %slen, align 4
  call void @kolakoski(i32* %14, i32* %15, i32 %16, i32 %17)
  %18 = load i32, i32* %slen, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i32 0, i32 0), i32 %18)
  %19 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %19
  %20 = load i32*, i32** %arrayidx9, align 4
  %21 = load i32, i32* %clen, align 4
  call void @print_array(i32* %20, i32 %21)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %22 = load i32*, i32** %s, align 4
  %23 = load i32, i32* %slen, align 4
  call void @print_array(i32* %22, i32 %23)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %slen, align 4
  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
  store i32 %call12, i32* %p, align 4
  %26 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %26, 0
  %27 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %cond)
  %28 = load i32*, i32** %s, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %index.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for next_in_cycle()

; entering Souper's runOnFunction() for kolakoski()

; ModuleID = './Kolakoski_sequence.c.bc'
source_filename = "./Kolakoski_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.c0 = private unnamed_addr constant [2 x i32] [i32 1, i32 2], align 4
@__const.main.c1 = private unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@__const.main.c2 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 1, i32 2], align 16
@__const.main.c3 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 2, i32 1], align 16
@__const.main.clens = private unnamed_addr constant [4 x i32] [i32 2, i32 2, i32 4, i32 4], align 16
@__const.main.slens = private unnamed_addr constant [4 x i32] [i32 20, i32 20, i32 30, i32 30], align 16
@.str.4 = private unnamed_addr constant [47 x i8] c"First %d members of the sequence generated by \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Possible Kolakoski sequence? %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_in_cycle(i32* %c, i32 %len, i32 %index) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %index.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, %2
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 %rem
  %3 = load i32, i32* %arrayidx, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @kolakoski(i32* %c, i32* %s, i32 %clen, i32 %slen) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %s.addr = alloca i32*, align 4
  %clen.addr = alloca i32, align 4
  %slen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %clen, i32* %clen.addr, align 4
  store i32 %slen, i32* %slen.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end13
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %clen.addr, align 4
  %2 = load i32, i32* %k, align 4
  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
  %3 = load i32*, i32** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %call, i32* %arrayidx, align 4
  %5 = load i32*, i32** %s.addr, align 4
  %6 = load i32, i32* %k, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %while.body
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %s.addr, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %13 = load i32, i32* %slen.addr, align 4
  %cmp4 = icmp eq i32 %inc, %13
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %for.body
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %sub
  %16 = load i32, i32* %arrayidx6, align 4
  %17 = load i32*, i32** %s.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %while.body
  %20 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %20, 1
  store i32 %inc10, i32* %i, align 4
  %21 = load i32, i32* %slen.addr, align 4
  %cmp11 = icmp eq i32 %inc10, %21
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %return

if.end13:                                         ; preds = %if.end9
  %22 = load i32, i32* %k, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %k, align 4
  br label %while.body

return:                                           ; preds = %if.then12, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @possible_kolakoski(i32* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %count = alloca i32, align 4
  %rle = alloca i32*, align 4
  %result = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %j, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %prev, align 4
  store i32 1, i32* %count, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %rle, align 4
  store i32 1, i32* %result, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %prev, align 4
  %cmp2 = icmp eq i32 %8, %9
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i32, i32* %count, align 4
  %12 = load i32*, i32** %rle, align 4
  %13 = load i32, i32* %j, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx4, align 4
  store i32 1, i32* %count, align 4
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx5, align 4
  store i32 %16, i32* %prev, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc15, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %18, %19
  br i1 %cmp8, label %for.body9, label %for.end17

for.body9:                                        ; preds = %for.cond7
  %20 = load i32*, i32** %rle, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx10, align 4
  %23 = load i32*, i32** %s.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %22, %25
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body9
  store i32 0, i32* %result, align 4
  br label %for.end17

if.end14:                                         ; preds = %for.body9
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %26 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond7

for.end17:                                        ; preds = %if.then13, %for.cond7
  %27 = load i32*, i32** %rle, align 4
  %28 = bitcast i32* %27 to i8*
  call void @free(i8* %28)
  %29 = load i32, i32* %result, align 4
  ret i32 %29
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_array(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp2 = icmp slt i32 %5, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %clen = alloca i32, align 4
  %slen = alloca i32, align 4
  %s = alloca i32*, align 4
  %c0 = alloca [2 x i32], align 4
  %c1 = alloca [2 x i32], align 4
  %c2 = alloca [4 x i32], align 16
  %c3 = alloca [4 x i32], align 16
  %cs = alloca [4 x i32*], align 16
  %p = alloca i32, align 4
  %clens = alloca [4 x i32], align 16
  %slens = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x i32]* %c0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.main.c0 to i8*), i32 8, i1 false)
  %1 = bitcast [2 x i32]* %c1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([2 x i32]* @__const.main.c1 to i8*), i32 8, i1 false)
  %2 = bitcast [4 x i32]* %c2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x i32]* @__const.main.c2 to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %c3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([4 x i32]* @__const.main.c3 to i8*), i32 16, i1 false)
  %arrayinit.begin = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 0
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %c0, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [2 x i32], [2 x i32]* %c1, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %c2, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i32*, i32** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [4 x i32], [4 x i32]* %c3, i32 0, i32 0
  store i32* %arraydecay5, i32** %arrayinit.element4, align 4
  %4 = bitcast [4 x i32]* %clens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([4 x i32]* @__const.main.clens to i8*), i32 16, i1 false)
  %5 = bitcast [4 x i32]* %slens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %5, i8* align 16 bitcast ([4 x i32]* @__const.main.slens to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %clens, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %clen, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %slens, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %slen, align 4
  %11 = load i32, i32* %slen, align 4
  %call = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call to i32*
  store i32* %12, i32** %s, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %13
  %14 = load i32*, i32** %arrayidx7, align 4
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %clen, align 4
  %17 = load i32, i32* %slen, align 4
  call void @kolakoski(i32* %14, i32* %15, i32 %16, i32 %17)
  %18 = load i32, i32* %slen, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i32 0, i32 0), i32 %18)
  %19 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %19
  %20 = load i32*, i32** %arrayidx9, align 4
  %21 = load i32, i32* %clen, align 4
  call void @print_array(i32* %20, i32 %21)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %22 = load i32*, i32** %s, align 4
  %23 = load i32, i32* %slen, align 4
  call void @print_array(i32* %22, i32 %23)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %slen, align 4
  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
  store i32 %call12, i32* %p, align 4
  %26 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %26, 0
  %27 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %cond)
  %28 = load i32*, i32** %s, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %clen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %8, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %slen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %inc, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %slen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp eq i32 %inc10, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for kolakoski()

; entering Souper's runOnFunction() for possible_kolakoski()

; ModuleID = './Kolakoski_sequence.c.bc'
source_filename = "./Kolakoski_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.c0 = private unnamed_addr constant [2 x i32] [i32 1, i32 2], align 4
@__const.main.c1 = private unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@__const.main.c2 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 1, i32 2], align 16
@__const.main.c3 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 2, i32 1], align 16
@__const.main.clens = private unnamed_addr constant [4 x i32] [i32 2, i32 2, i32 4, i32 4], align 16
@__const.main.slens = private unnamed_addr constant [4 x i32] [i32 20, i32 20, i32 30, i32 30], align 16
@.str.4 = private unnamed_addr constant [47 x i8] c"First %d members of the sequence generated by \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Possible Kolakoski sequence? %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_in_cycle(i32* %c, i32 %len, i32 %index) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %index.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, %2
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 %rem
  %3 = load i32, i32* %arrayidx, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @kolakoski(i32* %c, i32* %s, i32 %clen, i32 %slen) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %s.addr = alloca i32*, align 4
  %clen.addr = alloca i32, align 4
  %slen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %clen, i32* %clen.addr, align 4
  store i32 %slen, i32* %slen.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end13
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %clen.addr, align 4
  %2 = load i32, i32* %k, align 4
  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
  %3 = load i32*, i32** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %call, i32* %arrayidx, align 4
  %5 = load i32*, i32** %s.addr, align 4
  %6 = load i32, i32* %k, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %while.body
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %s.addr, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %13 = load i32, i32* %slen.addr, align 4
  %cmp4 = icmp eq i32 %inc, %13
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %for.body
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %sub
  %16 = load i32, i32* %arrayidx6, align 4
  %17 = load i32*, i32** %s.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %while.body
  %20 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %20, 1
  store i32 %inc10, i32* %i, align 4
  %21 = load i32, i32* %slen.addr, align 4
  %cmp11 = icmp eq i32 %inc10, %21
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %return

if.end13:                                         ; preds = %if.end9
  %22 = load i32, i32* %k, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %k, align 4
  br label %while.body

return:                                           ; preds = %if.then12, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @possible_kolakoski(i32* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %count = alloca i32, align 4
  %rle = alloca i32*, align 4
  %result = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %j, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %prev, align 4
  store i32 1, i32* %count, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %rle, align 4
  store i32 1, i32* %result, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %prev, align 4
  %cmp2 = icmp eq i32 %8, %9
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i32, i32* %count, align 4
  %12 = load i32*, i32** %rle, align 4
  %13 = load i32, i32* %j, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx4, align 4
  store i32 1, i32* %count, align 4
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx5, align 4
  store i32 %16, i32* %prev, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc15, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %18, %19
  br i1 %cmp8, label %for.body9, label %for.end17

for.body9:                                        ; preds = %for.cond7
  %20 = load i32*, i32** %rle, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx10, align 4
  %23 = load i32*, i32** %s.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %22, %25
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body9
  store i32 0, i32* %result, align 4
  br label %for.end17

if.end14:                                         ; preds = %for.body9
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %26 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond7

for.end17:                                        ; preds = %if.then13, %for.cond7
  %27 = load i32*, i32** %rle, align 4
  %28 = bitcast i32* %27 to i8*
  call void @free(i8* %28)
  %29 = load i32, i32* %result, align 4
  ret i32 %29
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_array(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp2 = icmp slt i32 %5, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %clen = alloca i32, align 4
  %slen = alloca i32, align 4
  %s = alloca i32*, align 4
  %c0 = alloca [2 x i32], align 4
  %c1 = alloca [2 x i32], align 4
  %c2 = alloca [4 x i32], align 16
  %c3 = alloca [4 x i32], align 16
  %cs = alloca [4 x i32*], align 16
  %p = alloca i32, align 4
  %clens = alloca [4 x i32], align 16
  %slens = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x i32]* %c0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.main.c0 to i8*), i32 8, i1 false)
  %1 = bitcast [2 x i32]* %c1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([2 x i32]* @__const.main.c1 to i8*), i32 8, i1 false)
  %2 = bitcast [4 x i32]* %c2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x i32]* @__const.main.c2 to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %c3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([4 x i32]* @__const.main.c3 to i8*), i32 16, i1 false)
  %arrayinit.begin = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 0
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %c0, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [2 x i32], [2 x i32]* %c1, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %c2, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i32*, i32** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [4 x i32], [4 x i32]* %c3, i32 0, i32 0
  store i32* %arraydecay5, i32** %arrayinit.element4, align 4
  %4 = bitcast [4 x i32]* %clens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([4 x i32]* @__const.main.clens to i8*), i32 16, i1 false)
  %5 = bitcast [4 x i32]* %slens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %5, i8* align 16 bitcast ([4 x i32]* @__const.main.slens to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %clens, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %clen, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %slens, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %slen, align 4
  %11 = load i32, i32* %slen, align 4
  %call = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call to i32*
  store i32* %12, i32** %s, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %13
  %14 = load i32*, i32** %arrayidx7, align 4
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %clen, align 4
  %17 = load i32, i32* %slen, align 4
  call void @kolakoski(i32* %14, i32* %15, i32 %16, i32 %17)
  %18 = load i32, i32* %slen, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i32 0, i32 0), i32 %18)
  %19 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %19
  %20 = load i32*, i32** %arrayidx9, align 4
  %21 = load i32, i32* %clen, align 4
  call void @print_array(i32* %20, i32 %21)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %22 = load i32*, i32** %s, align 4
  %23 = load i32, i32* %slen, align 4
  call void @print_array(i32* %22, i32 %23)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %slen, align 4
  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
  store i32 %call12, i32* %p, align 4
  %26 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %26, 0
  %27 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %cond)
  %28 = load i32*, i32** %s, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %prev, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc3 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp ne i32 %22, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %result, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for possible_kolakoski()

; entering Souper's runOnFunction() for print_array()

; ModuleID = './Kolakoski_sequence.c.bc'
source_filename = "./Kolakoski_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.c0 = private unnamed_addr constant [2 x i32] [i32 1, i32 2], align 4
@__const.main.c1 = private unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@__const.main.c2 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 1, i32 2], align 16
@__const.main.c3 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 2, i32 1], align 16
@__const.main.clens = private unnamed_addr constant [4 x i32] [i32 2, i32 2, i32 4, i32 4], align 16
@__const.main.slens = private unnamed_addr constant [4 x i32] [i32 20, i32 20, i32 30, i32 30], align 16
@.str.4 = private unnamed_addr constant [47 x i8] c"First %d members of the sequence generated by \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Possible Kolakoski sequence? %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_in_cycle(i32* %c, i32 %len, i32 %index) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %index.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, %2
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 %rem
  %3 = load i32, i32* %arrayidx, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @kolakoski(i32* %c, i32* %s, i32 %clen, i32 %slen) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %s.addr = alloca i32*, align 4
  %clen.addr = alloca i32, align 4
  %slen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %clen, i32* %clen.addr, align 4
  store i32 %slen, i32* %slen.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end13
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %clen.addr, align 4
  %2 = load i32, i32* %k, align 4
  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
  %3 = load i32*, i32** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %call, i32* %arrayidx, align 4
  %5 = load i32*, i32** %s.addr, align 4
  %6 = load i32, i32* %k, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %while.body
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %s.addr, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %13 = load i32, i32* %slen.addr, align 4
  %cmp4 = icmp eq i32 %inc, %13
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %for.body
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %sub
  %16 = load i32, i32* %arrayidx6, align 4
  %17 = load i32*, i32** %s.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %while.body
  %20 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %20, 1
  store i32 %inc10, i32* %i, align 4
  %21 = load i32, i32* %slen.addr, align 4
  %cmp11 = icmp eq i32 %inc10, %21
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %return

if.end13:                                         ; preds = %if.end9
  %22 = load i32, i32* %k, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %k, align 4
  br label %while.body

return:                                           ; preds = %if.then12, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @possible_kolakoski(i32* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %count = alloca i32, align 4
  %rle = alloca i32*, align 4
  %result = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %j, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %prev, align 4
  store i32 1, i32* %count, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %rle, align 4
  store i32 1, i32* %result, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %prev, align 4
  %cmp2 = icmp eq i32 %8, %9
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i32, i32* %count, align 4
  %12 = load i32*, i32** %rle, align 4
  %13 = load i32, i32* %j, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx4, align 4
  store i32 1, i32* %count, align 4
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx5, align 4
  store i32 %16, i32* %prev, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc15, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %18, %19
  br i1 %cmp8, label %for.body9, label %for.end17

for.body9:                                        ; preds = %for.cond7
  %20 = load i32*, i32** %rle, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx10, align 4
  %23 = load i32*, i32** %s.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %22, %25
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body9
  store i32 0, i32* %result, align 4
  br label %for.end17

if.end14:                                         ; preds = %for.body9
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %26 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond7

for.end17:                                        ; preds = %if.then13, %for.cond7
  %27 = load i32*, i32** %rle, align 4
  %28 = bitcast i32* %27 to i8*
  call void @free(i8* %28)
  %29 = load i32, i32* %result, align 4
  ret i32 %29
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_array(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp2 = icmp slt i32 %5, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %clen = alloca i32, align 4
  %slen = alloca i32, align 4
  %s = alloca i32*, align 4
  %c0 = alloca [2 x i32], align 4
  %c1 = alloca [2 x i32], align 4
  %c2 = alloca [4 x i32], align 16
  %c3 = alloca [4 x i32], align 16
  %cs = alloca [4 x i32*], align 16
  %p = alloca i32, align 4
  %clens = alloca [4 x i32], align 16
  %slens = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x i32]* %c0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.main.c0 to i8*), i32 8, i1 false)
  %1 = bitcast [2 x i32]* %c1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([2 x i32]* @__const.main.c1 to i8*), i32 8, i1 false)
  %2 = bitcast [4 x i32]* %c2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x i32]* @__const.main.c2 to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %c3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([4 x i32]* @__const.main.c3 to i8*), i32 16, i1 false)
  %arrayinit.begin = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 0
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %c0, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [2 x i32], [2 x i32]* %c1, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %c2, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i32*, i32** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [4 x i32], [4 x i32]* %c3, i32 0, i32 0
  store i32* %arraydecay5, i32** %arrayinit.element4, align 4
  %4 = bitcast [4 x i32]* %clens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([4 x i32]* @__const.main.clens to i8*), i32 16, i1 false)
  %5 = bitcast [4 x i32]* %slens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %5, i8* align 16 bitcast ([4 x i32]* @__const.main.slens to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %clens, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %clen, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %slens, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %slen, align 4
  %11 = load i32, i32* %slen, align 4
  %call = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call to i32*
  store i32* %12, i32** %s, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %13
  %14 = load i32*, i32** %arrayidx7, align 4
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %clen, align 4
  %17 = load i32, i32* %slen, align 4
  call void @kolakoski(i32* %14, i32* %15, i32 %16, i32 %17)
  %18 = load i32, i32* %slen, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i32 0, i32 0), i32 %18)
  %19 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %19
  %20 = load i32*, i32** %arrayidx9, align 4
  %21 = load i32, i32* %clen, align 4
  call void @print_array(i32* %20, i32 %21)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %22 = load i32*, i32** %s, align 4
  %23 = load i32, i32* %slen, align 4
  call void @print_array(i32* %22, i32 %23)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %slen, align 4
  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
  store i32 %call12, i32* %p, align 4
  %26 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %26, 0
  %27 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %cond)
  %28 = load i32*, i32** %s, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_array()

; entering Souper's runOnFunction() for main()

; ModuleID = './Kolakoski_sequence.c.bc'
source_filename = "./Kolakoski_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@__const.main.c0 = private unnamed_addr constant [2 x i32] [i32 1, i32 2], align 4
@__const.main.c1 = private unnamed_addr constant [2 x i32] [i32 2, i32 1], align 4
@__const.main.c2 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 1, i32 2], align 16
@__const.main.c3 = private unnamed_addr constant [4 x i32] [i32 1, i32 3, i32 2, i32 1], align 16
@__const.main.clens = private unnamed_addr constant [4 x i32] [i32 2, i32 2, i32 4, i32 4], align 16
@__const.main.slens = private unnamed_addr constant [4 x i32] [i32 20, i32 20, i32 30, i32 30], align 16
@.str.4 = private unnamed_addr constant [47 x i8] c"First %d members of the sequence generated by \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Possible Kolakoski sequence? %s\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_in_cycle(i32* %c, i32 %len, i32 %index) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %index.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %1, %2
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 %rem
  %3 = load i32, i32* %arrayidx, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @kolakoski(i32* %c, i32* %s, i32 %clen, i32 %slen) #0 {
entry:
  %c.addr = alloca i32*, align 4
  %s.addr = alloca i32*, align 4
  %clen.addr = alloca i32, align 4
  %slen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %clen, i32* %clen.addr, align 4
  store i32 %slen, i32* %slen.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end13
  %0 = load i32*, i32** %c.addr, align 4
  %1 = load i32, i32* %clen.addr, align 4
  %2 = load i32, i32* %k, align 4
  %call = call i32 @next_in_cycle(i32* %0, i32 %1, i32 %2)
  %3 = load i32*, i32** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %call, i32* %arrayidx, align 4
  %5 = load i32*, i32** %s.addr, align 4
  %6 = load i32, i32* %k, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %7, 1
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %while.body
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %s.addr, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %8, %11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  %13 = load i32, i32* %slen.addr, align 4
  %cmp4 = icmp eq i32 %inc, %13
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %for.body
  br label %return

if.end:                                           ; preds = %for.body
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %sub
  %16 = load i32, i32* %arrayidx6, align 4
  %17 = load i32*, i32** %s.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc8 = add nsw i32 %19, 1
  store i32 %inc8, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %while.body
  %20 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %20, 1
  store i32 %inc10, i32* %i, align 4
  %21 = load i32, i32* %slen.addr, align 4
  %cmp11 = icmp eq i32 %inc10, %21
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %return

if.end13:                                         ; preds = %if.end9
  %22 = load i32, i32* %k, align 4
  %inc14 = add nsw i32 %22, 1
  store i32 %inc14, i32* %k, align 4
  br label %while.body

return:                                           ; preds = %if.then12, %if.then5
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @possible_kolakoski(i32* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %prev = alloca i32, align 4
  %count = alloca i32, align 4
  %rle = alloca i32*, align 4
  %result = alloca i32, align 4
  store i32* %s, i32** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %j, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %prev, align 4
  store i32 1, i32* %count, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %rle, align 4
  store i32 1, i32* %result, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx1, align 4
  %9 = load i32, i32* %prev, align 4
  %cmp2 = icmp eq i32 %8, %9
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %count, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %11 = load i32, i32* %count, align 4
  %12 = load i32*, i32** %rle, align 4
  %13 = load i32, i32* %j, align 4
  %inc3 = add nsw i32 %13, 1
  store i32 %inc3, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx4, align 4
  store i32 1, i32* %count, align 4
  %14 = load i32*, i32** %s.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx5, align 4
  store i32 %16, i32* %prev, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc15, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %18, %19
  br i1 %cmp8, label %for.body9, label %for.end17

for.body9:                                        ; preds = %for.cond7
  %20 = load i32*, i32** %rle, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx10, align 4
  %23 = load i32*, i32** %s.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %22, %25
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body9
  store i32 0, i32* %result, align 4
  br label %for.end17

if.end14:                                         ; preds = %for.body9
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %26 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond7

for.end17:                                        ; preds = %if.then13, %for.cond7
  %27 = load i32*, i32** %rle, align 4
  %28 = bitcast i32* %27 to i8*
  call void @free(i8* %28)
  %29 = load i32, i32* %result, align 4
  ret i32 %29
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_array(i32* %a, i32 %len) #0 {
entry:
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp2 = icmp slt i32 %5, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %clen = alloca i32, align 4
  %slen = alloca i32, align 4
  %s = alloca i32*, align 4
  %c0 = alloca [2 x i32], align 4
  %c1 = alloca [2 x i32], align 4
  %c2 = alloca [4 x i32], align 16
  %c3 = alloca [4 x i32], align 16
  %cs = alloca [4 x i32*], align 16
  %p = alloca i32, align 4
  %clens = alloca [4 x i32], align 16
  %slens = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [2 x i32]* %c0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([2 x i32]* @__const.main.c0 to i8*), i32 8, i1 false)
  %1 = bitcast [2 x i32]* %c1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([2 x i32]* @__const.main.c1 to i8*), i32 8, i1 false)
  %2 = bitcast [4 x i32]* %c2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([4 x i32]* @__const.main.c2 to i8*), i32 16, i1 false)
  %3 = bitcast [4 x i32]* %c3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([4 x i32]* @__const.main.c3 to i8*), i32 16, i1 false)
  %arrayinit.begin = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 0
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %c0, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [2 x i32], [2 x i32]* %c1, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %c2, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i32*, i32** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [4 x i32], [4 x i32]* %c3, i32 0, i32 0
  store i32* %arraydecay5, i32** %arrayinit.element4, align 4
  %4 = bitcast [4 x i32]* %clens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([4 x i32]* @__const.main.clens to i8*), i32 16, i1 false)
  %5 = bitcast [4 x i32]* %slens to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %5, i8* align 16 bitcast ([4 x i32]* @__const.main.slens to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %clens, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %clen, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %slens, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %slen, align 4
  %11 = load i32, i32* %slen, align 4
  %call = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call to i32*
  store i32* %12, i32** %s, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %13
  %14 = load i32*, i32** %arrayidx7, align 4
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %clen, align 4
  %17 = load i32, i32* %slen, align 4
  call void @kolakoski(i32* %14, i32* %15, i32 %16, i32 %17)
  %18 = load i32, i32* %slen, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i32 0, i32 0), i32 %18)
  %19 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x i32*], [4 x i32*]* %cs, i32 0, i32 %19
  %20 = load i32*, i32** %arrayidx9, align 4
  %21 = load i32, i32* %clen, align 4
  call void @print_array(i32* %20, i32 %21)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %22 = load i32*, i32** %s, align 4
  %23 = load i32, i32* %slen, align 4
  call void @print_array(i32* %22, i32 %23)
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %slen, align 4
  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
  store i32 %call12, i32* %p, align 4
  %26 = load i32, i32* %p, align 4
  %tobool = icmp ne i32 %26, 0
  %27 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* %cond)
  %28 = load i32*, i32** %s, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %slen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %clen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %slen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %slen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %clen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %slen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %slen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call12 = call i32 @possible_kolakoski(i32* %24, i32 %25)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %26, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
