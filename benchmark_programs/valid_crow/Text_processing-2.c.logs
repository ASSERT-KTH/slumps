
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for cmp_rec()

; ModuleID = './Text_processing-2.c.bc'
source_filename = "./Text_processing-2.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.rec_t = type { i8*, i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [12 x i8] c"%4d-%2d-%2d\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"bad line %d: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"bad format at line %d: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"dup line %d: %.10s\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"\0A%d out %d lines good\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"readings.txt\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_rec(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca %struct.rec_t*, align 4
  %b = alloca %struct.rec_t*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.rec_t*
  store %struct.rec_t* %1, %struct.rec_t** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.rec_t*
  store %struct.rec_t* %3, %struct.rec_t** %b, align 4
  %4 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s = getelementptr inbounds %struct.rec_t, %struct.rec_t* %4, i32 0, i32 0
  %5 = load i8*, i8** %s, align 4
  %6 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s1 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %6, i32 0, i32 0
  %7 = load i8*, i8** %s1, align 4
  %cmp = icmp eq i8* %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end13

cond.false:                                       ; preds = %entry
  %8 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s2 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %8, i32 0, i32 0
  %9 = load i8*, i8** %s2, align 4
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %cond.false4, label %cond.true3

cond.true3:                                       ; preds = %cond.false
  br label %cond.end11

cond.false4:                                      ; preds = %cond.false
  %10 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s5 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %10, i32 0, i32 0
  %11 = load i8*, i8** %s5, align 4
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %cond.false8, label %cond.true7

cond.true7:                                       ; preds = %cond.false4
  br label %cond.end

cond.false8:                                      ; preds = %cond.false4
  %12 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s9 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %12, i32 0, i32 0
  %13 = load i8*, i8** %s9, align 4
  %14 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s10 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %14, i32 0, i32 0
  %15 = load i8*, i8** %s10, align 4
  %call = call i32 @strncmp(i8* %13, i8* %15, i32 10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi i32 [ -1, %cond.true7 ], [ %call, %cond.false8 ]
  br label %cond.end11

cond.end11:                                       ; preds = %cond.end, %cond.true3
  %cond12 = phi i32 [ 1, %cond.true3 ], [ %cond, %cond.end ]
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end11, %cond.true
  %cond14 = phi i32 [ 0, %cond.true ], [ %cond12, %cond.end11 ]
  ret i32 %cond14
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @read_file(i8* %fn) #0 {
entry:
  %retval = alloca i32, align 4
  %fn.addr = alloca i8*, align 4
  %fd = alloca i32, align 4
  %s = alloca %struct.stat, align 8
  %txt = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lines = alloca i32, align 4
  %k = alloca i32, align 4
  %di = alloca i32, align 4
  %bad = alloca i32, align 4
  %rec = alloca %struct.rec_t*, align 4
  %ptr = alloca i8*, align 4
  %end = alloca i8*, align 4
  store i8* %fn, i8** %fn.addr, align 4
  %0 = load i8*, i8** %fn.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %conv = trunc i64 %3 to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %txt, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %txt, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i32, i32* %fd, align 4
  %call6 = call i32 @close(i32 %7)
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %conv7 = sext i32 %8 to i64
  %st_size8 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %9 = load i64, i64* %st_size8, align 8
  %cmp9 = icmp slt i64 %conv7, %9
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %txt, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %10, i32 %11
  %12 = load i8, i8* %arrayidx, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 10
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %for.body
  %13 = load i8*, i8** %txt, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 0, i8* %arrayidx15, align 1
  %15 = load i32, i32* %lines, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %lines, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %16 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %16, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %lines, align 4
  %call18 = call noalias i8* @calloc(i32 12, i32 %17)
  %18 = bitcast i8* %call18 to %struct.rec_t*
  store %struct.rec_t* %18, %struct.rec_t** %rec, align 4
  %19 = load i8*, i8** %txt, align 4
  %20 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx19 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %20, i32 0
  %s20 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx19, i32 0, i32 0
  store i8* %19, i8** %s20, align 4
  %21 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx21 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %21, i32 0
  %ln = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx21, i32 0, i32 1
  store i32 1, i32* %ln, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc94, %for.end
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %lines, align 4
  %cmp23 = icmp slt i32 %22, %23
  br i1 %cmp23, label %for.body25, label %for.end96

for.body25:                                       ; preds = %for.cond22
  %24 = load i32, i32* %i, align 4
  %add = add nsw i32 %24, 1
  %25 = load i32, i32* %lines, align 4
  %cmp26 = icmp slt i32 %add, %25
  br i1 %cmp26, label %if.then28, label %if.end42

if.then28:                                        ; preds = %for.body25
  %26 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %26, i32 %27
  %s30 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx29, i32 0, i32 0
  %28 = load i8*, i8** %s30, align 4
  %29 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %29, i32 %30
  %s32 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx31, i32 0, i32 0
  %31 = load i8*, i8** %s32, align 4
  %call33 = call i32 @strlen(i8* %31) #3
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 %call33
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %32 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %33 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %33, 1
  %arrayidx36 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %32, i32 %add35
  %s37 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx36, i32 0, i32 0
  store i8* %add.ptr34, i8** %s37, align 4
  %34 = load i32, i32* %i, align 4
  %add38 = add nsw i32 %34, 2
  %35 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %36 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %36, 1
  %arrayidx40 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %35, i32 %add39
  %ln41 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx40, i32 0, i32 1
  store i32 %add38, i32* %ln41, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then28, %for.body25
  %37 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx43 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %37, i32 %38
  %s44 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx43, i32 0, i32 0
  %39 = load i8*, i8** %s44, align 4
  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32* %di, i32* %di, i32* %di)
  %cmp46 = icmp ne i32 %call45, 3
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.end42
  %40 = load i32, i32* %i, align 4
  %41 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %41, i32 %42
  %s50 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx49, i32 0, i32 0
  %43 = load i8*, i8** %s50, align 4
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %40, i8* %43)
  %44 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %44, i32 %45
  %s53 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx52, i32 0, i32 0
  store i8* null, i8** %s53, align 4
  br label %for.inc94

if.end54:                                         ; preds = %if.end42
  %46 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %46, i32 %47
  %s56 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx55, i32 0, i32 0
  %48 = load i8*, i8** %s56, align 4
  %add.ptr57 = getelementptr inbounds i8, i8* %48, i32 10
  store i8* %add.ptr57, i8** %ptr, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc82, %if.end54
  %49 = load i32, i32* %j, align 4
  %cmp59 = icmp slt i32 %49, 25
  br i1 %cmp59, label %for.body61, label %for.end84

for.body61:                                       ; preds = %for.cond58
  %50 = load i8*, i8** %ptr, align 4
  %call62 = call double @strtod(i8* %50, i8** %end)
  %tobool = fcmp une double %call62, 0.000000e+00
  br i1 %tobool, label %if.end66, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body61
  %51 = load i8*, i8** %end, align 4
  %52 = load i8*, i8** %ptr, align 4
  %cmp63 = icmp eq i8* %51, %52
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %land.lhs.true
  br label %for.end84

if.end66:                                         ; preds = %land.lhs.true, %for.body61
  %53 = load i32, i32* %k, align 4
  %inc67 = add nsw i32 %53, 1
  store i32 %inc67, i32* %k, align 4
  %54 = load i8*, i8** %end, align 4
  store i8* %54, i8** %ptr, align 4
  %55 = load i8*, i8** %ptr, align 4
  %call68 = call i32 @strtol(i8* %55, i8** %end, i32 10)
  store i32 %call68, i32* %di, align 4
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end74, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %if.end66
  %56 = load i8*, i8** %end, align 4
  %57 = load i8*, i8** %ptr, align 4
  %cmp71 = icmp eq i8* %56, %57
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %land.lhs.true70
  br label %for.end84

if.end74:                                         ; preds = %land.lhs.true70, %if.end66
  %58 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %59 = load i8*, i8** %end, align 4
  store i8* %59, i8** %ptr, align 4
  %60 = load i32, i32* %di, align 4
  %cmp76 = icmp slt i32 %60, 1
  br i1 %cmp76, label %if.then78, label %if.end81

if.then78:                                        ; preds = %if.end74
  %61 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx79 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %61, i32 %62
  %bad80 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx79, i32 0, i32 2
  store i32 1, i32* %bad80, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then78, %if.end74
  br label %for.inc82

for.inc82:                                        ; preds = %if.end81
  %63 = load i32, i32* %j, align 4
  %inc83 = add nsw i32 %63, 1
  store i32 %inc83, i32* %j, align 4
  br label %for.cond58

for.end84:                                        ; preds = %if.then73, %if.then65, %for.cond58
  %64 = load i32, i32* %k, align 4
  %cmp85 = icmp ne i32 %64, 48
  br i1 %cmp85, label %if.then87, label %if.end93

if.then87:                                        ; preds = %for.end84
  %65 = load i32, i32* %i, align 4
  %66 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx88 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %66, i32 %67
  %s89 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx88, i32 0, i32 0
  %68 = load i8*, i8** %s89, align 4
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %65, i8* %68)
  %69 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %70 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %69, i32 %70
  %s92 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx91, i32 0, i32 0
  store i8* null, i8** %s92, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then87, %for.end84
  br label %for.inc94

for.inc94:                                        ; preds = %if.end93, %if.then48
  %71 = load i32, i32* %i, align 4
  %inc95 = add nsw i32 %71, 1
  store i32 %inc95, i32* %i, align 4
  br label %for.cond22

for.end96:                                        ; preds = %for.cond22
  %72 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %73 = bitcast %struct.rec_t* %72 to i8*
  %74 = load i32, i32* %lines, align 4
  call void @qsort(i8* %73, i32 %74, i32 12, i32 (i8*, i8*)* @cmp_rec)
  store i32 1, i32* %i, align 4
  %75 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx97 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %75, i32 0
  %bad98 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx97, i32 0, i32 2
  %76 = load i32, i32* %bad98, align 4
  store i32 %76, i32* %bad, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc125, %for.end96
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* %lines, align 4
  %cmp100 = icmp slt i32 %77, %78
  br i1 %cmp100, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond99
  %79 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx102 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %79, i32 %80
  %s103 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx102, i32 0, i32 0
  %81 = load i8*, i8** %s103, align 4
  %tobool104 = icmp ne i8* %81, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond99
  %82 = phi i1 [ false, %for.cond99 ], [ %tobool104, %land.rhs ]
  br i1 %82, label %for.body105, label %for.end127

for.body105:                                      ; preds = %land.end
  %83 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %84 = load i32, i32* %i, align 4
  %arrayidx106 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %83, i32 %84
  %bad107 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx106, i32 0, i32 2
  %85 = load i32, i32* %bad107, align 4
  %tobool108 = icmp ne i32 %85, 0
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %for.body105
  %86 = load i32, i32* %bad, align 4
  %inc110 = add nsw i32 %86, 1
  store i32 %inc110, i32* %bad, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %for.body105
  %87 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %88 = load i32, i32* %i, align 4
  %arrayidx112 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %87, i32 %88
  %s113 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx112, i32 0, i32 0
  %89 = load i8*, i8** %s113, align 4
  %90 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %91 = load i32, i32* %j, align 4
  %arrayidx114 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %90, i32 %91
  %s115 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx114, i32 0, i32 0
  %92 = load i8*, i8** %s115, align 4
  %call116 = call i32 @strncmp(i8* %89, i8* %92, i32 10)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.then118, label %if.else

if.then118:                                       ; preds = %if.end111
  %93 = load i32, i32* %i, align 4
  store i32 %93, i32* %j, align 4
  br label %if.end124

if.else:                                          ; preds = %if.end111
  %94 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %94, i32 %95
  %ln120 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx119, i32 0, i32 1
  %96 = load i32, i32* %ln120, align 4
  %97 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %97, i32 %98
  %s122 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx121, i32 0, i32 0
  %99 = load i8*, i8** %s122, align 4
  %call123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %96, i8* %99)
  br label %if.end124

if.end124:                                        ; preds = %if.else, %if.then118
  br label %for.inc125

for.inc125:                                       ; preds = %if.end124
  %100 = load i32, i32* %i, align 4
  %inc126 = add nsw i32 %100, 1
  store i32 %inc126, i32* %i, align 4
  br label %for.cond99

for.end127:                                       ; preds = %land.end
  %101 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %102 = bitcast %struct.rec_t* %101 to i8*
  call void @free(i8* %102)
  %103 = load i8*, i8** %txt, align 4
  call void @free(i8* %103)
  %104 = load i32, i32* %lines, align 4
  %105 = load i32, i32* %bad, align 4
  %sub = sub nsw i32 %104, %105
  %106 = load i32, i32* %lines, align 4
  %call128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i32 0, i32 0), i32 %sub, i32 %106)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end127, %if.then
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @printf(i8* %0, ...) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @read_file(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq i8* %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i8* %11, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @strncmp(i8* %13, i8* %15, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true7 ], [ %call, %cond.false8 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 4294967295:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond12 = phi i32 [ 1, %cond.true3 ], [ %cond, %cond.end ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, 4294967295:i32, %2
%4:i32 = phi %0, 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %cond14 = phi i32 [ 0, %cond.true ], [ %cond12, %cond.end11 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = phi %2, 4294967295:i32, %3
%5:i32 = phi %1, 1:i32, %4
%6:i32 = phi %0, 0:i32, %5
infer %6
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 4294967295:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, 4294967295:i32, %2
%4:i32 = phi %0, 1:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 4294967295:i32, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2 = block 2
%3:i32 = var
%4:i32 = phi %2, 4294967295:i32, %3
%5:i32 = phi %1, 1:i32, %4
%6:i32 = phi %0, 0:i32, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 4294967295:i32, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, 4294967295:i32, %2
%4:i32 = phi %0, 1:i32, %3

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cmp_rec()

; entering Souper's runOnFunction() for read_file()

; ModuleID = './Text_processing-2.c.bc'
source_filename = "./Text_processing-2.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.rec_t = type { i8*, i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [12 x i8] c"%4d-%2d-%2d\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"bad line %d: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"bad format at line %d: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"dup line %d: %.10s\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"\0A%d out %d lines good\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"readings.txt\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_rec(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca %struct.rec_t*, align 4
  %b = alloca %struct.rec_t*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.rec_t*
  store %struct.rec_t* %1, %struct.rec_t** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.rec_t*
  store %struct.rec_t* %3, %struct.rec_t** %b, align 4
  %4 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s = getelementptr inbounds %struct.rec_t, %struct.rec_t* %4, i32 0, i32 0
  %5 = load i8*, i8** %s, align 4
  %6 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s1 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %6, i32 0, i32 0
  %7 = load i8*, i8** %s1, align 4
  %cmp = icmp eq i8* %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end13

cond.false:                                       ; preds = %entry
  %8 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s2 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %8, i32 0, i32 0
  %9 = load i8*, i8** %s2, align 4
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %cond.false4, label %cond.true3

cond.true3:                                       ; preds = %cond.false
  br label %cond.end11

cond.false4:                                      ; preds = %cond.false
  %10 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s5 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %10, i32 0, i32 0
  %11 = load i8*, i8** %s5, align 4
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %cond.false8, label %cond.true7

cond.true7:                                       ; preds = %cond.false4
  br label %cond.end

cond.false8:                                      ; preds = %cond.false4
  %12 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s9 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %12, i32 0, i32 0
  %13 = load i8*, i8** %s9, align 4
  %14 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s10 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %14, i32 0, i32 0
  %15 = load i8*, i8** %s10, align 4
  %call = call i32 @strncmp(i8* %13, i8* %15, i32 10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi i32 [ -1, %cond.true7 ], [ %call, %cond.false8 ]
  br label %cond.end11

cond.end11:                                       ; preds = %cond.end, %cond.true3
  %cond12 = phi i32 [ 1, %cond.true3 ], [ %cond, %cond.end ]
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end11, %cond.true
  %cond14 = phi i32 [ 0, %cond.true ], [ %cond12, %cond.end11 ]
  ret i32 %cond14
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @read_file(i8* %fn) #0 {
entry:
  %retval = alloca i32, align 4
  %fn.addr = alloca i8*, align 4
  %fd = alloca i32, align 4
  %s = alloca %struct.stat, align 8
  %txt = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lines = alloca i32, align 4
  %k = alloca i32, align 4
  %di = alloca i32, align 4
  %bad = alloca i32, align 4
  %rec = alloca %struct.rec_t*, align 4
  %ptr = alloca i8*, align 4
  %end = alloca i8*, align 4
  store i8* %fn, i8** %fn.addr, align 4
  %0 = load i8*, i8** %fn.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %conv = trunc i64 %3 to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %txt, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %txt, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i32, i32* %fd, align 4
  %call6 = call i32 @close(i32 %7)
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %conv7 = sext i32 %8 to i64
  %st_size8 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %9 = load i64, i64* %st_size8, align 8
  %cmp9 = icmp slt i64 %conv7, %9
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %txt, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %10, i32 %11
  %12 = load i8, i8* %arrayidx, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 10
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %for.body
  %13 = load i8*, i8** %txt, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 0, i8* %arrayidx15, align 1
  %15 = load i32, i32* %lines, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %lines, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %16 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %16, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %lines, align 4
  %call18 = call noalias i8* @calloc(i32 12, i32 %17)
  %18 = bitcast i8* %call18 to %struct.rec_t*
  store %struct.rec_t* %18, %struct.rec_t** %rec, align 4
  %19 = load i8*, i8** %txt, align 4
  %20 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx19 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %20, i32 0
  %s20 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx19, i32 0, i32 0
  store i8* %19, i8** %s20, align 4
  %21 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx21 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %21, i32 0
  %ln = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx21, i32 0, i32 1
  store i32 1, i32* %ln, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc94, %for.end
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %lines, align 4
  %cmp23 = icmp slt i32 %22, %23
  br i1 %cmp23, label %for.body25, label %for.end96

for.body25:                                       ; preds = %for.cond22
  %24 = load i32, i32* %i, align 4
  %add = add nsw i32 %24, 1
  %25 = load i32, i32* %lines, align 4
  %cmp26 = icmp slt i32 %add, %25
  br i1 %cmp26, label %if.then28, label %if.end42

if.then28:                                        ; preds = %for.body25
  %26 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %26, i32 %27
  %s30 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx29, i32 0, i32 0
  %28 = load i8*, i8** %s30, align 4
  %29 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %29, i32 %30
  %s32 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx31, i32 0, i32 0
  %31 = load i8*, i8** %s32, align 4
  %call33 = call i32 @strlen(i8* %31) #3
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 %call33
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %32 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %33 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %33, 1
  %arrayidx36 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %32, i32 %add35
  %s37 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx36, i32 0, i32 0
  store i8* %add.ptr34, i8** %s37, align 4
  %34 = load i32, i32* %i, align 4
  %add38 = add nsw i32 %34, 2
  %35 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %36 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %36, 1
  %arrayidx40 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %35, i32 %add39
  %ln41 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx40, i32 0, i32 1
  store i32 %add38, i32* %ln41, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then28, %for.body25
  %37 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx43 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %37, i32 %38
  %s44 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx43, i32 0, i32 0
  %39 = load i8*, i8** %s44, align 4
  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32* %di, i32* %di, i32* %di)
  %cmp46 = icmp ne i32 %call45, 3
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.end42
  %40 = load i32, i32* %i, align 4
  %41 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %41, i32 %42
  %s50 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx49, i32 0, i32 0
  %43 = load i8*, i8** %s50, align 4
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %40, i8* %43)
  %44 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %44, i32 %45
  %s53 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx52, i32 0, i32 0
  store i8* null, i8** %s53, align 4
  br label %for.inc94

if.end54:                                         ; preds = %if.end42
  %46 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %46, i32 %47
  %s56 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx55, i32 0, i32 0
  %48 = load i8*, i8** %s56, align 4
  %add.ptr57 = getelementptr inbounds i8, i8* %48, i32 10
  store i8* %add.ptr57, i8** %ptr, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc82, %if.end54
  %49 = load i32, i32* %j, align 4
  %cmp59 = icmp slt i32 %49, 25
  br i1 %cmp59, label %for.body61, label %for.end84

for.body61:                                       ; preds = %for.cond58
  %50 = load i8*, i8** %ptr, align 4
  %call62 = call double @strtod(i8* %50, i8** %end)
  %tobool = fcmp une double %call62, 0.000000e+00
  br i1 %tobool, label %if.end66, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body61
  %51 = load i8*, i8** %end, align 4
  %52 = load i8*, i8** %ptr, align 4
  %cmp63 = icmp eq i8* %51, %52
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %land.lhs.true
  br label %for.end84

if.end66:                                         ; preds = %land.lhs.true, %for.body61
  %53 = load i32, i32* %k, align 4
  %inc67 = add nsw i32 %53, 1
  store i32 %inc67, i32* %k, align 4
  %54 = load i8*, i8** %end, align 4
  store i8* %54, i8** %ptr, align 4
  %55 = load i8*, i8** %ptr, align 4
  %call68 = call i32 @strtol(i8* %55, i8** %end, i32 10)
  store i32 %call68, i32* %di, align 4
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end74, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %if.end66
  %56 = load i8*, i8** %end, align 4
  %57 = load i8*, i8** %ptr, align 4
  %cmp71 = icmp eq i8* %56, %57
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %land.lhs.true70
  br label %for.end84

if.end74:                                         ; preds = %land.lhs.true70, %if.end66
  %58 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %59 = load i8*, i8** %end, align 4
  store i8* %59, i8** %ptr, align 4
  %60 = load i32, i32* %di, align 4
  %cmp76 = icmp slt i32 %60, 1
  br i1 %cmp76, label %if.then78, label %if.end81

if.then78:                                        ; preds = %if.end74
  %61 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx79 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %61, i32 %62
  %bad80 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx79, i32 0, i32 2
  store i32 1, i32* %bad80, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then78, %if.end74
  br label %for.inc82

for.inc82:                                        ; preds = %if.end81
  %63 = load i32, i32* %j, align 4
  %inc83 = add nsw i32 %63, 1
  store i32 %inc83, i32* %j, align 4
  br label %for.cond58

for.end84:                                        ; preds = %if.then73, %if.then65, %for.cond58
  %64 = load i32, i32* %k, align 4
  %cmp85 = icmp ne i32 %64, 48
  br i1 %cmp85, label %if.then87, label %if.end93

if.then87:                                        ; preds = %for.end84
  %65 = load i32, i32* %i, align 4
  %66 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx88 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %66, i32 %67
  %s89 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx88, i32 0, i32 0
  %68 = load i8*, i8** %s89, align 4
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %65, i8* %68)
  %69 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %70 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %69, i32 %70
  %s92 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx91, i32 0, i32 0
  store i8* null, i8** %s92, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then87, %for.end84
  br label %for.inc94

for.inc94:                                        ; preds = %if.end93, %if.then48
  %71 = load i32, i32* %i, align 4
  %inc95 = add nsw i32 %71, 1
  store i32 %inc95, i32* %i, align 4
  br label %for.cond22

for.end96:                                        ; preds = %for.cond22
  %72 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %73 = bitcast %struct.rec_t* %72 to i8*
  %74 = load i32, i32* %lines, align 4
  call void @qsort(i8* %73, i32 %74, i32 12, i32 (i8*, i8*)* @cmp_rec)
  store i32 1, i32* %i, align 4
  %75 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx97 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %75, i32 0
  %bad98 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx97, i32 0, i32 2
  %76 = load i32, i32* %bad98, align 4
  store i32 %76, i32* %bad, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc125, %for.end96
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* %lines, align 4
  %cmp100 = icmp slt i32 %77, %78
  br i1 %cmp100, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond99
  %79 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx102 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %79, i32 %80
  %s103 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx102, i32 0, i32 0
  %81 = load i8*, i8** %s103, align 4
  %tobool104 = icmp ne i8* %81, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond99
  %82 = phi i1 [ false, %for.cond99 ], [ %tobool104, %land.rhs ]
  br i1 %82, label %for.body105, label %for.end127

for.body105:                                      ; preds = %land.end
  %83 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %84 = load i32, i32* %i, align 4
  %arrayidx106 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %83, i32 %84
  %bad107 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx106, i32 0, i32 2
  %85 = load i32, i32* %bad107, align 4
  %tobool108 = icmp ne i32 %85, 0
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %for.body105
  %86 = load i32, i32* %bad, align 4
  %inc110 = add nsw i32 %86, 1
  store i32 %inc110, i32* %bad, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %for.body105
  %87 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %88 = load i32, i32* %i, align 4
  %arrayidx112 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %87, i32 %88
  %s113 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx112, i32 0, i32 0
  %89 = load i8*, i8** %s113, align 4
  %90 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %91 = load i32, i32* %j, align 4
  %arrayidx114 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %90, i32 %91
  %s115 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx114, i32 0, i32 0
  %92 = load i8*, i8** %s115, align 4
  %call116 = call i32 @strncmp(i8* %89, i8* %92, i32 10)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.then118, label %if.else

if.then118:                                       ; preds = %if.end111
  %93 = load i32, i32* %i, align 4
  store i32 %93, i32* %j, align 4
  br label %if.end124

if.else:                                          ; preds = %if.end111
  %94 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %94, i32 %95
  %ln120 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx119, i32 0, i32 1
  %96 = load i32, i32* %ln120, align 4
  %97 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %97, i32 %98
  %s122 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx121, i32 0, i32 0
  %99 = load i8*, i8** %s122, align 4
  %call123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %96, i8* %99)
  br label %if.end124

if.end124:                                        ; preds = %if.else, %if.then118
  br label %for.inc125

for.inc125:                                       ; preds = %if.end124
  %100 = load i32, i32* %i, align 4
  %inc126 = add nsw i32 %100, 1
  store i32 %inc126, i32* %i, align 4
  br label %for.cond99

for.end127:                                       ; preds = %land.end
  %101 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %102 = bitcast %struct.rec_t* %101 to i8*
  call void @free(i8* %102)
  %103 = load i8*, i8** %txt, align 4
  call void @free(i8* %103)
  %104 = load i32, i32* %lines, align 4
  %105 = load i32, i32* %bad, align 4
  %sub = sub nsw i32 %104, %105
  %106 = load i32, i32* %lines, align 4
  %call128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i32 0, i32 0), i32 %sub, i32 %106)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end127, %if.then
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @printf(i8* %0, ...) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @read_file(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %st_size, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv = trunc i64 %3 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %st_size3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv4 = trunc i64 %6 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i32 %8 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %st_size8, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i64 %conv7, %9
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
%2:i64 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %conv11, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 10:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %add, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call33 = call i32 @strlen(i8* %31) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add38 = add nsw i32 %34, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add39 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32* %di, i32* %di, i32* %di)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = icmp ne i32 %call45, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp59 = icmp slt i32 %49, 25
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 25:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = fcmp une double %call62, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp eq i8* %51, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call68 = call i32 @strtol(i8* %55, i8** %end, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool69 = icmp ne i32 %call68, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp71 = icmp eq i8* %56, %57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc75 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %di, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp76 = icmp slt i32 %60, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc83 = add nsw i32 %63, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp85 = icmp ne i32 %64, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 48:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc95 = add nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %bad98, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp100 = icmp slt i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool104 = icmp ne i8* %81, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %82 = phi i1 [ false, %for.cond99 ], [ %tobool104, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %bad107, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool108 = icmp ne i32 %85, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %bad, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc110 = add nsw i32 %86, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call116 = call i32 @strncmp(i8* %89, i8* %92, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool117 = icmp ne i32 %call116, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %ln120, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %98 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %100 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc126 = add nsw i32 %100, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %104 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %bad, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %104, %105
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %106 = load i32, i32* %lines, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
%2:i64 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 10:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 25:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 48:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for read_file()

; entering Souper's runOnFunction() for main()

; ModuleID = './Text_processing-2.c.bc'
source_filename = "./Text_processing-2.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.rec_t = type { i8*, i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [12 x i8] c"%4d-%2d-%2d\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"bad line %d: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"bad format at line %d: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"dup line %d: %.10s\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"\0A%d out %d lines good\0A\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"readings.txt\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_rec(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca %struct.rec_t*, align 4
  %b = alloca %struct.rec_t*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.rec_t*
  store %struct.rec_t* %1, %struct.rec_t** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.rec_t*
  store %struct.rec_t* %3, %struct.rec_t** %b, align 4
  %4 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s = getelementptr inbounds %struct.rec_t, %struct.rec_t* %4, i32 0, i32 0
  %5 = load i8*, i8** %s, align 4
  %6 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s1 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %6, i32 0, i32 0
  %7 = load i8*, i8** %s1, align 4
  %cmp = icmp eq i8* %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end13

cond.false:                                       ; preds = %entry
  %8 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s2 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %8, i32 0, i32 0
  %9 = load i8*, i8** %s2, align 4
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %cond.false4, label %cond.true3

cond.true3:                                       ; preds = %cond.false
  br label %cond.end11

cond.false4:                                      ; preds = %cond.false
  %10 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s5 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %10, i32 0, i32 0
  %11 = load i8*, i8** %s5, align 4
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %cond.false8, label %cond.true7

cond.true7:                                       ; preds = %cond.false4
  br label %cond.end

cond.false8:                                      ; preds = %cond.false4
  %12 = load %struct.rec_t*, %struct.rec_t** %a, align 4
  %s9 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %12, i32 0, i32 0
  %13 = load i8*, i8** %s9, align 4
  %14 = load %struct.rec_t*, %struct.rec_t** %b, align 4
  %s10 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %14, i32 0, i32 0
  %15 = load i8*, i8** %s10, align 4
  %call = call i32 @strncmp(i8* %13, i8* %15, i32 10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi i32 [ -1, %cond.true7 ], [ %call, %cond.false8 ]
  br label %cond.end11

cond.end11:                                       ; preds = %cond.end, %cond.true3
  %cond12 = phi i32 [ 1, %cond.true3 ], [ %cond, %cond.end ]
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end11, %cond.true
  %cond14 = phi i32 [ 0, %cond.true ], [ %cond12, %cond.end11 ]
  ret i32 %cond14
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @read_file(i8* %fn) #0 {
entry:
  %retval = alloca i32, align 4
  %fn.addr = alloca i8*, align 4
  %fd = alloca i32, align 4
  %s = alloca %struct.stat, align 8
  %txt = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lines = alloca i32, align 4
  %k = alloca i32, align 4
  %di = alloca i32, align 4
  %bad = alloca i32, align 4
  %rec = alloca %struct.rec_t*, align 4
  %ptr = alloca i8*, align 4
  %end = alloca i8*, align 4
  store i8* %fn, i8** %fn.addr, align 4
  %0 = load i8*, i8** %fn.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %conv = trunc i64 %3 to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %txt, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %txt, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i32, i32* %fd, align 4
  %call6 = call i32 @close(i32 %7)
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %lines, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %conv7 = sext i32 %8 to i64
  %st_size8 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %9 = load i64, i64* %st_size8, align 8
  %cmp9 = icmp slt i64 %conv7, %9
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %txt, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %10, i32 %11
  %12 = load i8, i8* %arrayidx, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 10
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %for.body
  %13 = load i8*, i8** %txt, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 0, i8* %arrayidx15, align 1
  %15 = load i32, i32* %lines, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %lines, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %16 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %16, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %lines, align 4
  %call18 = call noalias i8* @calloc(i32 12, i32 %17)
  %18 = bitcast i8* %call18 to %struct.rec_t*
  store %struct.rec_t* %18, %struct.rec_t** %rec, align 4
  %19 = load i8*, i8** %txt, align 4
  %20 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx19 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %20, i32 0
  %s20 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx19, i32 0, i32 0
  store i8* %19, i8** %s20, align 4
  %21 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx21 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %21, i32 0
  %ln = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx21, i32 0, i32 1
  store i32 1, i32* %ln, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc94, %for.end
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %lines, align 4
  %cmp23 = icmp slt i32 %22, %23
  br i1 %cmp23, label %for.body25, label %for.end96

for.body25:                                       ; preds = %for.cond22
  %24 = load i32, i32* %i, align 4
  %add = add nsw i32 %24, 1
  %25 = load i32, i32* %lines, align 4
  %cmp26 = icmp slt i32 %add, %25
  br i1 %cmp26, label %if.then28, label %if.end42

if.then28:                                        ; preds = %for.body25
  %26 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %26, i32 %27
  %s30 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx29, i32 0, i32 0
  %28 = load i8*, i8** %s30, align 4
  %29 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %29, i32 %30
  %s32 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx31, i32 0, i32 0
  %31 = load i8*, i8** %s32, align 4
  %call33 = call i32 @strlen(i8* %31) #3
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 %call33
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %32 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %33 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %33, 1
  %arrayidx36 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %32, i32 %add35
  %s37 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx36, i32 0, i32 0
  store i8* %add.ptr34, i8** %s37, align 4
  %34 = load i32, i32* %i, align 4
  %add38 = add nsw i32 %34, 2
  %35 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %36 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %36, 1
  %arrayidx40 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %35, i32 %add39
  %ln41 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx40, i32 0, i32 1
  store i32 %add38, i32* %ln41, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then28, %for.body25
  %37 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx43 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %37, i32 %38
  %s44 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx43, i32 0, i32 0
  %39 = load i8*, i8** %s44, align 4
  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i32* %di, i32* %di, i32* %di)
  %cmp46 = icmp ne i32 %call45, 3
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.end42
  %40 = load i32, i32* %i, align 4
  %41 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %41, i32 %42
  %s50 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx49, i32 0, i32 0
  %43 = load i8*, i8** %s50, align 4
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %40, i8* %43)
  %44 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx52 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %44, i32 %45
  %s53 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx52, i32 0, i32 0
  store i8* null, i8** %s53, align 4
  br label %for.inc94

if.end54:                                         ; preds = %if.end42
  %46 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %46, i32 %47
  %s56 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx55, i32 0, i32 0
  %48 = load i8*, i8** %s56, align 4
  %add.ptr57 = getelementptr inbounds i8, i8* %48, i32 10
  store i8* %add.ptr57, i8** %ptr, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc82, %if.end54
  %49 = load i32, i32* %j, align 4
  %cmp59 = icmp slt i32 %49, 25
  br i1 %cmp59, label %for.body61, label %for.end84

for.body61:                                       ; preds = %for.cond58
  %50 = load i8*, i8** %ptr, align 4
  %call62 = call double @strtod(i8* %50, i8** %end)
  %tobool = fcmp une double %call62, 0.000000e+00
  br i1 %tobool, label %if.end66, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body61
  %51 = load i8*, i8** %end, align 4
  %52 = load i8*, i8** %ptr, align 4
  %cmp63 = icmp eq i8* %51, %52
  br i1 %cmp63, label %if.then65, label %if.end66

if.then65:                                        ; preds = %land.lhs.true
  br label %for.end84

if.end66:                                         ; preds = %land.lhs.true, %for.body61
  %53 = load i32, i32* %k, align 4
  %inc67 = add nsw i32 %53, 1
  store i32 %inc67, i32* %k, align 4
  %54 = load i8*, i8** %end, align 4
  store i8* %54, i8** %ptr, align 4
  %55 = load i8*, i8** %ptr, align 4
  %call68 = call i32 @strtol(i8* %55, i8** %end, i32 10)
  store i32 %call68, i32* %di, align 4
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end74, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %if.end66
  %56 = load i8*, i8** %end, align 4
  %57 = load i8*, i8** %ptr, align 4
  %cmp71 = icmp eq i8* %56, %57
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %land.lhs.true70
  br label %for.end84

if.end74:                                         ; preds = %land.lhs.true70, %if.end66
  %58 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %59 = load i8*, i8** %end, align 4
  store i8* %59, i8** %ptr, align 4
  %60 = load i32, i32* %di, align 4
  %cmp76 = icmp slt i32 %60, 1
  br i1 %cmp76, label %if.then78, label %if.end81

if.then78:                                        ; preds = %if.end74
  %61 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx79 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %61, i32 %62
  %bad80 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx79, i32 0, i32 2
  store i32 1, i32* %bad80, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then78, %if.end74
  br label %for.inc82

for.inc82:                                        ; preds = %if.end81
  %63 = load i32, i32* %j, align 4
  %inc83 = add nsw i32 %63, 1
  store i32 %inc83, i32* %j, align 4
  br label %for.cond58

for.end84:                                        ; preds = %if.then73, %if.then65, %for.cond58
  %64 = load i32, i32* %k, align 4
  %cmp85 = icmp ne i32 %64, 48
  br i1 %cmp85, label %if.then87, label %if.end93

if.then87:                                        ; preds = %for.end84
  %65 = load i32, i32* %i, align 4
  %66 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx88 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %66, i32 %67
  %s89 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx88, i32 0, i32 0
  %68 = load i8*, i8** %s89, align 4
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %65, i8* %68)
  %69 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %70 = load i32, i32* %i, align 4
  %arrayidx91 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %69, i32 %70
  %s92 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx91, i32 0, i32 0
  store i8* null, i8** %s92, align 4
  br label %if.end93

if.end93:                                         ; preds = %if.then87, %for.end84
  br label %for.inc94

for.inc94:                                        ; preds = %if.end93, %if.then48
  %71 = load i32, i32* %i, align 4
  %inc95 = add nsw i32 %71, 1
  store i32 %inc95, i32* %i, align 4
  br label %for.cond22

for.end96:                                        ; preds = %for.cond22
  %72 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %73 = bitcast %struct.rec_t* %72 to i8*
  %74 = load i32, i32* %lines, align 4
  call void @qsort(i8* %73, i32 %74, i32 12, i32 (i8*, i8*)* @cmp_rec)
  store i32 1, i32* %i, align 4
  %75 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %arrayidx97 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %75, i32 0
  %bad98 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx97, i32 0, i32 2
  %76 = load i32, i32* %bad98, align 4
  store i32 %76, i32* %bad, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc125, %for.end96
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* %lines, align 4
  %cmp100 = icmp slt i32 %77, %78
  br i1 %cmp100, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond99
  %79 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx102 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %79, i32 %80
  %s103 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx102, i32 0, i32 0
  %81 = load i8*, i8** %s103, align 4
  %tobool104 = icmp ne i8* %81, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond99
  %82 = phi i1 [ false, %for.cond99 ], [ %tobool104, %land.rhs ]
  br i1 %82, label %for.body105, label %for.end127

for.body105:                                      ; preds = %land.end
  %83 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %84 = load i32, i32* %i, align 4
  %arrayidx106 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %83, i32 %84
  %bad107 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx106, i32 0, i32 2
  %85 = load i32, i32* %bad107, align 4
  %tobool108 = icmp ne i32 %85, 0
  br i1 %tobool108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %for.body105
  %86 = load i32, i32* %bad, align 4
  %inc110 = add nsw i32 %86, 1
  store i32 %inc110, i32* %bad, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %for.body105
  %87 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %88 = load i32, i32* %i, align 4
  %arrayidx112 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %87, i32 %88
  %s113 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx112, i32 0, i32 0
  %89 = load i8*, i8** %s113, align 4
  %90 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %91 = load i32, i32* %j, align 4
  %arrayidx114 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %90, i32 %91
  %s115 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx114, i32 0, i32 0
  %92 = load i8*, i8** %s115, align 4
  %call116 = call i32 @strncmp(i8* %89, i8* %92, i32 10)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.then118, label %if.else

if.then118:                                       ; preds = %if.end111
  %93 = load i32, i32* %i, align 4
  store i32 %93, i32* %j, align 4
  br label %if.end124

if.else:                                          ; preds = %if.end111
  %94 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx119 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %94, i32 %95
  %ln120 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx119, i32 0, i32 1
  %96 = load i32, i32* %ln120, align 4
  %97 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %97, i32 %98
  %s122 = getelementptr inbounds %struct.rec_t, %struct.rec_t* %arrayidx121, i32 0, i32 0
  %99 = load i8*, i8** %s122, align 4
  %call123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), i32 %96, i8* %99)
  br label %if.end124

if.end124:                                        ; preds = %if.else, %if.then118
  br label %for.inc125

for.inc125:                                       ; preds = %if.end124
  %100 = load i32, i32* %i, align 4
  %inc126 = add nsw i32 %100, 1
  store i32 %inc126, i32* %i, align 4
  br label %for.cond99

for.end127:                                       ; preds = %land.end
  %101 = load %struct.rec_t*, %struct.rec_t** %rec, align 4
  %102 = bitcast %struct.rec_t* %101 to i8*
  call void @free(i8* %102)
  %103 = load i8*, i8** %txt, align 4
  call void @free(i8* %103)
  %104 = load i32, i32* %lines, align 4
  %105 = load i32, i32* %bad, align 4
  %sub = sub nsw i32 %104, %105
  %106 = load i32, i32* %lines, align 4
  %call128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i32 0, i32 0), i32 %sub, i32 %106)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end127, %if.then
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @printf(i8* %0, ...) #1

declare double @strtod(i8* %0, i8** %1) #1

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @read_file(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
