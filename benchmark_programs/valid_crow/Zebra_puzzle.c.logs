
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for printHouses()

; ModuleID = './Zebra_puzzle.c.bc'
source_filename = "./Zebra_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Red\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Green\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"White\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Yellow\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blue\00", align 1
@__const.printHouses.color = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [8 x i8] c"English\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Swede\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Dane\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"German\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Norwegian\00", align 1
@__const.printHouses.man = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"Tea\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Coffee\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Milk\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Beer\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@__const.printHouses.drink = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0)], align 16
@.str.15 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Birds\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Cats\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"Zebra\00", align 1
@__const.printHouses.animal = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)], align 16
@.str.20 = private unnamed_addr constant [9 x i8] c"PallMall\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"Dunhill\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Blend\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"BlueMaster\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Prince\00", align 1
@__const.printHouses.smoke = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.25 = private unnamed_addr constant [50 x i8] c"%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"Man\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"Drink\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"Animal\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Smoke\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"%-10d\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"%-10.10s\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"%-10.10s\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"-\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printHouses([5 x i32]* %ha) #0 {
entry:
  %ha.addr = alloca [5 x i32]*, align 4
  %color = alloca [5 x i8*], align 16
  %man = alloca [5 x i8*], align 16
  %drink = alloca [5 x i8*], align 16
  %animal = alloca [5 x i8*], align 16
  %smoke = alloca [5 x i8*], align 16
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  %0 = bitcast [5 x i8*]* %color to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.color to i8*), i32 20, i1 false)
  %1 = bitcast [5 x i8*]* %man to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.man to i8*), i32 20, i1 false)
  %2 = bitcast [5 x i8*]* %drink to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.drink to i8*), i32 20, i1 false)
  %3 = bitcast [5 x i8*]* %animal to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.animal to i8*), i32 20, i1 false)
  %4 = bitcast [5 x i8*]* %smoke to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.smoke to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %5, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0), i32 %6)
  %7 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %7, i32 %8
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 0
  %9 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sge i32 %9, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %10, i32 %11
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx4, i32 0, i32 0
  %12 = load i32, i32* %arrayidx5, align 4
  %arrayidx6 = getelementptr inbounds [5 x i8*], [5 x i8*]* %color, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %13)
  br label %if.end

if.else:                                          ; preds = %for.body
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %14, i32 %15
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %16 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp sge i32 %16, 0
  br i1 %cmp11, label %if.then12, label %if.else17

if.then12:                                        ; preds = %if.end
  %17 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i32 %18
  %arrayidx14 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 1
  %19 = load i32, i32* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8*], [5 x i8*]* %man, i32 0, i32 %19
  %20 = load i8*, i8** %arrayidx15, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %20)
  br label %if.end19

if.else17:                                        ; preds = %if.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then12
  %21 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i32 %22
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx20, i32 0, i32 2
  %23 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp sge i32 %23, 0
  br i1 %cmp22, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.end19
  %24 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i32 %25
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx24, i32 0, i32 2
  %26 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [5 x i8*], [5 x i8*]* %drink, i32 0, i32 %26
  %27 = load i8*, i8** %arrayidx26, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %27)
  br label %if.end30

if.else28:                                        ; preds = %if.end19
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then23
  %28 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i32 %29
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 3
  %30 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %30, 0
  br i1 %cmp33, label %if.then34, label %if.else39

if.then34:                                        ; preds = %if.end30
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx35, i32 0, i32 3
  %33 = load i32, i32* %arrayidx36, align 4
  %arrayidx37 = getelementptr inbounds [5 x i8*], [5 x i8*]* %animal, i32 0, i32 %33
  %34 = load i8*, i8** %arrayidx37, align 4
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %34)
  br label %if.end41

if.else39:                                        ; preds = %if.end30
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then34
  %35 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %35, i32 %36
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 4
  %37 = load i32, i32* %arrayidx43, align 4
  %cmp44 = icmp sge i32 %37, 0
  br i1 %cmp44, label %if.then45, label %if.else50

if.then45:                                        ; preds = %if.end41
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 4
  %40 = load i32, i32* %arrayidx47, align 4
  %arrayidx48 = getelementptr inbounds [5 x i8*], [5 x i8*]* %smoke, i32 0, i32 %40
  %41 = load i8*, i8** %arrayidx48, align 4
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* %41)
  br label %if.end52

if.else50:                                        ; preds = %if.end41
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then45
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @checkHouses([5 x i32]* %ha) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %c_add = alloca i32, align 4
  %c_or = alloca i32, align 4
  %m_add = alloca i32, align 4
  %m_or = alloca i32, align 4
  %d_add = alloca i32, align 4
  %d_or = alloca i32, align 4
  %a_add = alloca i32, align 4
  %a_or = alloca i32, align 4
  %s_add = alloca i32, align 4
  %s_or = alloca i32, align 4
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 0, i32* %c_add, align 4
  store i32 0, i32* %c_or, align 4
  store i32 0, i32* %m_add, align 4
  store i32 0, i32* %m_or, align 4
  store i32 0, i32* %d_add, align 4
  store i32 0, i32* %d_or, align 4
  store i32 0, i32* %a_add, align 4
  store i32 0, i32* %a_or, align 4
  store i32 0, i32* %s_add, align 4
  store i32 0, i32* %s_or, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %0, i32 2
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 2
  %1 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i32 2
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %3, 2
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %4, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx5, i32 0, i32 1
  %5 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sge i32 %5, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.end
  %6 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %6, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %7, 4
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true8
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %8 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %8, 5
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i32 %10
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx15, i32 0, i32 0
  %11 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %11, 0
  br i1 %cmp17, label %if.then18, label %if.end24

if.then18:                                        ; preds = %for.body
  %12 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [5 x i32], [5 x i32]* %12, i32 %13
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 0
  %14 = load i32, i32* %arrayidx20, align 4
  %shl = shl i32 1, %14
  %15 = load i32, i32* %c_add, align 4
  %add = add nsw i32 %15, %shl
  store i32 %add, i32* %c_add, align 4
  %16 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %16, i32 %17
  %arrayidx22 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx21, i32 0, i32 0
  %18 = load i32, i32* %arrayidx22, align 4
  %shl23 = shl i32 1, %18
  %19 = load i32, i32* %c_or, align 4
  %or = or i32 %19, %shl23
  store i32 %or, i32* %c_or, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %for.body
  %20 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %20, i32 %21
  %arrayidx26 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx25, i32 0, i32 1
  %22 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp sge i32 %22, 0
  br i1 %cmp27, label %if.then28, label %if.end37

if.then28:                                        ; preds = %if.end24
  %23 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i32 %24
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx29, i32 0, i32 1
  %25 = load i32, i32* %arrayidx30, align 4
  %shl31 = shl i32 1, %25
  %26 = load i32, i32* %m_add, align 4
  %add32 = add nsw i32 %26, %shl31
  store i32 %add32, i32* %m_add, align 4
  %27 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i32 %28
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 1
  %29 = load i32, i32* %arrayidx34, align 4
  %shl35 = shl i32 1, %29
  %30 = load i32, i32* %m_or, align 4
  %or36 = or i32 %30, %shl35
  store i32 %or36, i32* %m_or, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.then28, %if.end24
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx39 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx38, i32 0, i32 2
  %33 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp sge i32 %33, 0
  br i1 %cmp40, label %if.then41, label %if.end50

if.then41:                                        ; preds = %if.end37
  %34 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i32 %35
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 2
  %36 = load i32, i32* %arrayidx43, align 4
  %shl44 = shl i32 1, %36
  %37 = load i32, i32* %d_add, align 4
  %add45 = add nsw i32 %37, %shl44
  store i32 %add45, i32* %d_add, align 4
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 2
  %40 = load i32, i32* %arrayidx47, align 4
  %shl48 = shl i32 1, %40
  %41 = load i32, i32* %d_or, align 4
  %or49 = or i32 %41, %shl48
  store i32 %or49, i32* %d_or, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then41, %if.end37
  %42 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [5 x i32], [5 x i32]* %42, i32 %43
  %arrayidx52 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx51, i32 0, i32 3
  %44 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp sge i32 %44, 0
  br i1 %cmp53, label %if.then54, label %if.end63

if.then54:                                        ; preds = %if.end50
  %45 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds [5 x i32], [5 x i32]* %45, i32 %46
  %arrayidx56 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx55, i32 0, i32 3
  %47 = load i32, i32* %arrayidx56, align 4
  %shl57 = shl i32 1, %47
  %48 = load i32, i32* %a_add, align 4
  %add58 = add nsw i32 %48, %shl57
  store i32 %add58, i32* %a_add, align 4
  %49 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds [5 x i32], [5 x i32]* %49, i32 %50
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx59, i32 0, i32 3
  %51 = load i32, i32* %arrayidx60, align 4
  %shl61 = shl i32 1, %51
  %52 = load i32, i32* %a_or, align 4
  %or62 = or i32 %52, %shl61
  store i32 %or62, i32* %a_or, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then54, %if.end50
  %53 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds [5 x i32], [5 x i32]* %53, i32 %54
  %arrayidx65 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx64, i32 0, i32 4
  %55 = load i32, i32* %arrayidx65, align 4
  %cmp66 = icmp sge i32 %55, 0
  br i1 %cmp66, label %if.then67, label %if.end76

if.then67:                                        ; preds = %if.end63
  %56 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i32 %57
  %arrayidx69 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx68, i32 0, i32 4
  %58 = load i32, i32* %arrayidx69, align 4
  %shl70 = shl i32 1, %58
  %59 = load i32, i32* %s_add, align 4
  %add71 = add nsw i32 %59, %shl70
  store i32 %add71, i32* %s_add, align 4
  %60 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx72 = getelementptr inbounds [5 x i32], [5 x i32]* %60, i32 %61
  %arrayidx73 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx72, i32 0, i32 4
  %62 = load i32, i32* %arrayidx73, align 4
  %shl74 = shl i32 1, %62
  %63 = load i32, i32* %s_or, align 4
  %or75 = or i32 %63, %shl74
  store i32 %or75, i32* %s_or, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then67, %if.end63
  %64 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %65 = load i32, i32* %i, align 4
  %arrayidx77 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i32 %65
  %arrayidx78 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx77, i32 0, i32 1
  %66 = load i32, i32* %arrayidx78, align 4
  %cmp79 = icmp sge i32 %66, 0
  br i1 %cmp79, label %land.lhs.true80, label %if.end100

land.lhs.true80:                                  ; preds = %if.end76
  %67 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [5 x i32], [5 x i32]* %67, i32 %68
  %arrayidx82 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx81, i32 0, i32 0
  %69 = load i32, i32* %arrayidx82, align 4
  %cmp83 = icmp sge i32 %69, 0
  br i1 %cmp83, label %land.lhs.true84, label %if.end100

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %70 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %71 = load i32, i32* %i, align 4
  %arrayidx85 = getelementptr inbounds [5 x i32], [5 x i32]* %70, i32 %71
  %arrayidx86 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx85, i32 0, i32 1
  %72 = load i32, i32* %arrayidx86, align 4
  %cmp87 = icmp eq i32 %72, 0
  br i1 %cmp87, label %land.lhs.true88, label %lor.lhs.false

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %73 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx89 = getelementptr inbounds [5 x i32], [5 x i32]* %73, i32 %74
  %arrayidx90 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx89, i32 0, i32 0
  %75 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp ne i32 %75, 0
  br i1 %cmp91, label %if.then99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true88, %land.lhs.true84
  %76 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [5 x i32], [5 x i32]* %76, i32 %77
  %arrayidx93 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx92, i32 0, i32 1
  %78 = load i32, i32* %arrayidx93, align 4
  %cmp94 = icmp ne i32 %78, 0
  br i1 %cmp94, label %land.lhs.true95, label %if.end100

land.lhs.true95:                                  ; preds = %lor.lhs.false
  %79 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx96 = getelementptr inbounds [5 x i32], [5 x i32]* %79, i32 %80
  %arrayidx97 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx96, i32 0, i32 0
  %81 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp eq i32 %81, 0
  br i1 %cmp98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.lhs.true95, %land.lhs.true88
  store i32 0, i32* %retval, align 4
  br label %return

if.end100:                                        ; preds = %land.lhs.true95, %lor.lhs.false, %land.lhs.true80, %if.end76
  %82 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %83 = load i32, i32* %i, align 4
  %arrayidx101 = getelementptr inbounds [5 x i32], [5 x i32]* %82, i32 %83
  %arrayidx102 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx101, i32 0, i32 1
  %84 = load i32, i32* %arrayidx102, align 4
  %cmp103 = icmp sge i32 %84, 0
  br i1 %cmp103, label %land.lhs.true104, label %if.end125

land.lhs.true104:                                 ; preds = %if.end100
  %85 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %85, i32 %86
  %arrayidx106 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx105, i32 0, i32 3
  %87 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sge i32 %87, 0
  br i1 %cmp107, label %land.lhs.true108, label %if.end125

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %88 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %89 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [5 x i32], [5 x i32]* %88, i32 %89
  %arrayidx110 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx109, i32 0, i32 1
  %90 = load i32, i32* %arrayidx110, align 4
  %cmp111 = icmp eq i32 %90, 1
  br i1 %cmp111, label %land.lhs.true112, label %lor.lhs.false116

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %91 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %92 = load i32, i32* %i, align 4
  %arrayidx113 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i32 %92
  %arrayidx114 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx113, i32 0, i32 3
  %93 = load i32, i32* %arrayidx114, align 4
  %cmp115 = icmp ne i32 %93, 0
  br i1 %cmp115, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true112, %land.lhs.true108
  %94 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx117 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i32 %95
  %arrayidx118 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx117, i32 0, i32 1
  %96 = load i32, i32* %arrayidx118, align 4
  %cmp119 = icmp ne i32 %96, 1
  br i1 %cmp119, label %land.lhs.true120, label %if.end125

land.lhs.true120:                                 ; preds = %lor.lhs.false116
  %97 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds [5 x i32], [5 x i32]* %97, i32 %98
  %arrayidx122 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx121, i32 0, i32 3
  %99 = load i32, i32* %arrayidx122, align 4
  %cmp123 = icmp eq i32 %99, 0
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %land.lhs.true120, %land.lhs.true112
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %land.lhs.true120, %lor.lhs.false116, %land.lhs.true104, %if.end100
  %100 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %101 = load i32, i32* %i, align 4
  %arrayidx126 = getelementptr inbounds [5 x i32], [5 x i32]* %100, i32 %101
  %arrayidx127 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx126, i32 0, i32 1
  %102 = load i32, i32* %arrayidx127, align 4
  %cmp128 = icmp sge i32 %102, 0
  br i1 %cmp128, label %land.lhs.true129, label %if.end150

land.lhs.true129:                                 ; preds = %if.end125
  %103 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %104 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds [5 x i32], [5 x i32]* %103, i32 %104
  %arrayidx131 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx130, i32 0, i32 2
  %105 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp sge i32 %105, 0
  br i1 %cmp132, label %land.lhs.true133, label %if.end150

land.lhs.true133:                                 ; preds = %land.lhs.true129
  %106 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %107 = load i32, i32* %i, align 4
  %arrayidx134 = getelementptr inbounds [5 x i32], [5 x i32]* %106, i32 %107
  %arrayidx135 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx134, i32 0, i32 1
  %108 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp eq i32 %108, 2
  br i1 %cmp136, label %land.lhs.true137, label %lor.lhs.false141

land.lhs.true137:                                 ; preds = %land.lhs.true133
  %109 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %110 = load i32, i32* %i, align 4
  %arrayidx138 = getelementptr inbounds [5 x i32], [5 x i32]* %109, i32 %110
  %arrayidx139 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx138, i32 0, i32 2
  %111 = load i32, i32* %arrayidx139, align 4
  %cmp140 = icmp ne i32 %111, 0
  br i1 %cmp140, label %if.then149, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %land.lhs.true137, %land.lhs.true133
  %112 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %113 = load i32, i32* %i, align 4
  %arrayidx142 = getelementptr inbounds [5 x i32], [5 x i32]* %112, i32 %113
  %arrayidx143 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx142, i32 0, i32 1
  %114 = load i32, i32* %arrayidx143, align 4
  %cmp144 = icmp ne i32 %114, 2
  br i1 %cmp144, label %land.lhs.true145, label %if.end150

land.lhs.true145:                                 ; preds = %lor.lhs.false141
  %115 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %116 = load i32, i32* %i, align 4
  %arrayidx146 = getelementptr inbounds [5 x i32], [5 x i32]* %115, i32 %116
  %arrayidx147 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx146, i32 0, i32 2
  %117 = load i32, i32* %arrayidx147, align 4
  %cmp148 = icmp eq i32 %117, 0
  br i1 %cmp148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %land.lhs.true145, %land.lhs.true137
  store i32 0, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %land.lhs.true145, %lor.lhs.false141, %land.lhs.true129, %if.end125
  %118 = load i32, i32* %i, align 4
  %cmp151 = icmp sgt i32 %118, 0
  br i1 %cmp151, label %land.lhs.true152, label %if.end174

land.lhs.true152:                                 ; preds = %if.end150
  %119 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %120 = load i32, i32* %i, align 4
  %arrayidx153 = getelementptr inbounds [5 x i32], [5 x i32]* %119, i32 %120
  %arrayidx154 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx153, i32 0, i32 0
  %121 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp sge i32 %121, 0
  br i1 %cmp155, label %land.lhs.true156, label %if.end174

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %122 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %123 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %123, 1
  %arrayidx157 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i32 %sub
  %arrayidx158 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx157, i32 0, i32 0
  %124 = load i32, i32* %arrayidx158, align 4
  %cmp159 = icmp eq i32 %124, 1
  br i1 %cmp159, label %land.lhs.true160, label %lor.lhs.false164

land.lhs.true160:                                 ; preds = %land.lhs.true156
  %125 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %126 = load i32, i32* %i, align 4
  %arrayidx161 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i32 %126
  %arrayidx162 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx161, i32 0, i32 0
  %127 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %127, 2
  br i1 %cmp163, label %if.then173, label %lor.lhs.false164

lor.lhs.false164:                                 ; preds = %land.lhs.true160, %land.lhs.true156
  %128 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %129 = load i32, i32* %i, align 4
  %sub165 = sub nsw i32 %129, 1
  %arrayidx166 = getelementptr inbounds [5 x i32], [5 x i32]* %128, i32 %sub165
  %arrayidx167 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx166, i32 0, i32 0
  %130 = load i32, i32* %arrayidx167, align 4
  %cmp168 = icmp ne i32 %130, 1
  br i1 %cmp168, label %land.lhs.true169, label %if.end174

land.lhs.true169:                                 ; preds = %lor.lhs.false164
  %131 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %132 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds [5 x i32], [5 x i32]* %131, i32 %132
  %arrayidx171 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx170, i32 0, i32 0
  %133 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp eq i32 %133, 2
  br i1 %cmp172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %land.lhs.true169, %land.lhs.true160
  store i32 0, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %land.lhs.true169, %lor.lhs.false164, %land.lhs.true152, %if.end150
  %134 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %135 = load i32, i32* %i, align 4
  %arrayidx175 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i32 %135
  %arrayidx176 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx175, i32 0, i32 0
  %136 = load i32, i32* %arrayidx176, align 4
  %cmp177 = icmp sge i32 %136, 0
  br i1 %cmp177, label %land.lhs.true178, label %if.end199

land.lhs.true178:                                 ; preds = %if.end174
  %137 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %138 = load i32, i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [5 x i32], [5 x i32]* %137, i32 %138
  %arrayidx180 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx179, i32 0, i32 2
  %139 = load i32, i32* %arrayidx180, align 4
  %cmp181 = icmp sge i32 %139, 0
  br i1 %cmp181, label %land.lhs.true182, label %if.end199

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %140 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx183 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i32 %141
  %arrayidx184 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx183, i32 0, i32 0
  %142 = load i32, i32* %arrayidx184, align 4
  %cmp185 = icmp eq i32 %142, 1
  br i1 %cmp185, label %land.lhs.true186, label %lor.lhs.false190

land.lhs.true186:                                 ; preds = %land.lhs.true182
  %143 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %144 = load i32, i32* %i, align 4
  %arrayidx187 = getelementptr inbounds [5 x i32], [5 x i32]* %143, i32 %144
  %arrayidx188 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx187, i32 0, i32 2
  %145 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp ne i32 %145, 1
  br i1 %cmp189, label %if.then198, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %land.lhs.true186, %land.lhs.true182
  %146 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %147 = load i32, i32* %i, align 4
  %arrayidx191 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i32 %147
  %arrayidx192 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx191, i32 0, i32 0
  %148 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp ne i32 %148, 1
  br i1 %cmp193, label %land.lhs.true194, label %if.end199

land.lhs.true194:                                 ; preds = %lor.lhs.false190
  %149 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %150 = load i32, i32* %i, align 4
  %arrayidx195 = getelementptr inbounds [5 x i32], [5 x i32]* %149, i32 %150
  %arrayidx196 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx195, i32 0, i32 2
  %151 = load i32, i32* %arrayidx196, align 4
  %cmp197 = icmp eq i32 %151, 1
  br i1 %cmp197, label %if.then198, label %if.end199

if.then198:                                       ; preds = %land.lhs.true194, %land.lhs.true186
  store i32 0, i32* %retval, align 4
  br label %return

if.end199:                                        ; preds = %land.lhs.true194, %lor.lhs.false190, %land.lhs.true178, %if.end174
  %152 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %153 = load i32, i32* %i, align 4
  %arrayidx200 = getelementptr inbounds [5 x i32], [5 x i32]* %152, i32 %153
  %arrayidx201 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx200, i32 0, i32 4
  %154 = load i32, i32* %arrayidx201, align 4
  %cmp202 = icmp sge i32 %154, 0
  br i1 %cmp202, label %land.lhs.true203, label %if.end224

land.lhs.true203:                                 ; preds = %if.end199
  %155 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %156 = load i32, i32* %i, align 4
  %arrayidx204 = getelementptr inbounds [5 x i32], [5 x i32]* %155, i32 %156
  %arrayidx205 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx204, i32 0, i32 3
  %157 = load i32, i32* %arrayidx205, align 4
  %cmp206 = icmp sge i32 %157, 0
  br i1 %cmp206, label %land.lhs.true207, label %if.end224

land.lhs.true207:                                 ; preds = %land.lhs.true203
  %158 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %159 = load i32, i32* %i, align 4
  %arrayidx208 = getelementptr inbounds [5 x i32], [5 x i32]* %158, i32 %159
  %arrayidx209 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx208, i32 0, i32 4
  %160 = load i32, i32* %arrayidx209, align 4
  %cmp210 = icmp eq i32 %160, 0
  br i1 %cmp210, label %land.lhs.true211, label %lor.lhs.false215

land.lhs.true211:                                 ; preds = %land.lhs.true207
  %161 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %162 = load i32, i32* %i, align 4
  %arrayidx212 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i32 %162
  %arrayidx213 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx212, i32 0, i32 3
  %163 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp ne i32 %163, 1
  br i1 %cmp214, label %if.then223, label %lor.lhs.false215

lor.lhs.false215:                                 ; preds = %land.lhs.true211, %land.lhs.true207
  %164 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %165 = load i32, i32* %i, align 4
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %164, i32 %165
  %arrayidx217 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx216, i32 0, i32 4
  %166 = load i32, i32* %arrayidx217, align 4
  %cmp218 = icmp ne i32 %166, 0
  br i1 %cmp218, label %land.lhs.true219, label %if.end224

land.lhs.true219:                                 ; preds = %lor.lhs.false215
  %167 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %168 = load i32, i32* %i, align 4
  %arrayidx220 = getelementptr inbounds [5 x i32], [5 x i32]* %167, i32 %168
  %arrayidx221 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx220, i32 0, i32 3
  %169 = load i32, i32* %arrayidx221, align 4
  %cmp222 = icmp eq i32 %169, 1
  br i1 %cmp222, label %if.then223, label %if.end224

if.then223:                                       ; preds = %land.lhs.true219, %land.lhs.true211
  store i32 0, i32* %retval, align 4
  br label %return

if.end224:                                        ; preds = %land.lhs.true219, %lor.lhs.false215, %land.lhs.true203, %if.end199
  %170 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %171 = load i32, i32* %i, align 4
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %170, i32 %171
  %arrayidx226 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx225, i32 0, i32 4
  %172 = load i32, i32* %arrayidx226, align 4
  %cmp227 = icmp sge i32 %172, 0
  br i1 %cmp227, label %land.lhs.true228, label %if.end249

land.lhs.true228:                                 ; preds = %if.end224
  %173 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %174 = load i32, i32* %i, align 4
  %arrayidx229 = getelementptr inbounds [5 x i32], [5 x i32]* %173, i32 %174
  %arrayidx230 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx229, i32 0, i32 0
  %175 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp sge i32 %175, 0
  br i1 %cmp231, label %land.lhs.true232, label %if.end249

land.lhs.true232:                                 ; preds = %land.lhs.true228
  %176 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %177 = load i32, i32* %i, align 4
  %arrayidx233 = getelementptr inbounds [5 x i32], [5 x i32]* %176, i32 %177
  %arrayidx234 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx233, i32 0, i32 4
  %178 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp eq i32 %178, 1
  br i1 %cmp235, label %land.lhs.true236, label %lor.lhs.false240

land.lhs.true236:                                 ; preds = %land.lhs.true232
  %179 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %180 = load i32, i32* %i, align 4
  %arrayidx237 = getelementptr inbounds [5 x i32], [5 x i32]* %179, i32 %180
  %arrayidx238 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx237, i32 0, i32 0
  %181 = load i32, i32* %arrayidx238, align 4
  %cmp239 = icmp ne i32 %181, 3
  br i1 %cmp239, label %if.then248, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true236, %land.lhs.true232
  %182 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %183 = load i32, i32* %i, align 4
  %arrayidx241 = getelementptr inbounds [5 x i32], [5 x i32]* %182, i32 %183
  %arrayidx242 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx241, i32 0, i32 4
  %184 = load i32, i32* %arrayidx242, align 4
  %cmp243 = icmp ne i32 %184, 1
  br i1 %cmp243, label %land.lhs.true244, label %if.end249

land.lhs.true244:                                 ; preds = %lor.lhs.false240
  %185 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %186 = load i32, i32* %i, align 4
  %arrayidx245 = getelementptr inbounds [5 x i32], [5 x i32]* %185, i32 %186
  %arrayidx246 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx245, i32 0, i32 0
  %187 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp eq i32 %187, 3
  br i1 %cmp247, label %if.then248, label %if.end249

if.then248:                                       ; preds = %land.lhs.true244, %land.lhs.true236
  store i32 0, i32* %retval, align 4
  br label %return

if.end249:                                        ; preds = %land.lhs.true244, %lor.lhs.false240, %land.lhs.true228, %if.end224
  %188 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %189 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x i32], [5 x i32]* %188, i32 %189
  %arrayidx251 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx250, i32 0, i32 4
  %190 = load i32, i32* %arrayidx251, align 4
  %cmp252 = icmp eq i32 %190, 2
  br i1 %cmp252, label %if.then253, label %if.end292

if.then253:                                       ; preds = %if.end249
  %191 = load i32, i32* %i, align 4
  %cmp254 = icmp eq i32 %191, 0
  br i1 %cmp254, label %land.lhs.true255, label %if.else

land.lhs.true255:                                 ; preds = %if.then253
  %192 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %193 = load i32, i32* %i, align 4
  %add256 = add nsw i32 %193, 1
  %arrayidx257 = getelementptr inbounds [5 x i32], [5 x i32]* %192, i32 %add256
  %arrayidx258 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx257, i32 0, i32 3
  %194 = load i32, i32* %arrayidx258, align 4
  %cmp259 = icmp sge i32 %194, 0
  br i1 %cmp259, label %land.lhs.true260, label %if.else

land.lhs.true260:                                 ; preds = %land.lhs.true255
  %195 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %196 = load i32, i32* %i, align 4
  %add261 = add nsw i32 %196, 1
  %arrayidx262 = getelementptr inbounds [5 x i32], [5 x i32]* %195, i32 %add261
  %arrayidx263 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx262, i32 0, i32 3
  %197 = load i32, i32* %arrayidx263, align 4
  %cmp264 = icmp ne i32 %197, 2
  br i1 %cmp264, label %if.then265, label %if.else

if.then265:                                       ; preds = %land.lhs.true260
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true260, %land.lhs.true255, %if.then253
  %198 = load i32, i32* %i, align 4
  %cmp266 = icmp eq i32 %198, 4
  br i1 %cmp266, label %land.lhs.true267, label %if.else273

land.lhs.true267:                                 ; preds = %if.else
  %199 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %200 = load i32, i32* %i, align 4
  %sub268 = sub nsw i32 %200, 1
  %arrayidx269 = getelementptr inbounds [5 x i32], [5 x i32]* %199, i32 %sub268
  %arrayidx270 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx269, i32 0, i32 3
  %201 = load i32, i32* %arrayidx270, align 4
  %cmp271 = icmp ne i32 %201, 2
  br i1 %cmp271, label %if.then272, label %if.else273

if.then272:                                       ; preds = %land.lhs.true267
  store i32 0, i32* %retval, align 4
  br label %return

if.else273:                                       ; preds = %land.lhs.true267, %if.else
  %202 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %203 = load i32, i32* %i, align 4
  %add274 = add nsw i32 %203, 1
  %arrayidx275 = getelementptr inbounds [5 x i32], [5 x i32]* %202, i32 %add274
  %arrayidx276 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx275, i32 0, i32 3
  %204 = load i32, i32* %arrayidx276, align 4
  %cmp277 = icmp sge i32 %204, 0
  br i1 %cmp277, label %land.lhs.true278, label %if.end289

land.lhs.true278:                                 ; preds = %if.else273
  %205 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %206 = load i32, i32* %i, align 4
  %add279 = add nsw i32 %206, 1
  %arrayidx280 = getelementptr inbounds [5 x i32], [5 x i32]* %205, i32 %add279
  %arrayidx281 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx280, i32 0, i32 3
  %207 = load i32, i32* %arrayidx281, align 4
  %cmp282 = icmp ne i32 %207, 2
  br i1 %cmp282, label %land.lhs.true283, label %if.end289

land.lhs.true283:                                 ; preds = %land.lhs.true278
  %208 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %209 = load i32, i32* %i, align 4
  %sub284 = sub nsw i32 %209, 1
  %arrayidx285 = getelementptr inbounds [5 x i32], [5 x i32]* %208, i32 %sub284
  %arrayidx286 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx285, i32 0, i32 3
  %210 = load i32, i32* %arrayidx286, align 4
  %cmp287 = icmp ne i32 %210, 2
  br i1 %cmp287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %land.lhs.true283
  store i32 0, i32* %retval, align 4
  br label %return

if.end289:                                        ; preds = %land.lhs.true283, %land.lhs.true278, %if.else273
  br label %if.end290

if.end290:                                        ; preds = %if.end289
  br label %if.end291

if.end291:                                        ; preds = %if.end290
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.end249
  %211 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %212 = load i32, i32* %i, align 4
  %arrayidx293 = getelementptr inbounds [5 x i32], [5 x i32]* %211, i32 %212
  %arrayidx294 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx293, i32 0, i32 4
  %213 = load i32, i32* %arrayidx294, align 4
  %cmp295 = icmp eq i32 %213, 1
  br i1 %cmp295, label %if.then296, label %if.end336

if.then296:                                       ; preds = %if.end292
  %214 = load i32, i32* %i, align 4
  %cmp297 = icmp eq i32 %214, 0
  br i1 %cmp297, label %land.lhs.true298, label %if.else309

land.lhs.true298:                                 ; preds = %if.then296
  %215 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %216 = load i32, i32* %i, align 4
  %add299 = add nsw i32 %216, 1
  %arrayidx300 = getelementptr inbounds [5 x i32], [5 x i32]* %215, i32 %add299
  %arrayidx301 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx300, i32 0, i32 3
  %217 = load i32, i32* %arrayidx301, align 4
  %cmp302 = icmp sge i32 %217, 0
  br i1 %cmp302, label %land.lhs.true303, label %if.else309

land.lhs.true303:                                 ; preds = %land.lhs.true298
  %218 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %219 = load i32, i32* %i, align 4
  %add304 = add nsw i32 %219, 1
  %arrayidx305 = getelementptr inbounds [5 x i32], [5 x i32]* %218, i32 %add304
  %arrayidx306 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx305, i32 0, i32 3
  %220 = load i32, i32* %arrayidx306, align 4
  %cmp307 = icmp ne i32 %220, 3
  br i1 %cmp307, label %if.then308, label %if.else309

if.then308:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %retval, align 4
  br label %return

if.else309:                                       ; preds = %land.lhs.true303, %land.lhs.true298, %if.then296
  %221 = load i32, i32* %i, align 4
  %cmp310 = icmp eq i32 %221, 4
  br i1 %cmp310, label %land.lhs.true311, label %if.else317

land.lhs.true311:                                 ; preds = %if.else309
  %222 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %223 = load i32, i32* %i, align 4
  %sub312 = sub nsw i32 %223, 1
  %arrayidx313 = getelementptr inbounds [5 x i32], [5 x i32]* %222, i32 %sub312
  %arrayidx314 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx313, i32 0, i32 3
  %224 = load i32, i32* %arrayidx314, align 4
  %cmp315 = icmp ne i32 %224, 3
  br i1 %cmp315, label %if.then316, label %if.else317

if.then316:                                       ; preds = %land.lhs.true311
  store i32 0, i32* %retval, align 4
  br label %return

if.else317:                                       ; preds = %land.lhs.true311, %if.else309
  %225 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %226 = load i32, i32* %i, align 4
  %add318 = add nsw i32 %226, 1
  %arrayidx319 = getelementptr inbounds [5 x i32], [5 x i32]* %225, i32 %add318
  %arrayidx320 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx319, i32 0, i32 3
  %227 = load i32, i32* %arrayidx320, align 4
  %cmp321 = icmp sge i32 %227, 0
  br i1 %cmp321, label %land.lhs.true322, label %if.end333

land.lhs.true322:                                 ; preds = %if.else317
  %228 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %229 = load i32, i32* %i, align 4
  %add323 = add nsw i32 %229, 1
  %arrayidx324 = getelementptr inbounds [5 x i32], [5 x i32]* %228, i32 %add323
  %arrayidx325 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx324, i32 0, i32 3
  %230 = load i32, i32* %arrayidx325, align 4
  %cmp326 = icmp ne i32 %230, 3
  br i1 %cmp326, label %land.lhs.true327, label %if.end333

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %231 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %232 = load i32, i32* %i, align 4
  %sub328 = sub nsw i32 %232, 1
  %arrayidx329 = getelementptr inbounds [5 x i32], [5 x i32]* %231, i32 %sub328
  %arrayidx330 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx329, i32 0, i32 3
  %233 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp ne i32 %233, 3
  br i1 %cmp331, label %if.then332, label %if.end333

if.then332:                                       ; preds = %land.lhs.true327
  store i32 0, i32* %retval, align 4
  br label %return

if.end333:                                        ; preds = %land.lhs.true327, %land.lhs.true322, %if.else317
  br label %if.end334

if.end334:                                        ; preds = %if.end333
  br label %if.end335

if.end335:                                        ; preds = %if.end334
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end292
  %234 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %235 = load i32, i32* %i, align 4
  %arrayidx337 = getelementptr inbounds [5 x i32], [5 x i32]* %234, i32 %235
  %arrayidx338 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx337, i32 0, i32 4
  %236 = load i32, i32* %arrayidx338, align 4
  %cmp339 = icmp sge i32 %236, 0
  br i1 %cmp339, label %land.lhs.true340, label %if.end361

land.lhs.true340:                                 ; preds = %if.end336
  %237 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %238 = load i32, i32* %i, align 4
  %arrayidx341 = getelementptr inbounds [5 x i32], [5 x i32]* %237, i32 %238
  %arrayidx342 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx341, i32 0, i32 2
  %239 = load i32, i32* %arrayidx342, align 4
  %cmp343 = icmp sge i32 %239, 0
  br i1 %cmp343, label %land.lhs.true344, label %if.end361

land.lhs.true344:                                 ; preds = %land.lhs.true340
  %240 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %241 = load i32, i32* %i, align 4
  %arrayidx345 = getelementptr inbounds [5 x i32], [5 x i32]* %240, i32 %241
  %arrayidx346 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx345, i32 0, i32 4
  %242 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %242, 3
  br i1 %cmp347, label %land.lhs.true348, label %lor.lhs.false352

land.lhs.true348:                                 ; preds = %land.lhs.true344
  %243 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %244 = load i32, i32* %i, align 4
  %arrayidx349 = getelementptr inbounds [5 x i32], [5 x i32]* %243, i32 %244
  %arrayidx350 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx349, i32 0, i32 2
  %245 = load i32, i32* %arrayidx350, align 4
  %cmp351 = icmp ne i32 %245, 3
  br i1 %cmp351, label %if.then360, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %land.lhs.true348, %land.lhs.true344
  %246 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %247 = load i32, i32* %i, align 4
  %arrayidx353 = getelementptr inbounds [5 x i32], [5 x i32]* %246, i32 %247
  %arrayidx354 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx353, i32 0, i32 4
  %248 = load i32, i32* %arrayidx354, align 4
  %cmp355 = icmp ne i32 %248, 3
  br i1 %cmp355, label %land.lhs.true356, label %if.end361

land.lhs.true356:                                 ; preds = %lor.lhs.false352
  %249 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %250 = load i32, i32* %i, align 4
  %arrayidx357 = getelementptr inbounds [5 x i32], [5 x i32]* %249, i32 %250
  %arrayidx358 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx357, i32 0, i32 2
  %251 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp eq i32 %251, 3
  br i1 %cmp359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %land.lhs.true356, %land.lhs.true348
  store i32 0, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %land.lhs.true356, %lor.lhs.false352, %land.lhs.true340, %if.end336
  %252 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %253 = load i32, i32* %i, align 4
  %arrayidx362 = getelementptr inbounds [5 x i32], [5 x i32]* %252, i32 %253
  %arrayidx363 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx362, i32 0, i32 1
  %254 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp sge i32 %254, 0
  br i1 %cmp364, label %land.lhs.true365, label %if.end386

land.lhs.true365:                                 ; preds = %if.end361
  %255 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %256 = load i32, i32* %i, align 4
  %arrayidx366 = getelementptr inbounds [5 x i32], [5 x i32]* %255, i32 %256
  %arrayidx367 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx366, i32 0, i32 4
  %257 = load i32, i32* %arrayidx367, align 4
  %cmp368 = icmp sge i32 %257, 0
  br i1 %cmp368, label %land.lhs.true369, label %if.end386

land.lhs.true369:                                 ; preds = %land.lhs.true365
  %258 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %259 = load i32, i32* %i, align 4
  %arrayidx370 = getelementptr inbounds [5 x i32], [5 x i32]* %258, i32 %259
  %arrayidx371 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx370, i32 0, i32 1
  %260 = load i32, i32* %arrayidx371, align 4
  %cmp372 = icmp eq i32 %260, 3
  br i1 %cmp372, label %land.lhs.true373, label %lor.lhs.false377

land.lhs.true373:                                 ; preds = %land.lhs.true369
  %261 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %262 = load i32, i32* %i, align 4
  %arrayidx374 = getelementptr inbounds [5 x i32], [5 x i32]* %261, i32 %262
  %arrayidx375 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx374, i32 0, i32 4
  %263 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp ne i32 %263, 4
  br i1 %cmp376, label %if.then385, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %land.lhs.true373, %land.lhs.true369
  %264 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %265 = load i32, i32* %i, align 4
  %arrayidx378 = getelementptr inbounds [5 x i32], [5 x i32]* %264, i32 %265
  %arrayidx379 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx378, i32 0, i32 1
  %266 = load i32, i32* %arrayidx379, align 4
  %cmp380 = icmp ne i32 %266, 3
  br i1 %cmp380, label %land.lhs.true381, label %if.end386

land.lhs.true381:                                 ; preds = %lor.lhs.false377
  %267 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %268 = load i32, i32* %i, align 4
  %arrayidx382 = getelementptr inbounds [5 x i32], [5 x i32]* %267, i32 %268
  %arrayidx383 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx382, i32 0, i32 4
  %269 = load i32, i32* %arrayidx383, align 4
  %cmp384 = icmp eq i32 %269, 4
  br i1 %cmp384, label %if.then385, label %if.end386

if.then385:                                       ; preds = %land.lhs.true381, %land.lhs.true373
  store i32 0, i32* %retval, align 4
  br label %return

if.end386:                                        ; preds = %land.lhs.true381, %lor.lhs.false377, %land.lhs.true365, %if.end361
  %270 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %271 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [5 x i32], [5 x i32]* %270, i32 %271
  %arrayidx388 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx387, i32 0, i32 1
  %272 = load i32, i32* %arrayidx388, align 4
  %cmp389 = icmp eq i32 %272, 4
  br i1 %cmp389, label %land.lhs.true390, label %if.end410

land.lhs.true390:                                 ; preds = %if.end386
  %273 = load i32, i32* %i, align 4
  %cmp391 = icmp slt i32 %273, 4
  br i1 %cmp391, label %land.lhs.true392, label %lor.lhs.false402

land.lhs.true392:                                 ; preds = %land.lhs.true390
  %274 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %275 = load i32, i32* %i, align 4
  %add393 = add nsw i32 %275, 1
  %arrayidx394 = getelementptr inbounds [5 x i32], [5 x i32]* %274, i32 %add393
  %arrayidx395 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx394, i32 0, i32 0
  %276 = load i32, i32* %arrayidx395, align 4
  %cmp396 = icmp sge i32 %276, 0
  br i1 %cmp396, label %land.lhs.true397, label %lor.lhs.false402

land.lhs.true397:                                 ; preds = %land.lhs.true392
  %277 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %278 = load i32, i32* %i, align 4
  %add398 = add nsw i32 %278, 1
  %arrayidx399 = getelementptr inbounds [5 x i32], [5 x i32]* %277, i32 %add398
  %arrayidx400 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx399, i32 0, i32 0
  %279 = load i32, i32* %arrayidx400, align 4
  %cmp401 = icmp ne i32 %279, 4
  br i1 %cmp401, label %if.then409, label %lor.lhs.false402

lor.lhs.false402:                                 ; preds = %land.lhs.true397, %land.lhs.true392, %land.lhs.true390
  %280 = load i32, i32* %i, align 4
  %cmp403 = icmp sgt i32 %280, 0
  br i1 %cmp403, label %land.lhs.true404, label %if.end410

land.lhs.true404:                                 ; preds = %lor.lhs.false402
  %281 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %282 = load i32, i32* %i, align 4
  %sub405 = sub nsw i32 %282, 1
  %arrayidx406 = getelementptr inbounds [5 x i32], [5 x i32]* %281, i32 %sub405
  %arrayidx407 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx406, i32 0, i32 0
  %283 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp ne i32 %283, 4
  br i1 %cmp408, label %if.then409, label %if.end410

if.then409:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  store i32 0, i32* %retval, align 4
  br label %return

if.end410:                                        ; preds = %land.lhs.true404, %lor.lhs.false402, %if.end386
  %284 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %285 = load i32, i32* %i, align 4
  %arrayidx411 = getelementptr inbounds [5 x i32], [5 x i32]* %284, i32 %285
  %arrayidx412 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx411, i32 0, i32 4
  %286 = load i32, i32* %arrayidx412, align 4
  %cmp413 = icmp eq i32 %286, 2
  br i1 %cmp413, label %if.then414, label %if.end454

if.then414:                                       ; preds = %if.end410
  %287 = load i32, i32* %i, align 4
  %cmp415 = icmp eq i32 %287, 0
  br i1 %cmp415, label %land.lhs.true416, label %if.else427

land.lhs.true416:                                 ; preds = %if.then414
  %288 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %289 = load i32, i32* %i, align 4
  %add417 = add nsw i32 %289, 1
  %arrayidx418 = getelementptr inbounds [5 x i32], [5 x i32]* %288, i32 %add417
  %arrayidx419 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx418, i32 0, i32 2
  %290 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp sge i32 %290, 0
  br i1 %cmp420, label %land.lhs.true421, label %if.else427

land.lhs.true421:                                 ; preds = %land.lhs.true416
  %291 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %292 = load i32, i32* %i, align 4
  %add422 = add nsw i32 %292, 1
  %arrayidx423 = getelementptr inbounds [5 x i32], [5 x i32]* %291, i32 %add422
  %arrayidx424 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx423, i32 0, i32 2
  %293 = load i32, i32* %arrayidx424, align 4
  %cmp425 = icmp ne i32 %293, 4
  br i1 %cmp425, label %if.then426, label %if.else427

if.then426:                                       ; preds = %land.lhs.true421
  store i32 0, i32* %retval, align 4
  br label %return

if.else427:                                       ; preds = %land.lhs.true421, %land.lhs.true416, %if.then414
  %294 = load i32, i32* %i, align 4
  %cmp428 = icmp eq i32 %294, 4
  br i1 %cmp428, label %land.lhs.true429, label %if.else435

land.lhs.true429:                                 ; preds = %if.else427
  %295 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %296 = load i32, i32* %i, align 4
  %sub430 = sub nsw i32 %296, 1
  %arrayidx431 = getelementptr inbounds [5 x i32], [5 x i32]* %295, i32 %sub430
  %arrayidx432 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx431, i32 0, i32 2
  %297 = load i32, i32* %arrayidx432, align 4
  %cmp433 = icmp ne i32 %297, 4
  br i1 %cmp433, label %if.then434, label %if.else435

if.then434:                                       ; preds = %land.lhs.true429
  store i32 0, i32* %retval, align 4
  br label %return

if.else435:                                       ; preds = %land.lhs.true429, %if.else427
  %298 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %299 = load i32, i32* %i, align 4
  %add436 = add nsw i32 %299, 1
  %arrayidx437 = getelementptr inbounds [5 x i32], [5 x i32]* %298, i32 %add436
  %arrayidx438 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx437, i32 0, i32 2
  %300 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp sge i32 %300, 0
  br i1 %cmp439, label %land.lhs.true440, label %if.end451

land.lhs.true440:                                 ; preds = %if.else435
  %301 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %302 = load i32, i32* %i, align 4
  %add441 = add nsw i32 %302, 1
  %arrayidx442 = getelementptr inbounds [5 x i32], [5 x i32]* %301, i32 %add441
  %arrayidx443 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx442, i32 0, i32 2
  %303 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %303, 4
  br i1 %cmp444, label %land.lhs.true445, label %if.end451

land.lhs.true445:                                 ; preds = %land.lhs.true440
  %304 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %305 = load i32, i32* %i, align 4
  %sub446 = sub nsw i32 %305, 1
  %arrayidx447 = getelementptr inbounds [5 x i32], [5 x i32]* %304, i32 %sub446
  %arrayidx448 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx447, i32 0, i32 2
  %306 = load i32, i32* %arrayidx448, align 4
  %cmp449 = icmp ne i32 %306, 4
  br i1 %cmp449, label %if.then450, label %if.end451

if.then450:                                       ; preds = %land.lhs.true445
  store i32 0, i32* %retval, align 4
  br label %return

if.end451:                                        ; preds = %land.lhs.true445, %land.lhs.true440, %if.else435
  br label %if.end452

if.end452:                                        ; preds = %if.end451
  br label %if.end453

if.end453:                                        ; preds = %if.end452
  br label %if.end454

if.end454:                                        ; preds = %if.end453, %if.end410
  br label %for.inc

for.inc:                                          ; preds = %if.end454
  %307 = load i32, i32* %i, align 4
  %inc = add nsw i32 %307, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %308 = load i32, i32* %c_add, align 4
  %309 = load i32, i32* %c_or, align 4
  %cmp455 = icmp ne i32 %308, %309
  br i1 %cmp455, label %if.then464, label %lor.lhs.false456

lor.lhs.false456:                                 ; preds = %for.end
  %310 = load i32, i32* %m_add, align 4
  %311 = load i32, i32* %m_or, align 4
  %cmp457 = icmp ne i32 %310, %311
  br i1 %cmp457, label %if.then464, label %lor.lhs.false458

lor.lhs.false458:                                 ; preds = %lor.lhs.false456
  %312 = load i32, i32* %d_add, align 4
  %313 = load i32, i32* %d_or, align 4
  %cmp459 = icmp ne i32 %312, %313
  br i1 %cmp459, label %if.then464, label %lor.lhs.false460

lor.lhs.false460:                                 ; preds = %lor.lhs.false458
  %314 = load i32, i32* %a_add, align 4
  %315 = load i32, i32* %a_or, align 4
  %cmp461 = icmp ne i32 %314, %315
  br i1 %cmp461, label %if.then464, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %lor.lhs.false460
  %316 = load i32, i32* %s_add, align 4
  %317 = load i32, i32* %s_or, align 4
  %cmp463 = icmp ne i32 %316, %317
  br i1 %cmp463, label %if.then464, label %if.end465

if.then464:                                       ; preds = %lor.lhs.false462, %lor.lhs.false460, %lor.lhs.false458, %lor.lhs.false456, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end465:                                        ; preds = %lor.lhs.false462
  %318 = load i32, i32* %c_add, align 4
  %cmp466 = icmp ne i32 %318, 31
  br i1 %cmp466, label %if.then475, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %if.end465
  %319 = load i32, i32* %m_add, align 4
  %cmp468 = icmp ne i32 %319, 31
  br i1 %cmp468, label %if.then475, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %lor.lhs.false467
  %320 = load i32, i32* %d_add, align 4
  %cmp470 = icmp ne i32 %320, 31
  br i1 %cmp470, label %if.then475, label %lor.lhs.false471

lor.lhs.false471:                                 ; preds = %lor.lhs.false469
  %321 = load i32, i32* %a_add, align 4
  %cmp472 = icmp ne i32 %321, 31
  br i1 %cmp472, label %if.then475, label %lor.lhs.false473

lor.lhs.false473:                                 ; preds = %lor.lhs.false471
  %322 = load i32, i32* %s_add, align 4
  %cmp474 = icmp ne i32 %322, 31
  br i1 %cmp474, label %if.then475, label %if.end476

if.then475:                                       ; preds = %lor.lhs.false473, %lor.lhs.false471, %lor.lhs.false469, %lor.lhs.false467, %if.end465
  store i32 1, i32* %retval, align 4
  br label %return

if.end476:                                        ; preds = %lor.lhs.false473
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end476, %if.then475, %if.then464, %if.then450, %if.then434, %if.then426, %if.then409, %if.then385, %if.then360, %if.then332, %if.then316, %if.then308, %if.then288, %if.then272, %if.then265, %if.then248, %if.then223, %if.then198, %if.then173, %if.then149, %if.then124, %if.then99, %if.then12, %if.then
  %323 = load i32, i32* %retval, align 4
  ret i32 %323
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @bruteFill([5 x i32]* %ha, i32 %hno, i32 %attr) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %hno.addr = alloca i32, align 4
  %attr.addr = alloca i32, align 4
  %stat = alloca i32, align 4
  %hb = alloca [5 x [5 x i32]], align 16
  %i = alloca i32, align 4
  %nexthno = alloca i32, align 4
  %nextattr = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 %hno, i32* %hno.addr, align 4
  store i32 %attr, i32* %attr.addr, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %call = call i32 @checkHouses([5 x i32]* %0)
  store i32 %call, i32* %stat, align 4
  %1 = load i32, i32* %stat, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %stat, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* %stat, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %4 = bitcast [5 x i32]* %arraydecay to i8*
  %5 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %6 = bitcast [5 x i32]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 4 %6, i32 100, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %7, 5
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %hno.addr, align 4
  %arrayidx = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 %9
  %10 = load i32, i32* %attr.addr, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %call5 = call i32 @checkHouses([5 x i32]* %arraydecay4)
  store i32 %call5, i32* %stat, align 4
  %11 = load i32, i32* %stat, align 4
  %cmp6 = icmp ne i32 %11, 0
  br i1 %cmp6, label %if.then7, label %if.end18

if.then7:                                         ; preds = %for.body
  %12 = load i32, i32* %attr.addr, align 4
  %cmp8 = icmp slt i32 %12, 4
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %13 = load i32, i32* %attr.addr, align 4
  %add = add nsw i32 %13, 1
  store i32 %add, i32* %nextattr, align 4
  %14 = load i32, i32* %hno.addr, align 4
  store i32 %14, i32* %nexthno, align 4
  br label %if.end11

if.else:                                          ; preds = %if.then7
  store i32 0, i32* %nextattr, align 4
  %15 = load i32, i32* %hno.addr, align 4
  %add10 = add nsw i32 %15, 1
  store i32 %add10, i32* %nexthno, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %arraydecay12 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %16 = load i32, i32* %nexthno, align 4
  %17 = load i32, i32* %nextattr, align 4
  %call13 = call i32 @bruteFill([5 x i32]* %arraydecay12, i32 %16, i32 %17)
  store i32 %call13, i32* %stat, align 4
  %18 = load i32, i32* %stat, align 4
  %cmp14 = icmp ne i32 %18, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end11
  %19 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %20 = bitcast [5 x i32]* %19 to i8*
  %arraydecay16 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %21 = bitcast [5 x i32]* %arraydecay16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 100, i1 false)
  %22 = load i32, i32* %stat, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ha = alloca [5 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x [5 x i32]]* %ha to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 -1, i32 100, i1 false)
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  %call = call i32 @bruteFill([5 x i32]* %arraydecay, i32 0, i32 0)
  %arraydecay1 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  call void @printHouses([5 x i32]* %arraydecay1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %5, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sge i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sge i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp sge i32 %23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sge i32 %30, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp sge i32 %37, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %arrayidx47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printHouses()

; entering Souper's runOnFunction() for checkHouses()

; ModuleID = './Zebra_puzzle.c.bc'
source_filename = "./Zebra_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Red\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Green\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"White\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Yellow\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blue\00", align 1
@__const.printHouses.color = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [8 x i8] c"English\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Swede\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Dane\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"German\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Norwegian\00", align 1
@__const.printHouses.man = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"Tea\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Coffee\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Milk\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Beer\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@__const.printHouses.drink = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0)], align 16
@.str.15 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Birds\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Cats\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"Zebra\00", align 1
@__const.printHouses.animal = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)], align 16
@.str.20 = private unnamed_addr constant [9 x i8] c"PallMall\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"Dunhill\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Blend\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"BlueMaster\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Prince\00", align 1
@__const.printHouses.smoke = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.25 = private unnamed_addr constant [50 x i8] c"%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"Man\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"Drink\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"Animal\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Smoke\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"%-10d\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"%-10.10s\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"%-10.10s\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"-\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printHouses([5 x i32]* %ha) #0 {
entry:
  %ha.addr = alloca [5 x i32]*, align 4
  %color = alloca [5 x i8*], align 16
  %man = alloca [5 x i8*], align 16
  %drink = alloca [5 x i8*], align 16
  %animal = alloca [5 x i8*], align 16
  %smoke = alloca [5 x i8*], align 16
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  %0 = bitcast [5 x i8*]* %color to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.color to i8*), i32 20, i1 false)
  %1 = bitcast [5 x i8*]* %man to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.man to i8*), i32 20, i1 false)
  %2 = bitcast [5 x i8*]* %drink to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.drink to i8*), i32 20, i1 false)
  %3 = bitcast [5 x i8*]* %animal to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.animal to i8*), i32 20, i1 false)
  %4 = bitcast [5 x i8*]* %smoke to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.smoke to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %5, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0), i32 %6)
  %7 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %7, i32 %8
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 0
  %9 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sge i32 %9, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %10, i32 %11
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx4, i32 0, i32 0
  %12 = load i32, i32* %arrayidx5, align 4
  %arrayidx6 = getelementptr inbounds [5 x i8*], [5 x i8*]* %color, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %13)
  br label %if.end

if.else:                                          ; preds = %for.body
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %14, i32 %15
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %16 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp sge i32 %16, 0
  br i1 %cmp11, label %if.then12, label %if.else17

if.then12:                                        ; preds = %if.end
  %17 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i32 %18
  %arrayidx14 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 1
  %19 = load i32, i32* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8*], [5 x i8*]* %man, i32 0, i32 %19
  %20 = load i8*, i8** %arrayidx15, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %20)
  br label %if.end19

if.else17:                                        ; preds = %if.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then12
  %21 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i32 %22
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx20, i32 0, i32 2
  %23 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp sge i32 %23, 0
  br i1 %cmp22, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.end19
  %24 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i32 %25
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx24, i32 0, i32 2
  %26 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [5 x i8*], [5 x i8*]* %drink, i32 0, i32 %26
  %27 = load i8*, i8** %arrayidx26, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %27)
  br label %if.end30

if.else28:                                        ; preds = %if.end19
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then23
  %28 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i32 %29
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 3
  %30 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %30, 0
  br i1 %cmp33, label %if.then34, label %if.else39

if.then34:                                        ; preds = %if.end30
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx35, i32 0, i32 3
  %33 = load i32, i32* %arrayidx36, align 4
  %arrayidx37 = getelementptr inbounds [5 x i8*], [5 x i8*]* %animal, i32 0, i32 %33
  %34 = load i8*, i8** %arrayidx37, align 4
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %34)
  br label %if.end41

if.else39:                                        ; preds = %if.end30
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then34
  %35 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %35, i32 %36
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 4
  %37 = load i32, i32* %arrayidx43, align 4
  %cmp44 = icmp sge i32 %37, 0
  br i1 %cmp44, label %if.then45, label %if.else50

if.then45:                                        ; preds = %if.end41
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 4
  %40 = load i32, i32* %arrayidx47, align 4
  %arrayidx48 = getelementptr inbounds [5 x i8*], [5 x i8*]* %smoke, i32 0, i32 %40
  %41 = load i8*, i8** %arrayidx48, align 4
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* %41)
  br label %if.end52

if.else50:                                        ; preds = %if.end41
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then45
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @checkHouses([5 x i32]* %ha) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %c_add = alloca i32, align 4
  %c_or = alloca i32, align 4
  %m_add = alloca i32, align 4
  %m_or = alloca i32, align 4
  %d_add = alloca i32, align 4
  %d_or = alloca i32, align 4
  %a_add = alloca i32, align 4
  %a_or = alloca i32, align 4
  %s_add = alloca i32, align 4
  %s_or = alloca i32, align 4
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 0, i32* %c_add, align 4
  store i32 0, i32* %c_or, align 4
  store i32 0, i32* %m_add, align 4
  store i32 0, i32* %m_or, align 4
  store i32 0, i32* %d_add, align 4
  store i32 0, i32* %d_or, align 4
  store i32 0, i32* %a_add, align 4
  store i32 0, i32* %a_or, align 4
  store i32 0, i32* %s_add, align 4
  store i32 0, i32* %s_or, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %0, i32 2
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 2
  %1 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i32 2
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %3, 2
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %4, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx5, i32 0, i32 1
  %5 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sge i32 %5, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.end
  %6 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %6, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %7, 4
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true8
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %8 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %8, 5
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i32 %10
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx15, i32 0, i32 0
  %11 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %11, 0
  br i1 %cmp17, label %if.then18, label %if.end24

if.then18:                                        ; preds = %for.body
  %12 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [5 x i32], [5 x i32]* %12, i32 %13
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 0
  %14 = load i32, i32* %arrayidx20, align 4
  %shl = shl i32 1, %14
  %15 = load i32, i32* %c_add, align 4
  %add = add nsw i32 %15, %shl
  store i32 %add, i32* %c_add, align 4
  %16 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %16, i32 %17
  %arrayidx22 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx21, i32 0, i32 0
  %18 = load i32, i32* %arrayidx22, align 4
  %shl23 = shl i32 1, %18
  %19 = load i32, i32* %c_or, align 4
  %or = or i32 %19, %shl23
  store i32 %or, i32* %c_or, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %for.body
  %20 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %20, i32 %21
  %arrayidx26 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx25, i32 0, i32 1
  %22 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp sge i32 %22, 0
  br i1 %cmp27, label %if.then28, label %if.end37

if.then28:                                        ; preds = %if.end24
  %23 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i32 %24
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx29, i32 0, i32 1
  %25 = load i32, i32* %arrayidx30, align 4
  %shl31 = shl i32 1, %25
  %26 = load i32, i32* %m_add, align 4
  %add32 = add nsw i32 %26, %shl31
  store i32 %add32, i32* %m_add, align 4
  %27 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i32 %28
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 1
  %29 = load i32, i32* %arrayidx34, align 4
  %shl35 = shl i32 1, %29
  %30 = load i32, i32* %m_or, align 4
  %or36 = or i32 %30, %shl35
  store i32 %or36, i32* %m_or, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.then28, %if.end24
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx39 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx38, i32 0, i32 2
  %33 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp sge i32 %33, 0
  br i1 %cmp40, label %if.then41, label %if.end50

if.then41:                                        ; preds = %if.end37
  %34 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i32 %35
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 2
  %36 = load i32, i32* %arrayidx43, align 4
  %shl44 = shl i32 1, %36
  %37 = load i32, i32* %d_add, align 4
  %add45 = add nsw i32 %37, %shl44
  store i32 %add45, i32* %d_add, align 4
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 2
  %40 = load i32, i32* %arrayidx47, align 4
  %shl48 = shl i32 1, %40
  %41 = load i32, i32* %d_or, align 4
  %or49 = or i32 %41, %shl48
  store i32 %or49, i32* %d_or, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then41, %if.end37
  %42 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [5 x i32], [5 x i32]* %42, i32 %43
  %arrayidx52 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx51, i32 0, i32 3
  %44 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp sge i32 %44, 0
  br i1 %cmp53, label %if.then54, label %if.end63

if.then54:                                        ; preds = %if.end50
  %45 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds [5 x i32], [5 x i32]* %45, i32 %46
  %arrayidx56 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx55, i32 0, i32 3
  %47 = load i32, i32* %arrayidx56, align 4
  %shl57 = shl i32 1, %47
  %48 = load i32, i32* %a_add, align 4
  %add58 = add nsw i32 %48, %shl57
  store i32 %add58, i32* %a_add, align 4
  %49 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds [5 x i32], [5 x i32]* %49, i32 %50
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx59, i32 0, i32 3
  %51 = load i32, i32* %arrayidx60, align 4
  %shl61 = shl i32 1, %51
  %52 = load i32, i32* %a_or, align 4
  %or62 = or i32 %52, %shl61
  store i32 %or62, i32* %a_or, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then54, %if.end50
  %53 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds [5 x i32], [5 x i32]* %53, i32 %54
  %arrayidx65 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx64, i32 0, i32 4
  %55 = load i32, i32* %arrayidx65, align 4
  %cmp66 = icmp sge i32 %55, 0
  br i1 %cmp66, label %if.then67, label %if.end76

if.then67:                                        ; preds = %if.end63
  %56 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i32 %57
  %arrayidx69 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx68, i32 0, i32 4
  %58 = load i32, i32* %arrayidx69, align 4
  %shl70 = shl i32 1, %58
  %59 = load i32, i32* %s_add, align 4
  %add71 = add nsw i32 %59, %shl70
  store i32 %add71, i32* %s_add, align 4
  %60 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx72 = getelementptr inbounds [5 x i32], [5 x i32]* %60, i32 %61
  %arrayidx73 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx72, i32 0, i32 4
  %62 = load i32, i32* %arrayidx73, align 4
  %shl74 = shl i32 1, %62
  %63 = load i32, i32* %s_or, align 4
  %or75 = or i32 %63, %shl74
  store i32 %or75, i32* %s_or, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then67, %if.end63
  %64 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %65 = load i32, i32* %i, align 4
  %arrayidx77 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i32 %65
  %arrayidx78 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx77, i32 0, i32 1
  %66 = load i32, i32* %arrayidx78, align 4
  %cmp79 = icmp sge i32 %66, 0
  br i1 %cmp79, label %land.lhs.true80, label %if.end100

land.lhs.true80:                                  ; preds = %if.end76
  %67 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [5 x i32], [5 x i32]* %67, i32 %68
  %arrayidx82 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx81, i32 0, i32 0
  %69 = load i32, i32* %arrayidx82, align 4
  %cmp83 = icmp sge i32 %69, 0
  br i1 %cmp83, label %land.lhs.true84, label %if.end100

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %70 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %71 = load i32, i32* %i, align 4
  %arrayidx85 = getelementptr inbounds [5 x i32], [5 x i32]* %70, i32 %71
  %arrayidx86 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx85, i32 0, i32 1
  %72 = load i32, i32* %arrayidx86, align 4
  %cmp87 = icmp eq i32 %72, 0
  br i1 %cmp87, label %land.lhs.true88, label %lor.lhs.false

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %73 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx89 = getelementptr inbounds [5 x i32], [5 x i32]* %73, i32 %74
  %arrayidx90 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx89, i32 0, i32 0
  %75 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp ne i32 %75, 0
  br i1 %cmp91, label %if.then99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true88, %land.lhs.true84
  %76 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [5 x i32], [5 x i32]* %76, i32 %77
  %arrayidx93 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx92, i32 0, i32 1
  %78 = load i32, i32* %arrayidx93, align 4
  %cmp94 = icmp ne i32 %78, 0
  br i1 %cmp94, label %land.lhs.true95, label %if.end100

land.lhs.true95:                                  ; preds = %lor.lhs.false
  %79 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx96 = getelementptr inbounds [5 x i32], [5 x i32]* %79, i32 %80
  %arrayidx97 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx96, i32 0, i32 0
  %81 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp eq i32 %81, 0
  br i1 %cmp98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.lhs.true95, %land.lhs.true88
  store i32 0, i32* %retval, align 4
  br label %return

if.end100:                                        ; preds = %land.lhs.true95, %lor.lhs.false, %land.lhs.true80, %if.end76
  %82 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %83 = load i32, i32* %i, align 4
  %arrayidx101 = getelementptr inbounds [5 x i32], [5 x i32]* %82, i32 %83
  %arrayidx102 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx101, i32 0, i32 1
  %84 = load i32, i32* %arrayidx102, align 4
  %cmp103 = icmp sge i32 %84, 0
  br i1 %cmp103, label %land.lhs.true104, label %if.end125

land.lhs.true104:                                 ; preds = %if.end100
  %85 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %85, i32 %86
  %arrayidx106 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx105, i32 0, i32 3
  %87 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sge i32 %87, 0
  br i1 %cmp107, label %land.lhs.true108, label %if.end125

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %88 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %89 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [5 x i32], [5 x i32]* %88, i32 %89
  %arrayidx110 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx109, i32 0, i32 1
  %90 = load i32, i32* %arrayidx110, align 4
  %cmp111 = icmp eq i32 %90, 1
  br i1 %cmp111, label %land.lhs.true112, label %lor.lhs.false116

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %91 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %92 = load i32, i32* %i, align 4
  %arrayidx113 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i32 %92
  %arrayidx114 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx113, i32 0, i32 3
  %93 = load i32, i32* %arrayidx114, align 4
  %cmp115 = icmp ne i32 %93, 0
  br i1 %cmp115, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true112, %land.lhs.true108
  %94 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx117 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i32 %95
  %arrayidx118 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx117, i32 0, i32 1
  %96 = load i32, i32* %arrayidx118, align 4
  %cmp119 = icmp ne i32 %96, 1
  br i1 %cmp119, label %land.lhs.true120, label %if.end125

land.lhs.true120:                                 ; preds = %lor.lhs.false116
  %97 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds [5 x i32], [5 x i32]* %97, i32 %98
  %arrayidx122 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx121, i32 0, i32 3
  %99 = load i32, i32* %arrayidx122, align 4
  %cmp123 = icmp eq i32 %99, 0
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %land.lhs.true120, %land.lhs.true112
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %land.lhs.true120, %lor.lhs.false116, %land.lhs.true104, %if.end100
  %100 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %101 = load i32, i32* %i, align 4
  %arrayidx126 = getelementptr inbounds [5 x i32], [5 x i32]* %100, i32 %101
  %arrayidx127 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx126, i32 0, i32 1
  %102 = load i32, i32* %arrayidx127, align 4
  %cmp128 = icmp sge i32 %102, 0
  br i1 %cmp128, label %land.lhs.true129, label %if.end150

land.lhs.true129:                                 ; preds = %if.end125
  %103 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %104 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds [5 x i32], [5 x i32]* %103, i32 %104
  %arrayidx131 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx130, i32 0, i32 2
  %105 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp sge i32 %105, 0
  br i1 %cmp132, label %land.lhs.true133, label %if.end150

land.lhs.true133:                                 ; preds = %land.lhs.true129
  %106 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %107 = load i32, i32* %i, align 4
  %arrayidx134 = getelementptr inbounds [5 x i32], [5 x i32]* %106, i32 %107
  %arrayidx135 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx134, i32 0, i32 1
  %108 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp eq i32 %108, 2
  br i1 %cmp136, label %land.lhs.true137, label %lor.lhs.false141

land.lhs.true137:                                 ; preds = %land.lhs.true133
  %109 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %110 = load i32, i32* %i, align 4
  %arrayidx138 = getelementptr inbounds [5 x i32], [5 x i32]* %109, i32 %110
  %arrayidx139 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx138, i32 0, i32 2
  %111 = load i32, i32* %arrayidx139, align 4
  %cmp140 = icmp ne i32 %111, 0
  br i1 %cmp140, label %if.then149, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %land.lhs.true137, %land.lhs.true133
  %112 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %113 = load i32, i32* %i, align 4
  %arrayidx142 = getelementptr inbounds [5 x i32], [5 x i32]* %112, i32 %113
  %arrayidx143 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx142, i32 0, i32 1
  %114 = load i32, i32* %arrayidx143, align 4
  %cmp144 = icmp ne i32 %114, 2
  br i1 %cmp144, label %land.lhs.true145, label %if.end150

land.lhs.true145:                                 ; preds = %lor.lhs.false141
  %115 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %116 = load i32, i32* %i, align 4
  %arrayidx146 = getelementptr inbounds [5 x i32], [5 x i32]* %115, i32 %116
  %arrayidx147 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx146, i32 0, i32 2
  %117 = load i32, i32* %arrayidx147, align 4
  %cmp148 = icmp eq i32 %117, 0
  br i1 %cmp148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %land.lhs.true145, %land.lhs.true137
  store i32 0, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %land.lhs.true145, %lor.lhs.false141, %land.lhs.true129, %if.end125
  %118 = load i32, i32* %i, align 4
  %cmp151 = icmp sgt i32 %118, 0
  br i1 %cmp151, label %land.lhs.true152, label %if.end174

land.lhs.true152:                                 ; preds = %if.end150
  %119 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %120 = load i32, i32* %i, align 4
  %arrayidx153 = getelementptr inbounds [5 x i32], [5 x i32]* %119, i32 %120
  %arrayidx154 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx153, i32 0, i32 0
  %121 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp sge i32 %121, 0
  br i1 %cmp155, label %land.lhs.true156, label %if.end174

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %122 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %123 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %123, 1
  %arrayidx157 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i32 %sub
  %arrayidx158 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx157, i32 0, i32 0
  %124 = load i32, i32* %arrayidx158, align 4
  %cmp159 = icmp eq i32 %124, 1
  br i1 %cmp159, label %land.lhs.true160, label %lor.lhs.false164

land.lhs.true160:                                 ; preds = %land.lhs.true156
  %125 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %126 = load i32, i32* %i, align 4
  %arrayidx161 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i32 %126
  %arrayidx162 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx161, i32 0, i32 0
  %127 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %127, 2
  br i1 %cmp163, label %if.then173, label %lor.lhs.false164

lor.lhs.false164:                                 ; preds = %land.lhs.true160, %land.lhs.true156
  %128 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %129 = load i32, i32* %i, align 4
  %sub165 = sub nsw i32 %129, 1
  %arrayidx166 = getelementptr inbounds [5 x i32], [5 x i32]* %128, i32 %sub165
  %arrayidx167 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx166, i32 0, i32 0
  %130 = load i32, i32* %arrayidx167, align 4
  %cmp168 = icmp ne i32 %130, 1
  br i1 %cmp168, label %land.lhs.true169, label %if.end174

land.lhs.true169:                                 ; preds = %lor.lhs.false164
  %131 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %132 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds [5 x i32], [5 x i32]* %131, i32 %132
  %arrayidx171 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx170, i32 0, i32 0
  %133 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp eq i32 %133, 2
  br i1 %cmp172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %land.lhs.true169, %land.lhs.true160
  store i32 0, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %land.lhs.true169, %lor.lhs.false164, %land.lhs.true152, %if.end150
  %134 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %135 = load i32, i32* %i, align 4
  %arrayidx175 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i32 %135
  %arrayidx176 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx175, i32 0, i32 0
  %136 = load i32, i32* %arrayidx176, align 4
  %cmp177 = icmp sge i32 %136, 0
  br i1 %cmp177, label %land.lhs.true178, label %if.end199

land.lhs.true178:                                 ; preds = %if.end174
  %137 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %138 = load i32, i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [5 x i32], [5 x i32]* %137, i32 %138
  %arrayidx180 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx179, i32 0, i32 2
  %139 = load i32, i32* %arrayidx180, align 4
  %cmp181 = icmp sge i32 %139, 0
  br i1 %cmp181, label %land.lhs.true182, label %if.end199

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %140 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx183 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i32 %141
  %arrayidx184 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx183, i32 0, i32 0
  %142 = load i32, i32* %arrayidx184, align 4
  %cmp185 = icmp eq i32 %142, 1
  br i1 %cmp185, label %land.lhs.true186, label %lor.lhs.false190

land.lhs.true186:                                 ; preds = %land.lhs.true182
  %143 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %144 = load i32, i32* %i, align 4
  %arrayidx187 = getelementptr inbounds [5 x i32], [5 x i32]* %143, i32 %144
  %arrayidx188 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx187, i32 0, i32 2
  %145 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp ne i32 %145, 1
  br i1 %cmp189, label %if.then198, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %land.lhs.true186, %land.lhs.true182
  %146 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %147 = load i32, i32* %i, align 4
  %arrayidx191 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i32 %147
  %arrayidx192 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx191, i32 0, i32 0
  %148 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp ne i32 %148, 1
  br i1 %cmp193, label %land.lhs.true194, label %if.end199

land.lhs.true194:                                 ; preds = %lor.lhs.false190
  %149 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %150 = load i32, i32* %i, align 4
  %arrayidx195 = getelementptr inbounds [5 x i32], [5 x i32]* %149, i32 %150
  %arrayidx196 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx195, i32 0, i32 2
  %151 = load i32, i32* %arrayidx196, align 4
  %cmp197 = icmp eq i32 %151, 1
  br i1 %cmp197, label %if.then198, label %if.end199

if.then198:                                       ; preds = %land.lhs.true194, %land.lhs.true186
  store i32 0, i32* %retval, align 4
  br label %return

if.end199:                                        ; preds = %land.lhs.true194, %lor.lhs.false190, %land.lhs.true178, %if.end174
  %152 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %153 = load i32, i32* %i, align 4
  %arrayidx200 = getelementptr inbounds [5 x i32], [5 x i32]* %152, i32 %153
  %arrayidx201 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx200, i32 0, i32 4
  %154 = load i32, i32* %arrayidx201, align 4
  %cmp202 = icmp sge i32 %154, 0
  br i1 %cmp202, label %land.lhs.true203, label %if.end224

land.lhs.true203:                                 ; preds = %if.end199
  %155 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %156 = load i32, i32* %i, align 4
  %arrayidx204 = getelementptr inbounds [5 x i32], [5 x i32]* %155, i32 %156
  %arrayidx205 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx204, i32 0, i32 3
  %157 = load i32, i32* %arrayidx205, align 4
  %cmp206 = icmp sge i32 %157, 0
  br i1 %cmp206, label %land.lhs.true207, label %if.end224

land.lhs.true207:                                 ; preds = %land.lhs.true203
  %158 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %159 = load i32, i32* %i, align 4
  %arrayidx208 = getelementptr inbounds [5 x i32], [5 x i32]* %158, i32 %159
  %arrayidx209 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx208, i32 0, i32 4
  %160 = load i32, i32* %arrayidx209, align 4
  %cmp210 = icmp eq i32 %160, 0
  br i1 %cmp210, label %land.lhs.true211, label %lor.lhs.false215

land.lhs.true211:                                 ; preds = %land.lhs.true207
  %161 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %162 = load i32, i32* %i, align 4
  %arrayidx212 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i32 %162
  %arrayidx213 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx212, i32 0, i32 3
  %163 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp ne i32 %163, 1
  br i1 %cmp214, label %if.then223, label %lor.lhs.false215

lor.lhs.false215:                                 ; preds = %land.lhs.true211, %land.lhs.true207
  %164 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %165 = load i32, i32* %i, align 4
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %164, i32 %165
  %arrayidx217 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx216, i32 0, i32 4
  %166 = load i32, i32* %arrayidx217, align 4
  %cmp218 = icmp ne i32 %166, 0
  br i1 %cmp218, label %land.lhs.true219, label %if.end224

land.lhs.true219:                                 ; preds = %lor.lhs.false215
  %167 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %168 = load i32, i32* %i, align 4
  %arrayidx220 = getelementptr inbounds [5 x i32], [5 x i32]* %167, i32 %168
  %arrayidx221 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx220, i32 0, i32 3
  %169 = load i32, i32* %arrayidx221, align 4
  %cmp222 = icmp eq i32 %169, 1
  br i1 %cmp222, label %if.then223, label %if.end224

if.then223:                                       ; preds = %land.lhs.true219, %land.lhs.true211
  store i32 0, i32* %retval, align 4
  br label %return

if.end224:                                        ; preds = %land.lhs.true219, %lor.lhs.false215, %land.lhs.true203, %if.end199
  %170 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %171 = load i32, i32* %i, align 4
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %170, i32 %171
  %arrayidx226 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx225, i32 0, i32 4
  %172 = load i32, i32* %arrayidx226, align 4
  %cmp227 = icmp sge i32 %172, 0
  br i1 %cmp227, label %land.lhs.true228, label %if.end249

land.lhs.true228:                                 ; preds = %if.end224
  %173 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %174 = load i32, i32* %i, align 4
  %arrayidx229 = getelementptr inbounds [5 x i32], [5 x i32]* %173, i32 %174
  %arrayidx230 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx229, i32 0, i32 0
  %175 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp sge i32 %175, 0
  br i1 %cmp231, label %land.lhs.true232, label %if.end249

land.lhs.true232:                                 ; preds = %land.lhs.true228
  %176 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %177 = load i32, i32* %i, align 4
  %arrayidx233 = getelementptr inbounds [5 x i32], [5 x i32]* %176, i32 %177
  %arrayidx234 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx233, i32 0, i32 4
  %178 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp eq i32 %178, 1
  br i1 %cmp235, label %land.lhs.true236, label %lor.lhs.false240

land.lhs.true236:                                 ; preds = %land.lhs.true232
  %179 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %180 = load i32, i32* %i, align 4
  %arrayidx237 = getelementptr inbounds [5 x i32], [5 x i32]* %179, i32 %180
  %arrayidx238 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx237, i32 0, i32 0
  %181 = load i32, i32* %arrayidx238, align 4
  %cmp239 = icmp ne i32 %181, 3
  br i1 %cmp239, label %if.then248, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true236, %land.lhs.true232
  %182 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %183 = load i32, i32* %i, align 4
  %arrayidx241 = getelementptr inbounds [5 x i32], [5 x i32]* %182, i32 %183
  %arrayidx242 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx241, i32 0, i32 4
  %184 = load i32, i32* %arrayidx242, align 4
  %cmp243 = icmp ne i32 %184, 1
  br i1 %cmp243, label %land.lhs.true244, label %if.end249

land.lhs.true244:                                 ; preds = %lor.lhs.false240
  %185 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %186 = load i32, i32* %i, align 4
  %arrayidx245 = getelementptr inbounds [5 x i32], [5 x i32]* %185, i32 %186
  %arrayidx246 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx245, i32 0, i32 0
  %187 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp eq i32 %187, 3
  br i1 %cmp247, label %if.then248, label %if.end249

if.then248:                                       ; preds = %land.lhs.true244, %land.lhs.true236
  store i32 0, i32* %retval, align 4
  br label %return

if.end249:                                        ; preds = %land.lhs.true244, %lor.lhs.false240, %land.lhs.true228, %if.end224
  %188 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %189 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x i32], [5 x i32]* %188, i32 %189
  %arrayidx251 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx250, i32 0, i32 4
  %190 = load i32, i32* %arrayidx251, align 4
  %cmp252 = icmp eq i32 %190, 2
  br i1 %cmp252, label %if.then253, label %if.end292

if.then253:                                       ; preds = %if.end249
  %191 = load i32, i32* %i, align 4
  %cmp254 = icmp eq i32 %191, 0
  br i1 %cmp254, label %land.lhs.true255, label %if.else

land.lhs.true255:                                 ; preds = %if.then253
  %192 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %193 = load i32, i32* %i, align 4
  %add256 = add nsw i32 %193, 1
  %arrayidx257 = getelementptr inbounds [5 x i32], [5 x i32]* %192, i32 %add256
  %arrayidx258 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx257, i32 0, i32 3
  %194 = load i32, i32* %arrayidx258, align 4
  %cmp259 = icmp sge i32 %194, 0
  br i1 %cmp259, label %land.lhs.true260, label %if.else

land.lhs.true260:                                 ; preds = %land.lhs.true255
  %195 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %196 = load i32, i32* %i, align 4
  %add261 = add nsw i32 %196, 1
  %arrayidx262 = getelementptr inbounds [5 x i32], [5 x i32]* %195, i32 %add261
  %arrayidx263 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx262, i32 0, i32 3
  %197 = load i32, i32* %arrayidx263, align 4
  %cmp264 = icmp ne i32 %197, 2
  br i1 %cmp264, label %if.then265, label %if.else

if.then265:                                       ; preds = %land.lhs.true260
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true260, %land.lhs.true255, %if.then253
  %198 = load i32, i32* %i, align 4
  %cmp266 = icmp eq i32 %198, 4
  br i1 %cmp266, label %land.lhs.true267, label %if.else273

land.lhs.true267:                                 ; preds = %if.else
  %199 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %200 = load i32, i32* %i, align 4
  %sub268 = sub nsw i32 %200, 1
  %arrayidx269 = getelementptr inbounds [5 x i32], [5 x i32]* %199, i32 %sub268
  %arrayidx270 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx269, i32 0, i32 3
  %201 = load i32, i32* %arrayidx270, align 4
  %cmp271 = icmp ne i32 %201, 2
  br i1 %cmp271, label %if.then272, label %if.else273

if.then272:                                       ; preds = %land.lhs.true267
  store i32 0, i32* %retval, align 4
  br label %return

if.else273:                                       ; preds = %land.lhs.true267, %if.else
  %202 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %203 = load i32, i32* %i, align 4
  %add274 = add nsw i32 %203, 1
  %arrayidx275 = getelementptr inbounds [5 x i32], [5 x i32]* %202, i32 %add274
  %arrayidx276 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx275, i32 0, i32 3
  %204 = load i32, i32* %arrayidx276, align 4
  %cmp277 = icmp sge i32 %204, 0
  br i1 %cmp277, label %land.lhs.true278, label %if.end289

land.lhs.true278:                                 ; preds = %if.else273
  %205 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %206 = load i32, i32* %i, align 4
  %add279 = add nsw i32 %206, 1
  %arrayidx280 = getelementptr inbounds [5 x i32], [5 x i32]* %205, i32 %add279
  %arrayidx281 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx280, i32 0, i32 3
  %207 = load i32, i32* %arrayidx281, align 4
  %cmp282 = icmp ne i32 %207, 2
  br i1 %cmp282, label %land.lhs.true283, label %if.end289

land.lhs.true283:                                 ; preds = %land.lhs.true278
  %208 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %209 = load i32, i32* %i, align 4
  %sub284 = sub nsw i32 %209, 1
  %arrayidx285 = getelementptr inbounds [5 x i32], [5 x i32]* %208, i32 %sub284
  %arrayidx286 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx285, i32 0, i32 3
  %210 = load i32, i32* %arrayidx286, align 4
  %cmp287 = icmp ne i32 %210, 2
  br i1 %cmp287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %land.lhs.true283
  store i32 0, i32* %retval, align 4
  br label %return

if.end289:                                        ; preds = %land.lhs.true283, %land.lhs.true278, %if.else273
  br label %if.end290

if.end290:                                        ; preds = %if.end289
  br label %if.end291

if.end291:                                        ; preds = %if.end290
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.end249
  %211 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %212 = load i32, i32* %i, align 4
  %arrayidx293 = getelementptr inbounds [5 x i32], [5 x i32]* %211, i32 %212
  %arrayidx294 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx293, i32 0, i32 4
  %213 = load i32, i32* %arrayidx294, align 4
  %cmp295 = icmp eq i32 %213, 1
  br i1 %cmp295, label %if.then296, label %if.end336

if.then296:                                       ; preds = %if.end292
  %214 = load i32, i32* %i, align 4
  %cmp297 = icmp eq i32 %214, 0
  br i1 %cmp297, label %land.lhs.true298, label %if.else309

land.lhs.true298:                                 ; preds = %if.then296
  %215 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %216 = load i32, i32* %i, align 4
  %add299 = add nsw i32 %216, 1
  %arrayidx300 = getelementptr inbounds [5 x i32], [5 x i32]* %215, i32 %add299
  %arrayidx301 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx300, i32 0, i32 3
  %217 = load i32, i32* %arrayidx301, align 4
  %cmp302 = icmp sge i32 %217, 0
  br i1 %cmp302, label %land.lhs.true303, label %if.else309

land.lhs.true303:                                 ; preds = %land.lhs.true298
  %218 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %219 = load i32, i32* %i, align 4
  %add304 = add nsw i32 %219, 1
  %arrayidx305 = getelementptr inbounds [5 x i32], [5 x i32]* %218, i32 %add304
  %arrayidx306 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx305, i32 0, i32 3
  %220 = load i32, i32* %arrayidx306, align 4
  %cmp307 = icmp ne i32 %220, 3
  br i1 %cmp307, label %if.then308, label %if.else309

if.then308:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %retval, align 4
  br label %return

if.else309:                                       ; preds = %land.lhs.true303, %land.lhs.true298, %if.then296
  %221 = load i32, i32* %i, align 4
  %cmp310 = icmp eq i32 %221, 4
  br i1 %cmp310, label %land.lhs.true311, label %if.else317

land.lhs.true311:                                 ; preds = %if.else309
  %222 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %223 = load i32, i32* %i, align 4
  %sub312 = sub nsw i32 %223, 1
  %arrayidx313 = getelementptr inbounds [5 x i32], [5 x i32]* %222, i32 %sub312
  %arrayidx314 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx313, i32 0, i32 3
  %224 = load i32, i32* %arrayidx314, align 4
  %cmp315 = icmp ne i32 %224, 3
  br i1 %cmp315, label %if.then316, label %if.else317

if.then316:                                       ; preds = %land.lhs.true311
  store i32 0, i32* %retval, align 4
  br label %return

if.else317:                                       ; preds = %land.lhs.true311, %if.else309
  %225 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %226 = load i32, i32* %i, align 4
  %add318 = add nsw i32 %226, 1
  %arrayidx319 = getelementptr inbounds [5 x i32], [5 x i32]* %225, i32 %add318
  %arrayidx320 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx319, i32 0, i32 3
  %227 = load i32, i32* %arrayidx320, align 4
  %cmp321 = icmp sge i32 %227, 0
  br i1 %cmp321, label %land.lhs.true322, label %if.end333

land.lhs.true322:                                 ; preds = %if.else317
  %228 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %229 = load i32, i32* %i, align 4
  %add323 = add nsw i32 %229, 1
  %arrayidx324 = getelementptr inbounds [5 x i32], [5 x i32]* %228, i32 %add323
  %arrayidx325 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx324, i32 0, i32 3
  %230 = load i32, i32* %arrayidx325, align 4
  %cmp326 = icmp ne i32 %230, 3
  br i1 %cmp326, label %land.lhs.true327, label %if.end333

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %231 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %232 = load i32, i32* %i, align 4
  %sub328 = sub nsw i32 %232, 1
  %arrayidx329 = getelementptr inbounds [5 x i32], [5 x i32]* %231, i32 %sub328
  %arrayidx330 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx329, i32 0, i32 3
  %233 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp ne i32 %233, 3
  br i1 %cmp331, label %if.then332, label %if.end333

if.then332:                                       ; preds = %land.lhs.true327
  store i32 0, i32* %retval, align 4
  br label %return

if.end333:                                        ; preds = %land.lhs.true327, %land.lhs.true322, %if.else317
  br label %if.end334

if.end334:                                        ; preds = %if.end333
  br label %if.end335

if.end335:                                        ; preds = %if.end334
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end292
  %234 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %235 = load i32, i32* %i, align 4
  %arrayidx337 = getelementptr inbounds [5 x i32], [5 x i32]* %234, i32 %235
  %arrayidx338 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx337, i32 0, i32 4
  %236 = load i32, i32* %arrayidx338, align 4
  %cmp339 = icmp sge i32 %236, 0
  br i1 %cmp339, label %land.lhs.true340, label %if.end361

land.lhs.true340:                                 ; preds = %if.end336
  %237 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %238 = load i32, i32* %i, align 4
  %arrayidx341 = getelementptr inbounds [5 x i32], [5 x i32]* %237, i32 %238
  %arrayidx342 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx341, i32 0, i32 2
  %239 = load i32, i32* %arrayidx342, align 4
  %cmp343 = icmp sge i32 %239, 0
  br i1 %cmp343, label %land.lhs.true344, label %if.end361

land.lhs.true344:                                 ; preds = %land.lhs.true340
  %240 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %241 = load i32, i32* %i, align 4
  %arrayidx345 = getelementptr inbounds [5 x i32], [5 x i32]* %240, i32 %241
  %arrayidx346 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx345, i32 0, i32 4
  %242 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %242, 3
  br i1 %cmp347, label %land.lhs.true348, label %lor.lhs.false352

land.lhs.true348:                                 ; preds = %land.lhs.true344
  %243 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %244 = load i32, i32* %i, align 4
  %arrayidx349 = getelementptr inbounds [5 x i32], [5 x i32]* %243, i32 %244
  %arrayidx350 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx349, i32 0, i32 2
  %245 = load i32, i32* %arrayidx350, align 4
  %cmp351 = icmp ne i32 %245, 3
  br i1 %cmp351, label %if.then360, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %land.lhs.true348, %land.lhs.true344
  %246 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %247 = load i32, i32* %i, align 4
  %arrayidx353 = getelementptr inbounds [5 x i32], [5 x i32]* %246, i32 %247
  %arrayidx354 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx353, i32 0, i32 4
  %248 = load i32, i32* %arrayidx354, align 4
  %cmp355 = icmp ne i32 %248, 3
  br i1 %cmp355, label %land.lhs.true356, label %if.end361

land.lhs.true356:                                 ; preds = %lor.lhs.false352
  %249 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %250 = load i32, i32* %i, align 4
  %arrayidx357 = getelementptr inbounds [5 x i32], [5 x i32]* %249, i32 %250
  %arrayidx358 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx357, i32 0, i32 2
  %251 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp eq i32 %251, 3
  br i1 %cmp359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %land.lhs.true356, %land.lhs.true348
  store i32 0, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %land.lhs.true356, %lor.lhs.false352, %land.lhs.true340, %if.end336
  %252 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %253 = load i32, i32* %i, align 4
  %arrayidx362 = getelementptr inbounds [5 x i32], [5 x i32]* %252, i32 %253
  %arrayidx363 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx362, i32 0, i32 1
  %254 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp sge i32 %254, 0
  br i1 %cmp364, label %land.lhs.true365, label %if.end386

land.lhs.true365:                                 ; preds = %if.end361
  %255 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %256 = load i32, i32* %i, align 4
  %arrayidx366 = getelementptr inbounds [5 x i32], [5 x i32]* %255, i32 %256
  %arrayidx367 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx366, i32 0, i32 4
  %257 = load i32, i32* %arrayidx367, align 4
  %cmp368 = icmp sge i32 %257, 0
  br i1 %cmp368, label %land.lhs.true369, label %if.end386

land.lhs.true369:                                 ; preds = %land.lhs.true365
  %258 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %259 = load i32, i32* %i, align 4
  %arrayidx370 = getelementptr inbounds [5 x i32], [5 x i32]* %258, i32 %259
  %arrayidx371 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx370, i32 0, i32 1
  %260 = load i32, i32* %arrayidx371, align 4
  %cmp372 = icmp eq i32 %260, 3
  br i1 %cmp372, label %land.lhs.true373, label %lor.lhs.false377

land.lhs.true373:                                 ; preds = %land.lhs.true369
  %261 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %262 = load i32, i32* %i, align 4
  %arrayidx374 = getelementptr inbounds [5 x i32], [5 x i32]* %261, i32 %262
  %arrayidx375 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx374, i32 0, i32 4
  %263 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp ne i32 %263, 4
  br i1 %cmp376, label %if.then385, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %land.lhs.true373, %land.lhs.true369
  %264 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %265 = load i32, i32* %i, align 4
  %arrayidx378 = getelementptr inbounds [5 x i32], [5 x i32]* %264, i32 %265
  %arrayidx379 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx378, i32 0, i32 1
  %266 = load i32, i32* %arrayidx379, align 4
  %cmp380 = icmp ne i32 %266, 3
  br i1 %cmp380, label %land.lhs.true381, label %if.end386

land.lhs.true381:                                 ; preds = %lor.lhs.false377
  %267 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %268 = load i32, i32* %i, align 4
  %arrayidx382 = getelementptr inbounds [5 x i32], [5 x i32]* %267, i32 %268
  %arrayidx383 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx382, i32 0, i32 4
  %269 = load i32, i32* %arrayidx383, align 4
  %cmp384 = icmp eq i32 %269, 4
  br i1 %cmp384, label %if.then385, label %if.end386

if.then385:                                       ; preds = %land.lhs.true381, %land.lhs.true373
  store i32 0, i32* %retval, align 4
  br label %return

if.end386:                                        ; preds = %land.lhs.true381, %lor.lhs.false377, %land.lhs.true365, %if.end361
  %270 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %271 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [5 x i32], [5 x i32]* %270, i32 %271
  %arrayidx388 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx387, i32 0, i32 1
  %272 = load i32, i32* %arrayidx388, align 4
  %cmp389 = icmp eq i32 %272, 4
  br i1 %cmp389, label %land.lhs.true390, label %if.end410

land.lhs.true390:                                 ; preds = %if.end386
  %273 = load i32, i32* %i, align 4
  %cmp391 = icmp slt i32 %273, 4
  br i1 %cmp391, label %land.lhs.true392, label %lor.lhs.false402

land.lhs.true392:                                 ; preds = %land.lhs.true390
  %274 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %275 = load i32, i32* %i, align 4
  %add393 = add nsw i32 %275, 1
  %arrayidx394 = getelementptr inbounds [5 x i32], [5 x i32]* %274, i32 %add393
  %arrayidx395 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx394, i32 0, i32 0
  %276 = load i32, i32* %arrayidx395, align 4
  %cmp396 = icmp sge i32 %276, 0
  br i1 %cmp396, label %land.lhs.true397, label %lor.lhs.false402

land.lhs.true397:                                 ; preds = %land.lhs.true392
  %277 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %278 = load i32, i32* %i, align 4
  %add398 = add nsw i32 %278, 1
  %arrayidx399 = getelementptr inbounds [5 x i32], [5 x i32]* %277, i32 %add398
  %arrayidx400 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx399, i32 0, i32 0
  %279 = load i32, i32* %arrayidx400, align 4
  %cmp401 = icmp ne i32 %279, 4
  br i1 %cmp401, label %if.then409, label %lor.lhs.false402

lor.lhs.false402:                                 ; preds = %land.lhs.true397, %land.lhs.true392, %land.lhs.true390
  %280 = load i32, i32* %i, align 4
  %cmp403 = icmp sgt i32 %280, 0
  br i1 %cmp403, label %land.lhs.true404, label %if.end410

land.lhs.true404:                                 ; preds = %lor.lhs.false402
  %281 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %282 = load i32, i32* %i, align 4
  %sub405 = sub nsw i32 %282, 1
  %arrayidx406 = getelementptr inbounds [5 x i32], [5 x i32]* %281, i32 %sub405
  %arrayidx407 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx406, i32 0, i32 0
  %283 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp ne i32 %283, 4
  br i1 %cmp408, label %if.then409, label %if.end410

if.then409:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  store i32 0, i32* %retval, align 4
  br label %return

if.end410:                                        ; preds = %land.lhs.true404, %lor.lhs.false402, %if.end386
  %284 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %285 = load i32, i32* %i, align 4
  %arrayidx411 = getelementptr inbounds [5 x i32], [5 x i32]* %284, i32 %285
  %arrayidx412 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx411, i32 0, i32 4
  %286 = load i32, i32* %arrayidx412, align 4
  %cmp413 = icmp eq i32 %286, 2
  br i1 %cmp413, label %if.then414, label %if.end454

if.then414:                                       ; preds = %if.end410
  %287 = load i32, i32* %i, align 4
  %cmp415 = icmp eq i32 %287, 0
  br i1 %cmp415, label %land.lhs.true416, label %if.else427

land.lhs.true416:                                 ; preds = %if.then414
  %288 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %289 = load i32, i32* %i, align 4
  %add417 = add nsw i32 %289, 1
  %arrayidx418 = getelementptr inbounds [5 x i32], [5 x i32]* %288, i32 %add417
  %arrayidx419 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx418, i32 0, i32 2
  %290 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp sge i32 %290, 0
  br i1 %cmp420, label %land.lhs.true421, label %if.else427

land.lhs.true421:                                 ; preds = %land.lhs.true416
  %291 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %292 = load i32, i32* %i, align 4
  %add422 = add nsw i32 %292, 1
  %arrayidx423 = getelementptr inbounds [5 x i32], [5 x i32]* %291, i32 %add422
  %arrayidx424 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx423, i32 0, i32 2
  %293 = load i32, i32* %arrayidx424, align 4
  %cmp425 = icmp ne i32 %293, 4
  br i1 %cmp425, label %if.then426, label %if.else427

if.then426:                                       ; preds = %land.lhs.true421
  store i32 0, i32* %retval, align 4
  br label %return

if.else427:                                       ; preds = %land.lhs.true421, %land.lhs.true416, %if.then414
  %294 = load i32, i32* %i, align 4
  %cmp428 = icmp eq i32 %294, 4
  br i1 %cmp428, label %land.lhs.true429, label %if.else435

land.lhs.true429:                                 ; preds = %if.else427
  %295 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %296 = load i32, i32* %i, align 4
  %sub430 = sub nsw i32 %296, 1
  %arrayidx431 = getelementptr inbounds [5 x i32], [5 x i32]* %295, i32 %sub430
  %arrayidx432 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx431, i32 0, i32 2
  %297 = load i32, i32* %arrayidx432, align 4
  %cmp433 = icmp ne i32 %297, 4
  br i1 %cmp433, label %if.then434, label %if.else435

if.then434:                                       ; preds = %land.lhs.true429
  store i32 0, i32* %retval, align 4
  br label %return

if.else435:                                       ; preds = %land.lhs.true429, %if.else427
  %298 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %299 = load i32, i32* %i, align 4
  %add436 = add nsw i32 %299, 1
  %arrayidx437 = getelementptr inbounds [5 x i32], [5 x i32]* %298, i32 %add436
  %arrayidx438 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx437, i32 0, i32 2
  %300 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp sge i32 %300, 0
  br i1 %cmp439, label %land.lhs.true440, label %if.end451

land.lhs.true440:                                 ; preds = %if.else435
  %301 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %302 = load i32, i32* %i, align 4
  %add441 = add nsw i32 %302, 1
  %arrayidx442 = getelementptr inbounds [5 x i32], [5 x i32]* %301, i32 %add441
  %arrayidx443 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx442, i32 0, i32 2
  %303 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %303, 4
  br i1 %cmp444, label %land.lhs.true445, label %if.end451

land.lhs.true445:                                 ; preds = %land.lhs.true440
  %304 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %305 = load i32, i32* %i, align 4
  %sub446 = sub nsw i32 %305, 1
  %arrayidx447 = getelementptr inbounds [5 x i32], [5 x i32]* %304, i32 %sub446
  %arrayidx448 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx447, i32 0, i32 2
  %306 = load i32, i32* %arrayidx448, align 4
  %cmp449 = icmp ne i32 %306, 4
  br i1 %cmp449, label %if.then450, label %if.end451

if.then450:                                       ; preds = %land.lhs.true445
  store i32 0, i32* %retval, align 4
  br label %return

if.end451:                                        ; preds = %land.lhs.true445, %land.lhs.true440, %if.else435
  br label %if.end452

if.end452:                                        ; preds = %if.end451
  br label %if.end453

if.end453:                                        ; preds = %if.end452
  br label %if.end454

if.end454:                                        ; preds = %if.end453, %if.end410
  br label %for.inc

for.inc:                                          ; preds = %if.end454
  %307 = load i32, i32* %i, align 4
  %inc = add nsw i32 %307, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %308 = load i32, i32* %c_add, align 4
  %309 = load i32, i32* %c_or, align 4
  %cmp455 = icmp ne i32 %308, %309
  br i1 %cmp455, label %if.then464, label %lor.lhs.false456

lor.lhs.false456:                                 ; preds = %for.end
  %310 = load i32, i32* %m_add, align 4
  %311 = load i32, i32* %m_or, align 4
  %cmp457 = icmp ne i32 %310, %311
  br i1 %cmp457, label %if.then464, label %lor.lhs.false458

lor.lhs.false458:                                 ; preds = %lor.lhs.false456
  %312 = load i32, i32* %d_add, align 4
  %313 = load i32, i32* %d_or, align 4
  %cmp459 = icmp ne i32 %312, %313
  br i1 %cmp459, label %if.then464, label %lor.lhs.false460

lor.lhs.false460:                                 ; preds = %lor.lhs.false458
  %314 = load i32, i32* %a_add, align 4
  %315 = load i32, i32* %a_or, align 4
  %cmp461 = icmp ne i32 %314, %315
  br i1 %cmp461, label %if.then464, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %lor.lhs.false460
  %316 = load i32, i32* %s_add, align 4
  %317 = load i32, i32* %s_or, align 4
  %cmp463 = icmp ne i32 %316, %317
  br i1 %cmp463, label %if.then464, label %if.end465

if.then464:                                       ; preds = %lor.lhs.false462, %lor.lhs.false460, %lor.lhs.false458, %lor.lhs.false456, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end465:                                        ; preds = %lor.lhs.false462
  %318 = load i32, i32* %c_add, align 4
  %cmp466 = icmp ne i32 %318, 31
  br i1 %cmp466, label %if.then475, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %if.end465
  %319 = load i32, i32* %m_add, align 4
  %cmp468 = icmp ne i32 %319, 31
  br i1 %cmp468, label %if.then475, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %lor.lhs.false467
  %320 = load i32, i32* %d_add, align 4
  %cmp470 = icmp ne i32 %320, 31
  br i1 %cmp470, label %if.then475, label %lor.lhs.false471

lor.lhs.false471:                                 ; preds = %lor.lhs.false469
  %321 = load i32, i32* %a_add, align 4
  %cmp472 = icmp ne i32 %321, 31
  br i1 %cmp472, label %if.then475, label %lor.lhs.false473

lor.lhs.false473:                                 ; preds = %lor.lhs.false471
  %322 = load i32, i32* %s_add, align 4
  %cmp474 = icmp ne i32 %322, 31
  br i1 %cmp474, label %if.then475, label %if.end476

if.then475:                                       ; preds = %lor.lhs.false473, %lor.lhs.false471, %lor.lhs.false469, %lor.lhs.false467, %if.end465
  store i32 1, i32* %retval, align 4
  br label %return

if.end476:                                        ; preds = %lor.lhs.false473
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end476, %if.then475, %if.then464, %if.then450, %if.then434, %if.then426, %if.then409, %if.then385, %if.then360, %if.then332, %if.then316, %if.then308, %if.then288, %if.then272, %if.then265, %if.then248, %if.then223, %if.then198, %if.then173, %if.then149, %if.then124, %if.then99, %if.then12, %if.then
  %323 = load i32, i32* %retval, align 4
  ret i32 %323
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @bruteFill([5 x i32]* %ha, i32 %hno, i32 %attr) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %hno.addr = alloca i32, align 4
  %attr.addr = alloca i32, align 4
  %stat = alloca i32, align 4
  %hb = alloca [5 x [5 x i32]], align 16
  %i = alloca i32, align 4
  %nexthno = alloca i32, align 4
  %nextattr = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 %hno, i32* %hno.addr, align 4
  store i32 %attr, i32* %attr.addr, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %call = call i32 @checkHouses([5 x i32]* %0)
  store i32 %call, i32* %stat, align 4
  %1 = load i32, i32* %stat, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %stat, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* %stat, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %4 = bitcast [5 x i32]* %arraydecay to i8*
  %5 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %6 = bitcast [5 x i32]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 4 %6, i32 100, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %7, 5
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %hno.addr, align 4
  %arrayidx = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 %9
  %10 = load i32, i32* %attr.addr, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %call5 = call i32 @checkHouses([5 x i32]* %arraydecay4)
  store i32 %call5, i32* %stat, align 4
  %11 = load i32, i32* %stat, align 4
  %cmp6 = icmp ne i32 %11, 0
  br i1 %cmp6, label %if.then7, label %if.end18

if.then7:                                         ; preds = %for.body
  %12 = load i32, i32* %attr.addr, align 4
  %cmp8 = icmp slt i32 %12, 4
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %13 = load i32, i32* %attr.addr, align 4
  %add = add nsw i32 %13, 1
  store i32 %add, i32* %nextattr, align 4
  %14 = load i32, i32* %hno.addr, align 4
  store i32 %14, i32* %nexthno, align 4
  br label %if.end11

if.else:                                          ; preds = %if.then7
  store i32 0, i32* %nextattr, align 4
  %15 = load i32, i32* %hno.addr, align 4
  %add10 = add nsw i32 %15, 1
  store i32 %add10, i32* %nexthno, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %arraydecay12 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %16 = load i32, i32* %nexthno, align 4
  %17 = load i32, i32* %nextattr, align 4
  %call13 = call i32 @bruteFill([5 x i32]* %arraydecay12, i32 %16, i32 %17)
  store i32 %call13, i32* %stat, align 4
  %18 = load i32, i32* %stat, align 4
  %cmp14 = icmp ne i32 %18, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end11
  %19 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %20 = bitcast [5 x i32]* %19 to i8*
  %arraydecay16 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %21 = bitcast [5 x i32]* %arraydecay16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 100, i1 false)
  %22 = load i32, i32* %stat, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ha = alloca [5 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x [5 x i32]]* %ha to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 -1, i32 100, i1 false)
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  %call = call i32 @bruteFill([5 x i32]* %arraydecay, i32 0, i32 0)
  %arraydecay1 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  call void @printHouses([5 x i32]* %arraydecay1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ne i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sge i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ne i32 %7, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %8, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp sge i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %15, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl23 = shl i32 1, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %c_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %19, %shl23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp27 = icmp sge i32 %22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl31 = shl i32 1, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %m_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add32 = add nsw i32 %26, %shl31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl35 = shl i32 1, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %m_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or36 = or i32 %30, %shl35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx39, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp40 = icmp sge i32 %33, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %arrayidx43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl44 = shl i32 1, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %d_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add45 = add nsw i32 %37, %shl44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %arrayidx47, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl48 = shl i32 1, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %d_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or49 = or i32 %41, %shl48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %arrayidx52, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp sge i32 %44, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %arrayidx56, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl57 = shl i32 1, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %a_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add58 = add nsw i32 %48, %shl57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %arrayidx60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl61 = shl i32 1, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %a_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or62 = or i32 %52, %shl61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %arrayidx65, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp66 = icmp sge i32 %55, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %arrayidx69, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl70 = shl i32 1, %58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %s_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add71 = add nsw i32 %59, %shl70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %arrayidx73, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl74 = shl i32 1, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %s_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or75 = or i32 %63, %shl74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %arrayidx78, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp79 = icmp sge i32 %66, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %arrayidx82, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp83 = icmp sge i32 %69, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %arrayidx86, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp87 = icmp eq i32 %72, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %arrayidx90, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp91 = icmp ne i32 %75, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %arrayidx93, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp94 = icmp ne i32 %78, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %arrayidx97, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp98 = icmp eq i32 %81, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %arrayidx102, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp103 = icmp sge i32 %84, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %arrayidx106, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp107 = icmp sge i32 %87, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %arrayidx110, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp111 = icmp eq i32 %90, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %arrayidx114, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp115 = icmp ne i32 %93, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %arrayidx118, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp119 = icmp ne i32 %96, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %98 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %arrayidx122, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp123 = icmp eq i32 %99, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %102 = load i32, i32* %arrayidx127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp128 = icmp sge i32 %102, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %104 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %arrayidx131, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp132 = icmp sge i32 %105, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %108 = load i32, i32* %arrayidx135, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp136 = icmp eq i32 %108, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %110 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %111 = load i32, i32* %arrayidx139, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp140 = icmp ne i32 %111, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %114 = load i32, i32* %arrayidx143, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp144 = icmp ne i32 %114, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %116 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %117 = load i32, i32* %arrayidx147, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp148 = icmp eq i32 %117, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %118 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp151 = icmp sgt i32 %118, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %120 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %121 = load i32, i32* %arrayidx154, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp155 = icmp sge i32 %121, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %123 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %123, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %124 = load i32, i32* %arrayidx158, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp159 = icmp eq i32 %124, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %126 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %127 = load i32, i32* %arrayidx162, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp163 = icmp ne i32 %127, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %129 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub165 = sub nsw i32 %129, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %130 = load i32, i32* %arrayidx167, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp168 = icmp ne i32 %130, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %132 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %133 = load i32, i32* %arrayidx171, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp172 = icmp eq i32 %133, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %135 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %136 = load i32, i32* %arrayidx176, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp177 = icmp sge i32 %136, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %138 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %139 = load i32, i32* %arrayidx180, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp181 = icmp sge i32 %139, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %141 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %142 = load i32, i32* %arrayidx184, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp185 = icmp eq i32 %142, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %144 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %145 = load i32, i32* %arrayidx188, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp189 = icmp ne i32 %145, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %147 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %148 = load i32, i32* %arrayidx192, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp193 = icmp ne i32 %148, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %150 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %151 = load i32, i32* %arrayidx196, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp197 = icmp eq i32 %151, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %153 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %154 = load i32, i32* %arrayidx201, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp202 = icmp sge i32 %154, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %156 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %157 = load i32, i32* %arrayidx205, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp206 = icmp sge i32 %157, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %159 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %160 = load i32, i32* %arrayidx209, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp210 = icmp eq i32 %160, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %162 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %163 = load i32, i32* %arrayidx213, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp214 = icmp ne i32 %163, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %165 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %166 = load i32, i32* %arrayidx217, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp218 = icmp ne i32 %166, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %168 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %169 = load i32, i32* %arrayidx221, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp222 = icmp eq i32 %169, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %171 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %172 = load i32, i32* %arrayidx226, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp227 = icmp sge i32 %172, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %174 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %175 = load i32, i32* %arrayidx230, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp231 = icmp sge i32 %175, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %177 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %178 = load i32, i32* %arrayidx234, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp235 = icmp eq i32 %178, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %180 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %181 = load i32, i32* %arrayidx238, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp239 = icmp ne i32 %181, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %183 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %184 = load i32, i32* %arrayidx242, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp243 = icmp ne i32 %184, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %186 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %187 = load i32, i32* %arrayidx246, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp247 = icmp eq i32 %187, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %189 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %190 = load i32, i32* %arrayidx251, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp252 = icmp eq i32 %190, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %191 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp254 = icmp eq i32 %191, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %193 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add256 = add nsw i32 %193, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %194 = load i32, i32* %arrayidx258, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp259 = icmp sge i32 %194, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %196 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add261 = add nsw i32 %196, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %197 = load i32, i32* %arrayidx263, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp264 = icmp ne i32 %197, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %198 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp266 = icmp eq i32 %198, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %200 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub268 = sub nsw i32 %200, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %201 = load i32, i32* %arrayidx270, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp271 = icmp ne i32 %201, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %203 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add274 = add nsw i32 %203, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %204 = load i32, i32* %arrayidx276, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp277 = icmp sge i32 %204, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %206 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add279 = add nsw i32 %206, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %207 = load i32, i32* %arrayidx281, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp282 = icmp ne i32 %207, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %209 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub284 = sub nsw i32 %209, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %210 = load i32, i32* %arrayidx286, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp287 = icmp ne i32 %210, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %212 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %213 = load i32, i32* %arrayidx294, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp295 = icmp eq i32 %213, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %214 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp297 = icmp eq i32 %214, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %216 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add299 = add nsw i32 %216, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %217 = load i32, i32* %arrayidx301, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp302 = icmp sge i32 %217, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %219 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add304 = add nsw i32 %219, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %220 = load i32, i32* %arrayidx306, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp307 = icmp ne i32 %220, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %221 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp310 = icmp eq i32 %221, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %223 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub312 = sub nsw i32 %223, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %224 = load i32, i32* %arrayidx314, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp315 = icmp ne i32 %224, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %226 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add318 = add nsw i32 %226, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %227 = load i32, i32* %arrayidx320, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp321 = icmp sge i32 %227, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %229 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add323 = add nsw i32 %229, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %230 = load i32, i32* %arrayidx325, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp326 = icmp ne i32 %230, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %232 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub328 = sub nsw i32 %232, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %233 = load i32, i32* %arrayidx330, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp331 = icmp ne i32 %233, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %235 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %236 = load i32, i32* %arrayidx338, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp339 = icmp sge i32 %236, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %238 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %239 = load i32, i32* %arrayidx342, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp343 = icmp sge i32 %239, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %241 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %242 = load i32, i32* %arrayidx346, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp347 = icmp eq i32 %242, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %244 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %245 = load i32, i32* %arrayidx350, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp351 = icmp ne i32 %245, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %247 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %248 = load i32, i32* %arrayidx354, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp355 = icmp ne i32 %248, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %250 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %251 = load i32, i32* %arrayidx358, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp359 = icmp eq i32 %251, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %253 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %254 = load i32, i32* %arrayidx363, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp364 = icmp sge i32 %254, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %256 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %257 = load i32, i32* %arrayidx367, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp368 = icmp sge i32 %257, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %259 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %260 = load i32, i32* %arrayidx371, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp372 = icmp eq i32 %260, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %262 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %263 = load i32, i32* %arrayidx375, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp376 = icmp ne i32 %263, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %265 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %266 = load i32, i32* %arrayidx379, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp380 = icmp ne i32 %266, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %268 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %269 = load i32, i32* %arrayidx383, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp384 = icmp eq i32 %269, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %271 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %272 = load i32, i32* %arrayidx388, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp389 = icmp eq i32 %272, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %273 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp391 = icmp slt i32 %273, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %275 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add393 = add nsw i32 %275, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %276 = load i32, i32* %arrayidx395, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp396 = icmp sge i32 %276, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %278 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add398 = add nsw i32 %278, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %279 = load i32, i32* %arrayidx400, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp401 = icmp ne i32 %279, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %280 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp403 = icmp sgt i32 %280, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %282 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub405 = sub nsw i32 %282, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %283 = load i32, i32* %arrayidx407, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp408 = icmp ne i32 %283, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %285 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %286 = load i32, i32* %arrayidx412, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp413 = icmp eq i32 %286, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %287 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp415 = icmp eq i32 %287, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %289 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add417 = add nsw i32 %289, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %290 = load i32, i32* %arrayidx419, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp420 = icmp sge i32 %290, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %292 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add422 = add nsw i32 %292, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %293 = load i32, i32* %arrayidx424, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp425 = icmp ne i32 %293, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %294 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp428 = icmp eq i32 %294, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %296 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub430 = sub nsw i32 %296, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %297 = load i32, i32* %arrayidx432, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp433 = icmp ne i32 %297, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %299 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add436 = add nsw i32 %299, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %300 = load i32, i32* %arrayidx438, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp439 = icmp sge i32 %300, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %302 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add441 = add nsw i32 %302, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %303 = load i32, i32* %arrayidx443, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp444 = icmp ne i32 %303, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %305 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub446 = sub nsw i32 %305, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %306 = load i32, i32* %arrayidx448, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp449 = icmp ne i32 %306, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %307 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %307, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %308 = load i32, i32* %c_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %309 = load i32, i32* %c_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp455 = icmp ne i32 %308, %309
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %310 = load i32, i32* %m_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %311 = load i32, i32* %m_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp457 = icmp ne i32 %310, %311
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %312 = load i32, i32* %d_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %313 = load i32, i32* %d_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp459 = icmp ne i32 %312, %313
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %314 = load i32, i32* %a_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %315 = load i32, i32* %a_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp461 = icmp ne i32 %314, %315
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %316 = load i32, i32* %s_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %317 = load i32, i32* %s_or, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp463 = icmp ne i32 %316, %317
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %318 = load i32, i32* %c_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp466 = icmp ne i32 %318, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %319 = load i32, i32* %m_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp468 = icmp ne i32 %319, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %320 = load i32, i32* %d_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp470 = icmp ne i32 %320, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %321 = load i32, i32* %a_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp472 = icmp ne i32 %321, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %322 = load i32, i32* %s_add, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp474 = icmp ne i32 %322, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %323 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 31:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for checkHouses()

; entering Souper's runOnFunction() for bruteFill()

; ModuleID = './Zebra_puzzle.c.bc'
source_filename = "./Zebra_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Red\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Green\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"White\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Yellow\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blue\00", align 1
@__const.printHouses.color = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [8 x i8] c"English\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Swede\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Dane\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"German\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Norwegian\00", align 1
@__const.printHouses.man = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"Tea\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Coffee\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Milk\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Beer\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@__const.printHouses.drink = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0)], align 16
@.str.15 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Birds\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Cats\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"Zebra\00", align 1
@__const.printHouses.animal = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)], align 16
@.str.20 = private unnamed_addr constant [9 x i8] c"PallMall\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"Dunhill\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Blend\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"BlueMaster\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Prince\00", align 1
@__const.printHouses.smoke = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.25 = private unnamed_addr constant [50 x i8] c"%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"Man\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"Drink\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"Animal\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Smoke\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"%-10d\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"%-10.10s\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"%-10.10s\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"-\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printHouses([5 x i32]* %ha) #0 {
entry:
  %ha.addr = alloca [5 x i32]*, align 4
  %color = alloca [5 x i8*], align 16
  %man = alloca [5 x i8*], align 16
  %drink = alloca [5 x i8*], align 16
  %animal = alloca [5 x i8*], align 16
  %smoke = alloca [5 x i8*], align 16
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  %0 = bitcast [5 x i8*]* %color to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.color to i8*), i32 20, i1 false)
  %1 = bitcast [5 x i8*]* %man to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.man to i8*), i32 20, i1 false)
  %2 = bitcast [5 x i8*]* %drink to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.drink to i8*), i32 20, i1 false)
  %3 = bitcast [5 x i8*]* %animal to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.animal to i8*), i32 20, i1 false)
  %4 = bitcast [5 x i8*]* %smoke to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.smoke to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %5, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0), i32 %6)
  %7 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %7, i32 %8
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 0
  %9 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sge i32 %9, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %10, i32 %11
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx4, i32 0, i32 0
  %12 = load i32, i32* %arrayidx5, align 4
  %arrayidx6 = getelementptr inbounds [5 x i8*], [5 x i8*]* %color, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %13)
  br label %if.end

if.else:                                          ; preds = %for.body
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %14, i32 %15
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %16 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp sge i32 %16, 0
  br i1 %cmp11, label %if.then12, label %if.else17

if.then12:                                        ; preds = %if.end
  %17 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i32 %18
  %arrayidx14 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 1
  %19 = load i32, i32* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8*], [5 x i8*]* %man, i32 0, i32 %19
  %20 = load i8*, i8** %arrayidx15, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %20)
  br label %if.end19

if.else17:                                        ; preds = %if.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then12
  %21 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i32 %22
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx20, i32 0, i32 2
  %23 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp sge i32 %23, 0
  br i1 %cmp22, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.end19
  %24 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i32 %25
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx24, i32 0, i32 2
  %26 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [5 x i8*], [5 x i8*]* %drink, i32 0, i32 %26
  %27 = load i8*, i8** %arrayidx26, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %27)
  br label %if.end30

if.else28:                                        ; preds = %if.end19
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then23
  %28 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i32 %29
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 3
  %30 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %30, 0
  br i1 %cmp33, label %if.then34, label %if.else39

if.then34:                                        ; preds = %if.end30
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx35, i32 0, i32 3
  %33 = load i32, i32* %arrayidx36, align 4
  %arrayidx37 = getelementptr inbounds [5 x i8*], [5 x i8*]* %animal, i32 0, i32 %33
  %34 = load i8*, i8** %arrayidx37, align 4
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %34)
  br label %if.end41

if.else39:                                        ; preds = %if.end30
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then34
  %35 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %35, i32 %36
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 4
  %37 = load i32, i32* %arrayidx43, align 4
  %cmp44 = icmp sge i32 %37, 0
  br i1 %cmp44, label %if.then45, label %if.else50

if.then45:                                        ; preds = %if.end41
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 4
  %40 = load i32, i32* %arrayidx47, align 4
  %arrayidx48 = getelementptr inbounds [5 x i8*], [5 x i8*]* %smoke, i32 0, i32 %40
  %41 = load i8*, i8** %arrayidx48, align 4
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* %41)
  br label %if.end52

if.else50:                                        ; preds = %if.end41
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then45
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @checkHouses([5 x i32]* %ha) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %c_add = alloca i32, align 4
  %c_or = alloca i32, align 4
  %m_add = alloca i32, align 4
  %m_or = alloca i32, align 4
  %d_add = alloca i32, align 4
  %d_or = alloca i32, align 4
  %a_add = alloca i32, align 4
  %a_or = alloca i32, align 4
  %s_add = alloca i32, align 4
  %s_or = alloca i32, align 4
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 0, i32* %c_add, align 4
  store i32 0, i32* %c_or, align 4
  store i32 0, i32* %m_add, align 4
  store i32 0, i32* %m_or, align 4
  store i32 0, i32* %d_add, align 4
  store i32 0, i32* %d_or, align 4
  store i32 0, i32* %a_add, align 4
  store i32 0, i32* %a_or, align 4
  store i32 0, i32* %s_add, align 4
  store i32 0, i32* %s_or, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %0, i32 2
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 2
  %1 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i32 2
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %3, 2
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %4, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx5, i32 0, i32 1
  %5 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sge i32 %5, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.end
  %6 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %6, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %7, 4
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true8
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %8 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %8, 5
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i32 %10
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx15, i32 0, i32 0
  %11 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %11, 0
  br i1 %cmp17, label %if.then18, label %if.end24

if.then18:                                        ; preds = %for.body
  %12 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [5 x i32], [5 x i32]* %12, i32 %13
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 0
  %14 = load i32, i32* %arrayidx20, align 4
  %shl = shl i32 1, %14
  %15 = load i32, i32* %c_add, align 4
  %add = add nsw i32 %15, %shl
  store i32 %add, i32* %c_add, align 4
  %16 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %16, i32 %17
  %arrayidx22 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx21, i32 0, i32 0
  %18 = load i32, i32* %arrayidx22, align 4
  %shl23 = shl i32 1, %18
  %19 = load i32, i32* %c_or, align 4
  %or = or i32 %19, %shl23
  store i32 %or, i32* %c_or, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %for.body
  %20 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %20, i32 %21
  %arrayidx26 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx25, i32 0, i32 1
  %22 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp sge i32 %22, 0
  br i1 %cmp27, label %if.then28, label %if.end37

if.then28:                                        ; preds = %if.end24
  %23 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i32 %24
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx29, i32 0, i32 1
  %25 = load i32, i32* %arrayidx30, align 4
  %shl31 = shl i32 1, %25
  %26 = load i32, i32* %m_add, align 4
  %add32 = add nsw i32 %26, %shl31
  store i32 %add32, i32* %m_add, align 4
  %27 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i32 %28
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 1
  %29 = load i32, i32* %arrayidx34, align 4
  %shl35 = shl i32 1, %29
  %30 = load i32, i32* %m_or, align 4
  %or36 = or i32 %30, %shl35
  store i32 %or36, i32* %m_or, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.then28, %if.end24
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx39 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx38, i32 0, i32 2
  %33 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp sge i32 %33, 0
  br i1 %cmp40, label %if.then41, label %if.end50

if.then41:                                        ; preds = %if.end37
  %34 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i32 %35
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 2
  %36 = load i32, i32* %arrayidx43, align 4
  %shl44 = shl i32 1, %36
  %37 = load i32, i32* %d_add, align 4
  %add45 = add nsw i32 %37, %shl44
  store i32 %add45, i32* %d_add, align 4
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 2
  %40 = load i32, i32* %arrayidx47, align 4
  %shl48 = shl i32 1, %40
  %41 = load i32, i32* %d_or, align 4
  %or49 = or i32 %41, %shl48
  store i32 %or49, i32* %d_or, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then41, %if.end37
  %42 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [5 x i32], [5 x i32]* %42, i32 %43
  %arrayidx52 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx51, i32 0, i32 3
  %44 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp sge i32 %44, 0
  br i1 %cmp53, label %if.then54, label %if.end63

if.then54:                                        ; preds = %if.end50
  %45 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds [5 x i32], [5 x i32]* %45, i32 %46
  %arrayidx56 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx55, i32 0, i32 3
  %47 = load i32, i32* %arrayidx56, align 4
  %shl57 = shl i32 1, %47
  %48 = load i32, i32* %a_add, align 4
  %add58 = add nsw i32 %48, %shl57
  store i32 %add58, i32* %a_add, align 4
  %49 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds [5 x i32], [5 x i32]* %49, i32 %50
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx59, i32 0, i32 3
  %51 = load i32, i32* %arrayidx60, align 4
  %shl61 = shl i32 1, %51
  %52 = load i32, i32* %a_or, align 4
  %or62 = or i32 %52, %shl61
  store i32 %or62, i32* %a_or, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then54, %if.end50
  %53 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds [5 x i32], [5 x i32]* %53, i32 %54
  %arrayidx65 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx64, i32 0, i32 4
  %55 = load i32, i32* %arrayidx65, align 4
  %cmp66 = icmp sge i32 %55, 0
  br i1 %cmp66, label %if.then67, label %if.end76

if.then67:                                        ; preds = %if.end63
  %56 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i32 %57
  %arrayidx69 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx68, i32 0, i32 4
  %58 = load i32, i32* %arrayidx69, align 4
  %shl70 = shl i32 1, %58
  %59 = load i32, i32* %s_add, align 4
  %add71 = add nsw i32 %59, %shl70
  store i32 %add71, i32* %s_add, align 4
  %60 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx72 = getelementptr inbounds [5 x i32], [5 x i32]* %60, i32 %61
  %arrayidx73 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx72, i32 0, i32 4
  %62 = load i32, i32* %arrayidx73, align 4
  %shl74 = shl i32 1, %62
  %63 = load i32, i32* %s_or, align 4
  %or75 = or i32 %63, %shl74
  store i32 %or75, i32* %s_or, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then67, %if.end63
  %64 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %65 = load i32, i32* %i, align 4
  %arrayidx77 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i32 %65
  %arrayidx78 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx77, i32 0, i32 1
  %66 = load i32, i32* %arrayidx78, align 4
  %cmp79 = icmp sge i32 %66, 0
  br i1 %cmp79, label %land.lhs.true80, label %if.end100

land.lhs.true80:                                  ; preds = %if.end76
  %67 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [5 x i32], [5 x i32]* %67, i32 %68
  %arrayidx82 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx81, i32 0, i32 0
  %69 = load i32, i32* %arrayidx82, align 4
  %cmp83 = icmp sge i32 %69, 0
  br i1 %cmp83, label %land.lhs.true84, label %if.end100

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %70 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %71 = load i32, i32* %i, align 4
  %arrayidx85 = getelementptr inbounds [5 x i32], [5 x i32]* %70, i32 %71
  %arrayidx86 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx85, i32 0, i32 1
  %72 = load i32, i32* %arrayidx86, align 4
  %cmp87 = icmp eq i32 %72, 0
  br i1 %cmp87, label %land.lhs.true88, label %lor.lhs.false

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %73 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx89 = getelementptr inbounds [5 x i32], [5 x i32]* %73, i32 %74
  %arrayidx90 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx89, i32 0, i32 0
  %75 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp ne i32 %75, 0
  br i1 %cmp91, label %if.then99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true88, %land.lhs.true84
  %76 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [5 x i32], [5 x i32]* %76, i32 %77
  %arrayidx93 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx92, i32 0, i32 1
  %78 = load i32, i32* %arrayidx93, align 4
  %cmp94 = icmp ne i32 %78, 0
  br i1 %cmp94, label %land.lhs.true95, label %if.end100

land.lhs.true95:                                  ; preds = %lor.lhs.false
  %79 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx96 = getelementptr inbounds [5 x i32], [5 x i32]* %79, i32 %80
  %arrayidx97 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx96, i32 0, i32 0
  %81 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp eq i32 %81, 0
  br i1 %cmp98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.lhs.true95, %land.lhs.true88
  store i32 0, i32* %retval, align 4
  br label %return

if.end100:                                        ; preds = %land.lhs.true95, %lor.lhs.false, %land.lhs.true80, %if.end76
  %82 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %83 = load i32, i32* %i, align 4
  %arrayidx101 = getelementptr inbounds [5 x i32], [5 x i32]* %82, i32 %83
  %arrayidx102 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx101, i32 0, i32 1
  %84 = load i32, i32* %arrayidx102, align 4
  %cmp103 = icmp sge i32 %84, 0
  br i1 %cmp103, label %land.lhs.true104, label %if.end125

land.lhs.true104:                                 ; preds = %if.end100
  %85 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %85, i32 %86
  %arrayidx106 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx105, i32 0, i32 3
  %87 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sge i32 %87, 0
  br i1 %cmp107, label %land.lhs.true108, label %if.end125

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %88 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %89 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [5 x i32], [5 x i32]* %88, i32 %89
  %arrayidx110 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx109, i32 0, i32 1
  %90 = load i32, i32* %arrayidx110, align 4
  %cmp111 = icmp eq i32 %90, 1
  br i1 %cmp111, label %land.lhs.true112, label %lor.lhs.false116

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %91 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %92 = load i32, i32* %i, align 4
  %arrayidx113 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i32 %92
  %arrayidx114 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx113, i32 0, i32 3
  %93 = load i32, i32* %arrayidx114, align 4
  %cmp115 = icmp ne i32 %93, 0
  br i1 %cmp115, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true112, %land.lhs.true108
  %94 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx117 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i32 %95
  %arrayidx118 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx117, i32 0, i32 1
  %96 = load i32, i32* %arrayidx118, align 4
  %cmp119 = icmp ne i32 %96, 1
  br i1 %cmp119, label %land.lhs.true120, label %if.end125

land.lhs.true120:                                 ; preds = %lor.lhs.false116
  %97 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds [5 x i32], [5 x i32]* %97, i32 %98
  %arrayidx122 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx121, i32 0, i32 3
  %99 = load i32, i32* %arrayidx122, align 4
  %cmp123 = icmp eq i32 %99, 0
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %land.lhs.true120, %land.lhs.true112
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %land.lhs.true120, %lor.lhs.false116, %land.lhs.true104, %if.end100
  %100 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %101 = load i32, i32* %i, align 4
  %arrayidx126 = getelementptr inbounds [5 x i32], [5 x i32]* %100, i32 %101
  %arrayidx127 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx126, i32 0, i32 1
  %102 = load i32, i32* %arrayidx127, align 4
  %cmp128 = icmp sge i32 %102, 0
  br i1 %cmp128, label %land.lhs.true129, label %if.end150

land.lhs.true129:                                 ; preds = %if.end125
  %103 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %104 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds [5 x i32], [5 x i32]* %103, i32 %104
  %arrayidx131 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx130, i32 0, i32 2
  %105 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp sge i32 %105, 0
  br i1 %cmp132, label %land.lhs.true133, label %if.end150

land.lhs.true133:                                 ; preds = %land.lhs.true129
  %106 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %107 = load i32, i32* %i, align 4
  %arrayidx134 = getelementptr inbounds [5 x i32], [5 x i32]* %106, i32 %107
  %arrayidx135 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx134, i32 0, i32 1
  %108 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp eq i32 %108, 2
  br i1 %cmp136, label %land.lhs.true137, label %lor.lhs.false141

land.lhs.true137:                                 ; preds = %land.lhs.true133
  %109 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %110 = load i32, i32* %i, align 4
  %arrayidx138 = getelementptr inbounds [5 x i32], [5 x i32]* %109, i32 %110
  %arrayidx139 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx138, i32 0, i32 2
  %111 = load i32, i32* %arrayidx139, align 4
  %cmp140 = icmp ne i32 %111, 0
  br i1 %cmp140, label %if.then149, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %land.lhs.true137, %land.lhs.true133
  %112 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %113 = load i32, i32* %i, align 4
  %arrayidx142 = getelementptr inbounds [5 x i32], [5 x i32]* %112, i32 %113
  %arrayidx143 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx142, i32 0, i32 1
  %114 = load i32, i32* %arrayidx143, align 4
  %cmp144 = icmp ne i32 %114, 2
  br i1 %cmp144, label %land.lhs.true145, label %if.end150

land.lhs.true145:                                 ; preds = %lor.lhs.false141
  %115 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %116 = load i32, i32* %i, align 4
  %arrayidx146 = getelementptr inbounds [5 x i32], [5 x i32]* %115, i32 %116
  %arrayidx147 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx146, i32 0, i32 2
  %117 = load i32, i32* %arrayidx147, align 4
  %cmp148 = icmp eq i32 %117, 0
  br i1 %cmp148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %land.lhs.true145, %land.lhs.true137
  store i32 0, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %land.lhs.true145, %lor.lhs.false141, %land.lhs.true129, %if.end125
  %118 = load i32, i32* %i, align 4
  %cmp151 = icmp sgt i32 %118, 0
  br i1 %cmp151, label %land.lhs.true152, label %if.end174

land.lhs.true152:                                 ; preds = %if.end150
  %119 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %120 = load i32, i32* %i, align 4
  %arrayidx153 = getelementptr inbounds [5 x i32], [5 x i32]* %119, i32 %120
  %arrayidx154 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx153, i32 0, i32 0
  %121 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp sge i32 %121, 0
  br i1 %cmp155, label %land.lhs.true156, label %if.end174

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %122 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %123 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %123, 1
  %arrayidx157 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i32 %sub
  %arrayidx158 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx157, i32 0, i32 0
  %124 = load i32, i32* %arrayidx158, align 4
  %cmp159 = icmp eq i32 %124, 1
  br i1 %cmp159, label %land.lhs.true160, label %lor.lhs.false164

land.lhs.true160:                                 ; preds = %land.lhs.true156
  %125 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %126 = load i32, i32* %i, align 4
  %arrayidx161 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i32 %126
  %arrayidx162 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx161, i32 0, i32 0
  %127 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %127, 2
  br i1 %cmp163, label %if.then173, label %lor.lhs.false164

lor.lhs.false164:                                 ; preds = %land.lhs.true160, %land.lhs.true156
  %128 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %129 = load i32, i32* %i, align 4
  %sub165 = sub nsw i32 %129, 1
  %arrayidx166 = getelementptr inbounds [5 x i32], [5 x i32]* %128, i32 %sub165
  %arrayidx167 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx166, i32 0, i32 0
  %130 = load i32, i32* %arrayidx167, align 4
  %cmp168 = icmp ne i32 %130, 1
  br i1 %cmp168, label %land.lhs.true169, label %if.end174

land.lhs.true169:                                 ; preds = %lor.lhs.false164
  %131 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %132 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds [5 x i32], [5 x i32]* %131, i32 %132
  %arrayidx171 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx170, i32 0, i32 0
  %133 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp eq i32 %133, 2
  br i1 %cmp172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %land.lhs.true169, %land.lhs.true160
  store i32 0, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %land.lhs.true169, %lor.lhs.false164, %land.lhs.true152, %if.end150
  %134 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %135 = load i32, i32* %i, align 4
  %arrayidx175 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i32 %135
  %arrayidx176 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx175, i32 0, i32 0
  %136 = load i32, i32* %arrayidx176, align 4
  %cmp177 = icmp sge i32 %136, 0
  br i1 %cmp177, label %land.lhs.true178, label %if.end199

land.lhs.true178:                                 ; preds = %if.end174
  %137 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %138 = load i32, i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [5 x i32], [5 x i32]* %137, i32 %138
  %arrayidx180 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx179, i32 0, i32 2
  %139 = load i32, i32* %arrayidx180, align 4
  %cmp181 = icmp sge i32 %139, 0
  br i1 %cmp181, label %land.lhs.true182, label %if.end199

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %140 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx183 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i32 %141
  %arrayidx184 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx183, i32 0, i32 0
  %142 = load i32, i32* %arrayidx184, align 4
  %cmp185 = icmp eq i32 %142, 1
  br i1 %cmp185, label %land.lhs.true186, label %lor.lhs.false190

land.lhs.true186:                                 ; preds = %land.lhs.true182
  %143 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %144 = load i32, i32* %i, align 4
  %arrayidx187 = getelementptr inbounds [5 x i32], [5 x i32]* %143, i32 %144
  %arrayidx188 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx187, i32 0, i32 2
  %145 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp ne i32 %145, 1
  br i1 %cmp189, label %if.then198, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %land.lhs.true186, %land.lhs.true182
  %146 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %147 = load i32, i32* %i, align 4
  %arrayidx191 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i32 %147
  %arrayidx192 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx191, i32 0, i32 0
  %148 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp ne i32 %148, 1
  br i1 %cmp193, label %land.lhs.true194, label %if.end199

land.lhs.true194:                                 ; preds = %lor.lhs.false190
  %149 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %150 = load i32, i32* %i, align 4
  %arrayidx195 = getelementptr inbounds [5 x i32], [5 x i32]* %149, i32 %150
  %arrayidx196 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx195, i32 0, i32 2
  %151 = load i32, i32* %arrayidx196, align 4
  %cmp197 = icmp eq i32 %151, 1
  br i1 %cmp197, label %if.then198, label %if.end199

if.then198:                                       ; preds = %land.lhs.true194, %land.lhs.true186
  store i32 0, i32* %retval, align 4
  br label %return

if.end199:                                        ; preds = %land.lhs.true194, %lor.lhs.false190, %land.lhs.true178, %if.end174
  %152 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %153 = load i32, i32* %i, align 4
  %arrayidx200 = getelementptr inbounds [5 x i32], [5 x i32]* %152, i32 %153
  %arrayidx201 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx200, i32 0, i32 4
  %154 = load i32, i32* %arrayidx201, align 4
  %cmp202 = icmp sge i32 %154, 0
  br i1 %cmp202, label %land.lhs.true203, label %if.end224

land.lhs.true203:                                 ; preds = %if.end199
  %155 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %156 = load i32, i32* %i, align 4
  %arrayidx204 = getelementptr inbounds [5 x i32], [5 x i32]* %155, i32 %156
  %arrayidx205 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx204, i32 0, i32 3
  %157 = load i32, i32* %arrayidx205, align 4
  %cmp206 = icmp sge i32 %157, 0
  br i1 %cmp206, label %land.lhs.true207, label %if.end224

land.lhs.true207:                                 ; preds = %land.lhs.true203
  %158 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %159 = load i32, i32* %i, align 4
  %arrayidx208 = getelementptr inbounds [5 x i32], [5 x i32]* %158, i32 %159
  %arrayidx209 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx208, i32 0, i32 4
  %160 = load i32, i32* %arrayidx209, align 4
  %cmp210 = icmp eq i32 %160, 0
  br i1 %cmp210, label %land.lhs.true211, label %lor.lhs.false215

land.lhs.true211:                                 ; preds = %land.lhs.true207
  %161 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %162 = load i32, i32* %i, align 4
  %arrayidx212 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i32 %162
  %arrayidx213 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx212, i32 0, i32 3
  %163 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp ne i32 %163, 1
  br i1 %cmp214, label %if.then223, label %lor.lhs.false215

lor.lhs.false215:                                 ; preds = %land.lhs.true211, %land.lhs.true207
  %164 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %165 = load i32, i32* %i, align 4
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %164, i32 %165
  %arrayidx217 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx216, i32 0, i32 4
  %166 = load i32, i32* %arrayidx217, align 4
  %cmp218 = icmp ne i32 %166, 0
  br i1 %cmp218, label %land.lhs.true219, label %if.end224

land.lhs.true219:                                 ; preds = %lor.lhs.false215
  %167 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %168 = load i32, i32* %i, align 4
  %arrayidx220 = getelementptr inbounds [5 x i32], [5 x i32]* %167, i32 %168
  %arrayidx221 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx220, i32 0, i32 3
  %169 = load i32, i32* %arrayidx221, align 4
  %cmp222 = icmp eq i32 %169, 1
  br i1 %cmp222, label %if.then223, label %if.end224

if.then223:                                       ; preds = %land.lhs.true219, %land.lhs.true211
  store i32 0, i32* %retval, align 4
  br label %return

if.end224:                                        ; preds = %land.lhs.true219, %lor.lhs.false215, %land.lhs.true203, %if.end199
  %170 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %171 = load i32, i32* %i, align 4
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %170, i32 %171
  %arrayidx226 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx225, i32 0, i32 4
  %172 = load i32, i32* %arrayidx226, align 4
  %cmp227 = icmp sge i32 %172, 0
  br i1 %cmp227, label %land.lhs.true228, label %if.end249

land.lhs.true228:                                 ; preds = %if.end224
  %173 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %174 = load i32, i32* %i, align 4
  %arrayidx229 = getelementptr inbounds [5 x i32], [5 x i32]* %173, i32 %174
  %arrayidx230 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx229, i32 0, i32 0
  %175 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp sge i32 %175, 0
  br i1 %cmp231, label %land.lhs.true232, label %if.end249

land.lhs.true232:                                 ; preds = %land.lhs.true228
  %176 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %177 = load i32, i32* %i, align 4
  %arrayidx233 = getelementptr inbounds [5 x i32], [5 x i32]* %176, i32 %177
  %arrayidx234 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx233, i32 0, i32 4
  %178 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp eq i32 %178, 1
  br i1 %cmp235, label %land.lhs.true236, label %lor.lhs.false240

land.lhs.true236:                                 ; preds = %land.lhs.true232
  %179 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %180 = load i32, i32* %i, align 4
  %arrayidx237 = getelementptr inbounds [5 x i32], [5 x i32]* %179, i32 %180
  %arrayidx238 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx237, i32 0, i32 0
  %181 = load i32, i32* %arrayidx238, align 4
  %cmp239 = icmp ne i32 %181, 3
  br i1 %cmp239, label %if.then248, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true236, %land.lhs.true232
  %182 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %183 = load i32, i32* %i, align 4
  %arrayidx241 = getelementptr inbounds [5 x i32], [5 x i32]* %182, i32 %183
  %arrayidx242 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx241, i32 0, i32 4
  %184 = load i32, i32* %arrayidx242, align 4
  %cmp243 = icmp ne i32 %184, 1
  br i1 %cmp243, label %land.lhs.true244, label %if.end249

land.lhs.true244:                                 ; preds = %lor.lhs.false240
  %185 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %186 = load i32, i32* %i, align 4
  %arrayidx245 = getelementptr inbounds [5 x i32], [5 x i32]* %185, i32 %186
  %arrayidx246 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx245, i32 0, i32 0
  %187 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp eq i32 %187, 3
  br i1 %cmp247, label %if.then248, label %if.end249

if.then248:                                       ; preds = %land.lhs.true244, %land.lhs.true236
  store i32 0, i32* %retval, align 4
  br label %return

if.end249:                                        ; preds = %land.lhs.true244, %lor.lhs.false240, %land.lhs.true228, %if.end224
  %188 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %189 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x i32], [5 x i32]* %188, i32 %189
  %arrayidx251 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx250, i32 0, i32 4
  %190 = load i32, i32* %arrayidx251, align 4
  %cmp252 = icmp eq i32 %190, 2
  br i1 %cmp252, label %if.then253, label %if.end292

if.then253:                                       ; preds = %if.end249
  %191 = load i32, i32* %i, align 4
  %cmp254 = icmp eq i32 %191, 0
  br i1 %cmp254, label %land.lhs.true255, label %if.else

land.lhs.true255:                                 ; preds = %if.then253
  %192 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %193 = load i32, i32* %i, align 4
  %add256 = add nsw i32 %193, 1
  %arrayidx257 = getelementptr inbounds [5 x i32], [5 x i32]* %192, i32 %add256
  %arrayidx258 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx257, i32 0, i32 3
  %194 = load i32, i32* %arrayidx258, align 4
  %cmp259 = icmp sge i32 %194, 0
  br i1 %cmp259, label %land.lhs.true260, label %if.else

land.lhs.true260:                                 ; preds = %land.lhs.true255
  %195 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %196 = load i32, i32* %i, align 4
  %add261 = add nsw i32 %196, 1
  %arrayidx262 = getelementptr inbounds [5 x i32], [5 x i32]* %195, i32 %add261
  %arrayidx263 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx262, i32 0, i32 3
  %197 = load i32, i32* %arrayidx263, align 4
  %cmp264 = icmp ne i32 %197, 2
  br i1 %cmp264, label %if.then265, label %if.else

if.then265:                                       ; preds = %land.lhs.true260
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true260, %land.lhs.true255, %if.then253
  %198 = load i32, i32* %i, align 4
  %cmp266 = icmp eq i32 %198, 4
  br i1 %cmp266, label %land.lhs.true267, label %if.else273

land.lhs.true267:                                 ; preds = %if.else
  %199 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %200 = load i32, i32* %i, align 4
  %sub268 = sub nsw i32 %200, 1
  %arrayidx269 = getelementptr inbounds [5 x i32], [5 x i32]* %199, i32 %sub268
  %arrayidx270 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx269, i32 0, i32 3
  %201 = load i32, i32* %arrayidx270, align 4
  %cmp271 = icmp ne i32 %201, 2
  br i1 %cmp271, label %if.then272, label %if.else273

if.then272:                                       ; preds = %land.lhs.true267
  store i32 0, i32* %retval, align 4
  br label %return

if.else273:                                       ; preds = %land.lhs.true267, %if.else
  %202 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %203 = load i32, i32* %i, align 4
  %add274 = add nsw i32 %203, 1
  %arrayidx275 = getelementptr inbounds [5 x i32], [5 x i32]* %202, i32 %add274
  %arrayidx276 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx275, i32 0, i32 3
  %204 = load i32, i32* %arrayidx276, align 4
  %cmp277 = icmp sge i32 %204, 0
  br i1 %cmp277, label %land.lhs.true278, label %if.end289

land.lhs.true278:                                 ; preds = %if.else273
  %205 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %206 = load i32, i32* %i, align 4
  %add279 = add nsw i32 %206, 1
  %arrayidx280 = getelementptr inbounds [5 x i32], [5 x i32]* %205, i32 %add279
  %arrayidx281 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx280, i32 0, i32 3
  %207 = load i32, i32* %arrayidx281, align 4
  %cmp282 = icmp ne i32 %207, 2
  br i1 %cmp282, label %land.lhs.true283, label %if.end289

land.lhs.true283:                                 ; preds = %land.lhs.true278
  %208 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %209 = load i32, i32* %i, align 4
  %sub284 = sub nsw i32 %209, 1
  %arrayidx285 = getelementptr inbounds [5 x i32], [5 x i32]* %208, i32 %sub284
  %arrayidx286 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx285, i32 0, i32 3
  %210 = load i32, i32* %arrayidx286, align 4
  %cmp287 = icmp ne i32 %210, 2
  br i1 %cmp287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %land.lhs.true283
  store i32 0, i32* %retval, align 4
  br label %return

if.end289:                                        ; preds = %land.lhs.true283, %land.lhs.true278, %if.else273
  br label %if.end290

if.end290:                                        ; preds = %if.end289
  br label %if.end291

if.end291:                                        ; preds = %if.end290
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.end249
  %211 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %212 = load i32, i32* %i, align 4
  %arrayidx293 = getelementptr inbounds [5 x i32], [5 x i32]* %211, i32 %212
  %arrayidx294 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx293, i32 0, i32 4
  %213 = load i32, i32* %arrayidx294, align 4
  %cmp295 = icmp eq i32 %213, 1
  br i1 %cmp295, label %if.then296, label %if.end336

if.then296:                                       ; preds = %if.end292
  %214 = load i32, i32* %i, align 4
  %cmp297 = icmp eq i32 %214, 0
  br i1 %cmp297, label %land.lhs.true298, label %if.else309

land.lhs.true298:                                 ; preds = %if.then296
  %215 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %216 = load i32, i32* %i, align 4
  %add299 = add nsw i32 %216, 1
  %arrayidx300 = getelementptr inbounds [5 x i32], [5 x i32]* %215, i32 %add299
  %arrayidx301 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx300, i32 0, i32 3
  %217 = load i32, i32* %arrayidx301, align 4
  %cmp302 = icmp sge i32 %217, 0
  br i1 %cmp302, label %land.lhs.true303, label %if.else309

land.lhs.true303:                                 ; preds = %land.lhs.true298
  %218 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %219 = load i32, i32* %i, align 4
  %add304 = add nsw i32 %219, 1
  %arrayidx305 = getelementptr inbounds [5 x i32], [5 x i32]* %218, i32 %add304
  %arrayidx306 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx305, i32 0, i32 3
  %220 = load i32, i32* %arrayidx306, align 4
  %cmp307 = icmp ne i32 %220, 3
  br i1 %cmp307, label %if.then308, label %if.else309

if.then308:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %retval, align 4
  br label %return

if.else309:                                       ; preds = %land.lhs.true303, %land.lhs.true298, %if.then296
  %221 = load i32, i32* %i, align 4
  %cmp310 = icmp eq i32 %221, 4
  br i1 %cmp310, label %land.lhs.true311, label %if.else317

land.lhs.true311:                                 ; preds = %if.else309
  %222 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %223 = load i32, i32* %i, align 4
  %sub312 = sub nsw i32 %223, 1
  %arrayidx313 = getelementptr inbounds [5 x i32], [5 x i32]* %222, i32 %sub312
  %arrayidx314 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx313, i32 0, i32 3
  %224 = load i32, i32* %arrayidx314, align 4
  %cmp315 = icmp ne i32 %224, 3
  br i1 %cmp315, label %if.then316, label %if.else317

if.then316:                                       ; preds = %land.lhs.true311
  store i32 0, i32* %retval, align 4
  br label %return

if.else317:                                       ; preds = %land.lhs.true311, %if.else309
  %225 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %226 = load i32, i32* %i, align 4
  %add318 = add nsw i32 %226, 1
  %arrayidx319 = getelementptr inbounds [5 x i32], [5 x i32]* %225, i32 %add318
  %arrayidx320 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx319, i32 0, i32 3
  %227 = load i32, i32* %arrayidx320, align 4
  %cmp321 = icmp sge i32 %227, 0
  br i1 %cmp321, label %land.lhs.true322, label %if.end333

land.lhs.true322:                                 ; preds = %if.else317
  %228 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %229 = load i32, i32* %i, align 4
  %add323 = add nsw i32 %229, 1
  %arrayidx324 = getelementptr inbounds [5 x i32], [5 x i32]* %228, i32 %add323
  %arrayidx325 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx324, i32 0, i32 3
  %230 = load i32, i32* %arrayidx325, align 4
  %cmp326 = icmp ne i32 %230, 3
  br i1 %cmp326, label %land.lhs.true327, label %if.end333

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %231 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %232 = load i32, i32* %i, align 4
  %sub328 = sub nsw i32 %232, 1
  %arrayidx329 = getelementptr inbounds [5 x i32], [5 x i32]* %231, i32 %sub328
  %arrayidx330 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx329, i32 0, i32 3
  %233 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp ne i32 %233, 3
  br i1 %cmp331, label %if.then332, label %if.end333

if.then332:                                       ; preds = %land.lhs.true327
  store i32 0, i32* %retval, align 4
  br label %return

if.end333:                                        ; preds = %land.lhs.true327, %land.lhs.true322, %if.else317
  br label %if.end334

if.end334:                                        ; preds = %if.end333
  br label %if.end335

if.end335:                                        ; preds = %if.end334
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end292
  %234 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %235 = load i32, i32* %i, align 4
  %arrayidx337 = getelementptr inbounds [5 x i32], [5 x i32]* %234, i32 %235
  %arrayidx338 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx337, i32 0, i32 4
  %236 = load i32, i32* %arrayidx338, align 4
  %cmp339 = icmp sge i32 %236, 0
  br i1 %cmp339, label %land.lhs.true340, label %if.end361

land.lhs.true340:                                 ; preds = %if.end336
  %237 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %238 = load i32, i32* %i, align 4
  %arrayidx341 = getelementptr inbounds [5 x i32], [5 x i32]* %237, i32 %238
  %arrayidx342 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx341, i32 0, i32 2
  %239 = load i32, i32* %arrayidx342, align 4
  %cmp343 = icmp sge i32 %239, 0
  br i1 %cmp343, label %land.lhs.true344, label %if.end361

land.lhs.true344:                                 ; preds = %land.lhs.true340
  %240 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %241 = load i32, i32* %i, align 4
  %arrayidx345 = getelementptr inbounds [5 x i32], [5 x i32]* %240, i32 %241
  %arrayidx346 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx345, i32 0, i32 4
  %242 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %242, 3
  br i1 %cmp347, label %land.lhs.true348, label %lor.lhs.false352

land.lhs.true348:                                 ; preds = %land.lhs.true344
  %243 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %244 = load i32, i32* %i, align 4
  %arrayidx349 = getelementptr inbounds [5 x i32], [5 x i32]* %243, i32 %244
  %arrayidx350 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx349, i32 0, i32 2
  %245 = load i32, i32* %arrayidx350, align 4
  %cmp351 = icmp ne i32 %245, 3
  br i1 %cmp351, label %if.then360, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %land.lhs.true348, %land.lhs.true344
  %246 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %247 = load i32, i32* %i, align 4
  %arrayidx353 = getelementptr inbounds [5 x i32], [5 x i32]* %246, i32 %247
  %arrayidx354 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx353, i32 0, i32 4
  %248 = load i32, i32* %arrayidx354, align 4
  %cmp355 = icmp ne i32 %248, 3
  br i1 %cmp355, label %land.lhs.true356, label %if.end361

land.lhs.true356:                                 ; preds = %lor.lhs.false352
  %249 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %250 = load i32, i32* %i, align 4
  %arrayidx357 = getelementptr inbounds [5 x i32], [5 x i32]* %249, i32 %250
  %arrayidx358 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx357, i32 0, i32 2
  %251 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp eq i32 %251, 3
  br i1 %cmp359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %land.lhs.true356, %land.lhs.true348
  store i32 0, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %land.lhs.true356, %lor.lhs.false352, %land.lhs.true340, %if.end336
  %252 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %253 = load i32, i32* %i, align 4
  %arrayidx362 = getelementptr inbounds [5 x i32], [5 x i32]* %252, i32 %253
  %arrayidx363 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx362, i32 0, i32 1
  %254 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp sge i32 %254, 0
  br i1 %cmp364, label %land.lhs.true365, label %if.end386

land.lhs.true365:                                 ; preds = %if.end361
  %255 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %256 = load i32, i32* %i, align 4
  %arrayidx366 = getelementptr inbounds [5 x i32], [5 x i32]* %255, i32 %256
  %arrayidx367 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx366, i32 0, i32 4
  %257 = load i32, i32* %arrayidx367, align 4
  %cmp368 = icmp sge i32 %257, 0
  br i1 %cmp368, label %land.lhs.true369, label %if.end386

land.lhs.true369:                                 ; preds = %land.lhs.true365
  %258 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %259 = load i32, i32* %i, align 4
  %arrayidx370 = getelementptr inbounds [5 x i32], [5 x i32]* %258, i32 %259
  %arrayidx371 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx370, i32 0, i32 1
  %260 = load i32, i32* %arrayidx371, align 4
  %cmp372 = icmp eq i32 %260, 3
  br i1 %cmp372, label %land.lhs.true373, label %lor.lhs.false377

land.lhs.true373:                                 ; preds = %land.lhs.true369
  %261 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %262 = load i32, i32* %i, align 4
  %arrayidx374 = getelementptr inbounds [5 x i32], [5 x i32]* %261, i32 %262
  %arrayidx375 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx374, i32 0, i32 4
  %263 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp ne i32 %263, 4
  br i1 %cmp376, label %if.then385, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %land.lhs.true373, %land.lhs.true369
  %264 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %265 = load i32, i32* %i, align 4
  %arrayidx378 = getelementptr inbounds [5 x i32], [5 x i32]* %264, i32 %265
  %arrayidx379 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx378, i32 0, i32 1
  %266 = load i32, i32* %arrayidx379, align 4
  %cmp380 = icmp ne i32 %266, 3
  br i1 %cmp380, label %land.lhs.true381, label %if.end386

land.lhs.true381:                                 ; preds = %lor.lhs.false377
  %267 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %268 = load i32, i32* %i, align 4
  %arrayidx382 = getelementptr inbounds [5 x i32], [5 x i32]* %267, i32 %268
  %arrayidx383 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx382, i32 0, i32 4
  %269 = load i32, i32* %arrayidx383, align 4
  %cmp384 = icmp eq i32 %269, 4
  br i1 %cmp384, label %if.then385, label %if.end386

if.then385:                                       ; preds = %land.lhs.true381, %land.lhs.true373
  store i32 0, i32* %retval, align 4
  br label %return

if.end386:                                        ; preds = %land.lhs.true381, %lor.lhs.false377, %land.lhs.true365, %if.end361
  %270 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %271 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [5 x i32], [5 x i32]* %270, i32 %271
  %arrayidx388 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx387, i32 0, i32 1
  %272 = load i32, i32* %arrayidx388, align 4
  %cmp389 = icmp eq i32 %272, 4
  br i1 %cmp389, label %land.lhs.true390, label %if.end410

land.lhs.true390:                                 ; preds = %if.end386
  %273 = load i32, i32* %i, align 4
  %cmp391 = icmp slt i32 %273, 4
  br i1 %cmp391, label %land.lhs.true392, label %lor.lhs.false402

land.lhs.true392:                                 ; preds = %land.lhs.true390
  %274 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %275 = load i32, i32* %i, align 4
  %add393 = add nsw i32 %275, 1
  %arrayidx394 = getelementptr inbounds [5 x i32], [5 x i32]* %274, i32 %add393
  %arrayidx395 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx394, i32 0, i32 0
  %276 = load i32, i32* %arrayidx395, align 4
  %cmp396 = icmp sge i32 %276, 0
  br i1 %cmp396, label %land.lhs.true397, label %lor.lhs.false402

land.lhs.true397:                                 ; preds = %land.lhs.true392
  %277 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %278 = load i32, i32* %i, align 4
  %add398 = add nsw i32 %278, 1
  %arrayidx399 = getelementptr inbounds [5 x i32], [5 x i32]* %277, i32 %add398
  %arrayidx400 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx399, i32 0, i32 0
  %279 = load i32, i32* %arrayidx400, align 4
  %cmp401 = icmp ne i32 %279, 4
  br i1 %cmp401, label %if.then409, label %lor.lhs.false402

lor.lhs.false402:                                 ; preds = %land.lhs.true397, %land.lhs.true392, %land.lhs.true390
  %280 = load i32, i32* %i, align 4
  %cmp403 = icmp sgt i32 %280, 0
  br i1 %cmp403, label %land.lhs.true404, label %if.end410

land.lhs.true404:                                 ; preds = %lor.lhs.false402
  %281 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %282 = load i32, i32* %i, align 4
  %sub405 = sub nsw i32 %282, 1
  %arrayidx406 = getelementptr inbounds [5 x i32], [5 x i32]* %281, i32 %sub405
  %arrayidx407 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx406, i32 0, i32 0
  %283 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp ne i32 %283, 4
  br i1 %cmp408, label %if.then409, label %if.end410

if.then409:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  store i32 0, i32* %retval, align 4
  br label %return

if.end410:                                        ; preds = %land.lhs.true404, %lor.lhs.false402, %if.end386
  %284 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %285 = load i32, i32* %i, align 4
  %arrayidx411 = getelementptr inbounds [5 x i32], [5 x i32]* %284, i32 %285
  %arrayidx412 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx411, i32 0, i32 4
  %286 = load i32, i32* %arrayidx412, align 4
  %cmp413 = icmp eq i32 %286, 2
  br i1 %cmp413, label %if.then414, label %if.end454

if.then414:                                       ; preds = %if.end410
  %287 = load i32, i32* %i, align 4
  %cmp415 = icmp eq i32 %287, 0
  br i1 %cmp415, label %land.lhs.true416, label %if.else427

land.lhs.true416:                                 ; preds = %if.then414
  %288 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %289 = load i32, i32* %i, align 4
  %add417 = add nsw i32 %289, 1
  %arrayidx418 = getelementptr inbounds [5 x i32], [5 x i32]* %288, i32 %add417
  %arrayidx419 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx418, i32 0, i32 2
  %290 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp sge i32 %290, 0
  br i1 %cmp420, label %land.lhs.true421, label %if.else427

land.lhs.true421:                                 ; preds = %land.lhs.true416
  %291 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %292 = load i32, i32* %i, align 4
  %add422 = add nsw i32 %292, 1
  %arrayidx423 = getelementptr inbounds [5 x i32], [5 x i32]* %291, i32 %add422
  %arrayidx424 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx423, i32 0, i32 2
  %293 = load i32, i32* %arrayidx424, align 4
  %cmp425 = icmp ne i32 %293, 4
  br i1 %cmp425, label %if.then426, label %if.else427

if.then426:                                       ; preds = %land.lhs.true421
  store i32 0, i32* %retval, align 4
  br label %return

if.else427:                                       ; preds = %land.lhs.true421, %land.lhs.true416, %if.then414
  %294 = load i32, i32* %i, align 4
  %cmp428 = icmp eq i32 %294, 4
  br i1 %cmp428, label %land.lhs.true429, label %if.else435

land.lhs.true429:                                 ; preds = %if.else427
  %295 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %296 = load i32, i32* %i, align 4
  %sub430 = sub nsw i32 %296, 1
  %arrayidx431 = getelementptr inbounds [5 x i32], [5 x i32]* %295, i32 %sub430
  %arrayidx432 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx431, i32 0, i32 2
  %297 = load i32, i32* %arrayidx432, align 4
  %cmp433 = icmp ne i32 %297, 4
  br i1 %cmp433, label %if.then434, label %if.else435

if.then434:                                       ; preds = %land.lhs.true429
  store i32 0, i32* %retval, align 4
  br label %return

if.else435:                                       ; preds = %land.lhs.true429, %if.else427
  %298 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %299 = load i32, i32* %i, align 4
  %add436 = add nsw i32 %299, 1
  %arrayidx437 = getelementptr inbounds [5 x i32], [5 x i32]* %298, i32 %add436
  %arrayidx438 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx437, i32 0, i32 2
  %300 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp sge i32 %300, 0
  br i1 %cmp439, label %land.lhs.true440, label %if.end451

land.lhs.true440:                                 ; preds = %if.else435
  %301 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %302 = load i32, i32* %i, align 4
  %add441 = add nsw i32 %302, 1
  %arrayidx442 = getelementptr inbounds [5 x i32], [5 x i32]* %301, i32 %add441
  %arrayidx443 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx442, i32 0, i32 2
  %303 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %303, 4
  br i1 %cmp444, label %land.lhs.true445, label %if.end451

land.lhs.true445:                                 ; preds = %land.lhs.true440
  %304 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %305 = load i32, i32* %i, align 4
  %sub446 = sub nsw i32 %305, 1
  %arrayidx447 = getelementptr inbounds [5 x i32], [5 x i32]* %304, i32 %sub446
  %arrayidx448 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx447, i32 0, i32 2
  %306 = load i32, i32* %arrayidx448, align 4
  %cmp449 = icmp ne i32 %306, 4
  br i1 %cmp449, label %if.then450, label %if.end451

if.then450:                                       ; preds = %land.lhs.true445
  store i32 0, i32* %retval, align 4
  br label %return

if.end451:                                        ; preds = %land.lhs.true445, %land.lhs.true440, %if.else435
  br label %if.end452

if.end452:                                        ; preds = %if.end451
  br label %if.end453

if.end453:                                        ; preds = %if.end452
  br label %if.end454

if.end454:                                        ; preds = %if.end453, %if.end410
  br label %for.inc

for.inc:                                          ; preds = %if.end454
  %307 = load i32, i32* %i, align 4
  %inc = add nsw i32 %307, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %308 = load i32, i32* %c_add, align 4
  %309 = load i32, i32* %c_or, align 4
  %cmp455 = icmp ne i32 %308, %309
  br i1 %cmp455, label %if.then464, label %lor.lhs.false456

lor.lhs.false456:                                 ; preds = %for.end
  %310 = load i32, i32* %m_add, align 4
  %311 = load i32, i32* %m_or, align 4
  %cmp457 = icmp ne i32 %310, %311
  br i1 %cmp457, label %if.then464, label %lor.lhs.false458

lor.lhs.false458:                                 ; preds = %lor.lhs.false456
  %312 = load i32, i32* %d_add, align 4
  %313 = load i32, i32* %d_or, align 4
  %cmp459 = icmp ne i32 %312, %313
  br i1 %cmp459, label %if.then464, label %lor.lhs.false460

lor.lhs.false460:                                 ; preds = %lor.lhs.false458
  %314 = load i32, i32* %a_add, align 4
  %315 = load i32, i32* %a_or, align 4
  %cmp461 = icmp ne i32 %314, %315
  br i1 %cmp461, label %if.then464, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %lor.lhs.false460
  %316 = load i32, i32* %s_add, align 4
  %317 = load i32, i32* %s_or, align 4
  %cmp463 = icmp ne i32 %316, %317
  br i1 %cmp463, label %if.then464, label %if.end465

if.then464:                                       ; preds = %lor.lhs.false462, %lor.lhs.false460, %lor.lhs.false458, %lor.lhs.false456, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end465:                                        ; preds = %lor.lhs.false462
  %318 = load i32, i32* %c_add, align 4
  %cmp466 = icmp ne i32 %318, 31
  br i1 %cmp466, label %if.then475, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %if.end465
  %319 = load i32, i32* %m_add, align 4
  %cmp468 = icmp ne i32 %319, 31
  br i1 %cmp468, label %if.then475, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %lor.lhs.false467
  %320 = load i32, i32* %d_add, align 4
  %cmp470 = icmp ne i32 %320, 31
  br i1 %cmp470, label %if.then475, label %lor.lhs.false471

lor.lhs.false471:                                 ; preds = %lor.lhs.false469
  %321 = load i32, i32* %a_add, align 4
  %cmp472 = icmp ne i32 %321, 31
  br i1 %cmp472, label %if.then475, label %lor.lhs.false473

lor.lhs.false473:                                 ; preds = %lor.lhs.false471
  %322 = load i32, i32* %s_add, align 4
  %cmp474 = icmp ne i32 %322, 31
  br i1 %cmp474, label %if.then475, label %if.end476

if.then475:                                       ; preds = %lor.lhs.false473, %lor.lhs.false471, %lor.lhs.false469, %lor.lhs.false467, %if.end465
  store i32 1, i32* %retval, align 4
  br label %return

if.end476:                                        ; preds = %lor.lhs.false473
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end476, %if.then475, %if.then464, %if.then450, %if.then434, %if.then426, %if.then409, %if.then385, %if.then360, %if.then332, %if.then316, %if.then308, %if.then288, %if.then272, %if.then265, %if.then248, %if.then223, %if.then198, %if.then173, %if.then149, %if.then124, %if.then99, %if.then12, %if.then
  %323 = load i32, i32* %retval, align 4
  ret i32 %323
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @bruteFill([5 x i32]* %ha, i32 %hno, i32 %attr) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %hno.addr = alloca i32, align 4
  %attr.addr = alloca i32, align 4
  %stat = alloca i32, align 4
  %hb = alloca [5 x [5 x i32]], align 16
  %i = alloca i32, align 4
  %nexthno = alloca i32, align 4
  %nextattr = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 %hno, i32* %hno.addr, align 4
  store i32 %attr, i32* %attr.addr, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %call = call i32 @checkHouses([5 x i32]* %0)
  store i32 %call, i32* %stat, align 4
  %1 = load i32, i32* %stat, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %stat, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* %stat, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %4 = bitcast [5 x i32]* %arraydecay to i8*
  %5 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %6 = bitcast [5 x i32]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 4 %6, i32 100, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %7, 5
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %hno.addr, align 4
  %arrayidx = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 %9
  %10 = load i32, i32* %attr.addr, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %call5 = call i32 @checkHouses([5 x i32]* %arraydecay4)
  store i32 %call5, i32* %stat, align 4
  %11 = load i32, i32* %stat, align 4
  %cmp6 = icmp ne i32 %11, 0
  br i1 %cmp6, label %if.then7, label %if.end18

if.then7:                                         ; preds = %for.body
  %12 = load i32, i32* %attr.addr, align 4
  %cmp8 = icmp slt i32 %12, 4
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %13 = load i32, i32* %attr.addr, align 4
  %add = add nsw i32 %13, 1
  store i32 %add, i32* %nextattr, align 4
  %14 = load i32, i32* %hno.addr, align 4
  store i32 %14, i32* %nexthno, align 4
  br label %if.end11

if.else:                                          ; preds = %if.then7
  store i32 0, i32* %nextattr, align 4
  %15 = load i32, i32* %hno.addr, align 4
  %add10 = add nsw i32 %15, 1
  store i32 %add10, i32* %nexthno, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %arraydecay12 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %16 = load i32, i32* %nexthno, align 4
  %17 = load i32, i32* %nextattr, align 4
  %call13 = call i32 @bruteFill([5 x i32]* %arraydecay12, i32 %16, i32 %17)
  store i32 %call13, i32* %stat, align 4
  %18 = load i32, i32* %stat, align 4
  %cmp14 = icmp ne i32 %18, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end11
  %19 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %20 = bitcast [5 x i32]* %19 to i8*
  %arraydecay16 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %21 = bitcast [5 x i32]* %arraydecay16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 100, i1 false)
  %22 = load i32, i32* %stat, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ha = alloca [5 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x [5 x i32]]* %ha to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 -1, i32 100, i1 false)
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  %call = call i32 @bruteFill([5 x i32]* %arraydecay, i32 0, i32 0)
  %arraydecay1 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  call void @printHouses([5 x i32]* %arraydecay1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @checkHouses([5 x i32]* %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %7, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %hno.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %attr.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call i32 @checkHouses([5 x i32]* %arraydecay4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %attr.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %attr.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %hno.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %hno.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add10 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %nexthno, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %nextattr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 @bruteFill([5 x i32]* %arraydecay12, i32 %16, i32 %17)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp ne i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %stat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for bruteFill()

; entering Souper's runOnFunction() for main()

; ModuleID = './Zebra_puzzle.c.bc'
source_filename = "./Zebra_puzzle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"Red\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Green\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"White\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Yellow\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blue\00", align 1
@__const.printHouses.color = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [8 x i8] c"English\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Swede\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Dane\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"German\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Norwegian\00", align 1
@__const.printHouses.man = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 16
@.str.10 = private unnamed_addr constant [4 x i8] c"Tea\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Coffee\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Milk\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Beer\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"Water\00", align 1
@__const.printHouses.drink = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0)], align 16
@.str.15 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Birds\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"Cats\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Horse\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"Zebra\00", align 1
@__const.printHouses.animal = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0)], align 16
@.str.20 = private unnamed_addr constant [9 x i8] c"PallMall\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"Dunhill\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"Blend\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"BlueMaster\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Prince\00", align 1
@__const.printHouses.smoke = private unnamed_addr constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.25 = private unnamed_addr constant [50 x i8] c"%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s%-10.10s\0A\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"Man\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"Drink\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"Animal\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Smoke\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"%-10d\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"%-10.10s\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"%-10.10s\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"-\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @printHouses([5 x i32]* %ha) #0 {
entry:
  %ha.addr = alloca [5 x i32]*, align 4
  %color = alloca [5 x i8*], align 16
  %man = alloca [5 x i8*], align 16
  %drink = alloca [5 x i8*], align 16
  %animal = alloca [5 x i8*], align 16
  %smoke = alloca [5 x i8*], align 16
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  %0 = bitcast [5 x i8*]* %color to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.color to i8*), i32 20, i1 false)
  %1 = bitcast [5 x i8*]* %man to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.man to i8*), i32 20, i1 false)
  %2 = bitcast [5 x i8*]* %drink to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.drink to i8*), i32 20, i1 false)
  %3 = bitcast [5 x i8*]* %animal to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.animal to i8*), i32 20, i1 false)
  %4 = bitcast [5 x i8*]* %smoke to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([5 x i8*]* @__const.printHouses.smoke to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %5, 5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i32 0, i32 0), i32 %6)
  %7 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %7, i32 %8
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 0
  %9 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sge i32 %9, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %10 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %10, i32 %11
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx4, i32 0, i32 0
  %12 = load i32, i32* %arrayidx5, align 4
  %arrayidx6 = getelementptr inbounds [5 x i8*], [5 x i8*]* %color, i32 0, i32 %12
  %13 = load i8*, i8** %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %13)
  br label %if.end

if.else:                                          ; preds = %for.body
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %14, i32 %15
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %16 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp sge i32 %16, 0
  br i1 %cmp11, label %if.then12, label %if.else17

if.then12:                                        ; preds = %if.end
  %17 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [5 x i32], [5 x i32]* %17, i32 %18
  %arrayidx14 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 1
  %19 = load i32, i32* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8*], [5 x i8*]* %man, i32 0, i32 %19
  %20 = load i8*, i8** %arrayidx15, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %20)
  br label %if.end19

if.else17:                                        ; preds = %if.end
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then12
  %21 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i32 %22
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx20, i32 0, i32 2
  %23 = load i32, i32* %arrayidx21, align 4
  %cmp22 = icmp sge i32 %23, 0
  br i1 %cmp22, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.end19
  %24 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [5 x i32], [5 x i32]* %24, i32 %25
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx24, i32 0, i32 2
  %26 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds [5 x i8*], [5 x i8*]* %drink, i32 0, i32 %26
  %27 = load i8*, i8** %arrayidx26, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %27)
  br label %if.end30

if.else28:                                        ; preds = %if.end19
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then23
  %28 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [5 x i32], [5 x i32]* %28, i32 %29
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 3
  %30 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %30, 0
  br i1 %cmp33, label %if.then34, label %if.else39

if.then34:                                        ; preds = %if.end30
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx36 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx35, i32 0, i32 3
  %33 = load i32, i32* %arrayidx36, align 4
  %arrayidx37 = getelementptr inbounds [5 x i8*], [5 x i8*]* %animal, i32 0, i32 %33
  %34 = load i8*, i8** %arrayidx37, align 4
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* %34)
  br label %if.end41

if.else39:                                        ; preds = %if.end30
  %call40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then34
  %35 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %35, i32 %36
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 4
  %37 = load i32, i32* %arrayidx43, align 4
  %cmp44 = icmp sge i32 %37, 0
  br i1 %cmp44, label %if.then45, label %if.else50

if.then45:                                        ; preds = %if.end41
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 4
  %40 = load i32, i32* %arrayidx47, align 4
  %arrayidx48 = getelementptr inbounds [5 x i8*], [5 x i8*]* %smoke, i32 0, i32 %40
  %41 = load i8*, i8** %arrayidx48, align 4
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* %41)
  br label %if.end52

if.else50:                                        ; preds = %if.end41
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0))
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.then45
  br label %for.inc

for.inc:                                          ; preds = %if.end52
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @checkHouses([5 x i32]* %ha) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %c_add = alloca i32, align 4
  %c_or = alloca i32, align 4
  %m_add = alloca i32, align 4
  %m_or = alloca i32, align 4
  %d_add = alloca i32, align 4
  %d_or = alloca i32, align 4
  %a_add = alloca i32, align 4
  %a_or = alloca i32, align 4
  %s_add = alloca i32, align 4
  %s_or = alloca i32, align 4
  %i = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 0, i32* %c_add, align 4
  store i32 0, i32* %c_or, align 4
  store i32 0, i32* %m_add, align 4
  store i32 0, i32* %m_or, align 4
  store i32 0, i32* %d_add, align 4
  store i32 0, i32* %d_or, align 4
  store i32 0, i32* %a_add, align 4
  store i32 0, i32* %a_or, align 4
  store i32 0, i32* %s_add, align 4
  store i32 0, i32* %s_or, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %0, i32 2
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 2
  %1 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i32 2
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %3, 2
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx5 = getelementptr inbounds [5 x i32], [5 x i32]* %4, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx5, i32 0, i32 1
  %5 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp sge i32 %5, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end13

land.lhs.true8:                                   ; preds = %if.end
  %6 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* %6, i32 0
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 1
  %7 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %7, 4
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true8
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true8, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %8 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %8, 5
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i32], [5 x i32]* %9, i32 %10
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx15, i32 0, i32 0
  %11 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %11, 0
  br i1 %cmp17, label %if.then18, label %if.end24

if.then18:                                        ; preds = %for.body
  %12 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [5 x i32], [5 x i32]* %12, i32 %13
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 0
  %14 = load i32, i32* %arrayidx20, align 4
  %shl = shl i32 1, %14
  %15 = load i32, i32* %c_add, align 4
  %add = add nsw i32 %15, %shl
  store i32 %add, i32* %c_add, align 4
  %16 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i32], [5 x i32]* %16, i32 %17
  %arrayidx22 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx21, i32 0, i32 0
  %18 = load i32, i32* %arrayidx22, align 4
  %shl23 = shl i32 1, %18
  %19 = load i32, i32* %c_or, align 4
  %or = or i32 %19, %shl23
  store i32 %or, i32* %c_or, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %for.body
  %20 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds [5 x i32], [5 x i32]* %20, i32 %21
  %arrayidx26 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx25, i32 0, i32 1
  %22 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp sge i32 %22, 0
  br i1 %cmp27, label %if.then28, label %if.end37

if.then28:                                        ; preds = %if.end24
  %23 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx29 = getelementptr inbounds [5 x i32], [5 x i32]* %23, i32 %24
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx29, i32 0, i32 1
  %25 = load i32, i32* %arrayidx30, align 4
  %shl31 = shl i32 1, %25
  %26 = load i32, i32* %m_add, align 4
  %add32 = add nsw i32 %26, %shl31
  store i32 %add32, i32* %m_add, align 4
  %27 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i32 %28
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 1
  %29 = load i32, i32* %arrayidx34, align 4
  %shl35 = shl i32 1, %29
  %30 = load i32, i32* %m_or, align 4
  %or36 = or i32 %30, %shl35
  store i32 %or36, i32* %m_or, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.then28, %if.end24
  %31 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [5 x i32], [5 x i32]* %31, i32 %32
  %arrayidx39 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx38, i32 0, i32 2
  %33 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp sge i32 %33, 0
  br i1 %cmp40, label %if.then41, label %if.end50

if.then41:                                        ; preds = %if.end37
  %34 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i32 %35
  %arrayidx43 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx42, i32 0, i32 2
  %36 = load i32, i32* %arrayidx43, align 4
  %shl44 = shl i32 1, %36
  %37 = load i32, i32* %d_add, align 4
  %add45 = add nsw i32 %37, %shl44
  store i32 %add45, i32* %d_add, align 4
  %38 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx46 = getelementptr inbounds [5 x i32], [5 x i32]* %38, i32 %39
  %arrayidx47 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx46, i32 0, i32 2
  %40 = load i32, i32* %arrayidx47, align 4
  %shl48 = shl i32 1, %40
  %41 = load i32, i32* %d_or, align 4
  %or49 = or i32 %41, %shl48
  store i32 %or49, i32* %d_or, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then41, %if.end37
  %42 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [5 x i32], [5 x i32]* %42, i32 %43
  %arrayidx52 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx51, i32 0, i32 3
  %44 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp sge i32 %44, 0
  br i1 %cmp53, label %if.then54, label %if.end63

if.then54:                                        ; preds = %if.end50
  %45 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds [5 x i32], [5 x i32]* %45, i32 %46
  %arrayidx56 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx55, i32 0, i32 3
  %47 = load i32, i32* %arrayidx56, align 4
  %shl57 = shl i32 1, %47
  %48 = load i32, i32* %a_add, align 4
  %add58 = add nsw i32 %48, %shl57
  store i32 %add58, i32* %a_add, align 4
  %49 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds [5 x i32], [5 x i32]* %49, i32 %50
  %arrayidx60 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx59, i32 0, i32 3
  %51 = load i32, i32* %arrayidx60, align 4
  %shl61 = shl i32 1, %51
  %52 = load i32, i32* %a_or, align 4
  %or62 = or i32 %52, %shl61
  store i32 %or62, i32* %a_or, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then54, %if.end50
  %53 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds [5 x i32], [5 x i32]* %53, i32 %54
  %arrayidx65 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx64, i32 0, i32 4
  %55 = load i32, i32* %arrayidx65, align 4
  %cmp66 = icmp sge i32 %55, 0
  br i1 %cmp66, label %if.then67, label %if.end76

if.then67:                                        ; preds = %if.end63
  %56 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx68 = getelementptr inbounds [5 x i32], [5 x i32]* %56, i32 %57
  %arrayidx69 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx68, i32 0, i32 4
  %58 = load i32, i32* %arrayidx69, align 4
  %shl70 = shl i32 1, %58
  %59 = load i32, i32* %s_add, align 4
  %add71 = add nsw i32 %59, %shl70
  store i32 %add71, i32* %s_add, align 4
  %60 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx72 = getelementptr inbounds [5 x i32], [5 x i32]* %60, i32 %61
  %arrayidx73 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx72, i32 0, i32 4
  %62 = load i32, i32* %arrayidx73, align 4
  %shl74 = shl i32 1, %62
  %63 = load i32, i32* %s_or, align 4
  %or75 = or i32 %63, %shl74
  store i32 %or75, i32* %s_or, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then67, %if.end63
  %64 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %65 = load i32, i32* %i, align 4
  %arrayidx77 = getelementptr inbounds [5 x i32], [5 x i32]* %64, i32 %65
  %arrayidx78 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx77, i32 0, i32 1
  %66 = load i32, i32* %arrayidx78, align 4
  %cmp79 = icmp sge i32 %66, 0
  br i1 %cmp79, label %land.lhs.true80, label %if.end100

land.lhs.true80:                                  ; preds = %if.end76
  %67 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [5 x i32], [5 x i32]* %67, i32 %68
  %arrayidx82 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx81, i32 0, i32 0
  %69 = load i32, i32* %arrayidx82, align 4
  %cmp83 = icmp sge i32 %69, 0
  br i1 %cmp83, label %land.lhs.true84, label %if.end100

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %70 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %71 = load i32, i32* %i, align 4
  %arrayidx85 = getelementptr inbounds [5 x i32], [5 x i32]* %70, i32 %71
  %arrayidx86 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx85, i32 0, i32 1
  %72 = load i32, i32* %arrayidx86, align 4
  %cmp87 = icmp eq i32 %72, 0
  br i1 %cmp87, label %land.lhs.true88, label %lor.lhs.false

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %73 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx89 = getelementptr inbounds [5 x i32], [5 x i32]* %73, i32 %74
  %arrayidx90 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx89, i32 0, i32 0
  %75 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp ne i32 %75, 0
  br i1 %cmp91, label %if.then99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true88, %land.lhs.true84
  %76 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [5 x i32], [5 x i32]* %76, i32 %77
  %arrayidx93 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx92, i32 0, i32 1
  %78 = load i32, i32* %arrayidx93, align 4
  %cmp94 = icmp ne i32 %78, 0
  br i1 %cmp94, label %land.lhs.true95, label %if.end100

land.lhs.true95:                                  ; preds = %lor.lhs.false
  %79 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx96 = getelementptr inbounds [5 x i32], [5 x i32]* %79, i32 %80
  %arrayidx97 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx96, i32 0, i32 0
  %81 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp eq i32 %81, 0
  br i1 %cmp98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %land.lhs.true95, %land.lhs.true88
  store i32 0, i32* %retval, align 4
  br label %return

if.end100:                                        ; preds = %land.lhs.true95, %lor.lhs.false, %land.lhs.true80, %if.end76
  %82 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %83 = load i32, i32* %i, align 4
  %arrayidx101 = getelementptr inbounds [5 x i32], [5 x i32]* %82, i32 %83
  %arrayidx102 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx101, i32 0, i32 1
  %84 = load i32, i32* %arrayidx102, align 4
  %cmp103 = icmp sge i32 %84, 0
  br i1 %cmp103, label %land.lhs.true104, label %if.end125

land.lhs.true104:                                 ; preds = %if.end100
  %85 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %86 = load i32, i32* %i, align 4
  %arrayidx105 = getelementptr inbounds [5 x i32], [5 x i32]* %85, i32 %86
  %arrayidx106 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx105, i32 0, i32 3
  %87 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sge i32 %87, 0
  br i1 %cmp107, label %land.lhs.true108, label %if.end125

land.lhs.true108:                                 ; preds = %land.lhs.true104
  %88 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %89 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [5 x i32], [5 x i32]* %88, i32 %89
  %arrayidx110 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx109, i32 0, i32 1
  %90 = load i32, i32* %arrayidx110, align 4
  %cmp111 = icmp eq i32 %90, 1
  br i1 %cmp111, label %land.lhs.true112, label %lor.lhs.false116

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %91 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %92 = load i32, i32* %i, align 4
  %arrayidx113 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i32 %92
  %arrayidx114 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx113, i32 0, i32 3
  %93 = load i32, i32* %arrayidx114, align 4
  %cmp115 = icmp ne i32 %93, 0
  br i1 %cmp115, label %if.then124, label %lor.lhs.false116

lor.lhs.false116:                                 ; preds = %land.lhs.true112, %land.lhs.true108
  %94 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %95 = load i32, i32* %i, align 4
  %arrayidx117 = getelementptr inbounds [5 x i32], [5 x i32]* %94, i32 %95
  %arrayidx118 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx117, i32 0, i32 1
  %96 = load i32, i32* %arrayidx118, align 4
  %cmp119 = icmp ne i32 %96, 1
  br i1 %cmp119, label %land.lhs.true120, label %if.end125

land.lhs.true120:                                 ; preds = %lor.lhs.false116
  %97 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds [5 x i32], [5 x i32]* %97, i32 %98
  %arrayidx122 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx121, i32 0, i32 3
  %99 = load i32, i32* %arrayidx122, align 4
  %cmp123 = icmp eq i32 %99, 0
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %land.lhs.true120, %land.lhs.true112
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %land.lhs.true120, %lor.lhs.false116, %land.lhs.true104, %if.end100
  %100 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %101 = load i32, i32* %i, align 4
  %arrayidx126 = getelementptr inbounds [5 x i32], [5 x i32]* %100, i32 %101
  %arrayidx127 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx126, i32 0, i32 1
  %102 = load i32, i32* %arrayidx127, align 4
  %cmp128 = icmp sge i32 %102, 0
  br i1 %cmp128, label %land.lhs.true129, label %if.end150

land.lhs.true129:                                 ; preds = %if.end125
  %103 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %104 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds [5 x i32], [5 x i32]* %103, i32 %104
  %arrayidx131 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx130, i32 0, i32 2
  %105 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp sge i32 %105, 0
  br i1 %cmp132, label %land.lhs.true133, label %if.end150

land.lhs.true133:                                 ; preds = %land.lhs.true129
  %106 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %107 = load i32, i32* %i, align 4
  %arrayidx134 = getelementptr inbounds [5 x i32], [5 x i32]* %106, i32 %107
  %arrayidx135 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx134, i32 0, i32 1
  %108 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp eq i32 %108, 2
  br i1 %cmp136, label %land.lhs.true137, label %lor.lhs.false141

land.lhs.true137:                                 ; preds = %land.lhs.true133
  %109 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %110 = load i32, i32* %i, align 4
  %arrayidx138 = getelementptr inbounds [5 x i32], [5 x i32]* %109, i32 %110
  %arrayidx139 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx138, i32 0, i32 2
  %111 = load i32, i32* %arrayidx139, align 4
  %cmp140 = icmp ne i32 %111, 0
  br i1 %cmp140, label %if.then149, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %land.lhs.true137, %land.lhs.true133
  %112 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %113 = load i32, i32* %i, align 4
  %arrayidx142 = getelementptr inbounds [5 x i32], [5 x i32]* %112, i32 %113
  %arrayidx143 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx142, i32 0, i32 1
  %114 = load i32, i32* %arrayidx143, align 4
  %cmp144 = icmp ne i32 %114, 2
  br i1 %cmp144, label %land.lhs.true145, label %if.end150

land.lhs.true145:                                 ; preds = %lor.lhs.false141
  %115 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %116 = load i32, i32* %i, align 4
  %arrayidx146 = getelementptr inbounds [5 x i32], [5 x i32]* %115, i32 %116
  %arrayidx147 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx146, i32 0, i32 2
  %117 = load i32, i32* %arrayidx147, align 4
  %cmp148 = icmp eq i32 %117, 0
  br i1 %cmp148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %land.lhs.true145, %land.lhs.true137
  store i32 0, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %land.lhs.true145, %lor.lhs.false141, %land.lhs.true129, %if.end125
  %118 = load i32, i32* %i, align 4
  %cmp151 = icmp sgt i32 %118, 0
  br i1 %cmp151, label %land.lhs.true152, label %if.end174

land.lhs.true152:                                 ; preds = %if.end150
  %119 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %120 = load i32, i32* %i, align 4
  %arrayidx153 = getelementptr inbounds [5 x i32], [5 x i32]* %119, i32 %120
  %arrayidx154 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx153, i32 0, i32 0
  %121 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp sge i32 %121, 0
  br i1 %cmp155, label %land.lhs.true156, label %if.end174

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %122 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %123 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %123, 1
  %arrayidx157 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i32 %sub
  %arrayidx158 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx157, i32 0, i32 0
  %124 = load i32, i32* %arrayidx158, align 4
  %cmp159 = icmp eq i32 %124, 1
  br i1 %cmp159, label %land.lhs.true160, label %lor.lhs.false164

land.lhs.true160:                                 ; preds = %land.lhs.true156
  %125 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %126 = load i32, i32* %i, align 4
  %arrayidx161 = getelementptr inbounds [5 x i32], [5 x i32]* %125, i32 %126
  %arrayidx162 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx161, i32 0, i32 0
  %127 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %127, 2
  br i1 %cmp163, label %if.then173, label %lor.lhs.false164

lor.lhs.false164:                                 ; preds = %land.lhs.true160, %land.lhs.true156
  %128 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %129 = load i32, i32* %i, align 4
  %sub165 = sub nsw i32 %129, 1
  %arrayidx166 = getelementptr inbounds [5 x i32], [5 x i32]* %128, i32 %sub165
  %arrayidx167 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx166, i32 0, i32 0
  %130 = load i32, i32* %arrayidx167, align 4
  %cmp168 = icmp ne i32 %130, 1
  br i1 %cmp168, label %land.lhs.true169, label %if.end174

land.lhs.true169:                                 ; preds = %lor.lhs.false164
  %131 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %132 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds [5 x i32], [5 x i32]* %131, i32 %132
  %arrayidx171 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx170, i32 0, i32 0
  %133 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp eq i32 %133, 2
  br i1 %cmp172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %land.lhs.true169, %land.lhs.true160
  store i32 0, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %land.lhs.true169, %lor.lhs.false164, %land.lhs.true152, %if.end150
  %134 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %135 = load i32, i32* %i, align 4
  %arrayidx175 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i32 %135
  %arrayidx176 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx175, i32 0, i32 0
  %136 = load i32, i32* %arrayidx176, align 4
  %cmp177 = icmp sge i32 %136, 0
  br i1 %cmp177, label %land.lhs.true178, label %if.end199

land.lhs.true178:                                 ; preds = %if.end174
  %137 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %138 = load i32, i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [5 x i32], [5 x i32]* %137, i32 %138
  %arrayidx180 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx179, i32 0, i32 2
  %139 = load i32, i32* %arrayidx180, align 4
  %cmp181 = icmp sge i32 %139, 0
  br i1 %cmp181, label %land.lhs.true182, label %if.end199

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %140 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx183 = getelementptr inbounds [5 x i32], [5 x i32]* %140, i32 %141
  %arrayidx184 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx183, i32 0, i32 0
  %142 = load i32, i32* %arrayidx184, align 4
  %cmp185 = icmp eq i32 %142, 1
  br i1 %cmp185, label %land.lhs.true186, label %lor.lhs.false190

land.lhs.true186:                                 ; preds = %land.lhs.true182
  %143 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %144 = load i32, i32* %i, align 4
  %arrayidx187 = getelementptr inbounds [5 x i32], [5 x i32]* %143, i32 %144
  %arrayidx188 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx187, i32 0, i32 2
  %145 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp ne i32 %145, 1
  br i1 %cmp189, label %if.then198, label %lor.lhs.false190

lor.lhs.false190:                                 ; preds = %land.lhs.true186, %land.lhs.true182
  %146 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %147 = load i32, i32* %i, align 4
  %arrayidx191 = getelementptr inbounds [5 x i32], [5 x i32]* %146, i32 %147
  %arrayidx192 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx191, i32 0, i32 0
  %148 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp ne i32 %148, 1
  br i1 %cmp193, label %land.lhs.true194, label %if.end199

land.lhs.true194:                                 ; preds = %lor.lhs.false190
  %149 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %150 = load i32, i32* %i, align 4
  %arrayidx195 = getelementptr inbounds [5 x i32], [5 x i32]* %149, i32 %150
  %arrayidx196 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx195, i32 0, i32 2
  %151 = load i32, i32* %arrayidx196, align 4
  %cmp197 = icmp eq i32 %151, 1
  br i1 %cmp197, label %if.then198, label %if.end199

if.then198:                                       ; preds = %land.lhs.true194, %land.lhs.true186
  store i32 0, i32* %retval, align 4
  br label %return

if.end199:                                        ; preds = %land.lhs.true194, %lor.lhs.false190, %land.lhs.true178, %if.end174
  %152 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %153 = load i32, i32* %i, align 4
  %arrayidx200 = getelementptr inbounds [5 x i32], [5 x i32]* %152, i32 %153
  %arrayidx201 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx200, i32 0, i32 4
  %154 = load i32, i32* %arrayidx201, align 4
  %cmp202 = icmp sge i32 %154, 0
  br i1 %cmp202, label %land.lhs.true203, label %if.end224

land.lhs.true203:                                 ; preds = %if.end199
  %155 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %156 = load i32, i32* %i, align 4
  %arrayidx204 = getelementptr inbounds [5 x i32], [5 x i32]* %155, i32 %156
  %arrayidx205 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx204, i32 0, i32 3
  %157 = load i32, i32* %arrayidx205, align 4
  %cmp206 = icmp sge i32 %157, 0
  br i1 %cmp206, label %land.lhs.true207, label %if.end224

land.lhs.true207:                                 ; preds = %land.lhs.true203
  %158 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %159 = load i32, i32* %i, align 4
  %arrayidx208 = getelementptr inbounds [5 x i32], [5 x i32]* %158, i32 %159
  %arrayidx209 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx208, i32 0, i32 4
  %160 = load i32, i32* %arrayidx209, align 4
  %cmp210 = icmp eq i32 %160, 0
  br i1 %cmp210, label %land.lhs.true211, label %lor.lhs.false215

land.lhs.true211:                                 ; preds = %land.lhs.true207
  %161 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %162 = load i32, i32* %i, align 4
  %arrayidx212 = getelementptr inbounds [5 x i32], [5 x i32]* %161, i32 %162
  %arrayidx213 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx212, i32 0, i32 3
  %163 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp ne i32 %163, 1
  br i1 %cmp214, label %if.then223, label %lor.lhs.false215

lor.lhs.false215:                                 ; preds = %land.lhs.true211, %land.lhs.true207
  %164 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %165 = load i32, i32* %i, align 4
  %arrayidx216 = getelementptr inbounds [5 x i32], [5 x i32]* %164, i32 %165
  %arrayidx217 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx216, i32 0, i32 4
  %166 = load i32, i32* %arrayidx217, align 4
  %cmp218 = icmp ne i32 %166, 0
  br i1 %cmp218, label %land.lhs.true219, label %if.end224

land.lhs.true219:                                 ; preds = %lor.lhs.false215
  %167 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %168 = load i32, i32* %i, align 4
  %arrayidx220 = getelementptr inbounds [5 x i32], [5 x i32]* %167, i32 %168
  %arrayidx221 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx220, i32 0, i32 3
  %169 = load i32, i32* %arrayidx221, align 4
  %cmp222 = icmp eq i32 %169, 1
  br i1 %cmp222, label %if.then223, label %if.end224

if.then223:                                       ; preds = %land.lhs.true219, %land.lhs.true211
  store i32 0, i32* %retval, align 4
  br label %return

if.end224:                                        ; preds = %land.lhs.true219, %lor.lhs.false215, %land.lhs.true203, %if.end199
  %170 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %171 = load i32, i32* %i, align 4
  %arrayidx225 = getelementptr inbounds [5 x i32], [5 x i32]* %170, i32 %171
  %arrayidx226 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx225, i32 0, i32 4
  %172 = load i32, i32* %arrayidx226, align 4
  %cmp227 = icmp sge i32 %172, 0
  br i1 %cmp227, label %land.lhs.true228, label %if.end249

land.lhs.true228:                                 ; preds = %if.end224
  %173 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %174 = load i32, i32* %i, align 4
  %arrayidx229 = getelementptr inbounds [5 x i32], [5 x i32]* %173, i32 %174
  %arrayidx230 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx229, i32 0, i32 0
  %175 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp sge i32 %175, 0
  br i1 %cmp231, label %land.lhs.true232, label %if.end249

land.lhs.true232:                                 ; preds = %land.lhs.true228
  %176 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %177 = load i32, i32* %i, align 4
  %arrayidx233 = getelementptr inbounds [5 x i32], [5 x i32]* %176, i32 %177
  %arrayidx234 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx233, i32 0, i32 4
  %178 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp eq i32 %178, 1
  br i1 %cmp235, label %land.lhs.true236, label %lor.lhs.false240

land.lhs.true236:                                 ; preds = %land.lhs.true232
  %179 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %180 = load i32, i32* %i, align 4
  %arrayidx237 = getelementptr inbounds [5 x i32], [5 x i32]* %179, i32 %180
  %arrayidx238 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx237, i32 0, i32 0
  %181 = load i32, i32* %arrayidx238, align 4
  %cmp239 = icmp ne i32 %181, 3
  br i1 %cmp239, label %if.then248, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true236, %land.lhs.true232
  %182 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %183 = load i32, i32* %i, align 4
  %arrayidx241 = getelementptr inbounds [5 x i32], [5 x i32]* %182, i32 %183
  %arrayidx242 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx241, i32 0, i32 4
  %184 = load i32, i32* %arrayidx242, align 4
  %cmp243 = icmp ne i32 %184, 1
  br i1 %cmp243, label %land.lhs.true244, label %if.end249

land.lhs.true244:                                 ; preds = %lor.lhs.false240
  %185 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %186 = load i32, i32* %i, align 4
  %arrayidx245 = getelementptr inbounds [5 x i32], [5 x i32]* %185, i32 %186
  %arrayidx246 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx245, i32 0, i32 0
  %187 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp eq i32 %187, 3
  br i1 %cmp247, label %if.then248, label %if.end249

if.then248:                                       ; preds = %land.lhs.true244, %land.lhs.true236
  store i32 0, i32* %retval, align 4
  br label %return

if.end249:                                        ; preds = %land.lhs.true244, %lor.lhs.false240, %land.lhs.true228, %if.end224
  %188 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %189 = load i32, i32* %i, align 4
  %arrayidx250 = getelementptr inbounds [5 x i32], [5 x i32]* %188, i32 %189
  %arrayidx251 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx250, i32 0, i32 4
  %190 = load i32, i32* %arrayidx251, align 4
  %cmp252 = icmp eq i32 %190, 2
  br i1 %cmp252, label %if.then253, label %if.end292

if.then253:                                       ; preds = %if.end249
  %191 = load i32, i32* %i, align 4
  %cmp254 = icmp eq i32 %191, 0
  br i1 %cmp254, label %land.lhs.true255, label %if.else

land.lhs.true255:                                 ; preds = %if.then253
  %192 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %193 = load i32, i32* %i, align 4
  %add256 = add nsw i32 %193, 1
  %arrayidx257 = getelementptr inbounds [5 x i32], [5 x i32]* %192, i32 %add256
  %arrayidx258 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx257, i32 0, i32 3
  %194 = load i32, i32* %arrayidx258, align 4
  %cmp259 = icmp sge i32 %194, 0
  br i1 %cmp259, label %land.lhs.true260, label %if.else

land.lhs.true260:                                 ; preds = %land.lhs.true255
  %195 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %196 = load i32, i32* %i, align 4
  %add261 = add nsw i32 %196, 1
  %arrayidx262 = getelementptr inbounds [5 x i32], [5 x i32]* %195, i32 %add261
  %arrayidx263 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx262, i32 0, i32 3
  %197 = load i32, i32* %arrayidx263, align 4
  %cmp264 = icmp ne i32 %197, 2
  br i1 %cmp264, label %if.then265, label %if.else

if.then265:                                       ; preds = %land.lhs.true260
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true260, %land.lhs.true255, %if.then253
  %198 = load i32, i32* %i, align 4
  %cmp266 = icmp eq i32 %198, 4
  br i1 %cmp266, label %land.lhs.true267, label %if.else273

land.lhs.true267:                                 ; preds = %if.else
  %199 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %200 = load i32, i32* %i, align 4
  %sub268 = sub nsw i32 %200, 1
  %arrayidx269 = getelementptr inbounds [5 x i32], [5 x i32]* %199, i32 %sub268
  %arrayidx270 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx269, i32 0, i32 3
  %201 = load i32, i32* %arrayidx270, align 4
  %cmp271 = icmp ne i32 %201, 2
  br i1 %cmp271, label %if.then272, label %if.else273

if.then272:                                       ; preds = %land.lhs.true267
  store i32 0, i32* %retval, align 4
  br label %return

if.else273:                                       ; preds = %land.lhs.true267, %if.else
  %202 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %203 = load i32, i32* %i, align 4
  %add274 = add nsw i32 %203, 1
  %arrayidx275 = getelementptr inbounds [5 x i32], [5 x i32]* %202, i32 %add274
  %arrayidx276 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx275, i32 0, i32 3
  %204 = load i32, i32* %arrayidx276, align 4
  %cmp277 = icmp sge i32 %204, 0
  br i1 %cmp277, label %land.lhs.true278, label %if.end289

land.lhs.true278:                                 ; preds = %if.else273
  %205 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %206 = load i32, i32* %i, align 4
  %add279 = add nsw i32 %206, 1
  %arrayidx280 = getelementptr inbounds [5 x i32], [5 x i32]* %205, i32 %add279
  %arrayidx281 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx280, i32 0, i32 3
  %207 = load i32, i32* %arrayidx281, align 4
  %cmp282 = icmp ne i32 %207, 2
  br i1 %cmp282, label %land.lhs.true283, label %if.end289

land.lhs.true283:                                 ; preds = %land.lhs.true278
  %208 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %209 = load i32, i32* %i, align 4
  %sub284 = sub nsw i32 %209, 1
  %arrayidx285 = getelementptr inbounds [5 x i32], [5 x i32]* %208, i32 %sub284
  %arrayidx286 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx285, i32 0, i32 3
  %210 = load i32, i32* %arrayidx286, align 4
  %cmp287 = icmp ne i32 %210, 2
  br i1 %cmp287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %land.lhs.true283
  store i32 0, i32* %retval, align 4
  br label %return

if.end289:                                        ; preds = %land.lhs.true283, %land.lhs.true278, %if.else273
  br label %if.end290

if.end290:                                        ; preds = %if.end289
  br label %if.end291

if.end291:                                        ; preds = %if.end290
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.end249
  %211 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %212 = load i32, i32* %i, align 4
  %arrayidx293 = getelementptr inbounds [5 x i32], [5 x i32]* %211, i32 %212
  %arrayidx294 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx293, i32 0, i32 4
  %213 = load i32, i32* %arrayidx294, align 4
  %cmp295 = icmp eq i32 %213, 1
  br i1 %cmp295, label %if.then296, label %if.end336

if.then296:                                       ; preds = %if.end292
  %214 = load i32, i32* %i, align 4
  %cmp297 = icmp eq i32 %214, 0
  br i1 %cmp297, label %land.lhs.true298, label %if.else309

land.lhs.true298:                                 ; preds = %if.then296
  %215 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %216 = load i32, i32* %i, align 4
  %add299 = add nsw i32 %216, 1
  %arrayidx300 = getelementptr inbounds [5 x i32], [5 x i32]* %215, i32 %add299
  %arrayidx301 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx300, i32 0, i32 3
  %217 = load i32, i32* %arrayidx301, align 4
  %cmp302 = icmp sge i32 %217, 0
  br i1 %cmp302, label %land.lhs.true303, label %if.else309

land.lhs.true303:                                 ; preds = %land.lhs.true298
  %218 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %219 = load i32, i32* %i, align 4
  %add304 = add nsw i32 %219, 1
  %arrayidx305 = getelementptr inbounds [5 x i32], [5 x i32]* %218, i32 %add304
  %arrayidx306 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx305, i32 0, i32 3
  %220 = load i32, i32* %arrayidx306, align 4
  %cmp307 = icmp ne i32 %220, 3
  br i1 %cmp307, label %if.then308, label %if.else309

if.then308:                                       ; preds = %land.lhs.true303
  store i32 0, i32* %retval, align 4
  br label %return

if.else309:                                       ; preds = %land.lhs.true303, %land.lhs.true298, %if.then296
  %221 = load i32, i32* %i, align 4
  %cmp310 = icmp eq i32 %221, 4
  br i1 %cmp310, label %land.lhs.true311, label %if.else317

land.lhs.true311:                                 ; preds = %if.else309
  %222 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %223 = load i32, i32* %i, align 4
  %sub312 = sub nsw i32 %223, 1
  %arrayidx313 = getelementptr inbounds [5 x i32], [5 x i32]* %222, i32 %sub312
  %arrayidx314 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx313, i32 0, i32 3
  %224 = load i32, i32* %arrayidx314, align 4
  %cmp315 = icmp ne i32 %224, 3
  br i1 %cmp315, label %if.then316, label %if.else317

if.then316:                                       ; preds = %land.lhs.true311
  store i32 0, i32* %retval, align 4
  br label %return

if.else317:                                       ; preds = %land.lhs.true311, %if.else309
  %225 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %226 = load i32, i32* %i, align 4
  %add318 = add nsw i32 %226, 1
  %arrayidx319 = getelementptr inbounds [5 x i32], [5 x i32]* %225, i32 %add318
  %arrayidx320 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx319, i32 0, i32 3
  %227 = load i32, i32* %arrayidx320, align 4
  %cmp321 = icmp sge i32 %227, 0
  br i1 %cmp321, label %land.lhs.true322, label %if.end333

land.lhs.true322:                                 ; preds = %if.else317
  %228 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %229 = load i32, i32* %i, align 4
  %add323 = add nsw i32 %229, 1
  %arrayidx324 = getelementptr inbounds [5 x i32], [5 x i32]* %228, i32 %add323
  %arrayidx325 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx324, i32 0, i32 3
  %230 = load i32, i32* %arrayidx325, align 4
  %cmp326 = icmp ne i32 %230, 3
  br i1 %cmp326, label %land.lhs.true327, label %if.end333

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %231 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %232 = load i32, i32* %i, align 4
  %sub328 = sub nsw i32 %232, 1
  %arrayidx329 = getelementptr inbounds [5 x i32], [5 x i32]* %231, i32 %sub328
  %arrayidx330 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx329, i32 0, i32 3
  %233 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp ne i32 %233, 3
  br i1 %cmp331, label %if.then332, label %if.end333

if.then332:                                       ; preds = %land.lhs.true327
  store i32 0, i32* %retval, align 4
  br label %return

if.end333:                                        ; preds = %land.lhs.true327, %land.lhs.true322, %if.else317
  br label %if.end334

if.end334:                                        ; preds = %if.end333
  br label %if.end335

if.end335:                                        ; preds = %if.end334
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end292
  %234 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %235 = load i32, i32* %i, align 4
  %arrayidx337 = getelementptr inbounds [5 x i32], [5 x i32]* %234, i32 %235
  %arrayidx338 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx337, i32 0, i32 4
  %236 = load i32, i32* %arrayidx338, align 4
  %cmp339 = icmp sge i32 %236, 0
  br i1 %cmp339, label %land.lhs.true340, label %if.end361

land.lhs.true340:                                 ; preds = %if.end336
  %237 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %238 = load i32, i32* %i, align 4
  %arrayidx341 = getelementptr inbounds [5 x i32], [5 x i32]* %237, i32 %238
  %arrayidx342 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx341, i32 0, i32 2
  %239 = load i32, i32* %arrayidx342, align 4
  %cmp343 = icmp sge i32 %239, 0
  br i1 %cmp343, label %land.lhs.true344, label %if.end361

land.lhs.true344:                                 ; preds = %land.lhs.true340
  %240 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %241 = load i32, i32* %i, align 4
  %arrayidx345 = getelementptr inbounds [5 x i32], [5 x i32]* %240, i32 %241
  %arrayidx346 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx345, i32 0, i32 4
  %242 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %242, 3
  br i1 %cmp347, label %land.lhs.true348, label %lor.lhs.false352

land.lhs.true348:                                 ; preds = %land.lhs.true344
  %243 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %244 = load i32, i32* %i, align 4
  %arrayidx349 = getelementptr inbounds [5 x i32], [5 x i32]* %243, i32 %244
  %arrayidx350 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx349, i32 0, i32 2
  %245 = load i32, i32* %arrayidx350, align 4
  %cmp351 = icmp ne i32 %245, 3
  br i1 %cmp351, label %if.then360, label %lor.lhs.false352

lor.lhs.false352:                                 ; preds = %land.lhs.true348, %land.lhs.true344
  %246 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %247 = load i32, i32* %i, align 4
  %arrayidx353 = getelementptr inbounds [5 x i32], [5 x i32]* %246, i32 %247
  %arrayidx354 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx353, i32 0, i32 4
  %248 = load i32, i32* %arrayidx354, align 4
  %cmp355 = icmp ne i32 %248, 3
  br i1 %cmp355, label %land.lhs.true356, label %if.end361

land.lhs.true356:                                 ; preds = %lor.lhs.false352
  %249 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %250 = load i32, i32* %i, align 4
  %arrayidx357 = getelementptr inbounds [5 x i32], [5 x i32]* %249, i32 %250
  %arrayidx358 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx357, i32 0, i32 2
  %251 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp eq i32 %251, 3
  br i1 %cmp359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %land.lhs.true356, %land.lhs.true348
  store i32 0, i32* %retval, align 4
  br label %return

if.end361:                                        ; preds = %land.lhs.true356, %lor.lhs.false352, %land.lhs.true340, %if.end336
  %252 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %253 = load i32, i32* %i, align 4
  %arrayidx362 = getelementptr inbounds [5 x i32], [5 x i32]* %252, i32 %253
  %arrayidx363 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx362, i32 0, i32 1
  %254 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp sge i32 %254, 0
  br i1 %cmp364, label %land.lhs.true365, label %if.end386

land.lhs.true365:                                 ; preds = %if.end361
  %255 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %256 = load i32, i32* %i, align 4
  %arrayidx366 = getelementptr inbounds [5 x i32], [5 x i32]* %255, i32 %256
  %arrayidx367 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx366, i32 0, i32 4
  %257 = load i32, i32* %arrayidx367, align 4
  %cmp368 = icmp sge i32 %257, 0
  br i1 %cmp368, label %land.lhs.true369, label %if.end386

land.lhs.true369:                                 ; preds = %land.lhs.true365
  %258 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %259 = load i32, i32* %i, align 4
  %arrayidx370 = getelementptr inbounds [5 x i32], [5 x i32]* %258, i32 %259
  %arrayidx371 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx370, i32 0, i32 1
  %260 = load i32, i32* %arrayidx371, align 4
  %cmp372 = icmp eq i32 %260, 3
  br i1 %cmp372, label %land.lhs.true373, label %lor.lhs.false377

land.lhs.true373:                                 ; preds = %land.lhs.true369
  %261 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %262 = load i32, i32* %i, align 4
  %arrayidx374 = getelementptr inbounds [5 x i32], [5 x i32]* %261, i32 %262
  %arrayidx375 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx374, i32 0, i32 4
  %263 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp ne i32 %263, 4
  br i1 %cmp376, label %if.then385, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %land.lhs.true373, %land.lhs.true369
  %264 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %265 = load i32, i32* %i, align 4
  %arrayidx378 = getelementptr inbounds [5 x i32], [5 x i32]* %264, i32 %265
  %arrayidx379 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx378, i32 0, i32 1
  %266 = load i32, i32* %arrayidx379, align 4
  %cmp380 = icmp ne i32 %266, 3
  br i1 %cmp380, label %land.lhs.true381, label %if.end386

land.lhs.true381:                                 ; preds = %lor.lhs.false377
  %267 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %268 = load i32, i32* %i, align 4
  %arrayidx382 = getelementptr inbounds [5 x i32], [5 x i32]* %267, i32 %268
  %arrayidx383 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx382, i32 0, i32 4
  %269 = load i32, i32* %arrayidx383, align 4
  %cmp384 = icmp eq i32 %269, 4
  br i1 %cmp384, label %if.then385, label %if.end386

if.then385:                                       ; preds = %land.lhs.true381, %land.lhs.true373
  store i32 0, i32* %retval, align 4
  br label %return

if.end386:                                        ; preds = %land.lhs.true381, %lor.lhs.false377, %land.lhs.true365, %if.end361
  %270 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %271 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [5 x i32], [5 x i32]* %270, i32 %271
  %arrayidx388 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx387, i32 0, i32 1
  %272 = load i32, i32* %arrayidx388, align 4
  %cmp389 = icmp eq i32 %272, 4
  br i1 %cmp389, label %land.lhs.true390, label %if.end410

land.lhs.true390:                                 ; preds = %if.end386
  %273 = load i32, i32* %i, align 4
  %cmp391 = icmp slt i32 %273, 4
  br i1 %cmp391, label %land.lhs.true392, label %lor.lhs.false402

land.lhs.true392:                                 ; preds = %land.lhs.true390
  %274 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %275 = load i32, i32* %i, align 4
  %add393 = add nsw i32 %275, 1
  %arrayidx394 = getelementptr inbounds [5 x i32], [5 x i32]* %274, i32 %add393
  %arrayidx395 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx394, i32 0, i32 0
  %276 = load i32, i32* %arrayidx395, align 4
  %cmp396 = icmp sge i32 %276, 0
  br i1 %cmp396, label %land.lhs.true397, label %lor.lhs.false402

land.lhs.true397:                                 ; preds = %land.lhs.true392
  %277 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %278 = load i32, i32* %i, align 4
  %add398 = add nsw i32 %278, 1
  %arrayidx399 = getelementptr inbounds [5 x i32], [5 x i32]* %277, i32 %add398
  %arrayidx400 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx399, i32 0, i32 0
  %279 = load i32, i32* %arrayidx400, align 4
  %cmp401 = icmp ne i32 %279, 4
  br i1 %cmp401, label %if.then409, label %lor.lhs.false402

lor.lhs.false402:                                 ; preds = %land.lhs.true397, %land.lhs.true392, %land.lhs.true390
  %280 = load i32, i32* %i, align 4
  %cmp403 = icmp sgt i32 %280, 0
  br i1 %cmp403, label %land.lhs.true404, label %if.end410

land.lhs.true404:                                 ; preds = %lor.lhs.false402
  %281 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %282 = load i32, i32* %i, align 4
  %sub405 = sub nsw i32 %282, 1
  %arrayidx406 = getelementptr inbounds [5 x i32], [5 x i32]* %281, i32 %sub405
  %arrayidx407 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx406, i32 0, i32 0
  %283 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp ne i32 %283, 4
  br i1 %cmp408, label %if.then409, label %if.end410

if.then409:                                       ; preds = %land.lhs.true404, %land.lhs.true397
  store i32 0, i32* %retval, align 4
  br label %return

if.end410:                                        ; preds = %land.lhs.true404, %lor.lhs.false402, %if.end386
  %284 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %285 = load i32, i32* %i, align 4
  %arrayidx411 = getelementptr inbounds [5 x i32], [5 x i32]* %284, i32 %285
  %arrayidx412 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx411, i32 0, i32 4
  %286 = load i32, i32* %arrayidx412, align 4
  %cmp413 = icmp eq i32 %286, 2
  br i1 %cmp413, label %if.then414, label %if.end454

if.then414:                                       ; preds = %if.end410
  %287 = load i32, i32* %i, align 4
  %cmp415 = icmp eq i32 %287, 0
  br i1 %cmp415, label %land.lhs.true416, label %if.else427

land.lhs.true416:                                 ; preds = %if.then414
  %288 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %289 = load i32, i32* %i, align 4
  %add417 = add nsw i32 %289, 1
  %arrayidx418 = getelementptr inbounds [5 x i32], [5 x i32]* %288, i32 %add417
  %arrayidx419 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx418, i32 0, i32 2
  %290 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp sge i32 %290, 0
  br i1 %cmp420, label %land.lhs.true421, label %if.else427

land.lhs.true421:                                 ; preds = %land.lhs.true416
  %291 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %292 = load i32, i32* %i, align 4
  %add422 = add nsw i32 %292, 1
  %arrayidx423 = getelementptr inbounds [5 x i32], [5 x i32]* %291, i32 %add422
  %arrayidx424 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx423, i32 0, i32 2
  %293 = load i32, i32* %arrayidx424, align 4
  %cmp425 = icmp ne i32 %293, 4
  br i1 %cmp425, label %if.then426, label %if.else427

if.then426:                                       ; preds = %land.lhs.true421
  store i32 0, i32* %retval, align 4
  br label %return

if.else427:                                       ; preds = %land.lhs.true421, %land.lhs.true416, %if.then414
  %294 = load i32, i32* %i, align 4
  %cmp428 = icmp eq i32 %294, 4
  br i1 %cmp428, label %land.lhs.true429, label %if.else435

land.lhs.true429:                                 ; preds = %if.else427
  %295 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %296 = load i32, i32* %i, align 4
  %sub430 = sub nsw i32 %296, 1
  %arrayidx431 = getelementptr inbounds [5 x i32], [5 x i32]* %295, i32 %sub430
  %arrayidx432 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx431, i32 0, i32 2
  %297 = load i32, i32* %arrayidx432, align 4
  %cmp433 = icmp ne i32 %297, 4
  br i1 %cmp433, label %if.then434, label %if.else435

if.then434:                                       ; preds = %land.lhs.true429
  store i32 0, i32* %retval, align 4
  br label %return

if.else435:                                       ; preds = %land.lhs.true429, %if.else427
  %298 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %299 = load i32, i32* %i, align 4
  %add436 = add nsw i32 %299, 1
  %arrayidx437 = getelementptr inbounds [5 x i32], [5 x i32]* %298, i32 %add436
  %arrayidx438 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx437, i32 0, i32 2
  %300 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp sge i32 %300, 0
  br i1 %cmp439, label %land.lhs.true440, label %if.end451

land.lhs.true440:                                 ; preds = %if.else435
  %301 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %302 = load i32, i32* %i, align 4
  %add441 = add nsw i32 %302, 1
  %arrayidx442 = getelementptr inbounds [5 x i32], [5 x i32]* %301, i32 %add441
  %arrayidx443 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx442, i32 0, i32 2
  %303 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %303, 4
  br i1 %cmp444, label %land.lhs.true445, label %if.end451

land.lhs.true445:                                 ; preds = %land.lhs.true440
  %304 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %305 = load i32, i32* %i, align 4
  %sub446 = sub nsw i32 %305, 1
  %arrayidx447 = getelementptr inbounds [5 x i32], [5 x i32]* %304, i32 %sub446
  %arrayidx448 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx447, i32 0, i32 2
  %306 = load i32, i32* %arrayidx448, align 4
  %cmp449 = icmp ne i32 %306, 4
  br i1 %cmp449, label %if.then450, label %if.end451

if.then450:                                       ; preds = %land.lhs.true445
  store i32 0, i32* %retval, align 4
  br label %return

if.end451:                                        ; preds = %land.lhs.true445, %land.lhs.true440, %if.else435
  br label %if.end452

if.end452:                                        ; preds = %if.end451
  br label %if.end453

if.end453:                                        ; preds = %if.end452
  br label %if.end454

if.end454:                                        ; preds = %if.end453, %if.end410
  br label %for.inc

for.inc:                                          ; preds = %if.end454
  %307 = load i32, i32* %i, align 4
  %inc = add nsw i32 %307, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %308 = load i32, i32* %c_add, align 4
  %309 = load i32, i32* %c_or, align 4
  %cmp455 = icmp ne i32 %308, %309
  br i1 %cmp455, label %if.then464, label %lor.lhs.false456

lor.lhs.false456:                                 ; preds = %for.end
  %310 = load i32, i32* %m_add, align 4
  %311 = load i32, i32* %m_or, align 4
  %cmp457 = icmp ne i32 %310, %311
  br i1 %cmp457, label %if.then464, label %lor.lhs.false458

lor.lhs.false458:                                 ; preds = %lor.lhs.false456
  %312 = load i32, i32* %d_add, align 4
  %313 = load i32, i32* %d_or, align 4
  %cmp459 = icmp ne i32 %312, %313
  br i1 %cmp459, label %if.then464, label %lor.lhs.false460

lor.lhs.false460:                                 ; preds = %lor.lhs.false458
  %314 = load i32, i32* %a_add, align 4
  %315 = load i32, i32* %a_or, align 4
  %cmp461 = icmp ne i32 %314, %315
  br i1 %cmp461, label %if.then464, label %lor.lhs.false462

lor.lhs.false462:                                 ; preds = %lor.lhs.false460
  %316 = load i32, i32* %s_add, align 4
  %317 = load i32, i32* %s_or, align 4
  %cmp463 = icmp ne i32 %316, %317
  br i1 %cmp463, label %if.then464, label %if.end465

if.then464:                                       ; preds = %lor.lhs.false462, %lor.lhs.false460, %lor.lhs.false458, %lor.lhs.false456, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end465:                                        ; preds = %lor.lhs.false462
  %318 = load i32, i32* %c_add, align 4
  %cmp466 = icmp ne i32 %318, 31
  br i1 %cmp466, label %if.then475, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %if.end465
  %319 = load i32, i32* %m_add, align 4
  %cmp468 = icmp ne i32 %319, 31
  br i1 %cmp468, label %if.then475, label %lor.lhs.false469

lor.lhs.false469:                                 ; preds = %lor.lhs.false467
  %320 = load i32, i32* %d_add, align 4
  %cmp470 = icmp ne i32 %320, 31
  br i1 %cmp470, label %if.then475, label %lor.lhs.false471

lor.lhs.false471:                                 ; preds = %lor.lhs.false469
  %321 = load i32, i32* %a_add, align 4
  %cmp472 = icmp ne i32 %321, 31
  br i1 %cmp472, label %if.then475, label %lor.lhs.false473

lor.lhs.false473:                                 ; preds = %lor.lhs.false471
  %322 = load i32, i32* %s_add, align 4
  %cmp474 = icmp ne i32 %322, 31
  br i1 %cmp474, label %if.then475, label %if.end476

if.then475:                                       ; preds = %lor.lhs.false473, %lor.lhs.false471, %lor.lhs.false469, %lor.lhs.false467, %if.end465
  store i32 1, i32* %retval, align 4
  br label %return

if.end476:                                        ; preds = %lor.lhs.false473
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end476, %if.then475, %if.then464, %if.then450, %if.then434, %if.then426, %if.then409, %if.then385, %if.then360, %if.then332, %if.then316, %if.then308, %if.then288, %if.then272, %if.then265, %if.then248, %if.then223, %if.then198, %if.then173, %if.then149, %if.then124, %if.then99, %if.then12, %if.then
  %323 = load i32, i32* %retval, align 4
  ret i32 %323
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @bruteFill([5 x i32]* %ha, i32 %hno, i32 %attr) #0 {
entry:
  %retval = alloca i32, align 4
  %ha.addr = alloca [5 x i32]*, align 4
  %hno.addr = alloca i32, align 4
  %attr.addr = alloca i32, align 4
  %stat = alloca i32, align 4
  %hb = alloca [5 x [5 x i32]], align 16
  %i = alloca i32, align 4
  %nexthno = alloca i32, align 4
  %nextattr = alloca i32, align 4
  store [5 x i32]* %ha, [5 x i32]** %ha.addr, align 4
  store i32 %hno, i32* %hno.addr, align 4
  store i32 %attr, i32* %attr.addr, align 4
  %0 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %call = call i32 @checkHouses([5 x i32]* %0)
  store i32 %call, i32* %stat, align 4
  %1 = load i32, i32* %stat, align 4
  %cmp = icmp eq i32 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %stat, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* %stat, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %4 = bitcast [5 x i32]* %arraydecay to i8*
  %5 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %6 = bitcast [5 x i32]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 4 %6, i32 100, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %7, 5
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %hno.addr, align 4
  %arrayidx = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 %9
  %10 = load i32, i32* %attr.addr, align 4
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx, i32 0, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %arraydecay4 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %call5 = call i32 @checkHouses([5 x i32]* %arraydecay4)
  store i32 %call5, i32* %stat, align 4
  %11 = load i32, i32* %stat, align 4
  %cmp6 = icmp ne i32 %11, 0
  br i1 %cmp6, label %if.then7, label %if.end18

if.then7:                                         ; preds = %for.body
  %12 = load i32, i32* %attr.addr, align 4
  %cmp8 = icmp slt i32 %12, 4
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %13 = load i32, i32* %attr.addr, align 4
  %add = add nsw i32 %13, 1
  store i32 %add, i32* %nextattr, align 4
  %14 = load i32, i32* %hno.addr, align 4
  store i32 %14, i32* %nexthno, align 4
  br label %if.end11

if.else:                                          ; preds = %if.then7
  store i32 0, i32* %nextattr, align 4
  %15 = load i32, i32* %hno.addr, align 4
  %add10 = add nsw i32 %15, 1
  store i32 %add10, i32* %nexthno, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %arraydecay12 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %16 = load i32, i32* %nexthno, align 4
  %17 = load i32, i32* %nextattr, align 4
  %call13 = call i32 @bruteFill([5 x i32]* %arraydecay12, i32 %16, i32 %17)
  store i32 %call13, i32* %stat, align 4
  %18 = load i32, i32* %stat, align 4
  %cmp14 = icmp ne i32 %18, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end11
  %19 = load [5 x i32]*, [5 x i32]** %ha.addr, align 4
  %20 = bitcast [5 x i32]* %19 to i8*
  %arraydecay16 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %hb, i32 0, i32 0
  %21 = bitcast [5 x i32]* %arraydecay16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 100, i1 false)
  %22 = load i32, i32* %stat, align 4
  store i32 %22, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end18
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ha = alloca [5 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x [5 x i32]]* %ha to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 -1, i32 100, i1 false)
  %arraydecay = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  %call = call i32 @bruteFill([5 x i32]* %arraydecay, i32 0, i32 0)
  %arraydecay1 = getelementptr inbounds [5 x [5 x i32]], [5 x [5 x i32]]* %ha, i32 0, i32 0
  call void @printHouses([5 x i32]* %arraydecay1)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
