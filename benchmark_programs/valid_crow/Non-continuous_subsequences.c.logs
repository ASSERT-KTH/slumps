
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for binprint()

; ModuleID = './Non-continuous_subsequences.c.bc'
source_filename = "./Non-continuous_subsequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: noinline nounwind optnone
define hidden void @binprint(i32 %n, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %c = alloca [33 x i8], align 16
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %m.addr, align 4
  %shr = lshr i32 %0, 1
  store i32 %shr, i32* %m.addr, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %m.addr, align 4
  %and = and i32 %1, %2
  %tobool1 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 35, i32 45
  %conv = trunc i32 %cond to i8
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %5
  store i8 0, i8* %arrayidx2, align 1
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 0
  %call = call i32 @puts(i8* %arraydecay)
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  %gap = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  %shl = shl i32 1, %call
  store i32 %shl, i32* %n, align 4
  %tobool = icmp ne i32 %shl, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 16, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store i32 2, i32* %gap, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %3 = load i32, i32* %gap, align 4
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gap, align 4
  %shl2 = shl i32 %5, 1
  store i32 %shl2, i32* %left, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.body
  %6 = load i32, i32* %left, align 4
  %7 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %right, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %8 = load i32, i32* %right, align 4
  %9 = load i32, i32* %gap, align 4
  %cmp7 = icmp ult i32 %8, %9
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %10 = load i32, i32* %left, align 4
  %11 = load i32, i32* %right, align 4
  %or = or i32 %10, %11
  %12 = load i32, i32* %n, align 4
  call void @binprint(i32 %or, i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %13 = load i32, i32* %right, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %right, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %left, align 4
  %shl10 = shl i32 %14, 1
  %15 = load i32, i32* %left, align 4
  %or11 = or i32 %15, %shl10
  store i32 %or11, i32* %left, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  br label %for.inc13

for.inc13:                                        ; preds = %for.end12
  %16 = load i32, i32* %gap, align 4
  %shl14 = shl i32 %16, 1
  store i32 %shl14, i32* %gap, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %shr, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 1:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and = and i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool1, i32 35, i32 45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2 (hasExternalUses)
%4:i32 = select %3, 35:i32, 45:i32
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %cond to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2 (hasExternalUses)
%4:i32 = select %3, 35:i32, 45:i32
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 1:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2 (hasExternalUses)
%4:i32 = select %3, 35:i32, 45:i32
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 35
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 45
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i1 = ne 0:i32, %2 (hasExternalUses)
%4:i32 = select %3, 35:i32, 45:i32
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 45
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 35
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for binprint()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Non-continuous_subsequences.c.bc'
source_filename = "./Non-continuous_subsequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: noinline nounwind optnone
define hidden void @binprint(i32 %n, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %c = alloca [33 x i8], align 16
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %m.addr, align 4
  %shr = lshr i32 %0, 1
  store i32 %shr, i32* %m.addr, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %m.addr, align 4
  %and = and i32 %1, %2
  %tobool1 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 35, i32 45
  %conv = trunc i32 %cond to i8
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %5
  store i8 0, i8* %arrayidx2, align 1
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 0
  %call = call i32 @puts(i8* %arraydecay)
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  %gap = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  %shl = shl i32 1, %call
  store i32 %shl, i32* %n, align 4
  %tobool = icmp ne i32 %shl, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 16, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store i32 2, i32* %gap, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %3 = load i32, i32* %gap, align 4
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gap, align 4
  %shl2 = shl i32 %5, 1
  store i32 %shl2, i32* %left, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.body
  %6 = load i32, i32* %left, align 4
  %7 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %right, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %8 = load i32, i32* %right, align 4
  %9 = load i32, i32* %gap, align 4
  %cmp7 = icmp ult i32 %8, %9
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %10 = load i32, i32* %left, align 4
  %11 = load i32, i32* %right, align 4
  %or = or i32 %10, %11
  %12 = load i32, i32* %n, align 4
  call void @binprint(i32 %or, i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %13 = load i32, i32* %right, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %right, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %left, align 4
  %shl10 = shl i32 %14, 1
  %15 = load i32, i32* %left, align 4
  %or11 = or i32 %15, %shl10
  store i32 %or11, i32* %left, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  br label %for.inc13

for.inc13:                                        ; preds = %for.end12
  %16 = load i32, i32* %gap, align 4
  %shl14 = shl i32 %16, 1
  store i32 %shl14, i32* %gap, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %shl, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl2 = shl i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl10 = shl i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or11 = or i32 %15, %shl10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 1:i32
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl14 = shl i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Non-continuous_subsequences.c.bc'
source_filename = "./Non-continuous_subsequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: noinline nounwind optnone
define hidden void @binprint(i32 %n, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %c = alloca [33 x i8], align 16
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %m.addr, align 4
  %shr = lshr i32 %0, 1
  store i32 %shr, i32* %m.addr, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %m.addr, align 4
  %and = and i32 %1, %2
  %tobool1 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 35, i32 45
  %conv = trunc i32 %cond to i8
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %5
  store i8 0, i8* %arrayidx2, align 1
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 0
  %call = call i32 @puts(i8* %arraydecay)
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  %gap = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  %shl = shl i32 1, %call
  store i32 %shl, i32* %n, align 4
  %tobool = icmp ne i32 %shl, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 16, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store i32 2, i32* %gap, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %3 = load i32, i32* %gap, align 4
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gap, align 4
  %shl2 = shl i32 %5, 1
  store i32 %shl2, i32* %left, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.body
  %6 = load i32, i32* %left, align 4
  %7 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %right, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %8 = load i32, i32* %right, align 4
  %9 = load i32, i32* %gap, align 4
  %cmp7 = icmp ult i32 %8, %9
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %10 = load i32, i32* %left, align 4
  %11 = load i32, i32* %right, align 4
  %or = or i32 %10, %11
  %12 = load i32, i32* %n, align 4
  call void @binprint(i32 %or, i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %13 = load i32, i32* %right, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %right, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %left, align 4
  %shl10 = shl i32 %14, 1
  %15 = load i32, i32* %left, align 4
  %or11 = or i32 %15, %shl10
  store i32 %or11, i32* %left, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  br label %for.inc13

for.inc13:                                        ; preds = %for.end12
  %16 = load i32, i32* %gap, align 4
  %shl14 = shl i32 %16, 1
  store i32 %shl14, i32* %gap, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %tobool = icmp ne i32 %shl, 0"
; from ""
; with "i1 true" in:
"%0:i32 = var
%1:i32 = shl 1:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
cand %2 1:i1
"
; with "i1 true"

Module after replacement:
; ModuleID = './Non-continuous_subsequences.c.bc'
source_filename = "./Non-continuous_subsequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: noinline nounwind optnone
define hidden void @binprint(i32 %n, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %c = alloca [33 x i8], align 16
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %m.addr, align 4
  %shr = lshr i32 %0, 1
  store i32 %shr, i32* %m.addr, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %m.addr, align 4
  %and = and i32 %1, %2
  %tobool1 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 35, i32 45
  %conv = trunc i32 %cond to i8
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %5
  store i8 0, i8* %arrayidx2, align 1
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 0
  %call = call i32 @puts(i8* %arraydecay)
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  %gap = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  %shl = shl i32 1, %call
  store i32 %shl, i32* %n, align 4
  br i1 true, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 16, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store i32 2, i32* %gap, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %3 = load i32, i32* %gap, align 4
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gap, align 4
  %shl2 = shl i32 %5, 1
  store i32 %shl2, i32* %left, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.body
  %6 = load i32, i32* %left, align 4
  %7 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %right, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %8 = load i32, i32* %right, align 4
  %9 = load i32, i32* %gap, align 4
  %cmp7 = icmp ult i32 %8, %9
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %10 = load i32, i32* %left, align 4
  %11 = load i32, i32* %right, align 4
  %or = or i32 %10, %11
  %12 = load i32, i32* %n, align 4
  call void @binprint(i32 %or, i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %13 = load i32, i32* %right, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %right, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %left, align 4
  %shl10 = shl i32 %14, 1
  %15 = load i32, i32* %left, align 4
  %or11 = or i32 %15, %shl10
  store i32 %or11, i32* %left, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  br label %for.inc13

for.inc13:                                        ; preds = %for.end12
  %16 = load i32, i32* %gap, align 4
  %shl14 = shl i32 %16, 1
  store i32 %shl14, i32* %gap, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Non-continuous_subsequences.c.bc'
source_filename = "./Non-continuous_subsequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

; Function Attrs: noinline nounwind optnone
define hidden void @binprint(i32 %n, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %c = alloca [33 x i8], align 16
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %m.addr, align 4
  %shr = lshr i32 %0, 1
  store i32 %shr, i32* %m.addr, align 4
  %tobool = icmp ne i32 %shr, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %2 = load i32, i32* %m.addr, align 4
  %and = and i32 %1, %2
  %tobool1 = icmp ne i32 %and, 0
  %3 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 35, i32 45
  %conv = trunc i32 %cond to i8
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 %5
  store i8 0, i8* %arrayidx2, align 1
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %c, i32 0, i32 0
  %call = call i32 @puts(i8* %arraydecay)
  ret void
}

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  %gap = alloca i32, align 4
  %left = alloca i32, align 4
  %right = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  %shl = shl i32 1, %call
  store i32 %shl, i32* %n, align 4
  br i1 true, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 16, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store i32 2, i32* %gap, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %3 = load i32, i32* %gap, align 4
  %4 = load i32, i32* %n, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %gap, align 4
  %shl2 = shl i32 %5, 1
  store i32 %shl2, i32* %left, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.body
  %6 = load i32, i32* %left, align 4
  %7 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %6, %7
  br i1 %cmp4, label %for.body5, label %for.end12

for.body5:                                        ; preds = %for.cond3
  store i32 1, i32* %right, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body5
  %8 = load i32, i32* %right, align 4
  %9 = load i32, i32* %gap, align 4
  %cmp7 = icmp ult i32 %8, %9
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %10 = load i32, i32* %left, align 4
  %11 = load i32, i32* %right, align 4
  %or = or i32 %10, %11
  %12 = load i32, i32* %n, align 4
  call void @binprint(i32 %or, i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %13 = load i32, i32* %right, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %right, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %left, align 4
  %shl10 = shl i32 %14, 1
  %15 = load i32, i32* %left, align 4
  %or11 = or i32 %15, %shl10
  store i32 %or11, i32* %left, align 4
  br label %for.cond3

for.end12:                                        ; preds = %for.cond3
  br label %for.inc13

for.inc13:                                        ; preds = %for.end12
  %16 = load i32, i32* %gap, align 4
  %shl14 = shl i32 %16, 1
  store i32 %shl14, i32* %gap, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl2 = shl i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %right, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl10 = shl i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or11 = or i32 %15, %shl10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 1:i32
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl14 = shl i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 1:i32
%3:i32 = or %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
