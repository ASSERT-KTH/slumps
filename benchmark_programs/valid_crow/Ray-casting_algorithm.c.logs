
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for vsub()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vsub()

; entering Souper's runOnFunction() for vadd()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vadd()

; entering Souper's runOnFunction() for vdot()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vdot()

; entering Souper's runOnFunction() for vcross()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vcross()

; entering Souper's runOnFunction() for vmadd()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vmadd()

; entering Souper's runOnFunction() for intersect()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = fcmp une double %0, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne %struct.vec* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %7, %fneg
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = fcmp ogt double %9, %add
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = fcmp olt double %11, %12
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = fcmp ogt double %13, %sub11
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = fcmp olt double %16, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = fcmp ogt double %17, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for intersect()

; entering Souper's runOnFunction() for dist()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %5, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for dist()

; entering Souper's runOnFunction() for inside()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = srem %1, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = fcmp olt double %13, %14
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %n12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %24, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp16 = fcmp ogt double %28, %29
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = fcmp olt double %33, %34
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = fcmp ogt double %38, %39
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = fcmp olt double %43, %44
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp39 = fcmp olt double %49, %50
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp41 = fcmp ogt double %51, %52
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = fcmp olt double %53, %54
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp47 = fcmp ogt double %55, %56
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call54 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call60 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %n68, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp slt i32 %69, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add72 = add nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %n73, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem74 = srem i32 %add72, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = srem %1, %2
infer %3

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %intersectResult, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %82, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %intersectResult, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp82 = icmp eq i32 %83, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %crosses, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc85 = add nsw i32 %84, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc88 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %n90, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp91 = icmp eq i32 %86, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %crosses, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %89, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool95 = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool95, i32 1, i32 -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
infer %3

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = srem %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = and 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for inside()

; entering Souper's runOnFunction() for main()

; ModuleID = './Ray-casting_algorithm.c.bc'
source_filename = "./Ray-casting_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vec = type { double, double }
%struct.polygon_t = type { i32, %struct.vec* }

@__const.main.vsq = private unnamed_addr constant [8 x %struct.vec] [%struct.vec zeroinitializer, %struct.vec { double 1.000000e+01, double 0.000000e+00 }, %struct.vec { double 1.000000e+01, double 1.000000e+01 }, %struct.vec { double 0.000000e+00, double 1.000000e+01 }, %struct.vec { double 2.500000e+00, double 2.500000e+00 }, %struct.vec { double 7.500000e+00, double 1.000000e-01 }, %struct.vec { double 7.500000e+00, double 7.500000e+00 }, %struct.vec { double 2.500000e+00, double 7.500000e+00 }], align 16
@__const.main.c = private unnamed_addr constant %struct.vec { double 1.000000e+01, double 5.000000e+00 }, align 8
@__const.main.d = private unnamed_addr constant %struct.vec { double 5.000000e+00, double 5.000000e+00 }, align 8
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %sub = fsub double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %sub, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %sub4 = fsub double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %sub4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %add = fadd double %0, %1
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y3, align 8
  %add4 = fadd double %2, %3
  %y5 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add4, double* %y5, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vdot(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden double @vcross(%struct.vec* byval(%struct.vec) align 8 %a, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %mul = fmul double %0, %1
  %y1 = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %2 = load double, double* %y1, align 8
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %3 = load double, double* %x2, align 8
  %mul3 = fmul double %2, %3
  %sub = fsub double %mul, %mul3
  ret double %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @vmadd(%struct.vec* noalias sret align 8 %agg.result, %struct.vec* byval(%struct.vec) align 8 %a, double %s, %struct.vec* byval(%struct.vec) align 8 %b) #0 {
entry:
  %s.addr = alloca double, align 8
  store double %s, double* %s.addr, align 8
  %x = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %1 = load double, double* %s.addr, align 8
  %x1 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 0
  %2 = load double, double* %x1, align 8
  %mul = fmul double %1, %2
  %add = fadd double %0, %mul
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 0
  store double %add, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %a, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load double, double* %s.addr, align 8
  %y3 = getelementptr inbounds %struct.vec, %struct.vec* %b, i32 0, i32 1
  %5 = load double, double* %y3, align 8
  %mul4 = fmul double %4, %5
  %add5 = fadd double %3, %mul4
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %agg.result, i32 0, i32 1
  store double %add5, double* %y6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol, %struct.vec* %sect) #0 {
entry:
  %retval = alloca i32, align 4
  %tol.addr = alloca double, align 8
  %sect.addr = alloca %struct.vec*, align 4
  %dx = alloca %struct.vec, align 8
  %dy = alloca %struct.vec, align 8
  %d = alloca double, align 8
  %a = alloca double, align 8
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  store %struct.vec* %sect, %struct.vec** %sect.addr, align 4
  call void @vsub(%struct.vec* sret align 8 %dx, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %x0)
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %call = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %dx)
  store double %call, double* %d, align 8
  %0 = load double, double* %d, align 8
  %tobool = fcmp une double %0, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %call2 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dx)
  %sub = fsub double %call1, %call2
  %1 = load double, double* %d, align 8
  %div = fdiv double %sub, %1
  store double %div, double* %a, align 8
  %2 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %tobool3 = icmp ne %struct.vec* %2, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %3 = load %struct.vec*, %struct.vec** %sect.addr, align 4
  %4 = load double, double* %a, align 8
  call void @vmadd(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %y0, double %4, %struct.vec* byval(%struct.vec) align 8 %dy)
  %5 = bitcast %struct.vec* %3 to i8*
  %6 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 16, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load double, double* %a, align 8
  %8 = load double, double* %tol.addr, align 8
  %fneg = fneg double %8
  %cmp = fcmp olt double %7, %fneg
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %9 = load double, double* %a, align 8
  %10 = load double, double* %tol.addr, align 8
  %add = fadd double 1.000000e+00, %10
  %cmp6 = fcmp ogt double %9, %add
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end5
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %a, align 8
  %12 = load double, double* %tol.addr, align 8
  %cmp9 = fcmp olt double %11, %12
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end8
  %13 = load double, double* %a, align 8
  %14 = load double, double* %tol.addr, align 8
  %sub11 = fsub double 1.000000e+00, %14
  %cmp12 = fcmp ogt double %13, %sub11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false10, %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false10
  %call15 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %x0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %call16 = call double @vcross(%struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %dy)
  %sub17 = fsub double %call15, %call16
  %15 = load double, double* %d, align 8
  %div18 = fdiv double %sub17, %15
  store double %div18, double* %a, align 8
  %16 = load double, double* %a, align 8
  %cmp19 = fcmp olt double %16, 0.000000e+00
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end14
  %17 = load double, double* %a, align 8
  %cmp21 = fcmp ogt double %17, 1.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.end14
  store i32 -1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then7, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dist(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %tol) #0 {
entry:
  %retval = alloca double, align 8
  %tol.addr = alloca double, align 8
  %dy = alloca %struct.vec, align 8
  %x1 = alloca %struct.vec, align 8
  %s = alloca %struct.vec, align 8
  %r = alloca i32, align 4
  %tmp = alloca %struct.vec, align 8
  store double %tol, double* %tol.addr, align 8
  call void @vsub(%struct.vec* sret align 8 %dy, %struct.vec* byval(%struct.vec) align 8 %y1, %struct.vec* byval(%struct.vec) align 8 %y0)
  %x2 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 0
  %0 = load double, double* %x2, align 8
  %y = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %add = fadd double %0, %1
  %x3 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 0
  store double %add, double* %x3, align 8
  %y4 = getelementptr inbounds %struct.vec, %struct.vec* %x, i32 0, i32 1
  %2 = load double, double* %y4, align 8
  %x5 = getelementptr inbounds %struct.vec, %struct.vec* %dy, i32 0, i32 0
  %3 = load double, double* %x5, align 8
  %sub = fsub double %2, %3
  %y6 = getelementptr inbounds %struct.vec, %struct.vec* %x1, i32 0, i32 1
  store double %sub, double* %y6, align 8
  %4 = load double, double* %tol.addr, align 8
  %call = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %x, %struct.vec* byval(%struct.vec) align 8 %x1, %struct.vec* byval(%struct.vec) align 8 %y0, %struct.vec* byval(%struct.vec) align 8 %y1, double %4, %struct.vec* %s)
  store i32 %call, i32* %r, align 4
  %5 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0x7FF0000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @vsub(%struct.vec* sret align 8 %tmp, %struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %x)
  %6 = bitcast %struct.vec* %s to i8*
  %7 = bitcast %struct.vec* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  %call7 = call double @vdot(%struct.vec* byval(%struct.vec) align 8 %s, %struct.vec* byval(%struct.vec) align 8 %s)
  %8 = call double @llvm.sqrt.f64(double %call7)
  store double %8, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load double, double* %retval, align 8
  ret double %9
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @inside(%struct.vec* byval(%struct.vec) align 8 %v, %struct.polygon_t* %p, double %tol) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.polygon_t*, align 4
  %tol.addr = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %crosses = alloca i32, align 4
  %intersectResult = alloca i32, align 4
  %pv = alloca %struct.vec*, align 4
  %min_x = alloca double, align 8
  %max_x = alloca double, align 8
  %min_y = alloca double, align 8
  %max_y = alloca double, align 8
  %e = alloca %struct.vec, align 8
  store %struct.polygon_t* %p, %struct.polygon_t** %p.addr, align 4
  store double %tol, double* %tol.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %1, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %4 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n1, align 4
  %rem = srem i32 %add, %5
  store i32 %rem, i32* %k, align 4
  %6 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %6, i32 0, i32 1
  %7 = load %struct.vec*, %struct.vec** %v2, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vec, %struct.vec* %7, i32 %8
  %9 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v3 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %9, i32 0, i32 1
  %10 = load %struct.vec*, %struct.vec** %v3, align 4
  %11 = load i32, i32* %k, align 4
  %arrayidx4 = getelementptr inbounds %struct.vec, %struct.vec* %10, i32 %11
  %12 = load double, double* %tol.addr, align 8
  %call = call double @dist(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %arrayidx, %struct.vec* byval(%struct.vec) align 8 %arrayidx4, double %12)
  store double %call, double* %min_x, align 8
  %13 = load double, double* %min_x, align 8
  %14 = load double, double* %tol.addr, align 8
  %cmp5 = fcmp olt double %13, %14
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v6 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %16, i32 0, i32 1
  %17 = load %struct.vec*, %struct.vec** %v6, align 4
  %arrayidx7 = getelementptr inbounds %struct.vec, %struct.vec* %17, i32 0
  %x = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx7, i32 0, i32 0
  %18 = load double, double* %x, align 8
  store double %18, double* %max_x, align 8
  store double %18, double* %min_x, align 8
  %19 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v8 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %19, i32 0, i32 1
  %20 = load %struct.vec*, %struct.vec** %v8, align 4
  %arrayidx9 = getelementptr inbounds %struct.vec, %struct.vec* %20, i32 1
  %y = getelementptr inbounds %struct.vec, %struct.vec* %arrayidx9, i32 0, i32 1
  %21 = load double, double* %y, align 8
  store double %21, double* %max_y, align 8
  store double %21, double* %min_y, align 8
  store i32 0, i32* %i, align 4
  %22 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v10 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %22, i32 0, i32 1
  %23 = load %struct.vec*, %struct.vec** %v10, align 4
  store %struct.vec* %23, %struct.vec** %pv, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.end
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n12 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %25, i32 0, i32 0
  %26 = load i32, i32* %n12, align 4
  %cmp13 = icmp slt i32 %24, %26
  br i1 %cmp13, label %for.body14, label %for.end37

for.body14:                                       ; preds = %for.cond11
  %27 = load %struct.vec*, %struct.vec** %pv, align 4
  %x15 = getelementptr inbounds %struct.vec, %struct.vec* %27, i32 0, i32 0
  %28 = load double, double* %x15, align 8
  %29 = load double, double* %max_x, align 8
  %cmp16 = fcmp ogt double %28, %29
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.body14
  %30 = load %struct.vec*, %struct.vec** %pv, align 4
  %x18 = getelementptr inbounds %struct.vec, %struct.vec* %30, i32 0, i32 0
  %31 = load double, double* %x18, align 8
  store double %31, double* %max_x, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.body14
  %32 = load %struct.vec*, %struct.vec** %pv, align 4
  %x20 = getelementptr inbounds %struct.vec, %struct.vec* %32, i32 0, i32 0
  %33 = load double, double* %x20, align 8
  %34 = load double, double* %min_x, align 8
  %cmp21 = fcmp olt double %33, %34
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %35 = load %struct.vec*, %struct.vec** %pv, align 4
  %x23 = getelementptr inbounds %struct.vec, %struct.vec* %35, i32 0, i32 0
  %36 = load double, double* %x23, align 8
  store double %36, double* %min_x, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %37 = load %struct.vec*, %struct.vec** %pv, align 4
  %y25 = getelementptr inbounds %struct.vec, %struct.vec* %37, i32 0, i32 1
  %38 = load double, double* %y25, align 8
  %39 = load double, double* %max_y, align 8
  %cmp26 = fcmp ogt double %38, %39
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %40 = load %struct.vec*, %struct.vec** %pv, align 4
  %y28 = getelementptr inbounds %struct.vec, %struct.vec* %40, i32 0, i32 1
  %41 = load double, double* %y28, align 8
  store double %41, double* %max_y, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end24
  %42 = load %struct.vec*, %struct.vec** %pv, align 4
  %y30 = getelementptr inbounds %struct.vec, %struct.vec* %42, i32 0, i32 1
  %43 = load double, double* %y30, align 8
  %44 = load double, double* %min_y, align 8
  %cmp31 = fcmp olt double %43, %44
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %45 = load %struct.vec*, %struct.vec** %pv, align 4
  %y33 = getelementptr inbounds %struct.vec, %struct.vec* %45, i32 0, i32 1
  %46 = load double, double* %y33, align 8
  store double %46, double* %min_y, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %47 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %47, 1
  store i32 %inc36, i32* %i, align 4
  %48 = load %struct.vec*, %struct.vec** %pv, align 4
  %incdec.ptr = getelementptr inbounds %struct.vec, %struct.vec* %48, i32 1
  store %struct.vec* %incdec.ptr, %struct.vec** %pv, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  %x38 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %49 = load double, double* %x38, align 8
  %50 = load double, double* %min_x, align 8
  %cmp39 = fcmp olt double %49, %50
  br i1 %cmp39, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end37
  %x40 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %51 = load double, double* %x40, align 8
  %52 = load double, double* %max_x, align 8
  %cmp41 = fcmp ogt double %51, %52
  br i1 %cmp41, label %if.then48, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %y43 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %53 = load double, double* %y43, align 8
  %54 = load double, double* %min_y, align 8
  %cmp44 = fcmp olt double %53, %54
  br i1 %cmp44, label %if.then48, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %y46 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %55 = load double, double* %y46, align 8
  %56 = load double, double* %max_y, align 8
  %cmp47 = fcmp ogt double %55, %56
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false, %for.end37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %57 = load double, double* %min_x, align 8
  %58 = load double, double* %max_x, align 8
  %sub = fsub double %58, %57
  store double %sub, double* %max_x, align 8
  %59 = load double, double* %max_x, align 8
  %mul = fmul double %59, 2.000000e+00
  store double %mul, double* %max_x, align 8
  %60 = load double, double* %min_y, align 8
  %61 = load double, double* %max_y, align 8
  %sub50 = fsub double %61, %60
  store double %sub50, double* %max_y, align 8
  %62 = load double, double* %max_y, align 8
  %mul51 = fmul double %62, 2.000000e+00
  store double %mul51, double* %max_y, align 8
  %63 = load double, double* %max_y, align 8
  %64 = load double, double* %max_x, align 8
  %add52 = fadd double %64, %63
  store double %add52, double* %max_x, align 8
  br label %while.body

while.body:                                       ; preds = %if.end49, %if.end94
  store i32 0, i32* %crosses, align 4
  %x53 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 0
  %65 = load double, double* %x53, align 8
  %call54 = call i32 @rand()
  %conv = sitofp i32 %call54 to double
  %div = fdiv double %conv, 0x41E0000000000000
  %add55 = fadd double 1.000000e+00, %div
  %66 = load double, double* %max_x, align 8
  %mul56 = fmul double %add55, %66
  %add57 = fadd double %65, %mul56
  %x58 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 0
  store double %add57, double* %x58, align 8
  %y59 = getelementptr inbounds %struct.vec, %struct.vec* %v, i32 0, i32 1
  %67 = load double, double* %y59, align 8
  %call60 = call i32 @rand()
  %conv61 = sitofp i32 %call60 to double
  %div62 = fdiv double %conv61, 0x41E0000000000000
  %add63 = fadd double 1.000000e+00, %div62
  %68 = load double, double* %max_x, align 8
  %mul64 = fmul double %add63, %68
  %add65 = fadd double %67, %mul64
  %y66 = getelementptr inbounds %struct.vec, %struct.vec* %e, i32 0, i32 1
  store double %add65, double* %y66, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc87, %while.body
  %69 = load i32, i32* %i, align 4
  %70 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n68 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %70, i32 0, i32 0
  %71 = load i32, i32* %n68, align 4
  %cmp69 = icmp slt i32 %69, %71
  br i1 %cmp69, label %for.body71, label %for.end89

for.body71:                                       ; preds = %for.cond67
  %72 = load i32, i32* %i, align 4
  %add72 = add nsw i32 %72, 1
  %73 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n73 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %73, i32 0, i32 0
  %74 = load i32, i32* %n73, align 4
  %rem74 = srem i32 %add72, %74
  store i32 %rem74, i32* %k, align 4
  %75 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v75 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %75, i32 0, i32 1
  %76 = load %struct.vec*, %struct.vec** %v75, align 4
  %77 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds %struct.vec, %struct.vec* %76, i32 %77
  %78 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %v77 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %78, i32 0, i32 1
  %79 = load %struct.vec*, %struct.vec** %v77, align 4
  %80 = load i32, i32* %k, align 4
  %arrayidx78 = getelementptr inbounds %struct.vec, %struct.vec* %79, i32 %80
  %81 = load double, double* %tol.addr, align 8
  %call79 = call i32 @intersect(%struct.vec* byval(%struct.vec) align 8 %v, %struct.vec* byval(%struct.vec) align 8 %e, %struct.vec* byval(%struct.vec) align 8 %arrayidx76, %struct.vec* byval(%struct.vec) align 8 %arrayidx78, double %81, %struct.vec* null)
  store i32 %call79, i32* %intersectResult, align 4
  %82 = load i32, i32* %intersectResult, align 4
  %tobool = icmp ne i32 %82, 0
  br i1 %tobool, label %if.end81, label %if.then80

if.then80:                                        ; preds = %for.body71
  br label %for.end89

if.end81:                                         ; preds = %for.body71
  %83 = load i32, i32* %intersectResult, align 4
  %cmp82 = icmp eq i32 %83, 1
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end81
  %84 = load i32, i32* %crosses, align 4
  %inc85 = add nsw i32 %84, 1
  store i32 %inc85, i32* %crosses, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.end81
  br label %for.inc87

for.inc87:                                        ; preds = %if.end86
  %85 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %85, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond67

for.end89:                                        ; preds = %if.then80, %for.cond67
  %86 = load i32, i32* %i, align 4
  %87 = load %struct.polygon_t*, %struct.polygon_t** %p.addr, align 4
  %n90 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %87, i32 0, i32 0
  %88 = load i32, i32* %n90, align 4
  %cmp91 = icmp eq i32 %86, %88
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.end89
  br label %while.end

if.end94:                                         ; preds = %for.end89
  br label %while.body

while.end:                                        ; preds = %if.then93
  %89 = load i32, i32* %crosses, align 4
  %and = and i32 %89, 1
  %tobool95 = icmp ne i32 %and, 0
  %90 = zext i1 %tobool95 to i64
  %cond = select i1 %tobool95, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then48, %if.then
  %91 = load i32, i32* %retval, align 4
  ret i32 %91
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %vsq = alloca [8 x %struct.vec], align 16
  %sq = alloca %struct.polygon_t, align 4
  %sq_hole = alloca %struct.polygon_t, align 4
  %c = alloca %struct.vec, align 8
  %d = alloca %struct.vec, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x %struct.vec]* %vsq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x %struct.vec]* @__const.main.vsq to i8*), i32 128, i1 false)
  %n = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 0
  store i32 4, i32* %n, align 4
  %v = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay, %struct.vec** %v, align 4
  %n1 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 0
  store i32 8, i32* %n1, align 4
  %v2 = getelementptr inbounds %struct.polygon_t, %struct.polygon_t* %sq_hole, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x %struct.vec], [8 x %struct.vec]* %vsq, i32 0, i32 0
  store %struct.vec* %arraydecay3, %struct.vec** %v2, align 4
  %1 = bitcast %struct.vec* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vec* @__const.main.c to i8*), i32 16, i1 false)
  %2 = bitcast %struct.vec* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vec* @__const.main.d to i8*), i32 16, i1 false)
  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call5)
  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call7)
  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq, double 1.000000e-10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %c, %struct.polygon_t* %sq_hole, double 1.000000e-10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call7 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq, double 1.000000e-10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call9 = call i32 @inside(%struct.vec* byval(%struct.vec) align 8 %d, %struct.polygon_t* %sq_hole, double 1.000000e-10)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
