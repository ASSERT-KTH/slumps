
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Copy_a_string.c.bc'
source_filename = "./Copy_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@__const.main.src = private unnamed_addr constant [6 x i8] c"Hello\00", align 1
@.str = private unnamed_addr constant [26 x i8] c"The buffer is too small!\0A\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"strdup\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c" src: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"dst1: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"dst2: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"dst3: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c" ref: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %len = alloca i32, align 4
  %src = alloca [6 x i8], align 1
  %dst1 = alloca [80 x i8], align 16
  %dst2 = alloca [80 x i8], align 16
  %dst3 = alloca i8*, align 4
  %ref = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i8]* %src to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %0, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @__const.main.src, i32 0, i32 0), i32 6, i1 false)
  %arraydecay = getelementptr inbounds [80 x i8], [80 x i8]* %dst1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  %call = call i8* @strcpy(i8* %arraydecay, i8* %arraydecay1)
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  %call3 = call i32 @strlen(i8* %arraydecay2) #7
  store i32 %call3, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %cmp = icmp uge i32 %1, 80
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call4 = call i32 @fputs(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), %struct._IO_FILE* %2)
  call void @exit(i32 1) #8
  unreachable

if.end:                                           ; preds = %entry
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %dst2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %add = add i32 %3, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay5, i8* align 1 %arraydecay6, i32 %add, i1 false)
  %arraydecay7 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  %call8 = call i8* @strdup(i8* %arraydecay7) #9
  store i8* %call8, i8** %dst3, align 4
  %4 = load i8*, i8** %dst3, align 4
  %cmp9 = icmp eq i8* %4, null
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  call void @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @exit(i32 1) #8
  unreachable

if.end11:                                         ; preds = %if.end
  %arraydecay12 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  store i8* %arraydecay12, i8** %ref, align 4
  %arraydecay13 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay13, i8 45, i32 5, i1 false)
  %arraydecay14 = getelementptr inbounds [6 x i8], [6 x i8]* %src, i32 0, i32 0
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay14)
  %arraydecay16 = getelementptr inbounds [80 x i8], [80 x i8]* %dst1, i32 0, i32 0
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay16)
  %arraydecay18 = getelementptr inbounds [80 x i8], [80 x i8]* %dst2, i32 0, i32 0
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i8* %arraydecay18)
  %5 = load i8*, i8** %dst3, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %ref, align 4
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8* %6)
  %7 = load i8*, i8** %dst3, align 4
  call void @free(i8* %7)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i8* @strcpy(i8* %0, i8* %1) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @fputs(i8* %0, %struct._IO_FILE* %1) #2

; Function Attrs: noreturn
declare void @exit(i32 %0) #4

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #5

declare void @perror(i8* %0) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #6

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind willreturn writeonly }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call3 = call i32 @strlen(i8* %arraydecay2) #7
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp uge i32 %1, 80
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 80:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i8* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 80:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
