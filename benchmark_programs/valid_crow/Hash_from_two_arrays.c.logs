
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for strhashkey()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %1, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %4, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = add %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111100000000000000000000)

; *****
; For LLVM instruction:
;  %and = and i32 %5, -1048576
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
infer %1 (demandedBits=11111111111111000000000000000000)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %and, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
%2:i32 = lshr %1, 18:i32
infer %2

; *****
; For LLVM instruction:
;  %xor = xor i32 1477, %shr
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
%2:i32 = lshr %1, 18:i32
%3:i32 = xor 1477:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000011111111111111111111)

; *****
; For LLVM instruction:
;  %and1 = and i32 %6, 1048575
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1048575:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %hl, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %hr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor2 = xor i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %xor4 = xor i32 %xor2, %conv3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = xor %2, %4
infer %5

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %max.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = add %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111100000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1048576
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
infer %1 (demandedBits=11111111111111000000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1048576
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
%2:i32 = lshr %1, 18:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16380
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = and 4293918720:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 4293918720:i32, %0
%2:i32 = lshr %1, 18:i32
%3:i32 = xor 1477:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1477
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5573
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = and 4293918720:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = and 4293918720:i32, %0
%2:i32 = lshr %1, 18:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000011111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1048575
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1048575:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1048575
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = xor %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for strhashkey()

; entering Souper's runOnFunction() for HashAddH()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 %0(i8* %1, i32 4096)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %hix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sHme* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 %5(i8* %7, i8* %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool3, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne %struct.sHme* %12, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %hix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne %struct.sHme* %26, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %hix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %hix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for HashAddH()

; entering Souper's runOnFunction() for HashGetH()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 %0(i8* %1, i32 4096)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %hix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sHme* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 %5(i8* %7, i8* %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool3, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne %struct.sHme* %12, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.sHme* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for HashGetH()

; entering Souper's runOnFunction() for copyStr()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for copyStr()

; entering Souper's runOnFunction() for copyInt()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %src.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for copyInt()

; entering Souper's runOnFunction() for strCompare()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %0, i8* %1) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for strCompare()

; entering Souper's runOnFunction() for HashAdd()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for HashAdd()

; entering Souper's runOnFunction() for HashGet()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for HashGet()

; entering Souper's runOnFunction() for main()

; ModuleID = './Hash_from_two_arrays.c.bc'
source_filename = "./Hash_from_two_arrays.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.he = type { %struct.sHme*, %struct.sHme* }
%struct.sHme = type { i8*, i32, %struct.sHme* }

@hash = hidden global [4096 x %struct.he] zeroinitializer, align 16
@main.keyList = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"orange\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"yellow\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"green\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"violet\00", align 1
@main.valuList = internal global [6 x i32] [i32 1, i32 43, i32 640, i32 747, i32 42, i32 42], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @strhashkey(i8* %key, i32 %max) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %max.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %hl = alloca i32, align 4
  %hr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %max, i32* %max.addr, align 4
  store i32 0, i32* %h, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %key.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i32, i32* %h, align 4
  %add = add i32 %4, %conv
  store i32 %add, i32* %h, align 4
  %5 = load i32, i32* %h, align 4
  %and = and i32 %5, -1048576
  %shr = lshr i32 %and, 18
  %xor = xor i32 1477, %shr
  store i32 %xor, i32* %hl, align 4
  %6 = load i32, i32* %h, align 4
  %and1 = and i32 %6, 1048575
  store i32 %and1, i32* %hr, align 4
  %7 = load i32, i32* %hl, align 4
  %8 = load i32, i32* %hr, align 4
  %xor2 = xor i32 %7, %8
  %9 = load i8*, i8** %key.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %key.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %xor4 = xor i32 %xor2, %conv3
  store i32 %xor4, i32* %h, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load i32, i32* %h, align 4
  %12 = load i32, i32* %max.addr, align 4
  %rem = urem i32 %11, %12
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden void @HashAddH(i8* %key, i32 %value, void (i8**, i8*)* %copyKey, void (i32*, i32)* %copyVal, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  %copyKey.addr = alloca void (i8**, i8*)*, align 4
  %copyVal.addr = alloca void (i32*, i32)*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  %last = alloca %struct.sHme*, align 4
  %hme = alloca %struct.sHme*, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  store void (i8**, i8*)* %copyKey, void (i8**, i8*)** %copyKey.addr, align 4
  store void (i32*, i32)* %copyVal, void (i32*, i32)** %copyVal.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %13 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %14 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value5 = getelementptr inbounds %struct.sHme, %struct.sHme* %14, i32 0, i32 1
  %15 = load i32, i32* %value.addr, align 4
  call void %13(i32* %value5, i32 %15)
  br label %if.end20

if.else:                                          ; preds = %for.end
  %call6 = call noalias i8* @malloc(i32 12)
  %16 = bitcast i8* %call6 to %struct.sHme*
  store %struct.sHme* %16, %struct.sHme** %hme, align 4
  %17 = load void (i8**, i8*)*, void (i8**, i8*)** %copyKey.addr, align 4
  %18 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %key7 = getelementptr inbounds %struct.sHme, %struct.sHme* %18, i32 0, i32 0
  %19 = load i8*, i8** %key.addr, align 4
  call void %17(i8** %key7, i8* %19)
  %20 = load void (i32*, i32)*, void (i32*, i32)** %copyVal.addr, align 4
  %21 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %value8 = getelementptr inbounds %struct.sHme, %struct.sHme* %21, i32 0, i32 1
  %22 = load i32, i32* %value.addr, align 4
  call void %20(i32* %value8, i32 %22)
  %23 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %link9 = getelementptr inbounds %struct.sHme, %struct.sHme* %23, i32 0, i32 2
  store %struct.sHme* null, %struct.sHme** %link9, align 4
  %24 = load i32, i32* %hix, align 4
  %arrayidx10 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %24
  %last11 = getelementptr inbounds %struct.he, %struct.he* %arrayidx10, i32 0, i32 1
  %25 = load %struct.sHme*, %struct.sHme** %last11, align 4
  store %struct.sHme* %25, %struct.sHme** %last, align 4
  %26 = load %struct.sHme*, %struct.sHme** %last, align 4
  %tobool12 = icmp ne %struct.sHme* %26, null
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %27 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %28 = load %struct.sHme*, %struct.sHme** %last, align 4
  %link14 = getelementptr inbounds %struct.sHme, %struct.sHme* %28, i32 0, i32 2
  store %struct.sHme* %27, %struct.sHme** %link14, align 4
  br label %if.end

if.else15:                                        ; preds = %if.else
  %29 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %30 = load i32, i32* %hix, align 4
  %arrayidx16 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %30
  %first17 = getelementptr inbounds %struct.he, %struct.he* %arrayidx16, i32 0, i32 0
  store %struct.sHme* %29, %struct.sHme** %first17, align 8
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  %31 = load %struct.sHme*, %struct.sHme** %hme, align 4
  %32 = load i32, i32* %hix, align 4
  %arrayidx18 = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %32
  %last19 = getelementptr inbounds %struct.he, %struct.he* %arrayidx18, i32 0, i32 1
  store %struct.sHme* %31, %struct.sHme** %last19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGetH(i32* %val, i8* %key, i32 (i8*, i32)* %hashKey, i32 (i8*, i8*)* %keySame) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  %hashKey.addr = alloca i32 (i8*, i32)*, align 4
  %keySame.addr = alloca i32 (i8*, i8*)*, align 4
  %hix = alloca i32, align 4
  %m_ent = alloca %struct.sHme*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 (i8*, i32)* %hashKey, i32 (i8*, i32)** %hashKey.addr, align 4
  store i32 (i8*, i8*)* %keySame, i32 (i8*, i8*)** %keySame.addr, align 4
  %0 = load i32 (i8*, i32)*, i32 (i8*, i32)** %hashKey.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 %0(i8* %1, i32 4096)
  store i32 %call, i32* %hix, align 4
  %2 = load i32, i32* %hix, align 4
  %arrayidx = getelementptr inbounds [4096 x %struct.he], [4096 x %struct.he]* @hash, i32 0, i32 %2
  %first = getelementptr inbounds %struct.he, %struct.he* %arrayidx, i32 0, i32 0
  %3 = load %struct.sHme*, %struct.sHme** %first, align 8
  store %struct.sHme* %3, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool = icmp ne %struct.sHme* %4, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %keySame.addr, align 4
  %6 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %key1 = getelementptr inbounds %struct.sHme, %struct.sHme* %6, i32 0, i32 0
  %7 = load i8*, i8** %key1, align 4
  %8 = load i8*, i8** %key.addr, align 4
  %call2 = call i32 %5(i8* %7, i8* %8)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %link = getelementptr inbounds %struct.sHme, %struct.sHme* %10, i32 0, i32 2
  %11 = load %struct.sHme*, %struct.sHme** %link, align 4
  store %struct.sHme* %11, %struct.sHme** %m_ent, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %tobool4 = icmp ne %struct.sHme* %12, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %13 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %value = getelementptr inbounds %struct.sHme, %struct.sHme* %13, i32 0, i32 1
  %14 = load i32, i32* %value, align 4
  %15 = load i32*, i32** %val.addr, align 4
  store i32 %14, i32* %15, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %16 = load %struct.sHme*, %struct.sHme** %m_ent, align 4
  %cmp = icmp ne %struct.sHme* %16, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @copyStr(i8** %dest, i8* %src) #0 {
entry:
  %dest.addr = alloca i8**, align 4
  %src.addr = alloca i8*, align 4
  store i8** %dest, i8*** %dest.addr, align 4
  store i8* %src, i8** %src.addr, align 4
  %0 = load i8*, i8** %src.addr, align 4
  %call = call i8* @strdup(i8* %0) #4
  %1 = load i8**, i8*** %dest.addr, align 4
  store i8* %call, i8** %1, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @copyInt(i32* %dest, i32 %src) #0 {
entry:
  %dest.addr = alloca i32*, align 4
  %src.addr = alloca i32, align 4
  store i32* %dest, i32** %dest.addr, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %1 = load i32*, i32** %dest.addr, align 4
  store i32 %0, i32* %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @strCompare(i8* %key1, i8* %key2) #0 {
entry:
  %key1.addr = alloca i8*, align 4
  %key2.addr = alloca i8*, align 4
  store i8* %key1, i8** %key1.addr, align 4
  store i8* %key2, i8** %key2.addr, align 4
  %0 = load i8*, i8** %key1.addr, align 4
  %1 = load i8*, i8** %key2.addr, align 4
  %call = call i32 @strcmp(i8* %0, i8* %1) #5
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #3

; Function Attrs: noinline nounwind optnone
define hidden void @HashAdd(i8* %key, i32 %value) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %value.addr = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %1 = load i32, i32* %value.addr, align 4
  call void @HashAddH(i8* %0, i32 %1, void (i8**, i8*)* @copyStr, void (i32*, i32)* @copyInt, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @HashGet(i32* %val, i8* %key) #0 {
entry:
  %val.addr = alloca i32*, align 4
  %key.addr = alloca i8*, align 4
  store i32* %val, i32** %val.addr, align 4
  store i8* %key, i8** %key.addr, align 4
  %0 = load i32*, i32** %val.addr, align 4
  %1 = load i8*, i8** %key.addr, align 4
  %call = call i32 @HashGetH(i32* %0, i8* %1, i32 (i8*, i32)* @strhashkey, i32 (i8*, i8*)* @strCompare)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.keyList, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %ix, align 4
  %arrayidx1 = getelementptr inbounds [6 x i32], [6 x i32]* @main.valuList, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  call void @HashAdd(i8* %2, i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
