
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Tokenize_a_string_with_escaping.c.bc'
source_filename = "./Tokenize_a_string_with_escaping.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.s = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 16
@.str = private unnamed_addr constant [24 x i8] c"\0A Original string: %s\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c" %d tokens:\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c" %4d. %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [37 x i8], align 16
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  %list = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [37 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.s, i32 0, i32 0), i32 37, i1 false)
  %arraydecay = getelementptr inbounds [37 x i8], [37 x i8]* %s, i32 0, i32 0
  %call = call i8** @Tokenize(i8* %arraydecay, i8 signext 124, i8 signext 94, i32* %q)
  store i8** %call, i8*** %list, align 4
  %1 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0))
  %2 = load i32, i32* %q, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i32 %2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %q, align 4
  %cmp3 = icmp ult i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %add = add i32 %5, 1
  %6 = load i8**, i8*** %list, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  %8 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i32 %add, i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8**, i8*** %list, align 4
  %11 = bitcast i8** %10 to i8*
  call void @free(i8* %11)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i8** @Tokenize(i8* %s, i8 signext %sep, i8 signext %esc, i32* %q) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q.addr = alloca i32*, align 4
  %list = alloca i8**, align 4
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32* %q, i32** %q.addr, align 4
  store i8** null, i8*** %list, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %sep.addr, align 1
  %2 = load i8, i8* %esc.addr, align 1
  %call = call i32 @ElQ(i8* %0, i8 signext %1, i8 signext %2)
  %3 = load i32*, i32** %q.addr, align 4
  store i32 %call, i32* %3, align 4
  %4 = load i32*, i32** %q.addr, align 4
  %5 = load i32, i32* %4, align 4
  %mul = mul i32 %5, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call1 to i8**
  store i8** %6, i8*** %list, align 4
  %7 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %7, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i8**, i8*** %list, align 4
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %9, i32 %10
  store i8* %8, i8** %arrayidx, align 4
  store i32 0, i32* %e, align 4
  %11 = load i8*, i8** %s.addr, align 4
  store i8* %11, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i8*, i8** %p, align 4
  %13 = load i8, i8* %12, align 1
  %tobool = icmp ne i8 %13, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %p, align 4
  %15 = load i8, i8* %14, align 1
  %conv = sext i8 %15 to i32
  %16 = load i8, i8* %esc.addr, align 1
  %conv2 = sext i8 %16 to i32
  %cmp3 = icmp eq i32 %conv, %conv2
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %for.body
  %17 = load i32, i32* %e, align 4
  %tobool6 = icmp ne i32 %17, 0
  %lnot = xor i1 %tobool6, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end16

if.else:                                          ; preds = %for.body
  %18 = load i8*, i8** %p, align 4
  %19 = load i8, i8* %18, align 1
  %conv7 = sext i8 %19 to i32
  %20 = load i8, i8* %sep.addr, align 1
  %conv8 = sext i8 %20 to i32
  %cmp9 = icmp eq i32 %conv7, %conv8
  br i1 %cmp9, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.else
  %21 = load i32, i32* %e, align 4
  %tobool11 = icmp ne i32 %21, 0
  br i1 %tobool11, label %if.else15, label %if.then12

if.then12:                                        ; preds = %land.lhs.true
  %22 = load i8*, i8** %p, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 1
  %23 = load i8**, i8*** %list, align 4
  %24 = load i32, i32* %i, align 4
  %inc13 = add i32 %24, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %23, i32 %24
  store i8* %add.ptr, i8** %arrayidx14, align 4
  %25 = load i8*, i8** %p, align 4
  store i8 0, i8* %25, align 1
  br label %if.end

if.else15:                                        ; preds = %land.lhs.true, %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then12
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then5
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %26 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end17

if.end17:                                         ; preds = %for.end, %entry
  %27 = load i8**, i8*** %list, align 4
  ret i8** %27
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @ElQ(i8* %s, i8 signext %sep, i8 signext %esc) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q = alloca i32, align 4
  %e = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32 0, i32* %e, align 4
  store i32 1, i32* %q, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %p, align 4
  %2 = load i8, i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %5 = load i8, i8* %esc.addr, align 1
  %conv1 = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %e, align 4
  %tobool3 = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end13

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %p, align 4
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %9 = load i8, i8* %sep.addr, align 1
  %conv5 = sext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv4, %conv5
  br i1 %cmp6, label %if.then8, label %if.else12

if.then8:                                         ; preds = %if.else
  %10 = load i32, i32* %e, align 4
  %tobool9 = icmp ne i32 %10, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %11 = load i32, i32* %q, align 4
  %add = add i32 %11, %lnot.ext11
  store i32 %add, i32* %q, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %12 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %q, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8** %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()

; entering Souper's runOnFunction() for Tokenize()

; ModuleID = './Tokenize_a_string_with_escaping.c.bc'
source_filename = "./Tokenize_a_string_with_escaping.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.s = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 16
@.str = private unnamed_addr constant [24 x i8] c"\0A Original string: %s\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c" %d tokens:\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c" %4d. %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [37 x i8], align 16
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  %list = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [37 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.s, i32 0, i32 0), i32 37, i1 false)
  %arraydecay = getelementptr inbounds [37 x i8], [37 x i8]* %s, i32 0, i32 0
  %call = call i8** @Tokenize(i8* %arraydecay, i8 signext 124, i8 signext 94, i32* %q)
  store i8** %call, i8*** %list, align 4
  %1 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0))
  %2 = load i32, i32* %q, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i32 %2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %q, align 4
  %cmp3 = icmp ult i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %add = add i32 %5, 1
  %6 = load i8**, i8*** %list, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  %8 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i32 %add, i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8**, i8*** %list, align 4
  %11 = bitcast i8** %10 to i8*
  call void @free(i8* %11)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i8** @Tokenize(i8* %s, i8 signext %sep, i8 signext %esc, i32* %q) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q.addr = alloca i32*, align 4
  %list = alloca i8**, align 4
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32* %q, i32** %q.addr, align 4
  store i8** null, i8*** %list, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %sep.addr, align 1
  %2 = load i8, i8* %esc.addr, align 1
  %call = call i32 @ElQ(i8* %0, i8 signext %1, i8 signext %2)
  %3 = load i32*, i32** %q.addr, align 4
  store i32 %call, i32* %3, align 4
  %4 = load i32*, i32** %q.addr, align 4
  %5 = load i32, i32* %4, align 4
  %mul = mul i32 %5, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call1 to i8**
  store i8** %6, i8*** %list, align 4
  %7 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %7, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i8**, i8*** %list, align 4
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %9, i32 %10
  store i8* %8, i8** %arrayidx, align 4
  store i32 0, i32* %e, align 4
  %11 = load i8*, i8** %s.addr, align 4
  store i8* %11, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i8*, i8** %p, align 4
  %13 = load i8, i8* %12, align 1
  %tobool = icmp ne i8 %13, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %p, align 4
  %15 = load i8, i8* %14, align 1
  %conv = sext i8 %15 to i32
  %16 = load i8, i8* %esc.addr, align 1
  %conv2 = sext i8 %16 to i32
  %cmp3 = icmp eq i32 %conv, %conv2
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %for.body
  %17 = load i32, i32* %e, align 4
  %tobool6 = icmp ne i32 %17, 0
  %lnot = xor i1 %tobool6, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end16

if.else:                                          ; preds = %for.body
  %18 = load i8*, i8** %p, align 4
  %19 = load i8, i8* %18, align 1
  %conv7 = sext i8 %19 to i32
  %20 = load i8, i8* %sep.addr, align 1
  %conv8 = sext i8 %20 to i32
  %cmp9 = icmp eq i32 %conv7, %conv8
  br i1 %cmp9, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.else
  %21 = load i32, i32* %e, align 4
  %tobool11 = icmp ne i32 %21, 0
  br i1 %tobool11, label %if.else15, label %if.then12

if.then12:                                        ; preds = %land.lhs.true
  %22 = load i8*, i8** %p, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 1
  %23 = load i8**, i8*** %list, align 4
  %24 = load i32, i32* %i, align 4
  %inc13 = add i32 %24, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %23, i32 %24
  store i8* %add.ptr, i8** %arrayidx14, align 4
  %25 = load i8*, i8** %p, align 4
  store i8 0, i8* %25, align 1
  br label %if.end

if.else15:                                        ; preds = %land.lhs.true, %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then12
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then5
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %26 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end17

if.end17:                                         ; preds = %for.end, %entry
  %27 = load i8**, i8*** %list, align 4
  ret i8** %27
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @ElQ(i8* %s, i8 signext %sep, i8 signext %esc) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q = alloca i32, align 4
  %e = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32 0, i32* %e, align 4
  store i32 1, i32* %q, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %p, align 4
  %2 = load i8, i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %5 = load i8, i8* %esc.addr, align 1
  %conv1 = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %e, align 4
  %tobool3 = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end13

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %p, align 4
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %9 = load i8, i8* %sep.addr, align 1
  %conv5 = sext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv4, %conv5
  br i1 %cmp6, label %if.then8, label %if.else12

if.then8:                                         ; preds = %if.else
  %10 = load i32, i32* %e, align 4
  %tobool9 = icmp ne i32 %10, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %11 = load i32, i32* %q, align 4
  %add = add i32 %11, %lnot.ext11
  store i32 %add, i32* %q, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %12 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %q, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %sep.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %esc.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @ElQ(i8* %0, i8 signext %1, i8 signext %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8** %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %13, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %14, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %esc.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv, %conv2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool6, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %18, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %sep.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %conv7, %conv8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool11 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Tokenize()

; entering Souper's runOnFunction() for ElQ()

; ModuleID = './Tokenize_a_string_with_escaping.c.bc'
source_filename = "./Tokenize_a_string_with_escaping.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.s = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 16
@.str = private unnamed_addr constant [24 x i8] c"\0A Original string: %s\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"one^|uno||three^^^^|four^^^|^cuatro|\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c" %d tokens:\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c" %4d. %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [37 x i8], align 16
  %i = alloca i32, align 4
  %q = alloca i32, align 4
  %list = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [37 x i8]* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.s, i32 0, i32 0), i32 37, i1 false)
  %arraydecay = getelementptr inbounds [37 x i8], [37 x i8]* %s, i32 0, i32 0
  %call = call i8** @Tokenize(i8* %arraydecay, i8 signext 124, i8 signext 94, i32* %q)
  store i8** %call, i8*** %list, align 4
  %1 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0))
  %2 = load i32, i32* %q, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i32 %2)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %q, align 4
  %cmp3 = icmp ult i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %add = add i32 %5, 1
  %6 = load i8**, i8*** %list, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  %8 = load i8*, i8** %arrayidx, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i32 %add, i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8**, i8*** %list, align 4
  %11 = bitcast i8** %10 to i8*
  call void @free(i8* %11)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i8** @Tokenize(i8* %s, i8 signext %sep, i8 signext %esc, i32* %q) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q.addr = alloca i32*, align 4
  %list = alloca i8**, align 4
  %e = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32* %q, i32** %q.addr, align 4
  store i8** null, i8*** %list, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %sep.addr, align 1
  %2 = load i8, i8* %esc.addr, align 1
  %call = call i32 @ElQ(i8* %0, i8 signext %1, i8 signext %2)
  %3 = load i32*, i32** %q.addr, align 4
  store i32 %call, i32* %3, align 4
  %4 = load i32*, i32** %q.addr, align 4
  %5 = load i32, i32* %4, align 4
  %mul = mul i32 %5, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call1 to i8**
  store i8** %6, i8*** %list, align 4
  %7 = load i8**, i8*** %list, align 4
  %cmp = icmp ne i8** %7, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i8**, i8*** %list, align 4
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %9, i32 %10
  store i8* %8, i8** %arrayidx, align 4
  store i32 0, i32* %e, align 4
  %11 = load i8*, i8** %s.addr, align 4
  store i8* %11, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i8*, i8** %p, align 4
  %13 = load i8, i8* %12, align 1
  %tobool = icmp ne i8 %13, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %p, align 4
  %15 = load i8, i8* %14, align 1
  %conv = sext i8 %15 to i32
  %16 = load i8, i8* %esc.addr, align 1
  %conv2 = sext i8 %16 to i32
  %cmp3 = icmp eq i32 %conv, %conv2
  br i1 %cmp3, label %if.then5, label %if.else

if.then5:                                         ; preds = %for.body
  %17 = load i32, i32* %e, align 4
  %tobool6 = icmp ne i32 %17, 0
  %lnot = xor i1 %tobool6, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end16

if.else:                                          ; preds = %for.body
  %18 = load i8*, i8** %p, align 4
  %19 = load i8, i8* %18, align 1
  %conv7 = sext i8 %19 to i32
  %20 = load i8, i8* %sep.addr, align 1
  %conv8 = sext i8 %20 to i32
  %cmp9 = icmp eq i32 %conv7, %conv8
  br i1 %cmp9, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.else
  %21 = load i32, i32* %e, align 4
  %tobool11 = icmp ne i32 %21, 0
  br i1 %tobool11, label %if.else15, label %if.then12

if.then12:                                        ; preds = %land.lhs.true
  %22 = load i8*, i8** %p, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 1
  %23 = load i8**, i8*** %list, align 4
  %24 = load i32, i32* %i, align 4
  %inc13 = add i32 %24, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8*, i8** %23, i32 %24
  store i8* %add.ptr, i8** %arrayidx14, align 4
  %25 = load i8*, i8** %p, align 4
  store i8 0, i8* %25, align 1
  br label %if.end

if.else15:                                        ; preds = %land.lhs.true, %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then12
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then5
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %26 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end17

if.end17:                                         ; preds = %for.end, %entry
  %27 = load i8**, i8*** %list, align 4
  ret i8** %27
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @ElQ(i8* %s, i8 signext %sep, i8 signext %esc) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %sep.addr = alloca i8, align 1
  %esc.addr = alloca i8, align 1
  %q = alloca i32, align 4
  %e = alloca i32, align 4
  %p = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %sep, i8* %sep.addr, align 1
  store i8 %esc, i8* %esc.addr, align 1
  store i32 0, i32* %e, align 4
  store i32 1, i32* %q, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %p, align 4
  %2 = load i8, i8* %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %p, align 4
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %5 = load i8, i8* %esc.addr, align 1
  %conv1 = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %e, align 4
  %tobool3 = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %e, align 4
  br label %if.end13

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %p, align 4
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %9 = load i8, i8* %sep.addr, align 1
  %conv5 = sext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv4, %conv5
  br i1 %cmp6, label %if.then8, label %if.else12

if.then8:                                         ; preds = %if.else
  %10 = load i32, i32* %e, align 4
  %tobool9 = icmp ne i32 %10, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  %11 = load i32, i32* %q, align 4
  %add = add i32 %11, %lnot.ext11
  store i32 %add, i32* %q, align 4
  br label %if.end

if.else12:                                        ; preds = %if.else
  store i32 0, i32* %e, align 4
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %12 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %q, align 4
  ret i32 %13
}

declare noalias i8* @malloc(i32 %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %esc.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %conv, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool3, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %sep.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %conv4, %conv5
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot10 = xor i1 %tobool9, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot.ext11 = zext i1 %lnot10 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %11, %lnot.ext11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = add %0, %4
infer %5

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
%5:i32 = add %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ElQ()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
