
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for rho()

; ModuleID = './Thieles_interpolation_formula.c.bc'
source_filename = "./Thieles_interpolation_formula.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@xval = hidden global [32 x double] zeroinitializer, align 16
@t_sin = hidden global [32 x double] zeroinitializer, align 16
@t_cos = hidden global [32 x double] zeroinitializer, align 16
@t_tan = hidden global [32 x double] zeroinitializer, align 16
@r_tan = hidden global [496 x double] zeroinitializer, align 16
@r_cos = hidden global [496 x double] zeroinitializer, align 16
@r_sin = hidden global [496 x double] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%16.14f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @rho(double* %x, double* %y, double* %r, i32 %i, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %i.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %2 = load double*, double** %y.addr, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  store double %4, double* %retval, align 8
  br label %return

if.end2:                                          ; preds = %if.end
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 31, %5
  %6 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 32, %6
  %mul = mul nsw i32 %sub, %sub3
  %div = sdiv i32 %mul, 2
  %7 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %div, %7
  store i32 %add, i32* %idx, align 4
  %8 = load double*, double** %r.addr, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx4, align 8
  %11 = load double*, double** %r.addr, align 4
  %12 = load i32, i32* %idx, align 4
  %arrayidx5 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx5, align 8
  %cmp6 = fcmp une double %10, %13
  br i1 %cmp6, label %if.then7, label %if.end23

if.then7:                                         ; preds = %if.end2
  %14 = load double*, double** %x.addr, align 4
  %15 = load i32, i32* %i.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load double*, double** %x.addr, align 4
  %18 = load i32, i32* %i.addr, align 4
  %19 = load i32, i32* %n.addr, align 4
  %add9 = add nsw i32 %18, %19
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 %add9
  %20 = load double, double* %arrayidx10, align 8
  %sub11 = fsub double %16, %20
  %21 = load double*, double** %x.addr, align 4
  %22 = load double*, double** %y.addr, align 4
  %23 = load double*, double** %r.addr, align 4
  %24 = load i32, i32* %i.addr, align 4
  %25 = load i32, i32* %n.addr, align 4
  %sub12 = sub nsw i32 %25, 1
  %call = call double @rho(double* %21, double* %22, double* %23, i32 %24, i32 %sub12)
  %26 = load double*, double** %x.addr, align 4
  %27 = load double*, double** %y.addr, align 4
  %28 = load double*, double** %r.addr, align 4
  %29 = load i32, i32* %i.addr, align 4
  %add13 = add nsw i32 %29, 1
  %30 = load i32, i32* %n.addr, align 4
  %sub14 = sub nsw i32 %30, 1
  %call15 = call double @rho(double* %26, double* %27, double* %28, i32 %add13, i32 %sub14)
  %sub16 = fsub double %call, %call15
  %div17 = fdiv double %sub11, %sub16
  %31 = load double*, double** %x.addr, align 4
  %32 = load double*, double** %y.addr, align 4
  %33 = load double*, double** %r.addr, align 4
  %34 = load i32, i32* %i.addr, align 4
  %add18 = add nsw i32 %34, 1
  %35 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %35, 2
  %call20 = call double @rho(double* %31, double* %32, double* %33, i32 %add18, i32 %sub19)
  %add21 = fadd double %div17, %call20
  %36 = load double*, double** %r.addr, align 4
  %37 = load i32, i32* %idx, align 4
  %arrayidx22 = getelementptr inbounds double, double* %36, i32 %37
  store double %add21, double* %arrayidx22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then7, %if.end2
  %38 = load double*, double** %r.addr, align 4
  %39 = load i32, i32* %idx, align 4
  %arrayidx24 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx24, align 8
  store double %40, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.then1, %if.then
  %41 = load double, double* %retval, align 8
  ret double %41
}

; Function Attrs: noinline nounwind optnone
define hidden double @thiele(double* %x, double* %y, double* %r, double %xin, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %xin.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store double %xin, double* %xin.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load double*, double** %x.addr, align 4
  %2 = load double*, double** %y.addr, align 4
  %3 = load double*, double** %r.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %call = call double @rho(double* %1, double* %2, double* %3, i32 0, i32 %4)
  %5 = load double*, double** %x.addr, align 4
  %6 = load double*, double** %y.addr, align 4
  %7 = load double*, double** %r.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %8, 2
  %call1 = call double @rho(double* %5, double* %6, double* %7, i32 0, i32 %sub)
  %sub2 = fsub double %call, %call1
  %9 = load double, double* %xin.addr, align 8
  %10 = load double*, double** %x.addr, align 4
  %11 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx, align 8
  %sub3 = fsub double %9, %12
  %13 = load double*, double** %x.addr, align 4
  %14 = load double*, double** %y.addr, align 4
  %15 = load double*, double** %r.addr, align 4
  %16 = load double, double* %xin.addr, align 8
  %17 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %17, 1
  %call4 = call double @thiele(double* %13, double* %14, double* %15, double %16, i32 %add)
  %div = fdiv double %sub3, %call4
  %add5 = fadd double %sub2, %div
  store double %add5, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load double, double* %retval, align 8
  ret double %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %conv = sitofp i32 %1 to double
  %mul = fmul double %conv, 5.000000e-02
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %2
  store double %mul, double* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %3
  %4 = load double, double* %arrayidx1, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %6
  store double %5, double* %arrayidx2, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = call double @llvm.cos.f64(double %8)
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %10
  store double %9, double* %arrayidx4, align 8
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %13
  %14 = load double, double* %arrayidx6, align 8
  %div = fdiv double %12, %14
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [32 x double], [32 x double]* @t_tan, i32 0, i32 %15
  store double %div, double* %arrayidx7, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc15, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %17, 496
  br i1 %cmp9, label %for.body11, label %for.end17

for.body11:                                       ; preds = %for.cond8
  %18 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [496 x double], [496 x double]* @r_tan, i32 0, i32 %18
  store double 0x7FF8000000000000, double* %arrayidx12, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [496 x double], [496 x double]* @r_cos, i32 0, i32 %19
  store double 0x7FF8000000000000, double* %arrayidx13, align 8
  %20 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [496 x double], [496 x double]* @r_sin, i32 0, i32 %20
  store double 0x7FF8000000000000, double* %arrayidx14, align 8
  br label %for.inc15

for.inc15:                                        ; preds = %for.body11
  %21 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond8

for.end17:                                        ; preds = %for.cond8
  %call = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_sin, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_sin, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul18 = fmul double 6.000000e+00, %call
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul18)
  %call20 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_cos, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_cos, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul21 = fmul double 3.000000e+00, %call20
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul21)
  %call23 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_tan, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_tan, i32 0, i32 0), double 1.000000e+00, i32 0)
  %mul24 = fmul double 4.000000e+00, %call23
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul24)
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 31, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 32, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %sub, %sub3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
%2:i32 = var
%3:i32 = subnsw 32:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
%2:i32 = var
%3:i32 = subnsw 32:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = sdiv %4, 2:i32
infer %5

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %div, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 31:i32, %1
%3:i32 = var
%4:i32 = subnsw 32:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = sdiv %5, 2:i32
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = fcmp une double %10, %13
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %35, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %idx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 31
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2017
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4096
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
%2:i32 = var
%3:i32 = subnsw 32:i32, %2
%4:i32 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 992
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 31:i32, %0
%2:i32 = var
%3:i32 = subnsw 32:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = sdiv %4, 2:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 496
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 31:i32, %1
%3:i32 = var
%4:i32 = subnsw 32:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = sdiv %5, 2:i32
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 496
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rho()

; entering Souper's runOnFunction() for thiele()

; ModuleID = './Thieles_interpolation_formula.c.bc'
source_filename = "./Thieles_interpolation_formula.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@xval = hidden global [32 x double] zeroinitializer, align 16
@t_sin = hidden global [32 x double] zeroinitializer, align 16
@t_cos = hidden global [32 x double] zeroinitializer, align 16
@t_tan = hidden global [32 x double] zeroinitializer, align 16
@r_tan = hidden global [496 x double] zeroinitializer, align 16
@r_cos = hidden global [496 x double] zeroinitializer, align 16
@r_sin = hidden global [496 x double] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%16.14f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @rho(double* %x, double* %y, double* %r, i32 %i, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %i.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %2 = load double*, double** %y.addr, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  store double %4, double* %retval, align 8
  br label %return

if.end2:                                          ; preds = %if.end
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 31, %5
  %6 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 32, %6
  %mul = mul nsw i32 %sub, %sub3
  %div = sdiv i32 %mul, 2
  %7 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %div, %7
  store i32 %add, i32* %idx, align 4
  %8 = load double*, double** %r.addr, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx4, align 8
  %11 = load double*, double** %r.addr, align 4
  %12 = load i32, i32* %idx, align 4
  %arrayidx5 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx5, align 8
  %cmp6 = fcmp une double %10, %13
  br i1 %cmp6, label %if.then7, label %if.end23

if.then7:                                         ; preds = %if.end2
  %14 = load double*, double** %x.addr, align 4
  %15 = load i32, i32* %i.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load double*, double** %x.addr, align 4
  %18 = load i32, i32* %i.addr, align 4
  %19 = load i32, i32* %n.addr, align 4
  %add9 = add nsw i32 %18, %19
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 %add9
  %20 = load double, double* %arrayidx10, align 8
  %sub11 = fsub double %16, %20
  %21 = load double*, double** %x.addr, align 4
  %22 = load double*, double** %y.addr, align 4
  %23 = load double*, double** %r.addr, align 4
  %24 = load i32, i32* %i.addr, align 4
  %25 = load i32, i32* %n.addr, align 4
  %sub12 = sub nsw i32 %25, 1
  %call = call double @rho(double* %21, double* %22, double* %23, i32 %24, i32 %sub12)
  %26 = load double*, double** %x.addr, align 4
  %27 = load double*, double** %y.addr, align 4
  %28 = load double*, double** %r.addr, align 4
  %29 = load i32, i32* %i.addr, align 4
  %add13 = add nsw i32 %29, 1
  %30 = load i32, i32* %n.addr, align 4
  %sub14 = sub nsw i32 %30, 1
  %call15 = call double @rho(double* %26, double* %27, double* %28, i32 %add13, i32 %sub14)
  %sub16 = fsub double %call, %call15
  %div17 = fdiv double %sub11, %sub16
  %31 = load double*, double** %x.addr, align 4
  %32 = load double*, double** %y.addr, align 4
  %33 = load double*, double** %r.addr, align 4
  %34 = load i32, i32* %i.addr, align 4
  %add18 = add nsw i32 %34, 1
  %35 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %35, 2
  %call20 = call double @rho(double* %31, double* %32, double* %33, i32 %add18, i32 %sub19)
  %add21 = fadd double %div17, %call20
  %36 = load double*, double** %r.addr, align 4
  %37 = load i32, i32* %idx, align 4
  %arrayidx22 = getelementptr inbounds double, double* %36, i32 %37
  store double %add21, double* %arrayidx22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then7, %if.end2
  %38 = load double*, double** %r.addr, align 4
  %39 = load i32, i32* %idx, align 4
  %arrayidx24 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx24, align 8
  store double %40, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.then1, %if.then
  %41 = load double, double* %retval, align 8
  ret double %41
}

; Function Attrs: noinline nounwind optnone
define hidden double @thiele(double* %x, double* %y, double* %r, double %xin, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %xin.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store double %xin, double* %xin.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load double*, double** %x.addr, align 4
  %2 = load double*, double** %y.addr, align 4
  %3 = load double*, double** %r.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %call = call double @rho(double* %1, double* %2, double* %3, i32 0, i32 %4)
  %5 = load double*, double** %x.addr, align 4
  %6 = load double*, double** %y.addr, align 4
  %7 = load double*, double** %r.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %8, 2
  %call1 = call double @rho(double* %5, double* %6, double* %7, i32 0, i32 %sub)
  %sub2 = fsub double %call, %call1
  %9 = load double, double* %xin.addr, align 8
  %10 = load double*, double** %x.addr, align 4
  %11 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx, align 8
  %sub3 = fsub double %9, %12
  %13 = load double*, double** %x.addr, align 4
  %14 = load double*, double** %y.addr, align 4
  %15 = load double*, double** %r.addr, align 4
  %16 = load double, double* %xin.addr, align 8
  %17 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %17, 1
  %call4 = call double @thiele(double* %13, double* %14, double* %15, double %16, i32 %add)
  %div = fdiv double %sub3, %call4
  %add5 = fadd double %sub2, %div
  store double %add5, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load double, double* %retval, align 8
  ret double %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %conv = sitofp i32 %1 to double
  %mul = fmul double %conv, 5.000000e-02
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %2
  store double %mul, double* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %3
  %4 = load double, double* %arrayidx1, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %6
  store double %5, double* %arrayidx2, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = call double @llvm.cos.f64(double %8)
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %10
  store double %9, double* %arrayidx4, align 8
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %13
  %14 = load double, double* %arrayidx6, align 8
  %div = fdiv double %12, %14
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [32 x double], [32 x double]* @t_tan, i32 0, i32 %15
  store double %div, double* %arrayidx7, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc15, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %17, 496
  br i1 %cmp9, label %for.body11, label %for.end17

for.body11:                                       ; preds = %for.cond8
  %18 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [496 x double], [496 x double]* @r_tan, i32 0, i32 %18
  store double 0x7FF8000000000000, double* %arrayidx12, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [496 x double], [496 x double]* @r_cos, i32 0, i32 %19
  store double 0x7FF8000000000000, double* %arrayidx13, align 8
  %20 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [496 x double], [496 x double]* @r_sin, i32 0, i32 %20
  store double 0x7FF8000000000000, double* %arrayidx14, align 8
  br label %for.inc15

for.inc15:                                        ; preds = %for.body11
  %21 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond8

for.end17:                                        ; preds = %for.cond8
  %call = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_sin, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_sin, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul18 = fmul double 6.000000e+00, %call
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul18)
  %call20 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_cos, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_cos, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul21 = fmul double 3.000000e+00, %call20
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul21)
  %call23 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_tan, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_tan, i32 0, i32 0), double 1.000000e+00, i32 0)
  %mul24 = fmul double 4.000000e+00, %call23
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul24)
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 31:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for thiele()

; entering Souper's runOnFunction() for main()

; ModuleID = './Thieles_interpolation_formula.c.bc'
source_filename = "./Thieles_interpolation_formula.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@xval = hidden global [32 x double] zeroinitializer, align 16
@t_sin = hidden global [32 x double] zeroinitializer, align 16
@t_cos = hidden global [32 x double] zeroinitializer, align 16
@t_tan = hidden global [32 x double] zeroinitializer, align 16
@r_tan = hidden global [496 x double] zeroinitializer, align 16
@r_cos = hidden global [496 x double] zeroinitializer, align 16
@r_sin = hidden global [496 x double] zeroinitializer, align 16
@.str = private unnamed_addr constant [9 x i8] c"%16.14f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @rho(double* %x, double* %y, double* %r, i32 %i, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %i.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %2 = load double*, double** %y.addr, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %2, i32 %3
  %4 = load double, double* %arrayidx, align 8
  store double %4, double* %retval, align 8
  br label %return

if.end2:                                          ; preds = %if.end
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 31, %5
  %6 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 32, %6
  %mul = mul nsw i32 %sub, %sub3
  %div = sdiv i32 %mul, 2
  %7 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %div, %7
  store i32 %add, i32* %idx, align 4
  %8 = load double*, double** %r.addr, align 4
  %9 = load i32, i32* %idx, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx4, align 8
  %11 = load double*, double** %r.addr, align 4
  %12 = load i32, i32* %idx, align 4
  %arrayidx5 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx5, align 8
  %cmp6 = fcmp une double %10, %13
  br i1 %cmp6, label %if.then7, label %if.end23

if.then7:                                         ; preds = %if.end2
  %14 = load double*, double** %x.addr, align 4
  %15 = load i32, i32* %i.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx8, align 8
  %17 = load double*, double** %x.addr, align 4
  %18 = load i32, i32* %i.addr, align 4
  %19 = load i32, i32* %n.addr, align 4
  %add9 = add nsw i32 %18, %19
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 %add9
  %20 = load double, double* %arrayidx10, align 8
  %sub11 = fsub double %16, %20
  %21 = load double*, double** %x.addr, align 4
  %22 = load double*, double** %y.addr, align 4
  %23 = load double*, double** %r.addr, align 4
  %24 = load i32, i32* %i.addr, align 4
  %25 = load i32, i32* %n.addr, align 4
  %sub12 = sub nsw i32 %25, 1
  %call = call double @rho(double* %21, double* %22, double* %23, i32 %24, i32 %sub12)
  %26 = load double*, double** %x.addr, align 4
  %27 = load double*, double** %y.addr, align 4
  %28 = load double*, double** %r.addr, align 4
  %29 = load i32, i32* %i.addr, align 4
  %add13 = add nsw i32 %29, 1
  %30 = load i32, i32* %n.addr, align 4
  %sub14 = sub nsw i32 %30, 1
  %call15 = call double @rho(double* %26, double* %27, double* %28, i32 %add13, i32 %sub14)
  %sub16 = fsub double %call, %call15
  %div17 = fdiv double %sub11, %sub16
  %31 = load double*, double** %x.addr, align 4
  %32 = load double*, double** %y.addr, align 4
  %33 = load double*, double** %r.addr, align 4
  %34 = load i32, i32* %i.addr, align 4
  %add18 = add nsw i32 %34, 1
  %35 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %35, 2
  %call20 = call double @rho(double* %31, double* %32, double* %33, i32 %add18, i32 %sub19)
  %add21 = fadd double %div17, %call20
  %36 = load double*, double** %r.addr, align 4
  %37 = load i32, i32* %idx, align 4
  %arrayidx22 = getelementptr inbounds double, double* %36, i32 %37
  store double %add21, double* %arrayidx22, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then7, %if.end2
  %38 = load double*, double** %r.addr, align 4
  %39 = load i32, i32* %idx, align 4
  %arrayidx24 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx24, align 8
  store double %40, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.then1, %if.then
  %41 = load double, double* %retval, align 8
  ret double %41
}

; Function Attrs: noinline nounwind optnone
define hidden double @thiele(double* %x, double* %y, double* %r, double %xin, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %r.addr = alloca double*, align 4
  %xin.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %r, double** %r.addr, align 4
  store double %xin, double* %xin.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load double*, double** %x.addr, align 4
  %2 = load double*, double** %y.addr, align 4
  %3 = load double*, double** %r.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %call = call double @rho(double* %1, double* %2, double* %3, i32 0, i32 %4)
  %5 = load double*, double** %x.addr, align 4
  %6 = load double*, double** %y.addr, align 4
  %7 = load double*, double** %r.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %8, 2
  %call1 = call double @rho(double* %5, double* %6, double* %7, i32 0, i32 %sub)
  %sub2 = fsub double %call, %call1
  %9 = load double, double* %xin.addr, align 8
  %10 = load double*, double** %x.addr, align 4
  %11 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx, align 8
  %sub3 = fsub double %9, %12
  %13 = load double*, double** %x.addr, align 4
  %14 = load double*, double** %y.addr, align 4
  %15 = load double*, double** %r.addr, align 4
  %16 = load double, double* %xin.addr, align 8
  %17 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %17, 1
  %call4 = call double @thiele(double* %13, double* %14, double* %15, double %16, i32 %add)
  %div = fdiv double %sub3, %call4
  %add5 = fadd double %sub2, %div
  store double %add5, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load double, double* %retval, align 8
  ret double %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %conv = sitofp i32 %1 to double
  %mul = fmul double %conv, 5.000000e-02
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %2
  store double %mul, double* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %3
  %4 = load double, double* %arrayidx1, align 8
  %5 = call double @llvm.sin.f64(double %4)
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %6
  store double %5, double* %arrayidx2, align 8
  %7 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [32 x double], [32 x double]* @xval, i32 0, i32 %7
  %8 = load double, double* %arrayidx3, align 8
  %9 = call double @llvm.cos.f64(double %8)
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %10
  store double %9, double* %arrayidx4, align 8
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [32 x double], [32 x double]* @t_sin, i32 0, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [32 x double], [32 x double]* @t_cos, i32 0, i32 %13
  %14 = load double, double* %arrayidx6, align 8
  %div = fdiv double %12, %14
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [32 x double], [32 x double]* @t_tan, i32 0, i32 %15
  store double %div, double* %arrayidx7, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc15, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %17, 496
  br i1 %cmp9, label %for.body11, label %for.end17

for.body11:                                       ; preds = %for.cond8
  %18 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [496 x double], [496 x double]* @r_tan, i32 0, i32 %18
  store double 0x7FF8000000000000, double* %arrayidx12, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [496 x double], [496 x double]* @r_cos, i32 0, i32 %19
  store double 0x7FF8000000000000, double* %arrayidx13, align 8
  %20 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [496 x double], [496 x double]* @r_sin, i32 0, i32 %20
  store double 0x7FF8000000000000, double* %arrayidx14, align 8
  br label %for.inc15

for.inc15:                                        ; preds = %for.body11
  %21 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond8

for.end17:                                        ; preds = %for.cond8
  %call = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_sin, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_sin, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul18 = fmul double 6.000000e+00, %call
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul18)
  %call20 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_cos, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_cos, i32 0, i32 0), double 5.000000e-01, i32 0)
  %mul21 = fmul double 3.000000e+00, %call20
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul21)
  %call23 = call double @thiele(double* getelementptr inbounds ([32 x double], [32 x double]* @t_tan, i32 0, i32 0), double* getelementptr inbounds ([32 x double], [32 x double]* @xval, i32 0, i32 0), double* getelementptr inbounds ([496 x double], [496 x double]* @r_tan, i32 0, i32 0), double 1.000000e+00, i32 0)
  %mul24 = fmul double 4.000000e+00, %call23
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), double %mul24)
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %17, 496
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 496:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 496:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
