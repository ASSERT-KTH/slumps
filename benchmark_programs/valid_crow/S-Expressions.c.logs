
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for whine()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for whine()

; entering Souper's runOnFunction() for parse_string()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %4, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 256:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %incdec.ptr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call13 = call i32 @strlen(i8* %arraydecay12) #6
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 256:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for parse_string()

; entering Souper's runOnFunction() for parse_symbol()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %4, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 256:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @__isspace(i32 %conv)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %conv6, 41
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 41:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %conv9, 40
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 40:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %14, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv14 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %incdec.ptr15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv16 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %18, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call27 = call i32 @strlen(i8* %arraydecay26) #6
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 41:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 40:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for parse_symbol()

; entering Souper's runOnFunction() for ./S-Expressions.c.bc:__isspace()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %1, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %sub, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2

; *****
; For LLVM instruction:
;  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %lor.ext = zext i1 %2 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sub %0, 9:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./S-Expressions.c.bc:__isspace()

; entering Souper's runOnFunction() for append()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %inc
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for append()

; entering Souper's runOnFunction() for parse_list()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @__isspace(i32 %conv)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne %struct.s_expr* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool11 = icmp ne %struct.s_expr* %15, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne %struct.s_expr* %20, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for parse_list()

; entering Souper's runOnFunction() for parse_term()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %1, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @__isspace(i32 %conv)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for parse_term()

; entering Souper's runOnFunction() for print_expr()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.s_expr* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %type, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ult i32 %6, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %type24, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp eq i32 %23, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %len30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp ult i32 %24, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %30 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %type38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp eq i32 %32, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i8, i8* %arrayidx45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv46 = sext i8 %36 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc49 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %type51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp eq i32 %39, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_expr()

; entering Souper's runOnFunction() for main()

; ModuleID = './S-Expressions.c.bc'
source_filename = "./S-Expressions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.s_expr = type { i32, i32, i8* }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [29 x i8] c"parse error before ==>%.10s\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"string too long:\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"symbol too long:\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6 = private unnamed_addr constant [82 x i8] c"((data da\\(\\)ta \22quot\\\\ed data\22 123 4.5)\0A (\22data\22 (!@# (4.5) \22(mo\\\22re\22 \22data)\22)))\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"input is:\0A%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"parsed as:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @whine(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0), i8* %1)
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_string(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb3, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  switch i32 %conv, label %sw.default6 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  %10 = load i8, i8* %incdec.ptr, align 1
  %conv2 = sext i8 %10 to i32
  switch i32 %conv2, label %sw.default [
    i32 92, label %sw.bb3
    i32 34, label %sw.bb3
  ]

sw.bb3:                                           ; preds = %sw.bb, %sw.bb
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %13
  store i8 %12, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %14 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %14)
  br label %fail

sw.bb5:                                           ; preds = %if.end
  br label %success

sw.default6:                                      ; preds = %if.end
  %15 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %17
  store i8 %16, i8* %arrayidx9, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %18 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %19 = bitcast %struct.s_expr* %18 to i8*
  call void @free(i8* %19)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb5
  %20 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %20, i32 1
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %21, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  store i32 2, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call10 = call i8* @strdup(i8* %arraydecay) #5
  %23 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf11 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %23, i32 0, i32 2
  store i8* %call10, i8** %buf11, align 4
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call13 = call i32 @strlen(i8* %arraydecay12) #6
  %24 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %24, i32 0, i32 1
  store i32 %call13, i32* %len, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %25, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %26 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #3

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #4

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_symbol(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %buf = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = bitcast [256 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %sw.bb17, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %4, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0))
  %6 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %6)
  br label %fail

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %call2 = call i32 @__isspace(i32 %conv)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  br label %success

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8, i8* %9, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 41
  br i1 %cmp7, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp eq i32 %conv9, 40
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %lor.lhs.false, %if.end5
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 -1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %success

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i8, i8* %14, align 1
  %conv14 = sext i8 %15 to i32
  switch i32 %conv14, label %sw.default20 [
    i32 92, label %sw.bb
    i32 34, label %sw.bb19
  ]

sw.bb:                                            ; preds = %if.end13
  %16 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  %17 = load i8, i8* %incdec.ptr15, align 1
  %conv16 = sext i8 %17 to i32
  switch i32 %conv16, label %sw.default [
    i32 92, label %sw.bb17
    i32 34, label %sw.bb17
    i32 40, label %sw.bb17
    i32 41, label %sw.bb17
  ]

sw.bb17:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %18 = load i8*, i8** %s.addr, align 4
  %incdec.ptr18 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr18, i8** %s.addr, align 4
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %20
  store i8 %19, i8* %arrayidx, align 1
  br label %while.cond

sw.default:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %21)
  br label %fail

sw.bb19:                                          ; preds = %if.end13
  %22 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %22)
  br label %success

sw.default20:                                     ; preds = %if.end13
  %23 = load i8*, i8** %s.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr21, i8** %s.addr, align 4
  %24 = load i8, i8* %23, align 1
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %25
  store i8 %24, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %sw.default, %if.then
  %26 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %27 = bitcast %struct.s_expr* %26 to i8*
  call void @free(i8* %27)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb19, %if.then12, %if.then4
  %28 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %28, i32 1
  %29 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr, i8** %29, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %30, i32 0, i32 0
  store i32 3, i32* %type, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call24 = call i8* @strdup(i8* %arraydecay) #5
  %31 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %buf25 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 2
  store i8* %call24, i8** %buf25, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %call27 = call i32 @strlen(i8* %arraydecay26) #6
  %32 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %32, i32 0, i32 1
  store i32 %call27, i32* %len, align 4
  %33 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %33, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %34 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %34
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden void @append(%struct.s_expr* %list, %struct.s_expr* %ele) #0 {
entry:
  %list.addr = alloca %struct.s_expr*, align 4
  %ele.addr = alloca %struct.s_expr*, align 4
  store %struct.s_expr* %list, %struct.s_expr** %list.addr, align 4
  store %struct.s_expr* %ele, %struct.s_expr** %ele.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %0, i32 0, i32 2
  %1 = load i8*, i8** %buf, align 4
  %2 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %2, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %len, align 4
  %mul = mul i32 4, %inc
  %call = call i8* @realloc(i8* %1, i32 %mul)
  %4 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf1 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %4, i32 0, i32 2
  store i8* %call, i8** %buf1, align 4
  %5 = load %struct.s_expr*, %struct.s_expr** %ele.addr, align 4
  %6 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %buf2 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %6, i32 0, i32 2
  %7 = load i8*, i8** %buf2, align 4
  %8 = bitcast i8* %7 to %struct.s_expr**
  %9 = load %struct.s_expr*, %struct.s_expr** %list.addr, align 4
  %len3 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 1
  %10 = load i32, i32* %len3, align 4
  %sub = sub i32 %10, 1
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %8, i32 %sub
  store %struct.s_expr* %5, %struct.s_expr** %arrayidx, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %ex = alloca %struct.s_expr*, align 4
  %chld = alloca %struct.s_expr*, align 4
  %next = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %call = call noalias i8* @calloc(i32 12, i32 1)
  %0 = bitcast i8* %call to %struct.s_expr*
  store %struct.s_expr* %0, %struct.s_expr** %ex, align 4
  %1 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 1
  store i32 0, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.end13, %if.end7, %if.then, %entry
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  switch i32 %conv3, label %sw.default [
    i32 34, label %sw.bb
    i32 40, label %sw.bb8
    i32 41, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 1
  %call4 = call %struct.s_expr* @parse_string(i8* %add.ptr, i8** %next)
  store %struct.s_expr* %call4, %struct.s_expr** %chld, align 4
  %10 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool5 = icmp ne %struct.s_expr* %10, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %sw.bb
  br label %fail

if.end7:                                          ; preds = %sw.bb
  %11 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %12 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %11, %struct.s_expr* %12)
  %13 = load i8*, i8** %next, align 4
  store i8* %13, i8** %s.addr, align 4
  br label %while.cond

sw.bb8:                                           ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i32 1
  %call10 = call %struct.s_expr* @parse_list(i8* %add.ptr9, i8** %next)
  store %struct.s_expr* %call10, %struct.s_expr** %chld, align 4
  %15 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool11 = icmp ne %struct.s_expr* %15, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  br label %fail

if.end13:                                         ; preds = %sw.bb8
  %16 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %17 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %16, %struct.s_expr* %17)
  %18 = load i8*, i8** %next, align 4
  store i8* %18, i8** %s.addr, align 4
  br label %while.cond

sw.bb14:                                          ; preds = %if.end
  br label %success

sw.default:                                       ; preds = %if.end
  %19 = load i8*, i8** %s.addr, align 4
  %call15 = call %struct.s_expr* @parse_symbol(i8* %19, i8** %next)
  store %struct.s_expr* %call15, %struct.s_expr** %chld, align 4
  %20 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  %tobool16 = icmp ne %struct.s_expr* %20, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %sw.default
  br label %fail

if.end18:                                         ; preds = %sw.default
  %21 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %22 = load %struct.s_expr*, %struct.s_expr** %chld, align 4
  call void @append(%struct.s_expr* %21, %struct.s_expr* %22)
  %23 = load i8*, i8** %next, align 4
  store i8* %23, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %fail

fail:                                             ; preds = %while.end, %if.then17, %if.then12, %if.then6
  %24 = load i8*, i8** %s.addr, align 4
  call void @whine(i8* %24)
  %25 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %26 = bitcast %struct.s_expr* %25 to i8*
  call void @free(i8* %26)
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

success:                                          ; preds = %sw.bb14
  %27 = load i8*, i8** %s.addr, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i32 1
  %28 = load i8**, i8*** %e.addr, align 4
  store i8* %add.ptr19, i8** %28, align 4
  %29 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %29, i32 0, i32 0
  store i32 1, i32* %type, align 4
  %30 = load %struct.s_expr*, %struct.s_expr** %ex, align 4
  store %struct.s_expr* %30, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %success, %fail
  %31 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %31
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.s_expr* @parse_term(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca %struct.s_expr*, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.then, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  switch i32 %conv2, label %sw.default [
    i32 40, label %sw.bb
    i32 34, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %s.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 1
  %8 = load i8**, i8*** %e.addr, align 4
  %call3 = call %struct.s_expr* @parse_list(i8* %add.ptr, i8** %8)
  store %struct.s_expr* %call3, %struct.s_expr** %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %if.end
  %9 = load i8*, i8** %s.addr, align 4
  %add.ptr5 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8**, i8*** %e.addr, align 4
  %call6 = call %struct.s_expr* @parse_string(i8* %add.ptr5, i8** %10)
  store %struct.s_expr* %call6, %struct.s_expr** %retval, align 4
  br label %return

sw.default:                                       ; preds = %if.end
  %11 = load i8*, i8** %s.addr, align 4
  %add.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  %12 = load i8**, i8*** %e.addr, align 4
  %call8 = call %struct.s_expr* @parse_symbol(i8* %add.ptr7, i8** %12)
  store %struct.s_expr* %call8, %struct.s_expr** %retval, align 4
  br label %return

while.end:                                        ; preds = %while.cond
  store %struct.s_expr* null, %struct.s_expr** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb4, %sw.bb
  %13 = load %struct.s_expr*, %struct.s_expr** %retval, align 4
  ret %struct.s_expr* %13
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_expr(%struct.s_expr* %e, i32 %depth) #0 {
entry:
  %e.addr = alloca %struct.s_expr*, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.s_expr* %e, %struct.s_expr** %e.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %tobool = icmp ne %struct.s_expr* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %sw.epilog58

if.end:                                           ; preds = %entry
  %1 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type = getelementptr inbounds %struct.s_expr, %struct.s_expr* %1, i32 0, i32 0
  %2 = load i32, i32* %type, align 4
  switch i32 %2, label %sw.epilog58 [
    i32 1, label %sw.bb
    i32 3, label %sw.bb16
    i32 2, label %sw.bb16
  ]

sw.bb:                                            ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %depth.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call1 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc5, %for.end
  %6 = load i32, i32* %i, align 4
  %7 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len = getelementptr inbounds %struct.s_expr, %struct.s_expr* %7, i32 0, i32 1
  %8 = load i32, i32* %len, align 4
  %cmp3 = icmp ult i32 %6, %8
  br i1 %cmp3, label %for.body4, label %for.end7

for.body4:                                        ; preds = %for.cond2
  %9 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf = getelementptr inbounds %struct.s_expr, %struct.s_expr* %9, i32 0, i32 2
  %10 = load i8*, i8** %buf, align 4
  %11 = bitcast i8* %10 to %struct.s_expr**
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.s_expr*, %struct.s_expr** %11, i32 %12
  %13 = load %struct.s_expr*, %struct.s_expr** %arrayidx, align 4
  %14 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %14, 1
  call void @print_expr(%struct.s_expr* %13, i32 %add)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %15, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond2

for.end7:                                         ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc12, %for.end7
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %depth.addr, align 4
  %cmp9 = icmp slt i32 %16, %17
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond8
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %18 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %18, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond8

for.end14:                                        ; preds = %for.cond8
  %call15 = call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog58

sw.bb16:                                          ; preds = %if.end, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc21, %sw.bb16
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %depth.addr, align 4
  %cmp18 = icmp slt i32 %19, %20
  br i1 %cmp18, label %for.body19, label %for.end23

for.body19:                                       ; preds = %for.cond17
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc21

for.inc21:                                        ; preds = %for.body19
  %21 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond17

for.end23:                                        ; preds = %for.cond17
  %22 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type24 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %22, i32 0, i32 0
  %23 = load i32, i32* %type24, align 4
  %cmp25 = icmp eq i32 %23, 2
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.end23
  %call27 = call i32 @putchar(i32 34)
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.end23
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc48, %if.end28
  %24 = load i32, i32* %i, align 4
  %25 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %len30 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %25, i32 0, i32 1
  %26 = load i32, i32* %len30, align 4
  %cmp31 = icmp ult i32 %24, %26
  br i1 %cmp31, label %for.body32, label %for.end50

for.body32:                                       ; preds = %for.cond29
  %27 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf33 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %27, i32 0, i32 2
  %28 = load i8*, i8** %buf33, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx34, align 1
  %conv = sext i8 %30 to i32
  switch i32 %conv, label %sw.epilog [
    i32 34, label %sw.bb35
    i32 92, label %sw.bb35
    i32 41, label %sw.bb37
    i32 40, label %sw.bb37
  ]

sw.bb35:                                          ; preds = %for.body32, %for.body32
  %call36 = call i32 @putchar(i32 92)
  br label %sw.epilog

sw.bb37:                                          ; preds = %for.body32, %for.body32
  %31 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type38 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %31, i32 0, i32 0
  %32 = load i32, i32* %type38, align 4
  %cmp39 = icmp eq i32 %32, 3
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %sw.bb37
  %call42 = call i32 @putchar(i32 92)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %sw.bb37
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end43, %for.body32, %sw.bb35
  %33 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %buf44 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %33, i32 0, i32 2
  %34 = load i8*, i8** %buf44, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %36 to i32
  %call47 = call i32 @putchar(i32 %conv46)
  br label %for.inc48

for.inc48:                                        ; preds = %sw.epilog
  %37 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %37, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond29

for.end50:                                        ; preds = %for.cond29
  %38 = load %struct.s_expr*, %struct.s_expr** %e.addr, align 4
  %type51 = getelementptr inbounds %struct.s_expr, %struct.s_expr* %38, i32 0, i32 0
  %39 = load i32, i32* %type51, align 4
  %cmp52 = icmp eq i32 %39, 2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %for.end50
  %call55 = call i32 @putchar(i32 34)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %for.end50
  %call57 = call i32 @putchar(i32 10)
  br label %sw.epilog58

sw.epilog58:                                      ; preds = %if.then, %for.end14, %if.end56, %if.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %next = alloca i8*, align 4
  %in = alloca i8*, align 4
  %x = alloca %struct.s_expr*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.6, i32 0, i32 0), i8** %in, align 4
  %0 = load i8*, i8** %in, align 4
  %call = call %struct.s_expr* @parse_term(i8* %0, i8** %next)
  store %struct.s_expr* %call, %struct.s_expr** %x, align 4
  %1 = load i8*, i8** %in, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0), i8* %1)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0))
  %2 = load %struct.s_expr*, %struct.s_expr** %x, align 4
  call void @print_expr(%struct.s_expr* %2, i32 0)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
