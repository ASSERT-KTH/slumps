
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for cartesianProduct()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %mul20 = mul i32 %call19, 1
  %call21 = call noalias i8* @malloc(i32 %mul20)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %numSets.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %8, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %numSets.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cartesianProduct()

; entering Souper's runOnFunction() for printSets()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %mul20 = mul i32 %call19, 1
  %call21 = call noalias i8* @malloc(i32 %mul20)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %numSets.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %numSets.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %4, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printSets()

; entering Souper's runOnFunction() for processInputString()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %mul20 = mul i32 %call19, 1
  %call21 = call noalias i8* @malloc(i32 %mul20)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv3, 120
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 120:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %add14, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i8* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call19 = call i32 @strlen(i8* %18) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul20 = mul i32 %call19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne i32 %conv24, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %arrayidx28, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp sge i32 %conv29, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = icmp sle i32 %conv33, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx37, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc38 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %arrayidx40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv41 = sext i8 %35 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp42 = icmp eq i32 %conv41, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc50 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx54, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv55 = sext i8 %43 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp56 = icmp ne i32 %conv55, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i8, i8* %arrayidx59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %46 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp61 = icmp eq i32 %conv60, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp eq i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call72 = call i32 @strlen(i8* %50) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %call72, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add78 = add nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add nsw i32 1, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul81 = mul i32 %add80, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %arrayidx85, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv86 = sext i8 %60 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp87 = icmp ne i32 %conv86, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add90 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %arrayidx91, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv92 = sext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp93 = icmp eq i32 %conv92, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add95 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i8, i8* %arrayidx96, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv97 = sext i8 %66 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp98 = icmp eq i32 %conv97, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add101 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add101, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %mul102 = mul i32 %sub, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mul 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add104 = add nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub105 = sub nsw i32 %add104, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %call107 = call i32 @atoi(i8* %74)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc109 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add111 = add nsw i32 %79, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc114 = add nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc116 = add nsw i32 %81, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add119 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 120:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %mul20 = mul i32 %call19, 1
  %call21 = call noalias i8* @malloc(i32 %mul20)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul20 = mul i32 %call19, 1"
; from ""
; with "  %call19 = call i32 @strlen(i8* %18) #3" in:
"%0:i32 = var
%1:i32 = mul 1:i32, %0
cand %1 %0
"
; with "  %call19 = call i32 @strlen(i8* %18) #3"

Module after replacement:
; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for processInputString()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for processInputString()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv3, 120
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 120:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %add14, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i8* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call19 = call i32 @strlen(i8* %18) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne i32 %conv24, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %arrayidx28, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp sge i32 %conv29, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = icmp sle i32 %conv33, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx37, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc38 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %arrayidx40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv41 = sext i8 %35 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp42 = icmp eq i32 %conv41, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc50 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx54, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv55 = sext i8 %43 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp56 = icmp ne i32 %conv55, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i8, i8* %arrayidx59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %46 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp61 = icmp eq i32 %conv60, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp eq i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call72 = call i32 @strlen(i8* %50) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %call72, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add78 = add nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add nsw i32 1, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul81 = mul i32 %add80, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %arrayidx85, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv86 = sext i8 %60 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp87 = icmp ne i32 %conv86, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add90 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %arrayidx91, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv92 = sext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp93 = icmp eq i32 %conv92, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add95 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i8, i8* %arrayidx96, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv97 = sext i8 %66 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp98 = icmp eq i32 %conv97, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add101 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add101, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %mul102 = mul i32 %sub, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mul 1:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add104 = add nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub105 = sub nsw i32 %add104, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %call107 = call i32 @atoi(i8* %74)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc109 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add111 = add nsw i32 %79, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc114 = add nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc116 = add nsw i32 %81, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add119 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483543
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mul 1:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483543
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2

Cost = 2
second query is UNSAT
Dataflow Pruned 0/0
There are 5 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %mul102 = mul i32 %sub, 1
  %call103 = call noalias i8* @malloc(i32 %mul102)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul102 = mul i32 %sub, 1"
; from ""
; with "  %sub = sub nsw i32 %add101, %68" in:
"%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mul 1:i32, %3
cand %4 %3
"
; with "  %sub = sub nsw i32 %add101, %68"

Module after replacement:
; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %call103 = call noalias i8* @malloc(i32 %sub)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for processInputString()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for processInputString()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %call103 = call noalias i8* @malloc(i32 %sub)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv3, 120
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 120:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %add14, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i8* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call19 = call i32 @strlen(i8* %18) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne i32 %conv24, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %arrayidx28, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp sge i32 %conv29, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv33 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = icmp sle i32 %conv33, 57
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 57:i32
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx37, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc38 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %arrayidx40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv41 = sext i8 %35 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp42 = icmp eq i32 %conv41, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc50 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx54, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv55 = sext i8 %43 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp56 = icmp ne i32 %conv55, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i8, i8* %arrayidx59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %46 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp61 = icmp eq i32 %conv60, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp69 = icmp eq i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call72 = call i32 @strlen(i8* %50) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %call72, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add78 = add nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %setLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add nsw i32 1, %54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul81 = mul i32 %add80, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %arrayidx85, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv86 = sext i8 %60 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp87 = icmp ne i32 %conv86, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add90 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %arrayidx91, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv92 = sext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp93 = icmp eq i32 %conv92, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add95 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i8, i8* %arrayidx96, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv97 = sext i8 %66 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp98 = icmp eq i32 %conv97, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add101 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add101, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add104 = add nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub105 = sub nsw i32 %add104, %73
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %call107 = call i32 @atoi(i8* %74)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc109 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add111 = add nsw i32 %79, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc114 = add nsw i32 %80, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc116 = add nsw i32 %81, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %numSets, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add119 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for processInputString()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Cartesian_product_of_two_or_more_lists.c.bc'
source_filename = "./Cartesian_product_of_two_or_more_lists.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"\08),\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0ANumber of sets : %d\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0ASet %d : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %d \00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"\0A%s\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"\0A{}\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\0A{\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\08}\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"Usage : %s <Set product expression enclosed in double quotes>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @cartesianProduct(i32** %sets, i32* %setLengths, i32* %currentSet, i32 %numSets, i32 %times) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %currentSet.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32* %currentSet, i32** %currentSet.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  %0 = load i32, i32* %times.addr, align 4
  %1 = load i32, i32* %numSets.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %times.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %currentSet.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc11, %if.else
  %8 = load i32, i32* %j, align 4
  %9 = load i32*, i32** %setLengths.addr, align 4
  %10 = load i32, i32* %times.addr, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp slt i32 %8, %11
  br i1 %cmp6, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond4
  %12 = load i32**, i32*** %sets.addr, align 4
  %13 = load i32, i32* %times.addr, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  %14 = load i32*, i32** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx9, align 4
  %17 = load i32*, i32** %currentSet.addr, align 4
  %18 = load i32, i32* %times.addr, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx10, align 4
  %19 = load i32**, i32*** %sets.addr, align 4
  %20 = load i32*, i32** %setLengths.addr, align 4
  %21 = load i32*, i32** %currentSet.addr, align 4
  %22 = load i32, i32* %numSets.addr, align 4
  %23 = load i32, i32* %times.addr, align 4
  %add = add nsw i32 %23, 1
  call void @cartesianProduct(i32** %19, i32* %20, i32* %21, i32 %22, i32 %add)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %24 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %24, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond4

for.end13:                                        ; preds = %for.cond4
  br label %if.end

if.end:                                           ; preds = %for.end13, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printSets(i32** %sets, i32* %setLengths, i32 %numSets) #0 {
entry:
  %sets.addr = alloca i32**, align 4
  %setLengths.addr = alloca i32*, align 4
  %numSets.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %sets, i32*** %sets.addr, align 4
  store i32* %setLengths, i32** %setLengths.addr, align 4
  store i32 %numSets, i32* %numSets.addr, align 4
  %0 = load i32, i32* %numSets.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %numSets.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 %add1)
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32*, i32** %setLengths.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %cmp4 = icmp slt i32 %4, %7
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %8 = load i32**, i32*** %sets.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32*, i32** %8, i32 %9
  %10 = load i32*, i32** %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %12)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %14, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @processInputString(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %sets = alloca i32**, align 4
  %currentSet = alloca i32*, align 4
  %setLengths = alloca i32*, align 4
  %setLength = alloca i32, align 4
  %numSets = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  %start = alloca i32, align 4
  %counter = alloca i32, align 4
  %token = alloca i8*, align 4
  %holder = alloca i8*, align 4
  %holderToken = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 0, i32* %numSets, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %numSets, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %numSets, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %7, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %numSets, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.end
  %9 = load i8*, i8** %str.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  br label %return

if.end10:                                         ; preds = %for.end
  %10 = load i32, i32* %numSets, align 4
  %add = add nsw i32 %10, 1
  %call11 = call noalias i8* @calloc(i32 4, i32 %add)
  %11 = bitcast i8* %call11 to i32*
  store i32* %11, i32** %currentSet, align 4
  %12 = load i32, i32* %numSets, align 4
  %add12 = add nsw i32 %12, 1
  %call13 = call noalias i8* @calloc(i32 4, i32 %add12)
  %13 = bitcast i8* %call13 to i32*
  store i32* %13, i32** %setLengths, align 4
  %14 = load i32, i32* %numSets, align 4
  %add14 = add nsw i32 %14, 1
  %mul = mul i32 %add14, 4
  %call15 = call noalias i8* @malloc(i32 %mul)
  %15 = bitcast i8* %call15 to i32**
  store i32** %15, i32*** %sets, align 4
  %16 = load i8*, i8** %str.addr, align 4
  %call16 = call i8* @strtok(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end115, %if.end10
  %17 = load i8*, i8** %token, align 4
  %cmp17 = icmp ne i8* %17, null
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %token, align 4
  %call19 = call i32 @strlen(i8* %18) #3
  %call21 = call noalias i8* @malloc(i32 %call19)
  store i8* %call21, i8** %holder, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc49, %while.body
  %19 = load i8*, i8** %token, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %19, i32 %20
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %21 to i32
  %cmp25 = icmp ne i32 %conv24, 0
  br i1 %cmp25, label %for.body27, label %for.end51

for.body27:                                       ; preds = %for.cond22
  %22 = load i8*, i8** %token, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %24 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %25 = load i8*, i8** %token, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i32 %26
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %27 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %token, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i32 %29
  %30 = load i8, i8* %arrayidx37, align 1
  %31 = load i8*, i8** %holder, align 4
  %32 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %arrayidx39, align 1
  br label %if.end48

if.else:                                          ; preds = %land.lhs.true, %for.body27
  %33 = load i8*, i8** %token, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %34
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %35 to i32
  %cmp42 = icmp eq i32 %conv41, 44
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.else
  %36 = load i8*, i8** %holder, align 4
  %37 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %37, 1
  store i32 %inc45, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 32, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then36
  br label %for.inc49

for.inc49:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4
  %inc50 = add nsw i32 %38, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond22

for.end51:                                        ; preds = %for.cond22
  %39 = load i8*, i8** %holder, align 4
  %40 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %39, i32 %40
  store i8 0, i8* %arrayidx52, align 1
  store i32 0, i32* %setLength, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc66, %for.end51
  %41 = load i8*, i8** %holder, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %43 to i32
  %cmp56 = icmp ne i32 %conv55, 0
  br i1 %cmp56, label %for.body58, label %for.end68

for.body58:                                       ; preds = %for.cond53
  %44 = load i8*, i8** %holder, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %44, i32 %45
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 32
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %for.body58
  %47 = load i32, i32* %setLength, align 4
  %inc64 = add nsw i32 %47, 1
  store i32 %inc64, i32* %setLength, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %for.body58
  br label %for.inc66

for.inc66:                                        ; preds = %if.end65
  %48 = load i32, i32* %i, align 4
  %inc67 = add nsw i32 %48, 1
  store i32 %inc67, i32* %i, align 4
  br label %for.cond53

for.end68:                                        ; preds = %for.cond53
  %49 = load i32, i32* %setLength, align 4
  %cmp69 = icmp eq i32 %49, 0
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %for.end68
  %50 = load i8*, i8** %holder, align 4
  %call72 = call i32 @strlen(i8* %50) #3
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %land.lhs.true71
  %call76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  br label %return

if.end77:                                         ; preds = %land.lhs.true71, %for.end68
  %51 = load i32, i32* %setLength, align 4
  %add78 = add nsw i32 %51, 1
  %52 = load i32*, i32** %setLengths, align 4
  %53 = load i32, i32* %counter, align 4
  %arrayidx79 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %add78, i32* %arrayidx79, align 4
  %54 = load i32, i32* %setLength, align 4
  %add80 = add nsw i32 1, %54
  %mul81 = mul i32 %add80, 4
  %call82 = call noalias i8* @malloc(i32 %mul81)
  %55 = bitcast i8* %call82 to i32*
  %56 = load i32**, i32*** %sets, align 4
  %57 = load i32, i32* %counter, align 4
  %arrayidx83 = getelementptr inbounds i32*, i32** %56, i32 %57
  store i32* %55, i32** %arrayidx83, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %start, align 4
  store i32 0, i32* %l, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc113, %if.end77
  %58 = load i8*, i8** %holder, align 4
  %59 = load i32, i32* %l, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %60 to i32
  %cmp87 = icmp ne i32 %conv86, 0
  br i1 %cmp87, label %for.body89, label %for.end115

for.body89:                                       ; preds = %for.cond84
  %61 = load i8*, i8** %holder, align 4
  %62 = load i32, i32* %l, align 4
  %add90 = add nsw i32 %62, 1
  %arrayidx91 = getelementptr inbounds i8, i8* %61, i32 %add90
  %63 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %63 to i32
  %cmp93 = icmp eq i32 %conv92, 32
  br i1 %cmp93, label %if.then100, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body89
  %64 = load i8*, i8** %holder, align 4
  %65 = load i32, i32* %l, align 4
  %add95 = add nsw i32 %65, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %64, i32 %add95
  %66 = load i8, i8* %arrayidx96, align 1
  %conv97 = sext i8 %66 to i32
  %cmp98 = icmp eq i32 %conv97, 0
  br i1 %cmp98, label %if.then100, label %if.end112

if.then100:                                       ; preds = %lor.lhs.false, %for.body89
  %67 = load i32, i32* %l, align 4
  %add101 = add nsw i32 %67, 1
  %68 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %add101, %68
  %call103 = call noalias i8* @malloc(i32 %sub)
  store i8* %call103, i8** %holderToken, align 4
  %69 = load i8*, i8** %holderToken, align 4
  %70 = load i8*, i8** %holder, align 4
  %71 = load i32, i32* %start, align 4
  %add.ptr = getelementptr inbounds i8, i8* %70, i32 %71
  %72 = load i32, i32* %l, align 4
  %add104 = add nsw i32 %72, 1
  %73 = load i32, i32* %start, align 4
  %sub105 = sub nsw i32 %add104, %73
  %call106 = call i8* @strncpy(i8* %69, i8* %add.ptr, i32 %sub105)
  %74 = load i8*, i8** %holderToken, align 4
  %call107 = call i32 @atoi(i8* %74)
  %75 = load i32**, i32*** %sets, align 4
  %76 = load i32, i32* %counter, align 4
  %arrayidx108 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx108, align 4
  %78 = load i32, i32* %k, align 4
  %inc109 = add nsw i32 %78, 1
  store i32 %inc109, i32* %k, align 4
  %arrayidx110 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %call107, i32* %arrayidx110, align 4
  %79 = load i32, i32* %l, align 4
  %add111 = add nsw i32 %79, 2
  store i32 %add111, i32* %start, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then100, %lor.lhs.false
  br label %for.inc113

for.inc113:                                       ; preds = %if.end112
  %80 = load i32, i32* %l, align 4
  %inc114 = add nsw i32 %80, 1
  store i32 %inc114, i32* %l, align 4
  br label %for.cond84

for.end115:                                       ; preds = %for.cond84
  %81 = load i32, i32* %counter, align 4
  %inc116 = add nsw i32 %81, 1
  store i32 %inc116, i32* %counter, align 4
  %call117 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i8* %call117, i8** %token, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0))
  %82 = load i32**, i32*** %sets, align 4
  %83 = load i32*, i32** %setLengths, align 4
  %84 = load i32*, i32** %currentSet, align 4
  %85 = load i32, i32* %numSets, align 4
  %add119 = add nsw i32 %85, 1
  call void @cartesianProduct(i32** %82, i32* %83, i32* %84, i32 %add119, i32 0)
  %call120 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0))
  br label %return

return:                                           ; preds = %while.end, %if.then75, %if.then9
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i32 0, i32 0), i8* %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  call void @processInputString(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 2 replacements done on this module
Total of 2 replacements candidates on this module
