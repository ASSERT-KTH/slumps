
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for _mr_unrank1()

; ModuleID = './Permutations-Rank_of_a_permutation.c.bc'
source_filename = "./Permutations-Rank_of_a_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%3d: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" ] = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @_mr_unrank1(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rank.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, %2
  store i32 %div, i32* %q, align 4
  %3 = load i32, i32* %rank.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, %4
  store i32 %rem, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i32*, i32** %vec.addr, align 4
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  store i32 %7, i32* %t, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %9, 1
  %arrayidx1 = getelementptr inbounds i32, i32* %8, i32 %sub
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load i32*, i32** %vec.addr, align 4
  %12 = load i32, i32* %r, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  store i32 %10, i32* %arrayidx2, align 4
  %13 = load i32, i32* %t, align 4
  %14 = load i32*, i32** %vec.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %15, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %14, i32 %sub3
  store i32 %13, i32* %arrayidx4, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %16 = load i32, i32* %q, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub5 = sub nsw i32 %17, 1
  %18 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %16, i32 %sub5, i32* %18)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @_mr_rank1(i32 %n, i32* %vec, i32* %inv) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %inv.addr = alloca i32*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32* %inv, i32** %inv.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** %vec.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %sub
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %s, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load i32*, i32** %vec.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i32 %sub1
  %6 = load i32, i32* %arrayidx2, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32*, i32** %vec.addr, align 4
  %8 = load i32*, i32** %inv.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %sub3
  %10 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %12 = load i32*, i32** %vec.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i32 %sub6
  store i32 %11, i32* %arrayidx7, align 4
  %14 = load i32, i32* %t, align 4
  %15 = load i32*, i32** %vec.addr, align 4
  %16 = load i32*, i32** %inv.addr, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %17, 1
  %arrayidx9 = getelementptr inbounds i32, i32* %16, i32 %sub8
  %18 = load i32, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %18
  store i32 %14, i32* %arrayidx10, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %19 = load i32*, i32** %inv.addr, align 4
  %20 = load i32, i32* %s, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  store i32 %21, i32* %t, align 4
  %22 = load i32*, i32** %inv.addr, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub13 = sub nsw i32 %23, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %sub13
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32*, i32** %inv.addr, align 4
  %26 = load i32, i32* %s, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %arrayidx15, align 4
  %27 = load i32, i32* %t, align 4
  %28 = load i32*, i32** %inv.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %29, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i32 %sub16
  store i32 %27, i32* %arrayidx17, align 4
  br label %do.end18

do.end18:                                         ; preds = %do.body11
  %30 = load i32, i32* %s, align 4
  %31 = load i32, i32* %n.addr, align 4
  %32 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %32, 1
  %33 = load i32*, i32** %vec.addr, align 4
  %34 = load i32*, i32** %inv.addr, align 4
  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
  %mul = mul nsw i32 %31, %call
  %add = add nsw i32 %30, %mul
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end18, %if.then
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone
define hidden void @get_permutation(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32*, i32** %vec.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %rank.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %6, i32 %7, i32* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rank(i32 %n, i32* %vec) #0 {
entry:
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca i32*, align 4
  %inv = alloca i32*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %v, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** %inv, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %vec.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32*, i32** %v, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %inv, align 4
  %13 = load i32*, i32** %vec.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %15
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32*, i32** %v, align 4
  %19 = load i32*, i32** %inv, align 4
  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
  store i32 %call6, i32* %r, align 4
  %20 = load i32*, i32** %inv, align 4
  %21 = bitcast i32* %20 to i8*
  call void @free(i8* %21)
  %22 = load i32*, i32** %v, align 4
  %23 = bitcast i32* %22 to i8*
  call void @free(i8* %23)
  %24 = load i32, i32* %r, align 4
  ret i32 %24
}

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %tv = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 24
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %r, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  call void @get_permutation(i32 %2, i32 4, i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 0, %4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %arraydecay8 = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i32 %call9)
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %8 = load i32, i32* %r, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %r, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rank.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %rank.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for _mr_unrank1()

; entering Souper's runOnFunction() for _mr_rank1()

; ModuleID = './Permutations-Rank_of_a_permutation.c.bc'
source_filename = "./Permutations-Rank_of_a_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%3d: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" ] = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @_mr_unrank1(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rank.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, %2
  store i32 %div, i32* %q, align 4
  %3 = load i32, i32* %rank.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, %4
  store i32 %rem, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i32*, i32** %vec.addr, align 4
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  store i32 %7, i32* %t, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %9, 1
  %arrayidx1 = getelementptr inbounds i32, i32* %8, i32 %sub
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load i32*, i32** %vec.addr, align 4
  %12 = load i32, i32* %r, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  store i32 %10, i32* %arrayidx2, align 4
  %13 = load i32, i32* %t, align 4
  %14 = load i32*, i32** %vec.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %15, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %14, i32 %sub3
  store i32 %13, i32* %arrayidx4, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %16 = load i32, i32* %q, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub5 = sub nsw i32 %17, 1
  %18 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %16, i32 %sub5, i32* %18)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @_mr_rank1(i32 %n, i32* %vec, i32* %inv) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %inv.addr = alloca i32*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32* %inv, i32** %inv.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** %vec.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %sub
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %s, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load i32*, i32** %vec.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i32 %sub1
  %6 = load i32, i32* %arrayidx2, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32*, i32** %vec.addr, align 4
  %8 = load i32*, i32** %inv.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %sub3
  %10 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %12 = load i32*, i32** %vec.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i32 %sub6
  store i32 %11, i32* %arrayidx7, align 4
  %14 = load i32, i32* %t, align 4
  %15 = load i32*, i32** %vec.addr, align 4
  %16 = load i32*, i32** %inv.addr, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %17, 1
  %arrayidx9 = getelementptr inbounds i32, i32* %16, i32 %sub8
  %18 = load i32, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %18
  store i32 %14, i32* %arrayidx10, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %19 = load i32*, i32** %inv.addr, align 4
  %20 = load i32, i32* %s, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  store i32 %21, i32* %t, align 4
  %22 = load i32*, i32** %inv.addr, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub13 = sub nsw i32 %23, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %sub13
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32*, i32** %inv.addr, align 4
  %26 = load i32, i32* %s, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %arrayidx15, align 4
  %27 = load i32, i32* %t, align 4
  %28 = load i32*, i32** %inv.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %29, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i32 %sub16
  store i32 %27, i32* %arrayidx17, align 4
  br label %do.end18

do.end18:                                         ; preds = %do.body11
  %30 = load i32, i32* %s, align 4
  %31 = load i32, i32* %n.addr, align 4
  %32 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %32, 1
  %33 = load i32*, i32** %vec.addr, align 4
  %34 = load i32*, i32** %inv.addr, align 4
  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
  %mul = mul nsw i32 %31, %call
  %add = add nsw i32 %30, %mul
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end18, %if.then
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone
define hidden void @get_permutation(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32*, i32** %vec.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %rank.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %6, i32 %7, i32* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rank(i32 %n, i32* %vec) #0 {
entry:
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca i32*, align 4
  %inv = alloca i32*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %v, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** %inv, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %vec.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32*, i32** %v, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %inv, align 4
  %13 = load i32*, i32** %vec.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %15
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32*, i32** %v, align 4
  %19 = load i32*, i32** %inv, align 4
  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
  store i32 %call6, i32* %r, align 4
  %20 = load i32*, i32** %inv, align 4
  %21 = bitcast i32* %20 to i8*
  call void @free(i8* %21)
  %22 = load i32*, i32** %v, align 4
  %23 = bitcast i32* %22 to i8*
  call void @free(i8* %23)
  %24 = load i32, i32* %r, align 4
  ret i32 %24
}

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %tv = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 24
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %r, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  call void @get_permutation(i32 %2, i32 4, i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 0, %4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %arraydecay8 = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i32 %call9)
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %8 = load i32, i32* %r, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %r, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub16 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %31, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %30, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for _mr_rank1()

; entering Souper's runOnFunction() for get_permutation()

; ModuleID = './Permutations-Rank_of_a_permutation.c.bc'
source_filename = "./Permutations-Rank_of_a_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%3d: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" ] = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @_mr_unrank1(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rank.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, %2
  store i32 %div, i32* %q, align 4
  %3 = load i32, i32* %rank.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, %4
  store i32 %rem, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i32*, i32** %vec.addr, align 4
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  store i32 %7, i32* %t, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %9, 1
  %arrayidx1 = getelementptr inbounds i32, i32* %8, i32 %sub
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load i32*, i32** %vec.addr, align 4
  %12 = load i32, i32* %r, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  store i32 %10, i32* %arrayidx2, align 4
  %13 = load i32, i32* %t, align 4
  %14 = load i32*, i32** %vec.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %15, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %14, i32 %sub3
  store i32 %13, i32* %arrayidx4, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %16 = load i32, i32* %q, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub5 = sub nsw i32 %17, 1
  %18 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %16, i32 %sub5, i32* %18)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @_mr_rank1(i32 %n, i32* %vec, i32* %inv) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %inv.addr = alloca i32*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32* %inv, i32** %inv.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** %vec.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %sub
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %s, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load i32*, i32** %vec.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i32 %sub1
  %6 = load i32, i32* %arrayidx2, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32*, i32** %vec.addr, align 4
  %8 = load i32*, i32** %inv.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %sub3
  %10 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %12 = load i32*, i32** %vec.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i32 %sub6
  store i32 %11, i32* %arrayidx7, align 4
  %14 = load i32, i32* %t, align 4
  %15 = load i32*, i32** %vec.addr, align 4
  %16 = load i32*, i32** %inv.addr, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %17, 1
  %arrayidx9 = getelementptr inbounds i32, i32* %16, i32 %sub8
  %18 = load i32, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %18
  store i32 %14, i32* %arrayidx10, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %19 = load i32*, i32** %inv.addr, align 4
  %20 = load i32, i32* %s, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  store i32 %21, i32* %t, align 4
  %22 = load i32*, i32** %inv.addr, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub13 = sub nsw i32 %23, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %sub13
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32*, i32** %inv.addr, align 4
  %26 = load i32, i32* %s, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %arrayidx15, align 4
  %27 = load i32, i32* %t, align 4
  %28 = load i32*, i32** %inv.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %29, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i32 %sub16
  store i32 %27, i32* %arrayidx17, align 4
  br label %do.end18

do.end18:                                         ; preds = %do.body11
  %30 = load i32, i32* %s, align 4
  %31 = load i32, i32* %n.addr, align 4
  %32 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %32, 1
  %33 = load i32*, i32** %vec.addr, align 4
  %34 = load i32*, i32** %inv.addr, align 4
  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
  %mul = mul nsw i32 %31, %call
  %add = add nsw i32 %30, %mul
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end18, %if.then
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone
define hidden void @get_permutation(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32*, i32** %vec.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %rank.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %6, i32 %7, i32* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rank(i32 %n, i32* %vec) #0 {
entry:
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca i32*, align 4
  %inv = alloca i32*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %v, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** %inv, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %vec.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32*, i32** %v, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %inv, align 4
  %13 = load i32*, i32** %vec.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %15
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32*, i32** %v, align 4
  %19 = load i32*, i32** %inv, align 4
  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
  store i32 %call6, i32* %r, align 4
  %20 = load i32*, i32** %inv, align 4
  %21 = bitcast i32* %20 to i8*
  call void @free(i8* %21)
  %22 = load i32*, i32** %v, align 4
  %23 = bitcast i32* %22 to i8*
  call void @free(i8* %23)
  %24 = load i32, i32* %r, align 4
  ret i32 %24
}

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %tv = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 24
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %r, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  call void @get_permutation(i32 %2, i32 4, i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 0, %4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %arraydecay8 = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i32 %call9)
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %8 = load i32, i32* %r, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %r, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %rank.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for get_permutation()

; entering Souper's runOnFunction() for get_rank()

; ModuleID = './Permutations-Rank_of_a_permutation.c.bc'
source_filename = "./Permutations-Rank_of_a_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%3d: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" ] = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @_mr_unrank1(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rank.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, %2
  store i32 %div, i32* %q, align 4
  %3 = load i32, i32* %rank.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, %4
  store i32 %rem, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i32*, i32** %vec.addr, align 4
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  store i32 %7, i32* %t, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %9, 1
  %arrayidx1 = getelementptr inbounds i32, i32* %8, i32 %sub
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load i32*, i32** %vec.addr, align 4
  %12 = load i32, i32* %r, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  store i32 %10, i32* %arrayidx2, align 4
  %13 = load i32, i32* %t, align 4
  %14 = load i32*, i32** %vec.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %15, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %14, i32 %sub3
  store i32 %13, i32* %arrayidx4, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %16 = load i32, i32* %q, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub5 = sub nsw i32 %17, 1
  %18 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %16, i32 %sub5, i32* %18)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @_mr_rank1(i32 %n, i32* %vec, i32* %inv) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %inv.addr = alloca i32*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32* %inv, i32** %inv.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** %vec.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %sub
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %s, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load i32*, i32** %vec.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i32 %sub1
  %6 = load i32, i32* %arrayidx2, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32*, i32** %vec.addr, align 4
  %8 = load i32*, i32** %inv.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %sub3
  %10 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %12 = load i32*, i32** %vec.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i32 %sub6
  store i32 %11, i32* %arrayidx7, align 4
  %14 = load i32, i32* %t, align 4
  %15 = load i32*, i32** %vec.addr, align 4
  %16 = load i32*, i32** %inv.addr, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %17, 1
  %arrayidx9 = getelementptr inbounds i32, i32* %16, i32 %sub8
  %18 = load i32, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %18
  store i32 %14, i32* %arrayidx10, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %19 = load i32*, i32** %inv.addr, align 4
  %20 = load i32, i32* %s, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  store i32 %21, i32* %t, align 4
  %22 = load i32*, i32** %inv.addr, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub13 = sub nsw i32 %23, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %sub13
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32*, i32** %inv.addr, align 4
  %26 = load i32, i32* %s, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %arrayidx15, align 4
  %27 = load i32, i32* %t, align 4
  %28 = load i32*, i32** %inv.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %29, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i32 %sub16
  store i32 %27, i32* %arrayidx17, align 4
  br label %do.end18

do.end18:                                         ; preds = %do.body11
  %30 = load i32, i32* %s, align 4
  %31 = load i32, i32* %n.addr, align 4
  %32 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %32, 1
  %33 = load i32*, i32** %vec.addr, align 4
  %34 = load i32*, i32** %inv.addr, align 4
  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
  %mul = mul nsw i32 %31, %call
  %add = add nsw i32 %30, %mul
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end18, %if.then
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone
define hidden void @get_permutation(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32*, i32** %vec.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %rank.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %6, i32 %7, i32* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rank(i32 %n, i32* %vec) #0 {
entry:
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca i32*, align 4
  %inv = alloca i32*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %v, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** %inv, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %vec.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32*, i32** %v, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %inv, align 4
  %13 = load i32*, i32** %vec.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %15
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32*, i32** %v, align 4
  %19 = load i32*, i32** %inv, align 4
  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
  store i32 %call6, i32* %r, align 4
  %20 = load i32*, i32** %inv, align 4
  %21 = bitcast i32* %20 to i8*
  call void @free(i8* %21)
  %22 = load i32*, i32** %v, align 4
  %23 = bitcast i32* %22 to i8*
  call void @free(i8* %23)
  %24 = load i32, i32* %r, align 4
  ret i32 %24
}

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %tv = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 24
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %r, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  call void @get_permutation(i32 %2, i32 4, i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 0, %4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %arraydecay8 = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i32 %call9)
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %8 = load i32, i32* %r, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %r, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 %2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for get_rank()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Permutations-Rank_of_a_permutation.c.bc'
source_filename = "./Permutations-Rank_of_a_permutation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%3d: \00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" ] = %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @_mr_unrank1(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %r = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %rank.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, %2
  store i32 %div, i32* %q, align 4
  %3 = load i32, i32* %rank.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %3, %4
  store i32 %rem, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load i32*, i32** %vec.addr, align 4
  %6 = load i32, i32* %r, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  store i32 %7, i32* %t, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %9, 1
  %arrayidx1 = getelementptr inbounds i32, i32* %8, i32 %sub
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load i32*, i32** %vec.addr, align 4
  %12 = load i32, i32* %r, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %11, i32 %12
  store i32 %10, i32* %arrayidx2, align 4
  %13 = load i32, i32* %t, align 4
  %14 = load i32*, i32** %vec.addr, align 4
  %15 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %15, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %14, i32 %sub3
  store i32 %13, i32* %arrayidx4, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %16 = load i32, i32* %q, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub5 = sub nsw i32 %17, 1
  %18 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %16, i32 %sub5, i32* %18)
  br label %return

return:                                           ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @_mr_rank1(i32 %n, i32* %vec, i32* %inv) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %inv.addr = alloca i32*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32* %inv, i32** %inv.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32*, i32** %vec.addr, align 4
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %sub
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %s, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load i32*, i32** %vec.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub1 = sub nsw i32 %5, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i32 %sub1
  %6 = load i32, i32* %arrayidx2, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32*, i32** %vec.addr, align 4
  %8 = load i32*, i32** %inv.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub3 = sub nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %sub3
  %10 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i32 %10
  %11 = load i32, i32* %arrayidx5, align 4
  %12 = load i32*, i32** %vec.addr, align 4
  %13 = load i32, i32* %n.addr, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i32 %sub6
  store i32 %11, i32* %arrayidx7, align 4
  %14 = load i32, i32* %t, align 4
  %15 = load i32*, i32** %vec.addr, align 4
  %16 = load i32*, i32** %inv.addr, align 4
  %17 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %17, 1
  %arrayidx9 = getelementptr inbounds i32, i32* %16, i32 %sub8
  %18 = load i32, i32* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %18
  store i32 %14, i32* %arrayidx10, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body11

do.body11:                                        ; preds = %do.end
  %19 = load i32*, i32** %inv.addr, align 4
  %20 = load i32, i32* %s, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  store i32 %21, i32* %t, align 4
  %22 = load i32*, i32** %inv.addr, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub13 = sub nsw i32 %23, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i32 %sub13
  %24 = load i32, i32* %arrayidx14, align 4
  %25 = load i32*, i32** %inv.addr, align 4
  %26 = load i32, i32* %s, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %arrayidx15, align 4
  %27 = load i32, i32* %t, align 4
  %28 = load i32*, i32** %inv.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub16 = sub nsw i32 %29, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i32 %sub16
  store i32 %27, i32* %arrayidx17, align 4
  br label %do.end18

do.end18:                                         ; preds = %do.body11
  %30 = load i32, i32* %s, align 4
  %31 = load i32, i32* %n.addr, align 4
  %32 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %32, 1
  %33 = load i32*, i32** %vec.addr, align 4
  %34 = load i32*, i32** %inv.addr, align 4
  %call = call i32 @_mr_rank1(i32 %sub19, i32* %33, i32* %34)
  %mul = mul nsw i32 %31, %call
  %add = add nsw i32 %30, %mul
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end18, %if.then
  %35 = load i32, i32* %retval, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone
define hidden void @get_permutation(i32 %rank, i32 %n, i32* %vec) #0 {
entry:
  %rank.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %rank, i32* %rank.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %3 = load i32*, i32** %vec.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %rank.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %8 = load i32*, i32** %vec.addr, align 4
  call void @_mr_unrank1(i32 %6, i32 %7, i32* %8)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rank(i32 %n, i32* %vec) #0 {
entry:
  %n.addr = alloca i32, align 4
  %vec.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %v = alloca i32*, align 4
  %inv = alloca i32*, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %vec, i32** %vec.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %v, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** %inv, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %vec.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32*, i32** %v, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %10
  store i32 %8, i32* %arrayidx3, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32*, i32** %inv, align 4
  %13 = load i32*, i32** %vec.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %15
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32*, i32** %v, align 4
  %19 = load i32*, i32** %inv, align 4
  %call6 = call i32 @_mr_rank1(i32 %17, i32* %18, i32* %19)
  store i32 %call6, i32* %r, align 4
  %20 = load i32*, i32** %inv, align 4
  %21 = bitcast i32* %20 to i8*
  call void @free(i8* %21)
  %22 = load i32*, i32** %v, align 4
  %23 = bitcast i32* %22 to i8*
  call void @free(i8* %23)
  %24 = load i32, i32* %r, align 4
  ret i32 %24
}

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %tv = alloca [4 x i32], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 24
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %r, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1)
  %2 = load i32, i32* %r, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  call void @get_permutation(i32 %2, i32 4, i32* %arraydecay)
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 0, %4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %arraydecay8 = getelementptr inbounds [4 x i32], [4 x i32]* %tv, i32 0, i32 0
  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i32 %call9)
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %8 = load i32, i32* %r, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %r, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 24:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 0, %4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @get_rank(i32 4, i32* %arraydecay8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 24:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
