
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ruleset_del()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.rule_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i8* %6, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ruleset_del()

; entering Souper's runOnFunction() for str_new()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_new()

; entering Souper's runOnFunction() for str_append()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %1) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @strlen(i8* %3) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %alloc_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add3 = add nsw i32 %add, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %5, %add3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = ult %0, %4
infer %5

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %add6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %alloc_len10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i1 = ult %0, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_append()

; entering Souper's runOnFunction() for str_transfer()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %alloc_len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %tlen, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for str_transfer()

; entering Souper's runOnFunction() for str_del()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for str_del()

; entering Souper's runOnFunction() for str_markov()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %done, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %done, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %changed, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @strlen(i8* %10) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @strlen(i8* %12) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %sl, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %pl, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %call12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %pl, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %terminate, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool22 = icmp ne i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc26 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %changed, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool28 = icmp ne i32 %45, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_markov()

; entering Souper's runOnFunction() for read_rules()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %st_size, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %add = add nsw i64 %3, 2
; Looking for a replacement for:
%0:i64 = var
%1:i64 = addnsw 2:i64, %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv = trunc i64 %add to i32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = addnsw 2:i64, %0
%2:i32 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %st_size3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv4 = trunc i64 %6 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %st_size6, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom = trunc i64 %8 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i64, i64* %st_size7, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %add8 = add nsw i64 %10, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = addnsw 1:i64, %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom9 = trunc i64 %add8 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = addnsw 1:i64, %0
%2:i32 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp14 = icmp ne i32 %conv13, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp18 = icmp ne i32 %conv17, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 10:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %conv23, 35
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 35:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp eq i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add29 = add i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %26, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp33 = icmp ult i32 %25, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 3:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i8, i8* %arrayidx36, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv37 = sext i8 %29 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call38 = call i32 @__isspace(i32 %conv37)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call38, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne i32 %call40, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub44 = sub i32 %34, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp45 = icmp uge i32 %33, %sub44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 3:i32
%2:i32 = var
%3:i1 = ule %1, %2
infer %3

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub48 = sub i32 %35, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ugt i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %43, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i8, i8* %arrayidx55, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv56 = sext i8 %44 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call57 = call i32 @__isspace(i32 %conv56)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool58 = icmp ne i32 %call57, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp61 = icmp ult i32 %46, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub64 = sub i32 %48, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc68 = add i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add70 = add i32 %54, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = icmp ult i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc75 = add i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i8, i8* %arrayidx76, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv77 = sext i8 %59 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call78 = call i32 @__isspace(i32 %conv77)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool79 = icmp ne i32 %call78, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add84 = add nsw i32 1, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 12, %add84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 12:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i8, i8* %arrayidx88, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv89 = sext i8 %73 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp90 = icmp eq i32 %conv89, 46
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 46:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc103 = add nsw i32 %86, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add104 = add i32 %87, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc106 = add i32 %88, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = addnsw 2:i64, %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = addnsw 2:i64, %0
%2:i32 = trunc %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = addnsw 1:i64, %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = addnsw 1:i64, %0
%2:i32 = trunc %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 10:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 35:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 3:i32
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 3:i32
%2:i32 = var
%3:i1 = ule %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 12:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 12
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 20
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 46:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for read_rules()

; entering Souper's runOnFunction() for ./Execute_a_Markov_algorithm.c.bc:__isspace()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %1, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %sub, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2

; *****
; For LLVM instruction:
;  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %lor.ext = zext i1 %2 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sub %0, 9:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Execute_a_Markov_algorithm.c.bc:__isspace()

; entering Souper's runOnFunction() for test_rules()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.ruleset_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for test_rules()

; entering Souper's runOnFunction() for main()

; ModuleID = './Execute_a_Markov_algorithm.c.bc'
source_filename = "./Execute_a_Markov_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ruleset_t = type { i32, %struct.rule_t*, i8* }
%struct.rule_t = type { i8*, i8*, i32 }
%struct.string = type { i8*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i32, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i32 }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"parse error: no -> in %.*s\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"left side blank? %.*s\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Rules from '%s' ok\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"text:     %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"markoved: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"I bought a B of As from T S.\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"rule1\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"rule2\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"I bought a B of As W my Bgage from T S.\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"rule3\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"_1111*11111_\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"rule4\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"000000A000000\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"rule5\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @ruleset_del(%struct.ruleset_t* %r) #0 {
entry:
  %r.addr = alloca %struct.ruleset_t*, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  %0 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %0, i32 0, i32 1
  %1 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %tobool = icmp ne %struct.rule_t* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules1 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %2, i32 0, i32 1
  %3 = load %struct.rule_t*, %struct.rule_t** %rules1, align 4
  %4 = bitcast %struct.rule_t* %3 to i8*
  call void @free(i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %buf, align 4
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %buf4 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %buf4, align 4
  call void @free(i8* %8)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %10 = bitcast %struct.ruleset_t* %9 to i8*
  call void @free(i8* %10)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.string* @str_new(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %str = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %1 = bitcast i8* %call1 to %struct.string*
  store %struct.string* %1, %struct.string** %str, align 4
  %2 = load i32, i32* %l, align 4
  %add = add nsw i32 %2, 1
  %call2 = call noalias i8* @malloc(i32 %add)
  %3 = load %struct.string*, %struct.string** %str, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 0
  store i8* %call2, i8** %s3, align 4
  %4 = load %struct.string*, %struct.string** %str, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s4, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %call5 = call i8* @strcpy(i8* %5, i8* %6)
  %7 = load i32, i32* %l, align 4
  %add6 = add nsw i32 %7, 1
  %8 = load %struct.string*, %struct.string** %str, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1
  store i32 %add6, i32* %alloc_len, align 4
  %9 = load %struct.string*, %struct.string** %str, align 4
  ret %struct.string* %9
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.string* %str, i8* %s, i32 %len) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %l = alloca i32, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.string*, %struct.string** %str.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %call = call i32 @strlen(i8* %1) #4
  store i32 %call, i32* %l, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call i32 @strlen(i8* %3) #4
  store i32 %call2, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  %5 = load i32, i32* %alloc_len, align 4
  %6 = load i32, i32* %l, align 4
  %7 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %6, %7
  %add3 = add nsw i32 %add, 1
  %cmp4 = icmp ult i32 %5, %add3
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %l, align 4
  %9 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %8, %9
  %add7 = add nsw i32 %add6, 1
  %10 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len8 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1
  store i32 %add7, i32* %alloc_len8, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s9 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s9, align 4
  %13 = load %struct.string*, %struct.string** %str.addr, align 4
  %alloc_len10 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 1
  %14 = load i32, i32* %alloc_len10, align 4
  %call11 = call i8* @realloc(i8* %12, i32 %14)
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s12 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  store i8* %call11, i8** %s12, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then5, %if.end
  %16 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 0
  %17 = load i8*, i8** %s14, align 4
  %18 = load i32, i32* %l, align 4
  %add.ptr = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8*, i8** %s.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %19, i32 %20, i1 false)
  %21 = load %struct.string*, %struct.string** %str.addr, align 4
  %s15 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 0
  %22 = load i8*, i8** %s15, align 4
  %23 = load i32, i32* %l, align 4
  %24 = load i32, i32* %len.addr, align 4
  %add16 = add nsw i32 %23, %24
  %arrayidx = getelementptr inbounds i8, i8* %22, i32 %add16
  store i8 0, i8* %arrayidx, align 1
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_transfer(%struct.string* %dest, %struct.string* %src) #0 {
entry:
  %dest.addr = alloca %struct.string*, align 4
  %src.addr = alloca %struct.string*, align 4
  %tlen = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.string* %dest, %struct.string** %dest.addr, align 4
  store %struct.string* %src, %struct.string** %src.addr, align 4
  %0 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc_len, align 4
  store i32 %1, i32* %tlen, align 4
  %2 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc_len1, align 4
  %4 = load %struct.string*, %struct.string** %dest.addr, align 4
  %alloc_len2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1
  store i32 %3, i32* %alloc_len2, align 4
  %5 = load i32, i32* %tlen, align 4
  %6 = load %struct.string*, %struct.string** %src.addr, align 4
  %alloc_len3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1
  store i32 %5, i32* %alloc_len3, align 4
  %7 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 0
  %8 = load i8*, i8** %s, align 4
  store i8* %8, i8** %ts, align 4
  %9 = load %struct.string*, %struct.string** %src.addr, align 4
  %s4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0
  %10 = load i8*, i8** %s4, align 4
  %11 = load %struct.string*, %struct.string** %dest.addr, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  store i8* %10, i8** %s5, align 4
  %12 = load i8*, i8** %ts, align 4
  %13 = load %struct.string*, %struct.string** %src.addr, align 4
  %s6 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0
  store i8* %12, i8** %s6, align 4
  %14 = load %struct.string*, %struct.string** %src.addr, align 4
  %s7 = getelementptr inbounds %struct.string, %struct.string* %14, i32 0, i32 0
  %15 = load i8*, i8** %s7, align 4
  %arrayidx = getelementptr inbounds i8, i8* %15, i32 0
  store i8 0, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.string* %s) #0 {
entry:
  %s.addr = alloca %struct.string*, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 4
  %0 = load %struct.string*, %struct.string** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0
  %1 = load i8*, i8** %s1, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 4
  %s2 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0
  %3 = load i8*, i8** %s2, align 4
  call void @free(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 4
  %5 = bitcast %struct.string* %4 to i8*
  call void @free(i8* %5)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_markov(%struct.string* %str, %struct.ruleset_t* %r) #0 {
entry:
  %str.addr = alloca %struct.string*, align 4
  %r.addr = alloca %struct.ruleset_t*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %sl = alloca i32, align 4
  %pl = alloca i32, align 4
  %changed = alloca i32, align 4
  %done = alloca i32, align 4
  %tmp = alloca %struct.string*, align 4
  store %struct.string* %str, %struct.string** %str.addr, align 4
  store %struct.ruleset_t* %r, %struct.ruleset_t** %r.addr, align 4
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %done, align 4
  %call = call %struct.string* @str_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i32 0, i32 0))
  store %struct.string* %call, %struct.string** %tmp, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %entry
  %0 = load i32, i32* %done, align 4
  %tobool = icmp ne i32 %0, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %changed, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %while.body
  %1 = load i32, i32* %done, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %land.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.cond
  %2 = load i32, i32* %changed, align 4
  %tobool2 = icmp ne i32 %2, 0
  br i1 %tobool2, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %n = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %for.body, label %for.end27

for.body:                                         ; preds = %land.end
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %7, i32 0, i32 1
  %8 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.rule_t, %struct.rule_t* %8, i32 %9
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx, i32 0, i32 0
  %10 = load i8*, i8** %pat, align 4
  %call3 = call i32 @strlen(i8* %10) #4
  store i32 %call3, i32* %pl, align 4
  %11 = load %struct.string*, %struct.string** %str.addr, align 4
  %s = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 0
  %12 = load i8*, i8** %s, align 4
  %call4 = call i32 @strlen(i8* %12) #4
  store i32 %call4, i32* %sl, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %sl, align 4
  %cmp6 = icmp slt i32 %13, %14
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %15 = load %struct.string*, %struct.string** %str.addr, align 4
  %s8 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 0
  %16 = load i8*, i8** %s8, align 4
  %17 = load i32, i32* %j, align 4
  %add.ptr = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules9 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %18, i32 0, i32 1
  %19 = load %struct.rule_t*, %struct.rule_t** %rules9, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %19, i32 %20
  %pat11 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx10, i32 0, i32 0
  %21 = load i8*, i8** %pat11, align 4
  %22 = load i32, i32* %pl, align 4
  %call12 = call i32 @strncmp(i8* %add.ptr, i8* %21, i32 %22)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body7
  br label %for.inc

if.end:                                           ; preds = %for.body7
  %23 = load %struct.string*, %struct.string** %tmp, align 4
  %24 = load %struct.string*, %struct.string** %str.addr, align 4
  %s14 = getelementptr inbounds %struct.string, %struct.string* %24, i32 0, i32 0
  %25 = load i8*, i8** %s14, align 4
  %26 = load i32, i32* %j, align 4
  call void @str_append(%struct.string* %23, i8* %25, i32 %26)
  %27 = load %struct.string*, %struct.string** %tmp, align 4
  %28 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules15 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %28, i32 0, i32 1
  %29 = load %struct.rule_t*, %struct.rule_t** %rules15, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %29, i32 %30
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx16, i32 0, i32 1
  %31 = load i8*, i8** %repl, align 4
  call void @str_append(%struct.string* %27, i8* %31, i32 -1)
  %32 = load %struct.string*, %struct.string** %tmp, align 4
  %33 = load %struct.string*, %struct.string** %str.addr, align 4
  %s17 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0
  %34 = load i8*, i8** %s17, align 4
  %35 = load i32, i32* %j, align 4
  %add.ptr18 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i32, i32* %pl, align 4
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i32 %36
  call void @str_append(%struct.string* %32, i8* %add.ptr19, i32 -1)
  %37 = load %struct.string*, %struct.string** %str.addr, align 4
  %38 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_transfer(%struct.string* %37, %struct.string* %38)
  store i32 1, i32* %changed, align 4
  %39 = load %struct.ruleset_t*, %struct.ruleset_t** %r.addr, align 4
  %rules20 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %39, i32 0, i32 1
  %40 = load %struct.rule_t*, %struct.rule_t** %rules20, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %40, i32 %41
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx21, i32 0, i32 2
  %42 = load i32, i32* %terminate, align 4
  %tobool22 = icmp ne i32 %42, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  store i32 1, i32* %done, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  br label %for.end

for.inc:                                          ; preds = %if.then
  %43 = load i32, i32* %j, align 4
  %inc = add nsw i32 %43, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %if.end24, %for.cond5
  br label %for.inc25

for.inc25:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %44, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %land.end
  %45 = load i32, i32* %changed, align 4
  %tobool28 = icmp ne i32 %45, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.end27
  br label %while.end

if.end30:                                         ; preds = %for.end27
  br label %while.cond

while.end:                                        ; preds = %if.then29, %while.cond
  %46 = load %struct.string*, %struct.string** %tmp, align 4
  call void @str_del(%struct.string* %46)
  ret void
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.ruleset_t* @read_rules(i8* %name) #0 {
entry:
  %retval = alloca %struct.ruleset_t*, align 4
  %name.addr = alloca i8*, align 4
  %s = alloca %struct.stat, align 8
  %buf = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca i32, align 4
  %rules = alloca %struct.rule_t*, align 4
  %n = alloca i32, align 4
  %fd = alloca i32, align 4
  %r = alloca %struct.ruleset_t*, align 4
  store i8* %name, i8** %name.addr, align 4
  store %struct.rule_t* null, %struct.rule_t** %rules, align 4
  store i32 0, i32* %n, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* %0, i32 67108864)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.ruleset_t* null, %struct.ruleset_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4
  %call1 = call i32 @fstat(i32 %2, %struct.stat* %s)
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %3 = load i64, i64* %st_size, align 8
  %add = add nsw i64 %3, 2
  %conv = trunc i64 %add to i32
  %call2 = call noalias i8* @malloc(i32 %conv)
  store i8* %call2, i8** %buf, align 4
  %4 = load i32, i32* %fd, align 4
  %5 = load i8*, i8** %buf, align 4
  %st_size3 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %6 = load i64, i64* %st_size3, align 8
  %conv4 = trunc i64 %6 to i32
  %call5 = call i32 @read(i32 %4, i8* %5, i32 %conv4)
  %7 = load i8*, i8** %buf, align 4
  %st_size6 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %8 = load i64, i64* %st_size6, align 8
  %idxprom = trunc i64 %8 to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  store i8 10, i8* %arrayidx, align 1
  %9 = load i8*, i8** %buf, align 4
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %s, i32 0, i32 8
  %10 = load i64, i64* %st_size7, align 8
  %add8 = add nsw i64 %10, 1
  %idxprom9 = trunc i64 %add8 to i32
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i32 %idxprom9
  store i8 0, i8* %arrayidx10, align 1
  %11 = load i32, i32* %fd, align 4
  %call11 = call i32 @close(i32 %11)
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc105, %if.end
  %12 = load i8*, i8** %buf, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %cmp14 = icmp ne i32 %conv13, 0
  br i1 %cmp14, label %for.body, label %for.end107

for.body:                                         ; preds = %for.cond
  %15 = load i8*, i8** %buf, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %17 to i32
  %cmp18 = icmp ne i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %for.body
  br label %for.inc105

if.end21:                                         ; preds = %for.body
  %18 = load i8*, i8** %buf, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i32 %19
  %20 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %20 to i32
  %cmp24 = icmp eq i32 %conv23, 35
  br i1 %cmp24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end21
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %cmp26 = icmp eq i32 %21, %22
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %lor.lhs.false, %if.end21
  %23 = load i32, i32* %i, align 4
  %add29 = add i32 %23, 1
  store i32 %add29, i32* %j, align 4
  br label %for.inc105

if.end30:                                         ; preds = %lor.lhs.false
  %24 = load i32, i32* %j, align 4
  %add31 = add i32 %24, 1
  store i32 %add31, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc, %if.end30
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub = sub i32 %26, 3
  %cmp33 = icmp ult i32 %25, %sub
  br i1 %cmp33, label %for.body35, label %for.end

for.body35:                                       ; preds = %for.cond32
  %27 = load i8*, i8** %buf, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %29 to i32
  %call38 = call i32 @__isspace(i32 %conv37)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %for.body35
  %30 = load i8*, i8** %buf, align 4
  %31 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds i8, i8* %30, i32 %31
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i32 1
  %call40 = call i32 @strncmp(i8* %add.ptr39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %land.lhs.true
  br label %for.end

if.end43:                                         ; preds = %land.lhs.true, %for.body35
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %32 = load i32, i32* %k, align 4
  %inc = add i32 %32, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond32

for.end:                                          ; preds = %if.then42, %for.cond32
  %33 = load i32, i32* %k, align 4
  %34 = load i32, i32* %i, align 4
  %sub44 = sub i32 %34, 3
  %cmp45 = icmp uge i32 %33, %sub44
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %for.end
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %j, align 4
  %sub48 = sub i32 %35, %36
  %37 = load i8*, i8** %buf, align 4
  %38 = load i32, i32* %j, align 4
  %add.ptr49 = getelementptr inbounds i8, i8* %37, i32 %38
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0), i32 %sub48, i8* %add.ptr49)
  br label %for.end107

if.end51:                                         ; preds = %for.end
  %39 = load i32, i32* %k, align 4
  store i32 %39, i32* %tmp, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.body59, %if.end51
  %40 = load i32, i32* %tmp, align 4
  %41 = load i32, i32* %j, align 4
  %cmp53 = icmp ugt i32 %40, %41
  br i1 %cmp53, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond52
  %42 = load i8*, i8** %buf, align 4
  %43 = load i32, i32* %tmp, align 4
  %dec = add i32 %43, -1
  store i32 %dec, i32* %tmp, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i32 %dec
  %44 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %44 to i32
  %call57 = call i32 @__isspace(i32 %conv56)
  %tobool58 = icmp ne i32 %call57, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond52
  %45 = phi i1 [ false, %for.cond52 ], [ %tobool58, %land.rhs ]
  br i1 %45, label %for.body59, label %for.end60

for.body59:                                       ; preds = %land.end
  br label %for.cond52

for.end60:                                        ; preds = %land.end
  %46 = load i32, i32* %tmp, align 4
  %47 = load i32, i32* %j, align 4
  %cmp61 = icmp ult i32 %46, %47
  br i1 %cmp61, label %if.then63, label %if.end67

if.then63:                                        ; preds = %for.end60
  %48 = load i32, i32* %i, align 4
  %49 = load i32, i32* %j, align 4
  %sub64 = sub i32 %48, %49
  %50 = load i8*, i8** %buf, align 4
  %51 = load i32, i32* %j, align 4
  %add.ptr65 = getelementptr inbounds i8, i8* %50, i32 %51
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0), i32 %sub64, i8* %add.ptr65)
  br label %for.end107

if.end67:                                         ; preds = %for.end60
  %52 = load i8*, i8** %buf, align 4
  %53 = load i32, i32* %tmp, align 4
  %inc68 = add i32 %53, 1
  store i32 %inc68, i32* %tmp, align 4
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i32 %inc68
  store i8 0, i8* %arrayidx69, align 1
  %54 = load i32, i32* %k, align 4
  %add70 = add i32 %54, 3
  store i32 %add70, i32* %k, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.body81, %if.end67
  %55 = load i32, i32* %k, align 4
  %56 = load i32, i32* %i, align 4
  %cmp72 = icmp ult i32 %55, %56
  br i1 %cmp72, label %land.rhs74, label %land.end80

land.rhs74:                                       ; preds = %for.cond71
  %57 = load i8*, i8** %buf, align 4
  %58 = load i32, i32* %k, align 4
  %inc75 = add i32 %58, 1
  store i32 %inc75, i32* %k, align 4
  %arrayidx76 = getelementptr inbounds i8, i8* %57, i32 %inc75
  %59 = load i8, i8* %arrayidx76, align 1
  %conv77 = sext i8 %59 to i32
  %call78 = call i32 @__isspace(i32 %conv77)
  %tobool79 = icmp ne i32 %call78, 0
  br label %land.end80

land.end80:                                       ; preds = %land.rhs74, %for.cond71
  %60 = phi i1 [ false, %for.cond71 ], [ %tobool79, %land.rhs74 ]
  br i1 %60, label %for.body81, label %for.end82

for.body81:                                       ; preds = %land.end80
  br label %for.cond71

for.end82:                                        ; preds = %land.end80
  %61 = load i8*, i8** %buf, align 4
  %62 = load i32, i32* %i, align 4
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i32 %62
  store i8 0, i8* %arrayidx83, align 1
  %63 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %64 = bitcast %struct.rule_t* %63 to i8*
  %65 = load i32, i32* %n, align 4
  %add84 = add nsw i32 1, %65
  %mul = mul i32 12, %add84
  %call85 = call i8* @realloc(i8* %64, i32 %mul)
  %66 = bitcast i8* %call85 to %struct.rule_t*
  store %struct.rule_t* %66, %struct.rule_t** %rules, align 4
  %67 = load i8*, i8** %buf, align 4
  %68 = load i32, i32* %j, align 4
  %add.ptr86 = getelementptr inbounds i8, i8* %67, i32 %68
  %69 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %70 = load i32, i32* %n, align 4
  %arrayidx87 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %69, i32 %70
  %pat = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx87, i32 0, i32 0
  store i8* %add.ptr86, i8** %pat, align 4
  %71 = load i8*, i8** %buf, align 4
  %72 = load i32, i32* %k, align 4
  %arrayidx88 = getelementptr inbounds i8, i8* %71, i32 %72
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp eq i32 %conv89, 46
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %for.end82
  %74 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %75 = load i32, i32* %n, align 4
  %arrayidx93 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %74, i32 %75
  %terminate = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx93, i32 0, i32 2
  store i32 1, i32* %terminate, align 4
  %76 = load i8*, i8** %buf, align 4
  %77 = load i32, i32* %k, align 4
  %add.ptr94 = getelementptr inbounds i8, i8* %76, i32 %77
  %add.ptr95 = getelementptr inbounds i8, i8* %add.ptr94, i32 1
  %78 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %79 = load i32, i32* %n, align 4
  %arrayidx96 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %78, i32 %79
  %repl = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr95, i8** %repl, align 4
  br label %if.end102

if.else:                                          ; preds = %for.end82
  %80 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %81 = load i32, i32* %n, align 4
  %arrayidx97 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %80, i32 %81
  %terminate98 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx97, i32 0, i32 2
  store i32 0, i32* %terminate98, align 4
  %82 = load i8*, i8** %buf, align 4
  %83 = load i32, i32* %k, align 4
  %add.ptr99 = getelementptr inbounds i8, i8* %82, i32 %83
  %84 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %85 = load i32, i32* %n, align 4
  %arrayidx100 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %84, i32 %85
  %repl101 = getelementptr inbounds %struct.rule_t, %struct.rule_t* %arrayidx100, i32 0, i32 1
  store i8* %add.ptr99, i8** %repl101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.else, %if.then92
  %86 = load i32, i32* %n, align 4
  %inc103 = add nsw i32 %86, 1
  store i32 %inc103, i32* %n, align 4
  %87 = load i32, i32* %i, align 4
  %add104 = add i32 %87, 1
  store i32 %add104, i32* %j, align 4
  br label %for.inc105

for.inc105:                                       ; preds = %if.end102, %if.then28, %if.then20
  %88 = load i32, i32* %i, align 4
  %inc106 = add i32 %88, 1
  store i32 %inc106, i32* %i, align 4
  br label %for.cond

for.end107:                                       ; preds = %if.then63, %if.then47, %for.cond
  %call108 = call noalias i8* @malloc(i32 12)
  %89 = bitcast i8* %call108 to %struct.ruleset_t*
  store %struct.ruleset_t* %89, %struct.ruleset_t** %r, align 4
  %90 = load i8*, i8** %buf, align 4
  %91 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %buf109 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %91, i32 0, i32 2
  store i8* %90, i8** %buf109, align 4
  %92 = load %struct.rule_t*, %struct.rule_t** %rules, align 4
  %93 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %rules110 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %93, i32 0, i32 1
  store %struct.rule_t* %92, %struct.rule_t** %rules110, align 4
  %94 = load i32, i32* %n, align 4
  %95 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %n111 = getelementptr inbounds %struct.ruleset_t, %struct.ruleset_t* %95, i32 0, i32 0
  store i32 %94, i32* %n111, align 4
  %96 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  store %struct.ruleset_t* %96, %struct.ruleset_t** %retval, align 4
  br label %return

return:                                           ; preds = %for.end107, %if.then
  %97 = load %struct.ruleset_t*, %struct.ruleset_t** %retval, align 4
  ret %struct.ruleset_t* %97
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare i32 @fstat(i32 %0, %struct.stat* %1) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @test_rules(i8* %s, i8* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %file.addr = alloca i8*, align 4
  %r = alloca %struct.ruleset_t*, align 4
  %ss = alloca %struct.string*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct.ruleset_t* @read_rules(i8* %0)
  store %struct.ruleset_t* %call, %struct.ruleset_t** %r, align 4
  %1 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  %tobool = icmp ne %struct.ruleset_t* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  %3 = load i8*, i8** %s.addr, align 4
  %call2 = call %struct.string* @str_new(i8* %3)
  store %struct.string* %call2, %struct.string** %ss, align 4
  %4 = load %struct.string*, %struct.string** %ss, align 4
  %s3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0
  %5 = load i8*, i8** %s3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* %5)
  %6 = load %struct.string*, %struct.string** %ss, align 4
  %7 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @str_markov(%struct.string* %6, %struct.ruleset_t* %7)
  %8 = load %struct.string*, %struct.string** %ss, align 4
  %s5 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 0
  %9 = load i8*, i8** %s5, align 4
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* %9)
  %10 = load %struct.string*, %struct.string** %ss, align 4
  call void @str_del(%struct.string* %10)
  %11 = load %struct.ruleset_t*, %struct.ruleset_t** %r, align 4
  call void @ruleset_del(%struct.ruleset_t* %11)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %call1 = call i32 @test_rules(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %call2 = call i32 @test_rules(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0))
  %call3 = call i32 @test_rules(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0))
  %call4 = call i32 @test_rules(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
