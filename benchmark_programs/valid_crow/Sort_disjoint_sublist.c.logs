
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for bubble_sort()

; ModuleID = './Sort_disjoint_sublist.c.bc'
source_filename = "./Sort_disjoint_sublist.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.values = private unnamed_addr constant [8 x i32] [i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@__const.main.idx = private unnamed_addr constant [3 x i32] [i32 6, i32 1, i32 7], align 4
@.str = private unnamed_addr constant [14 x i8] c"before sort:\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"\0A\0Aafter sort:\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bubble_sort(i32* %idx, i32 %n_idx, i32* %buf) #0 {
entry:
  %idx.addr = alloca i32*, align 4
  %n_idx.addr = alloca i32, align 4
  %buf.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32* %idx, i32** %idx.addr, align 4
  store i32 %n_idx, i32* %n_idx.addr, align 4
  store i32* %buf, i32** %buf.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n_idx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n_idx.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32*, i32** %idx.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %idx.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp slt i32 %7, %10
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %11 = load i32*, i32** %idx.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx6, align 4
  store i32 %13, i32* %tmp, align 4
  %14 = load i32*, i32** %idx.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx7, align 4
  %17 = load i32*, i32** %idx.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx8, align 4
  %19 = load i32, i32* %tmp, align 4
  %20 = load i32*, i32** %idx.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx9, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %23, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc38, %for.end12
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n_idx.addr, align 4
  %cmp14 = icmp slt i32 %24, %25
  br i1 %cmp14, label %for.body15, label %for.end40

for.body15:                                       ; preds = %for.cond13
  %26 = load i32, i32* %i, align 4
  %add16 = add nsw i32 %26, 1
  store i32 %add16, i32* %j, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc35, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %n_idx.addr, align 4
  %cmp18 = icmp slt i32 %27, %28
  br i1 %cmp18, label %for.body19, label %for.end37

for.body19:                                       ; preds = %for.cond17
  %29 = load i32*, i32** %buf.addr, align 4
  %30 = load i32*, i32** %idx.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %29, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %34 = load i32*, i32** %buf.addr, align 4
  %35 = load i32*, i32** %idx.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %34, i32 %37
  %38 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp slt i32 %33, %38
  br i1 %cmp24, label %if.then25, label %if.end34

if.then25:                                        ; preds = %for.body19
  %39 = load i32*, i32** %buf.addr, align 4
  %40 = load i32*, i32** %idx.addr, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx26, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %39, i32 %42
  %43 = load i32, i32* %arrayidx27, align 4
  store i32 %43, i32* %tmp, align 4
  %44 = load i32*, i32** %buf.addr, align 4
  %45 = load i32*, i32** %idx.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx28, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %44, i32 %47
  %48 = load i32, i32* %arrayidx29, align 4
  %49 = load i32*, i32** %buf.addr, align 4
  %50 = load i32*, i32** %idx.addr, align 4
  %51 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds i32, i32* %50, i32 %51
  %52 = load i32, i32* %arrayidx30, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %49, i32 %52
  store i32 %48, i32* %arrayidx31, align 4
  %53 = load i32, i32* %tmp, align 4
  %54 = load i32*, i32** %buf.addr, align 4
  %55 = load i32*, i32** %idx.addr, align 4
  %56 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx32, align 4
  %arrayidx33 = getelementptr inbounds i32, i32* %54, i32 %57
  store i32 %53, i32* %arrayidx33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then25, %for.body19
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %58 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %58, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond17

for.end37:                                        ; preds = %for.cond17
  br label %for.inc38

for.inc38:                                        ; preds = %for.end37
  %59 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond13

for.end40:                                        ; preds = %for.cond13
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [8 x i32], align 16
  %idx = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i32]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i32]* @__const.main.values to i8*), i32 32, i1 false)
  %1 = bitcast [3 x i32]* %idx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.idx to i8*), i32 12, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %idx, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 0
  call void @bubble_sort(i32* %arraydecay, i32 3, i32* %arraydecay3)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %6, 8
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %9 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %9, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n_idx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n_idx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %7, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n_idx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n_idx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %33, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %arrayidx27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %arrayidx29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %arrayidx30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %59, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bubble_sort()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sort_disjoint_sublist.c.bc'
source_filename = "./Sort_disjoint_sublist.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.values = private unnamed_addr constant [8 x i32] [i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@__const.main.idx = private unnamed_addr constant [3 x i32] [i32 6, i32 1, i32 7], align 4
@.str = private unnamed_addr constant [14 x i8] c"before sort:\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"\0A\0Aafter sort:\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @bubble_sort(i32* %idx, i32 %n_idx, i32* %buf) #0 {
entry:
  %idx.addr = alloca i32*, align 4
  %n_idx.addr = alloca i32, align 4
  %buf.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32* %idx, i32** %idx.addr, align 4
  store i32 %n_idx, i32* %n_idx.addr, align 4
  store i32* %buf, i32** %buf.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n_idx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n_idx.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32*, i32** %idx.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %idx.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp slt i32 %7, %10
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %11 = load i32*, i32** %idx.addr, align 4
  %12 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx6, align 4
  store i32 %13, i32* %tmp, align 4
  %14 = load i32*, i32** %idx.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx7, align 4
  %17 = load i32*, i32** %idx.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx8, align 4
  %19 = load i32, i32* %tmp, align 4
  %20 = load i32*, i32** %idx.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  store i32 %19, i32* %arrayidx9, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %23, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc38, %for.end12
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %n_idx.addr, align 4
  %cmp14 = icmp slt i32 %24, %25
  br i1 %cmp14, label %for.body15, label %for.end40

for.body15:                                       ; preds = %for.cond13
  %26 = load i32, i32* %i, align 4
  %add16 = add nsw i32 %26, 1
  store i32 %add16, i32* %j, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc35, %for.body15
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %n_idx.addr, align 4
  %cmp18 = icmp slt i32 %27, %28
  br i1 %cmp18, label %for.body19, label %for.end37

for.body19:                                       ; preds = %for.cond17
  %29 = load i32*, i32** %buf.addr, align 4
  %30 = load i32*, i32** %idx.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %29, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  %34 = load i32*, i32** %buf.addr, align 4
  %35 = load i32*, i32** %idx.addr, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx22, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %34, i32 %37
  %38 = load i32, i32* %arrayidx23, align 4
  %cmp24 = icmp slt i32 %33, %38
  br i1 %cmp24, label %if.then25, label %if.end34

if.then25:                                        ; preds = %for.body19
  %39 = load i32*, i32** %buf.addr, align 4
  %40 = load i32*, i32** %idx.addr, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx26, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %39, i32 %42
  %43 = load i32, i32* %arrayidx27, align 4
  store i32 %43, i32* %tmp, align 4
  %44 = load i32*, i32** %buf.addr, align 4
  %45 = load i32*, i32** %idx.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx28, align 4
  %arrayidx29 = getelementptr inbounds i32, i32* %44, i32 %47
  %48 = load i32, i32* %arrayidx29, align 4
  %49 = load i32*, i32** %buf.addr, align 4
  %50 = load i32*, i32** %idx.addr, align 4
  %51 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds i32, i32* %50, i32 %51
  %52 = load i32, i32* %arrayidx30, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %49, i32 %52
  store i32 %48, i32* %arrayidx31, align 4
  %53 = load i32, i32* %tmp, align 4
  %54 = load i32*, i32** %buf.addr, align 4
  %55 = load i32*, i32** %idx.addr, align 4
  %56 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds i32, i32* %55, i32 %56
  %57 = load i32, i32* %arrayidx32, align 4
  %arrayidx33 = getelementptr inbounds i32, i32* %54, i32 %57
  store i32 %53, i32* %arrayidx33, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then25, %for.body19
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %58 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %58, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond17

for.end37:                                        ; preds = %for.cond17
  br label %for.inc38

for.inc38:                                        ; preds = %for.end37
  %59 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %59, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond13

for.end40:                                        ; preds = %for.cond13
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [8 x i32], align 16
  %idx = alloca [3 x i32], align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [8 x i32]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([8 x i32]* @__const.main.values to i8*), i32 32, i1 false)
  %1 = bitcast [3 x i32]* %idx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.idx to i8*), i32 12, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %idx, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 0
  call void @bubble_sort(i32* %arraydecay, i32 3, i32* %arraydecay3)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %6, 8
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [8 x i32], [8 x i32]* %values, i32 0, i32 %7
  %8 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %9 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %9, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %6, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
