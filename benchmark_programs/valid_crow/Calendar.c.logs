
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for space()

; ModuleID = './Calendar.c.bc'
source_filename = "./Calendar.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.months = type { i8*, i32, i32, i32 }
%struct._IO_FILE = type opaque

@width = hidden global i32 80, align 4
@year = hidden global i32 1969, align 4
@.str = private unnamed_addr constant [3 x i8] c"Su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Mo\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"Tu\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"We\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Th\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"Fr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Sa\00", align 1
@wdays = hidden global [7 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [8 x i8] c"January\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"February\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"March\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"April\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"June\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"July\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"August\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"September\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"October\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"November\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"December\00", align 1
@months = hidden global [12 x %struct.months] [%struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i32 28, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 31, i32 0, i32 0 }], align 16
@cols = hidden global i32 0, align 4
@gap = hidden global i32 0, align 4
@lead = hidden global i32 0, align 4
@.str.19 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"bad args\0AUsage: %s year [-w width (>= 20)]\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @space(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @init_months() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @year, align 4
  %rem = srem i32 %0, 4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @year, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @year, align 4
  %rem3 = srem i32 %2, 400
  %tobool4 = icmp ne i32 %rem3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 29, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 1, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* @year, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @year, align 4
  %4 = load i32, i32* @year, align 4
  %mul = mul nsw i32 %4, 365
  %5 = load i32, i32* @year, align 4
  %div = sdiv i32 %5, 4
  %add = add nsw i32 %mul, %div
  %6 = load i32, i32* @year, align 4
  %div5 = sdiv i32 %6, 100
  %sub = sub nsw i32 %add, %div5
  %7 = load i32, i32* @year, align 4
  %div6 = sdiv i32 %7, 400
  %add7 = add nsw i32 %sub, %div6
  %add8 = add nsw i32 %add7, 1
  %rem9 = srem i32 %add8, 7
  store i32 %rem9, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 0, i32 2), align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %9, 1
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub10
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 2
  %10 = load i32, i32* %start_wday, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %arrayidx12 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub11
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx12, i32 0, i32 1
  %12 = load i32, i32* %days, align 4
  %add13 = add nsw i32 %10, %12
  %rem14 = srem i32 %add13, 7
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %13
  %start_wday16 = getelementptr inbounds %struct.months, %struct.months* %arrayidx15, i32 0, i32 2
  store i32 %rem14, i32* %start_wday16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @width, align 4
  %add17 = add nsw i32 %15, 2
  %div18 = sdiv i32 %add17, 22
  store i32 %div18, i32* @cols, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %16 = load i32, i32* @cols, align 4
  %rem19 = srem i32 12, %16
  %tobool20 = icmp ne i32 %rem19, 0
  br i1 %tobool20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* @cols, align 4
  %dec21 = add nsw i32 %17, -1
  store i32 %dec21, i32* @cols, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* @cols, align 4
  %sub22 = sub nsw i32 %18, 1
  %tobool23 = icmp ne i32 %sub22, 0
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %19 = load i32, i32* @width, align 4
  %20 = load i32, i32* @cols, align 4
  %mul24 = mul nsw i32 20, %20
  %sub25 = sub nsw i32 %19, %mul24
  %21 = load i32, i32* @cols, align 4
  %sub26 = sub nsw i32 %21, 1
  %div27 = sdiv i32 %sub25, %sub26
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* @gap, align 4
  %22 = load i32, i32* @gap, align 4
  %cmp28 = icmp sgt i32 %22, 4
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.end
  store i32 4, i32* @gap, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.end
  %23 = load i32, i32* @width, align 4
  %24 = load i32, i32* @gap, align 4
  %add31 = add nsw i32 20, %24
  %25 = load i32, i32* @cols, align 4
  %mul32 = mul nsw i32 %add31, %25
  %sub33 = sub nsw i32 %23, %mul32
  %26 = load i32, i32* @gap, align 4
  %add34 = add nsw i32 %sub33, %26
  %add35 = add nsw i32 %add34, 1
  %div36 = sdiv i32 %add35, 2
  store i32 %div36, i32* @lead, align 4
  %27 = load i32, i32* @year, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* @year, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_row(i32 %row) #0 {
entry:
  %row.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %from, align 4
  %2 = load i32, i32* %from, align 4
  %3 = load i32, i32* @cols, align 4
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %to, align 4
  %4 = load i32, i32* @lead, align 4
  call void @space(i32 %4)
  %5 = load i32, i32* %from, align 4
  store i32 %5, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %c, align 4
  %7 = load i32, i32* %to, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %c, align 4
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %8
  %name = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 16
  %call = call i32 @strlen(i8* %9) #4
  store i32 %call, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 20, %10
  %div = sdiv i32 %sub, 2
  call void @space(i32 %div)
  %11 = load i32, i32* %c, align 4
  %arrayidx1 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %11
  %name2 = getelementptr inbounds %struct.months, %struct.months* %arrayidx1, i32 0, i32 0
  %12 = load i8*, i8** %name2, align 16
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 20, %13
  %14 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 20, %14
  %div6 = sdiv i32 %sub5, 2
  %sub7 = sub nsw i32 %sub4, %div6
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %to, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @gap, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
  %add10 = add nsw i32 %sub7, %cond
  call void @space(i32 %add10)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %c, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @putchar(i32 10)
  %19 = load i32, i32* @lead, align 4
  call void @space(i32 %19)
  %20 = load i32, i32* %from, align 4
  store i32 %20, i32* %c, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %c, align 4
  %22 = load i32, i32* %to, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body14, label %for.end30

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.body14
  %23 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %23, 7
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [7 x i8*], [7 x i8*]* @wdays, i32 0, i32 %24
  %25 = load i8*, i8** %arrayidx18, align 4
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %26, 6
  %27 = zext i1 %cmp19 to i64
  %cond20 = select i1 %cmp19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* %25, i8* %cond20)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %28 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %to, align 4
  %sub25 = sub nsw i32 %30, 1
  %cmp26 = icmp slt i32 %29, %sub25
  br i1 %cmp26, label %if.then, label %if.else

if.then:                                          ; preds = %for.end24
  %31 = load i32, i32* @gap, align 4
  call void @space(i32 %31)
  br label %if.end

if.else:                                          ; preds = %for.end24
  %call27 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc28

for.inc28:                                        ; preds = %if.end
  %32 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %32, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  br label %while.body

while.body:                                       ; preds = %for.end30, %for.end92
  %33 = load i32, i32* %from, align 4
  store i32 %33, i32* %c, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %while.body
  %34 = load i32, i32* %c, align 4
  %35 = load i32, i32* %to, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %36 = load i32, i32* %c, align 4
  %arrayidx34 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %36
  %at = getelementptr inbounds %struct.months, %struct.months* %arrayidx34, i32 0, i32 3
  %37 = load i32, i32* %at, align 4
  %38 = load i32, i32* %c, align 4
  %arrayidx35 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %38
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx35, i32 0, i32 1
  %39 = load i32, i32* %days, align 4
  %cmp36 = icmp slt i32 %37, %39
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.end41

if.end38:                                         ; preds = %for.body33
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %40 = load i32, i32* %c, align 4
  %inc40 = add nsw i32 %40, 1
  store i32 %inc40, i32* %c, align 4
  br label %for.cond31

for.end41:                                        ; preds = %if.then37, %for.cond31
  %41 = load i32, i32* %c, align 4
  %42 = load i32, i32* %to, align 4
  %cmp42 = icmp eq i32 %41, %42
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end41
  br label %while.end94

if.end44:                                         ; preds = %for.end41
  %43 = load i32, i32* @lead, align 4
  call void @space(i32 %43)
  %44 = load i32, i32* %from, align 4
  store i32 %44, i32* %c, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc90, %if.end44
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %to, align 4
  %cmp46 = icmp slt i32 %45, %46
  br i1 %cmp46, label %for.body47, label %for.end92

for.body47:                                       ; preds = %for.cond45
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc52, %for.body47
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %c, align 4
  %arrayidx49 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %48
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx49, i32 0, i32 2
  %49 = load i32, i32* %start_wday, align 8
  %cmp50 = icmp slt i32 %47, %49
  br i1 %cmp50, label %for.body51, label %for.end54

for.body51:                                       ; preds = %for.cond48
  call void @space(i32 3)
  br label %for.inc52

for.inc52:                                        ; preds = %for.body51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond48

for.end54:                                        ; preds = %for.cond48
  br label %while.cond55

while.cond55:                                     ; preds = %if.end73, %for.end54
  %51 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %51, 1
  store i32 %inc56, i32* %i, align 4
  %cmp57 = icmp slt i32 %51, 7
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond55
  %52 = load i32, i32* %c, align 4
  %arrayidx58 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %52
  %at59 = getelementptr inbounds %struct.months, %struct.months* %arrayidx58, i32 0, i32 3
  %53 = load i32, i32* %at59, align 4
  %54 = load i32, i32* %c, align 4
  %arrayidx60 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %54
  %days61 = getelementptr inbounds %struct.months, %struct.months* %arrayidx60, i32 0, i32 1
  %55 = load i32, i32* %days61, align 4
  %cmp62 = icmp slt i32 %53, %55
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond55
  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
  br i1 %56, label %while.body63, label %while.end

while.body63:                                     ; preds = %land.end
  %57 = load i32, i32* %c, align 4
  %arrayidx64 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %57
  %at65 = getelementptr inbounds %struct.months, %struct.months* %arrayidx64, i32 0, i32 3
  %58 = load i32, i32* %at65, align 4
  %inc66 = add nsw i32 %58, 1
  store i32 %inc66, i32* %at65, align 4
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 %inc66)
  %59 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %59, 7
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body63
  %60 = load i32, i32* %c, align 4
  %61 = load i32, i32* %to, align 4
  %sub69 = sub nsw i32 %61, 1
  %cmp70 = icmp slt i32 %60, %sub69
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false, %while.body63
  %call72 = call i32 @putchar(i32 32)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %lor.lhs.false
  br label %while.cond55

while.end:                                        ; preds = %land.end
  br label %while.cond74

while.cond74:                                     ; preds = %while.body81, %while.end
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  %cmp76 = icmp sle i32 %62, 7
  br i1 %cmp76, label %land.rhs77, label %land.end80

land.rhs77:                                       ; preds = %while.cond74
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %to, align 4
  %sub78 = sub nsw i32 %64, 1
  %cmp79 = icmp slt i32 %63, %sub78
  br label %land.end80

land.end80:                                       ; preds = %land.rhs77, %while.cond74
  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
  br i1 %65, label %while.body81, label %while.end82

while.body81:                                     ; preds = %land.end80
  call void @space(i32 3)
  br label %while.cond74

while.end82:                                      ; preds = %land.end80
  %66 = load i32, i32* %c, align 4
  %67 = load i32, i32* %to, align 4
  %sub83 = sub nsw i32 %67, 1
  %cmp84 = icmp slt i32 %66, %sub83
  br i1 %cmp84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %while.end82
  %68 = load i32, i32* @gap, align 4
  %sub86 = sub nsw i32 %68, 1
  call void @space(i32 %sub86)
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %while.end82
  %69 = load i32, i32* %c, align 4
  %arrayidx88 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %69
  %start_wday89 = getelementptr inbounds %struct.months, %struct.months* %arrayidx88, i32 0, i32 2
  store i32 0, i32* %start_wday89, align 8
  br label %for.inc90

for.inc90:                                        ; preds = %if.end87
  %70 = load i32, i32* %c, align 4
  %inc91 = add nsw i32 %70, 1
  store i32 %inc91, i32* %c, align 4
  br label %for.cond45

for.end92:                                        ; preds = %for.cond45
  %call93 = call i32 @putchar(i32 10)
  br label %while.body

while.end94:                                      ; preds = %if.then43
  %call95 = call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_year() #0 {
entry:
  %row = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* @year, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @width, align 4
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call2 = call i32 @strlen(i8* %arraydecay1) #4
  %sub = sub i32 %1, %call2
  %div = udiv i32 %sub, 2
  call void @space(i32 %div)
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* %arraydecay3)
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %row, align 4
  %3 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %row, align 4
  call void @print_row(i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %row, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %year_set = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %year_set, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %inc, %6
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8**, i8*** %v.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @atoi(i8* %9)
  store i32 %call3, i32* @width, align 4
  %cmp4 = icmp slt i32 %call3, 20
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  br label %bail

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end17

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %year_set, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else15, label %if.then7

if.then7:                                         ; preds = %if.else
  %11 = load i8**, i8*** %v.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then13

lor.lhs.false11:                                  ; preds = %if.then7
  %14 = load i32, i32* @year, align 4
  %cmp12 = icmp sle i32 %14, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.then7
  store i32 1969, i32* @year, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false11
  store i32 1, i32* %year_set, align 4
  br label %if.end16

if.else15:                                        ; preds = %if.else
  br label %bail

if.end16:                                         ; preds = %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @init_months()
  call void @print_year()
  ret i32 0

bail:                                             ; preds = %if.else15, %if.then5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i8**, i8*** %v.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %17, i32 0
  %18 = load i8*, i8** %arrayidx19, align 4
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i32 0, i32 0), i8* %18)
  call void @exit(i32 1) #5
  unreachable
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

declare i32 @atoi(i8* %0) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for space()

; entering Souper's runOnFunction() for init_months()

; ModuleID = './Calendar.c.bc'
source_filename = "./Calendar.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.months = type { i8*, i32, i32, i32 }
%struct._IO_FILE = type opaque

@width = hidden global i32 80, align 4
@year = hidden global i32 1969, align 4
@.str = private unnamed_addr constant [3 x i8] c"Su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Mo\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"Tu\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"We\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Th\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"Fr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Sa\00", align 1
@wdays = hidden global [7 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [8 x i8] c"January\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"February\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"March\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"April\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"June\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"July\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"August\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"September\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"October\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"November\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"December\00", align 1
@months = hidden global [12 x %struct.months] [%struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i32 28, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 31, i32 0, i32 0 }], align 16
@cols = hidden global i32 0, align 4
@gap = hidden global i32 0, align 4
@lead = hidden global i32 0, align 4
@.str.19 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"bad args\0AUsage: %s year [-w width (>= 20)]\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @space(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @init_months() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @year, align 4
  %rem = srem i32 %0, 4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @year, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @year, align 4
  %rem3 = srem i32 %2, 400
  %tobool4 = icmp ne i32 %rem3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 29, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 1, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* @year, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @year, align 4
  %4 = load i32, i32* @year, align 4
  %mul = mul nsw i32 %4, 365
  %5 = load i32, i32* @year, align 4
  %div = sdiv i32 %5, 4
  %add = add nsw i32 %mul, %div
  %6 = load i32, i32* @year, align 4
  %div5 = sdiv i32 %6, 100
  %sub = sub nsw i32 %add, %div5
  %7 = load i32, i32* @year, align 4
  %div6 = sdiv i32 %7, 400
  %add7 = add nsw i32 %sub, %div6
  %add8 = add nsw i32 %add7, 1
  %rem9 = srem i32 %add8, 7
  store i32 %rem9, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 0, i32 2), align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %9, 1
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub10
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 2
  %10 = load i32, i32* %start_wday, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %arrayidx12 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub11
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx12, i32 0, i32 1
  %12 = load i32, i32* %days, align 4
  %add13 = add nsw i32 %10, %12
  %rem14 = srem i32 %add13, 7
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %13
  %start_wday16 = getelementptr inbounds %struct.months, %struct.months* %arrayidx15, i32 0, i32 2
  store i32 %rem14, i32* %start_wday16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @width, align 4
  %add17 = add nsw i32 %15, 2
  %div18 = sdiv i32 %add17, 22
  store i32 %div18, i32* @cols, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %16 = load i32, i32* @cols, align 4
  %rem19 = srem i32 12, %16
  %tobool20 = icmp ne i32 %rem19, 0
  br i1 %tobool20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* @cols, align 4
  %dec21 = add nsw i32 %17, -1
  store i32 %dec21, i32* @cols, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* @cols, align 4
  %sub22 = sub nsw i32 %18, 1
  %tobool23 = icmp ne i32 %sub22, 0
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %19 = load i32, i32* @width, align 4
  %20 = load i32, i32* @cols, align 4
  %mul24 = mul nsw i32 20, %20
  %sub25 = sub nsw i32 %19, %mul24
  %21 = load i32, i32* @cols, align 4
  %sub26 = sub nsw i32 %21, 1
  %div27 = sdiv i32 %sub25, %sub26
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* @gap, align 4
  %22 = load i32, i32* @gap, align 4
  %cmp28 = icmp sgt i32 %22, 4
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.end
  store i32 4, i32* @gap, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.end
  %23 = load i32, i32* @width, align 4
  %24 = load i32, i32* @gap, align 4
  %add31 = add nsw i32 20, %24
  %25 = load i32, i32* @cols, align 4
  %mul32 = mul nsw i32 %add31, %25
  %sub33 = sub nsw i32 %23, %mul32
  %26 = load i32, i32* @gap, align 4
  %add34 = add nsw i32 %sub33, %26
  %add35 = add nsw i32 %add34, 1
  %div36 = sdiv i32 %add35, 2
  store i32 %div36, i32* @lead, align 4
  %27 = load i32, i32* @year, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* @year, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_row(i32 %row) #0 {
entry:
  %row.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %from, align 4
  %2 = load i32, i32* %from, align 4
  %3 = load i32, i32* @cols, align 4
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %to, align 4
  %4 = load i32, i32* @lead, align 4
  call void @space(i32 %4)
  %5 = load i32, i32* %from, align 4
  store i32 %5, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %c, align 4
  %7 = load i32, i32* %to, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %c, align 4
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %8
  %name = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 16
  %call = call i32 @strlen(i8* %9) #4
  store i32 %call, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 20, %10
  %div = sdiv i32 %sub, 2
  call void @space(i32 %div)
  %11 = load i32, i32* %c, align 4
  %arrayidx1 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %11
  %name2 = getelementptr inbounds %struct.months, %struct.months* %arrayidx1, i32 0, i32 0
  %12 = load i8*, i8** %name2, align 16
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 20, %13
  %14 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 20, %14
  %div6 = sdiv i32 %sub5, 2
  %sub7 = sub nsw i32 %sub4, %div6
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %to, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @gap, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
  %add10 = add nsw i32 %sub7, %cond
  call void @space(i32 %add10)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %c, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @putchar(i32 10)
  %19 = load i32, i32* @lead, align 4
  call void @space(i32 %19)
  %20 = load i32, i32* %from, align 4
  store i32 %20, i32* %c, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %c, align 4
  %22 = load i32, i32* %to, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body14, label %for.end30

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.body14
  %23 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %23, 7
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [7 x i8*], [7 x i8*]* @wdays, i32 0, i32 %24
  %25 = load i8*, i8** %arrayidx18, align 4
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %26, 6
  %27 = zext i1 %cmp19 to i64
  %cond20 = select i1 %cmp19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* %25, i8* %cond20)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %28 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %to, align 4
  %sub25 = sub nsw i32 %30, 1
  %cmp26 = icmp slt i32 %29, %sub25
  br i1 %cmp26, label %if.then, label %if.else

if.then:                                          ; preds = %for.end24
  %31 = load i32, i32* @gap, align 4
  call void @space(i32 %31)
  br label %if.end

if.else:                                          ; preds = %for.end24
  %call27 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc28

for.inc28:                                        ; preds = %if.end
  %32 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %32, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  br label %while.body

while.body:                                       ; preds = %for.end30, %for.end92
  %33 = load i32, i32* %from, align 4
  store i32 %33, i32* %c, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %while.body
  %34 = load i32, i32* %c, align 4
  %35 = load i32, i32* %to, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %36 = load i32, i32* %c, align 4
  %arrayidx34 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %36
  %at = getelementptr inbounds %struct.months, %struct.months* %arrayidx34, i32 0, i32 3
  %37 = load i32, i32* %at, align 4
  %38 = load i32, i32* %c, align 4
  %arrayidx35 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %38
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx35, i32 0, i32 1
  %39 = load i32, i32* %days, align 4
  %cmp36 = icmp slt i32 %37, %39
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.end41

if.end38:                                         ; preds = %for.body33
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %40 = load i32, i32* %c, align 4
  %inc40 = add nsw i32 %40, 1
  store i32 %inc40, i32* %c, align 4
  br label %for.cond31

for.end41:                                        ; preds = %if.then37, %for.cond31
  %41 = load i32, i32* %c, align 4
  %42 = load i32, i32* %to, align 4
  %cmp42 = icmp eq i32 %41, %42
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end41
  br label %while.end94

if.end44:                                         ; preds = %for.end41
  %43 = load i32, i32* @lead, align 4
  call void @space(i32 %43)
  %44 = load i32, i32* %from, align 4
  store i32 %44, i32* %c, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc90, %if.end44
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %to, align 4
  %cmp46 = icmp slt i32 %45, %46
  br i1 %cmp46, label %for.body47, label %for.end92

for.body47:                                       ; preds = %for.cond45
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc52, %for.body47
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %c, align 4
  %arrayidx49 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %48
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx49, i32 0, i32 2
  %49 = load i32, i32* %start_wday, align 8
  %cmp50 = icmp slt i32 %47, %49
  br i1 %cmp50, label %for.body51, label %for.end54

for.body51:                                       ; preds = %for.cond48
  call void @space(i32 3)
  br label %for.inc52

for.inc52:                                        ; preds = %for.body51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond48

for.end54:                                        ; preds = %for.cond48
  br label %while.cond55

while.cond55:                                     ; preds = %if.end73, %for.end54
  %51 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %51, 1
  store i32 %inc56, i32* %i, align 4
  %cmp57 = icmp slt i32 %51, 7
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond55
  %52 = load i32, i32* %c, align 4
  %arrayidx58 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %52
  %at59 = getelementptr inbounds %struct.months, %struct.months* %arrayidx58, i32 0, i32 3
  %53 = load i32, i32* %at59, align 4
  %54 = load i32, i32* %c, align 4
  %arrayidx60 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %54
  %days61 = getelementptr inbounds %struct.months, %struct.months* %arrayidx60, i32 0, i32 1
  %55 = load i32, i32* %days61, align 4
  %cmp62 = icmp slt i32 %53, %55
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond55
  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
  br i1 %56, label %while.body63, label %while.end

while.body63:                                     ; preds = %land.end
  %57 = load i32, i32* %c, align 4
  %arrayidx64 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %57
  %at65 = getelementptr inbounds %struct.months, %struct.months* %arrayidx64, i32 0, i32 3
  %58 = load i32, i32* %at65, align 4
  %inc66 = add nsw i32 %58, 1
  store i32 %inc66, i32* %at65, align 4
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 %inc66)
  %59 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %59, 7
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body63
  %60 = load i32, i32* %c, align 4
  %61 = load i32, i32* %to, align 4
  %sub69 = sub nsw i32 %61, 1
  %cmp70 = icmp slt i32 %60, %sub69
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false, %while.body63
  %call72 = call i32 @putchar(i32 32)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %lor.lhs.false
  br label %while.cond55

while.end:                                        ; preds = %land.end
  br label %while.cond74

while.cond74:                                     ; preds = %while.body81, %while.end
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  %cmp76 = icmp sle i32 %62, 7
  br i1 %cmp76, label %land.rhs77, label %land.end80

land.rhs77:                                       ; preds = %while.cond74
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %to, align 4
  %sub78 = sub nsw i32 %64, 1
  %cmp79 = icmp slt i32 %63, %sub78
  br label %land.end80

land.end80:                                       ; preds = %land.rhs77, %while.cond74
  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
  br i1 %65, label %while.body81, label %while.end82

while.body81:                                     ; preds = %land.end80
  call void @space(i32 3)
  br label %while.cond74

while.end82:                                      ; preds = %land.end80
  %66 = load i32, i32* %c, align 4
  %67 = load i32, i32* %to, align 4
  %sub83 = sub nsw i32 %67, 1
  %cmp84 = icmp slt i32 %66, %sub83
  br i1 %cmp84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %while.end82
  %68 = load i32, i32* @gap, align 4
  %sub86 = sub nsw i32 %68, 1
  call void @space(i32 %sub86)
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %while.end82
  %69 = load i32, i32* %c, align 4
  %arrayidx88 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %69
  %start_wday89 = getelementptr inbounds %struct.months, %struct.months* %arrayidx88, i32 0, i32 2
  store i32 0, i32* %start_wday89, align 8
  br label %for.inc90

for.inc90:                                        ; preds = %if.end87
  %70 = load i32, i32* %c, align 4
  %inc91 = add nsw i32 %70, 1
  store i32 %inc91, i32* %c, align 4
  br label %for.cond45

for.end92:                                        ; preds = %for.cond45
  %call93 = call i32 @putchar(i32 10)
  br label %while.body

while.end94:                                      ; preds = %if.then43
  %call95 = call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_year() #0 {
entry:
  %row = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* @year, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @width, align 4
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call2 = call i32 @strlen(i8* %arraydecay1) #4
  %sub = sub i32 %1, %call2
  %div = udiv i32 %sub, 2
  call void @space(i32 %div)
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* %arraydecay3)
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %row, align 4
  %3 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %row, align 4
  call void @print_row(i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %row, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %year_set = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %year_set, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %inc, %6
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8**, i8*** %v.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @atoi(i8* %9)
  store i32 %call3, i32* @width, align 4
  %cmp4 = icmp slt i32 %call3, 20
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  br label %bail

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end17

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %year_set, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else15, label %if.then7

if.then7:                                         ; preds = %if.else
  %11 = load i8**, i8*** %v.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then13

lor.lhs.false11:                                  ; preds = %if.then7
  %14 = load i32, i32* @year, align 4
  %cmp12 = icmp sle i32 %14, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.then7
  store i32 1969, i32* @year, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false11
  store i32 1, i32* %year_set, align 4
  br label %if.end16

if.else15:                                        ; preds = %if.else
  br label %bail

if.end16:                                         ; preds = %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @init_months()
  call void @print_year()
  ret i32 0

bail:                                             ; preds = %if.else15, %if.then5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i8**, i8*** %v.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %17, i32 0
  %18 = load i8*, i8** %arrayidx19, align 4
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i32 0, i32 0), i8* %18)
  call void @exit(i32 1) #5
  unreachable
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

declare i32 @atoi(i8* %0) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 4:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem1 = srem i32 %1, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %rem1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem3 = srem i32 %2, 400
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 400:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %rem3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 400:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %4, 365
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div5 = sdiv i32 %6, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add, %div5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
infer %7

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div6 = sdiv i32 %7, 400
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 400:i32
infer %1

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %sub, %div6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
infer %10

; *****
; For LLVM instruction:
;  %add8 = add nsw i32 %add7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
%11:i32 = addnsw 1:i32, %10
infer %11

; *****
; For LLVM instruction:
;  %rem9 = srem i32 %add8, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
%11:i32 = addnsw 1:i32, %10
%12:i32 = srem %11, 7:i32
infer %12

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, 12
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 12:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %start_wday, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub11 = sub nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %days, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %10, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %rem14 = srem i32 %add13, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = srem %2, 7:i32
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* @width, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %15, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %div18 = sdiv i32 %add17, 22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
%2:i32 = sdiv %1, 22:i32
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem19 = srem i32 12, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem 12:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool20 = icmp ne i32 %rem19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem 12:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec21 = add nsw i32 %17, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i32 %sub22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @width, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul24 = mul nsw i32 20, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sub25 = sub nsw i32 %19, %mul24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub26 = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %div27 = sdiv i32 %sub25, %sub26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2
%4:i32 = var
%5:i32 = subnsw %4, 1:i32
%6:i32 = sdiv %3, %5
infer %6

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw 20:i32, %2
%4:i32 = subnsw %1, %3
%5:i32 = var
%6:i32 = subnsw %5, 1:i32
%7:i32 = sdiv %4, %6
%8:i32 = phi %0, %7, 0:i32
infer %8

; *****
; For LLVM instruction:
;  %22 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp sgt i32 %22, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* @width, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 20, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul32 = mul nsw i32 %add31, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 20:i32, %1
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %sub33 = sub nsw i32 %23, %mul32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw 20:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = subnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %26 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %sub33, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %add34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
%8:i32 = addnsw 1:i32, %7
infer %8

; *****
; For LLVM instruction:
;  %div36 = sdiv i32 %add35, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
%8:i32 = addnsw 1:i32, %7
%9:i32 = sdiv %8, 2:i32
infer %9

; *****
; For LLVM instruction:
;  %27 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 4:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 85
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 100:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 400:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 400:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 817806590
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 161982144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -12383840
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = sdiv %0, 4:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 100:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 18612224
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1757602705
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = sdiv %0, 100:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = sdiv %0, 4:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 400:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3604480
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1176497162
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = sdiv %0, 400:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = sdiv %0, 100:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = sdiv %0, 4:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6

Cost = 13
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
%11:i32 = addnsw 1:i32, %10
infer %11


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 928464335
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = sdiv %0, 400:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = sdiv %0, 100:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6

Cost = 13
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9

Cost = 19
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
%11:i32 = addnsw 1:i32, %10
%12:i32 = srem %11, 7:i32
infer %12


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 400:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = sdiv %0, 100:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3

Cost = 7
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6

Cost = 13
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9

Cost = 19
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 365:i32, %0
%2:i32 = var
%3:i32 = sdiv %2, 4:i32
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = sdiv %5, 100:i32
%7:i32 = subnsw %4, %6
%8:i32 = var
%9:i32 = sdiv %8, 400:i32
%10:i32 = addnsw %7, %9
%11:i32 = addnsw 1:i32, %10

Cost = 20
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 12:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = srem %2, 7:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
%2:i32 = sdiv %1, 22:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108864
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem 12:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 12
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem 12:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 20:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1614807140
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2
%4:i32 = var
%5:i32 = subnsw %4, 1:i32
%6:i32 = sdiv %3, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw 20:i32, %2
%4:i32 = subnsw %1, %3
%5:i32 = var
%6:i32 = subnsw %5, 1:i32
%7:i32 = sdiv %4, %6
%8:i32 = phi %0, %7, 0:i32
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 20:i32, %1
%3:i32 = subnsw %0, %2
%4:i32 = var
%5:i32 = subnsw %4, 1:i32
%6:i32 = sdiv %3, %5

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 20:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 20
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 28
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 20:i32, %1
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw 20:i32, %2
%4:i32 = mulnsw %1, %3
%5:i32 = subnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 20:i32, %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
%8:i32 = addnsw 1:i32, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = addnsw 20:i32, %3
%5:i32 = mulnsw %2, %4
%6:i32 = subnsw %1, %5
%7:i32 = addnsw %0, %6
%8:i32 = addnsw 1:i32, %7
%9:i32 = sdiv %8, 2:i32
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init_months()

; entering Souper's runOnFunction() for print_row()

; ModuleID = './Calendar.c.bc'
source_filename = "./Calendar.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.months = type { i8*, i32, i32, i32 }
%struct._IO_FILE = type opaque

@width = hidden global i32 80, align 4
@year = hidden global i32 1969, align 4
@.str = private unnamed_addr constant [3 x i8] c"Su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Mo\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"Tu\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"We\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Th\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"Fr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Sa\00", align 1
@wdays = hidden global [7 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [8 x i8] c"January\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"February\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"March\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"April\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"June\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"July\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"August\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"September\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"October\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"November\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"December\00", align 1
@months = hidden global [12 x %struct.months] [%struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i32 28, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 31, i32 0, i32 0 }], align 16
@cols = hidden global i32 0, align 4
@gap = hidden global i32 0, align 4
@lead = hidden global i32 0, align 4
@.str.19 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"bad args\0AUsage: %s year [-w width (>= 20)]\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @space(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @init_months() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @year, align 4
  %rem = srem i32 %0, 4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @year, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @year, align 4
  %rem3 = srem i32 %2, 400
  %tobool4 = icmp ne i32 %rem3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 29, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 1, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* @year, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @year, align 4
  %4 = load i32, i32* @year, align 4
  %mul = mul nsw i32 %4, 365
  %5 = load i32, i32* @year, align 4
  %div = sdiv i32 %5, 4
  %add = add nsw i32 %mul, %div
  %6 = load i32, i32* @year, align 4
  %div5 = sdiv i32 %6, 100
  %sub = sub nsw i32 %add, %div5
  %7 = load i32, i32* @year, align 4
  %div6 = sdiv i32 %7, 400
  %add7 = add nsw i32 %sub, %div6
  %add8 = add nsw i32 %add7, 1
  %rem9 = srem i32 %add8, 7
  store i32 %rem9, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 0, i32 2), align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %9, 1
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub10
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 2
  %10 = load i32, i32* %start_wday, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %arrayidx12 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub11
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx12, i32 0, i32 1
  %12 = load i32, i32* %days, align 4
  %add13 = add nsw i32 %10, %12
  %rem14 = srem i32 %add13, 7
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %13
  %start_wday16 = getelementptr inbounds %struct.months, %struct.months* %arrayidx15, i32 0, i32 2
  store i32 %rem14, i32* %start_wday16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @width, align 4
  %add17 = add nsw i32 %15, 2
  %div18 = sdiv i32 %add17, 22
  store i32 %div18, i32* @cols, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %16 = load i32, i32* @cols, align 4
  %rem19 = srem i32 12, %16
  %tobool20 = icmp ne i32 %rem19, 0
  br i1 %tobool20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* @cols, align 4
  %dec21 = add nsw i32 %17, -1
  store i32 %dec21, i32* @cols, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* @cols, align 4
  %sub22 = sub nsw i32 %18, 1
  %tobool23 = icmp ne i32 %sub22, 0
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %19 = load i32, i32* @width, align 4
  %20 = load i32, i32* @cols, align 4
  %mul24 = mul nsw i32 20, %20
  %sub25 = sub nsw i32 %19, %mul24
  %21 = load i32, i32* @cols, align 4
  %sub26 = sub nsw i32 %21, 1
  %div27 = sdiv i32 %sub25, %sub26
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* @gap, align 4
  %22 = load i32, i32* @gap, align 4
  %cmp28 = icmp sgt i32 %22, 4
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.end
  store i32 4, i32* @gap, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.end
  %23 = load i32, i32* @width, align 4
  %24 = load i32, i32* @gap, align 4
  %add31 = add nsw i32 20, %24
  %25 = load i32, i32* @cols, align 4
  %mul32 = mul nsw i32 %add31, %25
  %sub33 = sub nsw i32 %23, %mul32
  %26 = load i32, i32* @gap, align 4
  %add34 = add nsw i32 %sub33, %26
  %add35 = add nsw i32 %add34, 1
  %div36 = sdiv i32 %add35, 2
  store i32 %div36, i32* @lead, align 4
  %27 = load i32, i32* @year, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* @year, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_row(i32 %row) #0 {
entry:
  %row.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %from, align 4
  %2 = load i32, i32* %from, align 4
  %3 = load i32, i32* @cols, align 4
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %to, align 4
  %4 = load i32, i32* @lead, align 4
  call void @space(i32 %4)
  %5 = load i32, i32* %from, align 4
  store i32 %5, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %c, align 4
  %7 = load i32, i32* %to, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %c, align 4
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %8
  %name = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 16
  %call = call i32 @strlen(i8* %9) #4
  store i32 %call, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 20, %10
  %div = sdiv i32 %sub, 2
  call void @space(i32 %div)
  %11 = load i32, i32* %c, align 4
  %arrayidx1 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %11
  %name2 = getelementptr inbounds %struct.months, %struct.months* %arrayidx1, i32 0, i32 0
  %12 = load i8*, i8** %name2, align 16
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 20, %13
  %14 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 20, %14
  %div6 = sdiv i32 %sub5, 2
  %sub7 = sub nsw i32 %sub4, %div6
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %to, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @gap, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
  %add10 = add nsw i32 %sub7, %cond
  call void @space(i32 %add10)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %c, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @putchar(i32 10)
  %19 = load i32, i32* @lead, align 4
  call void @space(i32 %19)
  %20 = load i32, i32* %from, align 4
  store i32 %20, i32* %c, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %c, align 4
  %22 = load i32, i32* %to, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body14, label %for.end30

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.body14
  %23 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %23, 7
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [7 x i8*], [7 x i8*]* @wdays, i32 0, i32 %24
  %25 = load i8*, i8** %arrayidx18, align 4
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %26, 6
  %27 = zext i1 %cmp19 to i64
  %cond20 = select i1 %cmp19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* %25, i8* %cond20)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %28 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %to, align 4
  %sub25 = sub nsw i32 %30, 1
  %cmp26 = icmp slt i32 %29, %sub25
  br i1 %cmp26, label %if.then, label %if.else

if.then:                                          ; preds = %for.end24
  %31 = load i32, i32* @gap, align 4
  call void @space(i32 %31)
  br label %if.end

if.else:                                          ; preds = %for.end24
  %call27 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc28

for.inc28:                                        ; preds = %if.end
  %32 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %32, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  br label %while.body

while.body:                                       ; preds = %for.end30, %for.end92
  %33 = load i32, i32* %from, align 4
  store i32 %33, i32* %c, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %while.body
  %34 = load i32, i32* %c, align 4
  %35 = load i32, i32* %to, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %36 = load i32, i32* %c, align 4
  %arrayidx34 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %36
  %at = getelementptr inbounds %struct.months, %struct.months* %arrayidx34, i32 0, i32 3
  %37 = load i32, i32* %at, align 4
  %38 = load i32, i32* %c, align 4
  %arrayidx35 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %38
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx35, i32 0, i32 1
  %39 = load i32, i32* %days, align 4
  %cmp36 = icmp slt i32 %37, %39
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.end41

if.end38:                                         ; preds = %for.body33
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %40 = load i32, i32* %c, align 4
  %inc40 = add nsw i32 %40, 1
  store i32 %inc40, i32* %c, align 4
  br label %for.cond31

for.end41:                                        ; preds = %if.then37, %for.cond31
  %41 = load i32, i32* %c, align 4
  %42 = load i32, i32* %to, align 4
  %cmp42 = icmp eq i32 %41, %42
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end41
  br label %while.end94

if.end44:                                         ; preds = %for.end41
  %43 = load i32, i32* @lead, align 4
  call void @space(i32 %43)
  %44 = load i32, i32* %from, align 4
  store i32 %44, i32* %c, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc90, %if.end44
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %to, align 4
  %cmp46 = icmp slt i32 %45, %46
  br i1 %cmp46, label %for.body47, label %for.end92

for.body47:                                       ; preds = %for.cond45
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc52, %for.body47
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %c, align 4
  %arrayidx49 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %48
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx49, i32 0, i32 2
  %49 = load i32, i32* %start_wday, align 8
  %cmp50 = icmp slt i32 %47, %49
  br i1 %cmp50, label %for.body51, label %for.end54

for.body51:                                       ; preds = %for.cond48
  call void @space(i32 3)
  br label %for.inc52

for.inc52:                                        ; preds = %for.body51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond48

for.end54:                                        ; preds = %for.cond48
  br label %while.cond55

while.cond55:                                     ; preds = %if.end73, %for.end54
  %51 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %51, 1
  store i32 %inc56, i32* %i, align 4
  %cmp57 = icmp slt i32 %51, 7
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond55
  %52 = load i32, i32* %c, align 4
  %arrayidx58 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %52
  %at59 = getelementptr inbounds %struct.months, %struct.months* %arrayidx58, i32 0, i32 3
  %53 = load i32, i32* %at59, align 4
  %54 = load i32, i32* %c, align 4
  %arrayidx60 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %54
  %days61 = getelementptr inbounds %struct.months, %struct.months* %arrayidx60, i32 0, i32 1
  %55 = load i32, i32* %days61, align 4
  %cmp62 = icmp slt i32 %53, %55
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond55
  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
  br i1 %56, label %while.body63, label %while.end

while.body63:                                     ; preds = %land.end
  %57 = load i32, i32* %c, align 4
  %arrayidx64 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %57
  %at65 = getelementptr inbounds %struct.months, %struct.months* %arrayidx64, i32 0, i32 3
  %58 = load i32, i32* %at65, align 4
  %inc66 = add nsw i32 %58, 1
  store i32 %inc66, i32* %at65, align 4
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 %inc66)
  %59 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %59, 7
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body63
  %60 = load i32, i32* %c, align 4
  %61 = load i32, i32* %to, align 4
  %sub69 = sub nsw i32 %61, 1
  %cmp70 = icmp slt i32 %60, %sub69
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false, %while.body63
  %call72 = call i32 @putchar(i32 32)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %lor.lhs.false
  br label %while.cond55

while.end:                                        ; preds = %land.end
  br label %while.cond74

while.cond74:                                     ; preds = %while.body81, %while.end
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  %cmp76 = icmp sle i32 %62, 7
  br i1 %cmp76, label %land.rhs77, label %land.end80

land.rhs77:                                       ; preds = %while.cond74
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %to, align 4
  %sub78 = sub nsw i32 %64, 1
  %cmp79 = icmp slt i32 %63, %sub78
  br label %land.end80

land.end80:                                       ; preds = %land.rhs77, %while.cond74
  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
  br i1 %65, label %while.body81, label %while.end82

while.body81:                                     ; preds = %land.end80
  call void @space(i32 3)
  br label %while.cond74

while.end82:                                      ; preds = %land.end80
  %66 = load i32, i32* %c, align 4
  %67 = load i32, i32* %to, align 4
  %sub83 = sub nsw i32 %67, 1
  %cmp84 = icmp slt i32 %66, %sub83
  br i1 %cmp84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %while.end82
  %68 = load i32, i32* @gap, align 4
  %sub86 = sub nsw i32 %68, 1
  call void @space(i32 %sub86)
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %while.end82
  %69 = load i32, i32* %c, align 4
  %arrayidx88 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %69
  %start_wday89 = getelementptr inbounds %struct.months, %struct.months* %arrayidx88, i32 0, i32 2
  store i32 0, i32* %start_wday89, align 8
  br label %for.inc90

for.inc90:                                        ; preds = %if.end87
  %70 = load i32, i32* %c, align 4
  %inc91 = add nsw i32 %70, 1
  store i32 %inc91, i32* %c, align 4
  br label %for.cond45

for.end92:                                        ; preds = %for.cond45
  %call93 = call i32 @putchar(i32 10)
  br label %while.body

while.end94:                                      ; preds = %if.then43
  %call95 = call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_year() #0 {
entry:
  %row = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* @year, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @width, align 4
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call2 = call i32 @strlen(i8* %arraydecay1) #4
  %sub = sub i32 %1, %call2
  %div = udiv i32 %sub, 2
  call void @space(i32 %div)
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* %arraydecay3)
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %row, align 4
  %3 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %row, align 4
  call void @print_row(i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %row, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %year_set = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %year_set, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %inc, %6
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8**, i8*** %v.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @atoi(i8* %9)
  store i32 %call3, i32* @width, align 4
  %cmp4 = icmp slt i32 %call3, 20
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  br label %bail

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end17

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %year_set, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else15, label %if.then7

if.then7:                                         ; preds = %if.else
  %11 = load i8**, i8*** %v.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then13

lor.lhs.false11:                                  ; preds = %if.then7
  %14 = load i32, i32* @year, align 4
  %cmp12 = icmp sle i32 %14, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.then7
  store i32 1969, i32* @year, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false11
  store i32 1, i32* %year_set, align 4
  br label %if.end16

if.else15:                                        ; preds = %if.else
  br label %bail

if.end16:                                         ; preds = %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @init_months()
  call void @print_year()
  ret i32 0

bail:                                             ; preds = %if.else15, %if.then5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i8**, i8*** %v.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %17, i32 0
  %18 = load i8*, i8** %arrayidx19, align 4
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i32 0, i32 0), i8* %18)
  call void @exit(i32 1) #5
  unreachable
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

declare i32 @atoi(i8* %0) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %from, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %from, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %9) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 20, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %div = sdiv i32 %sub, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = sdiv %1, 2:i32
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 20, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 20, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %div6 = sdiv i32 %sub5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = sdiv %1, 2:i32
infer %2

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %sub4, %div6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = var
%3:i32 = subnsw 20:i32, %2
%4:i32 = sdiv %3, 2:i32
%5:i32 = subnsw %1, %4
infer %5

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %15, %sub8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add10 = add nsw i32 %sub7, %cond
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 20:i32, %1
%3:i32 = var
%4:i32 = subnsw 20:i32, %3
%5:i32 = sdiv %4, 2:i32
%6:i32 = subnsw %2, %5
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %from, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %23, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp eq i32 %26, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub25 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %29, %sub25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %31 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %from, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %34, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %at, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %days, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp slt i32 %37, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp42 = icmp eq i32 %41, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* @lead, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %from, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = icmp slt i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %start_wday, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp50 = icmp slt i32 %47, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc53 = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc56 = add nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp57 = icmp slt i32 %51, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %at59, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %days61, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp62 = icmp slt i32 %53, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %at65, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc66 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp68 = icmp slt i32 %59, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub69 = sub nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp70 = icmp slt i32 %60, %sub69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc75 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp76 = icmp sle i32 %62, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub78 = sub nsw i32 %64, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp79 = icmp slt i32 %63, %sub78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %to, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub83 = sub nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp84 = icmp slt i32 %66, %sub83
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %68 = load i32, i32* @gap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub86 = sub nsw i32 %68, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc91 = add nsw i32 %70, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 20
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -772059120
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = sdiv %1, 2:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -404881408
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = var
%3:i32 = subnsw 20:i32, %2
%4:i32 = sdiv %3, 2:i32
%5:i32 = subnsw %1, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = sdiv %1, 2:i32

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw 20:i32, %1
%3:i32 = var
%4:i32 = subnsw 20:i32, %3
%5:i32 = sdiv %4, 2:i32
%6:i32 = subnsw %2, %5
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1656457728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = subnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = subnsw 20:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = sdiv %1, 2:i32

Cost = 6
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = subnsw 20:i32, %0
%2:i32 = var
%3:i32 = subnsw 20:i32, %2
%4:i32 = sdiv %3, 2:i32
%5:i32 = subnsw %1, %4

Cost = 8
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_row()

; entering Souper's runOnFunction() for print_year()

; ModuleID = './Calendar.c.bc'
source_filename = "./Calendar.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.months = type { i8*, i32, i32, i32 }
%struct._IO_FILE = type opaque

@width = hidden global i32 80, align 4
@year = hidden global i32 1969, align 4
@.str = private unnamed_addr constant [3 x i8] c"Su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Mo\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"Tu\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"We\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Th\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"Fr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Sa\00", align 1
@wdays = hidden global [7 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [8 x i8] c"January\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"February\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"March\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"April\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"June\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"July\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"August\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"September\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"October\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"November\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"December\00", align 1
@months = hidden global [12 x %struct.months] [%struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i32 28, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 31, i32 0, i32 0 }], align 16
@cols = hidden global i32 0, align 4
@gap = hidden global i32 0, align 4
@lead = hidden global i32 0, align 4
@.str.19 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"bad args\0AUsage: %s year [-w width (>= 20)]\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @space(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @init_months() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @year, align 4
  %rem = srem i32 %0, 4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @year, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @year, align 4
  %rem3 = srem i32 %2, 400
  %tobool4 = icmp ne i32 %rem3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 29, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 1, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* @year, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @year, align 4
  %4 = load i32, i32* @year, align 4
  %mul = mul nsw i32 %4, 365
  %5 = load i32, i32* @year, align 4
  %div = sdiv i32 %5, 4
  %add = add nsw i32 %mul, %div
  %6 = load i32, i32* @year, align 4
  %div5 = sdiv i32 %6, 100
  %sub = sub nsw i32 %add, %div5
  %7 = load i32, i32* @year, align 4
  %div6 = sdiv i32 %7, 400
  %add7 = add nsw i32 %sub, %div6
  %add8 = add nsw i32 %add7, 1
  %rem9 = srem i32 %add8, 7
  store i32 %rem9, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 0, i32 2), align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %9, 1
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub10
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 2
  %10 = load i32, i32* %start_wday, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %arrayidx12 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub11
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx12, i32 0, i32 1
  %12 = load i32, i32* %days, align 4
  %add13 = add nsw i32 %10, %12
  %rem14 = srem i32 %add13, 7
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %13
  %start_wday16 = getelementptr inbounds %struct.months, %struct.months* %arrayidx15, i32 0, i32 2
  store i32 %rem14, i32* %start_wday16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @width, align 4
  %add17 = add nsw i32 %15, 2
  %div18 = sdiv i32 %add17, 22
  store i32 %div18, i32* @cols, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %16 = load i32, i32* @cols, align 4
  %rem19 = srem i32 12, %16
  %tobool20 = icmp ne i32 %rem19, 0
  br i1 %tobool20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* @cols, align 4
  %dec21 = add nsw i32 %17, -1
  store i32 %dec21, i32* @cols, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* @cols, align 4
  %sub22 = sub nsw i32 %18, 1
  %tobool23 = icmp ne i32 %sub22, 0
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %19 = load i32, i32* @width, align 4
  %20 = load i32, i32* @cols, align 4
  %mul24 = mul nsw i32 20, %20
  %sub25 = sub nsw i32 %19, %mul24
  %21 = load i32, i32* @cols, align 4
  %sub26 = sub nsw i32 %21, 1
  %div27 = sdiv i32 %sub25, %sub26
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* @gap, align 4
  %22 = load i32, i32* @gap, align 4
  %cmp28 = icmp sgt i32 %22, 4
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.end
  store i32 4, i32* @gap, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.end
  %23 = load i32, i32* @width, align 4
  %24 = load i32, i32* @gap, align 4
  %add31 = add nsw i32 20, %24
  %25 = load i32, i32* @cols, align 4
  %mul32 = mul nsw i32 %add31, %25
  %sub33 = sub nsw i32 %23, %mul32
  %26 = load i32, i32* @gap, align 4
  %add34 = add nsw i32 %sub33, %26
  %add35 = add nsw i32 %add34, 1
  %div36 = sdiv i32 %add35, 2
  store i32 %div36, i32* @lead, align 4
  %27 = load i32, i32* @year, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* @year, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_row(i32 %row) #0 {
entry:
  %row.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %from, align 4
  %2 = load i32, i32* %from, align 4
  %3 = load i32, i32* @cols, align 4
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %to, align 4
  %4 = load i32, i32* @lead, align 4
  call void @space(i32 %4)
  %5 = load i32, i32* %from, align 4
  store i32 %5, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %c, align 4
  %7 = load i32, i32* %to, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %c, align 4
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %8
  %name = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 16
  %call = call i32 @strlen(i8* %9) #4
  store i32 %call, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 20, %10
  %div = sdiv i32 %sub, 2
  call void @space(i32 %div)
  %11 = load i32, i32* %c, align 4
  %arrayidx1 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %11
  %name2 = getelementptr inbounds %struct.months, %struct.months* %arrayidx1, i32 0, i32 0
  %12 = load i8*, i8** %name2, align 16
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 20, %13
  %14 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 20, %14
  %div6 = sdiv i32 %sub5, 2
  %sub7 = sub nsw i32 %sub4, %div6
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %to, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @gap, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
  %add10 = add nsw i32 %sub7, %cond
  call void @space(i32 %add10)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %c, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @putchar(i32 10)
  %19 = load i32, i32* @lead, align 4
  call void @space(i32 %19)
  %20 = load i32, i32* %from, align 4
  store i32 %20, i32* %c, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %c, align 4
  %22 = load i32, i32* %to, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body14, label %for.end30

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.body14
  %23 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %23, 7
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [7 x i8*], [7 x i8*]* @wdays, i32 0, i32 %24
  %25 = load i8*, i8** %arrayidx18, align 4
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %26, 6
  %27 = zext i1 %cmp19 to i64
  %cond20 = select i1 %cmp19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* %25, i8* %cond20)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %28 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %to, align 4
  %sub25 = sub nsw i32 %30, 1
  %cmp26 = icmp slt i32 %29, %sub25
  br i1 %cmp26, label %if.then, label %if.else

if.then:                                          ; preds = %for.end24
  %31 = load i32, i32* @gap, align 4
  call void @space(i32 %31)
  br label %if.end

if.else:                                          ; preds = %for.end24
  %call27 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc28

for.inc28:                                        ; preds = %if.end
  %32 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %32, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  br label %while.body

while.body:                                       ; preds = %for.end30, %for.end92
  %33 = load i32, i32* %from, align 4
  store i32 %33, i32* %c, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %while.body
  %34 = load i32, i32* %c, align 4
  %35 = load i32, i32* %to, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %36 = load i32, i32* %c, align 4
  %arrayidx34 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %36
  %at = getelementptr inbounds %struct.months, %struct.months* %arrayidx34, i32 0, i32 3
  %37 = load i32, i32* %at, align 4
  %38 = load i32, i32* %c, align 4
  %arrayidx35 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %38
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx35, i32 0, i32 1
  %39 = load i32, i32* %days, align 4
  %cmp36 = icmp slt i32 %37, %39
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.end41

if.end38:                                         ; preds = %for.body33
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %40 = load i32, i32* %c, align 4
  %inc40 = add nsw i32 %40, 1
  store i32 %inc40, i32* %c, align 4
  br label %for.cond31

for.end41:                                        ; preds = %if.then37, %for.cond31
  %41 = load i32, i32* %c, align 4
  %42 = load i32, i32* %to, align 4
  %cmp42 = icmp eq i32 %41, %42
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end41
  br label %while.end94

if.end44:                                         ; preds = %for.end41
  %43 = load i32, i32* @lead, align 4
  call void @space(i32 %43)
  %44 = load i32, i32* %from, align 4
  store i32 %44, i32* %c, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc90, %if.end44
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %to, align 4
  %cmp46 = icmp slt i32 %45, %46
  br i1 %cmp46, label %for.body47, label %for.end92

for.body47:                                       ; preds = %for.cond45
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc52, %for.body47
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %c, align 4
  %arrayidx49 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %48
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx49, i32 0, i32 2
  %49 = load i32, i32* %start_wday, align 8
  %cmp50 = icmp slt i32 %47, %49
  br i1 %cmp50, label %for.body51, label %for.end54

for.body51:                                       ; preds = %for.cond48
  call void @space(i32 3)
  br label %for.inc52

for.inc52:                                        ; preds = %for.body51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond48

for.end54:                                        ; preds = %for.cond48
  br label %while.cond55

while.cond55:                                     ; preds = %if.end73, %for.end54
  %51 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %51, 1
  store i32 %inc56, i32* %i, align 4
  %cmp57 = icmp slt i32 %51, 7
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond55
  %52 = load i32, i32* %c, align 4
  %arrayidx58 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %52
  %at59 = getelementptr inbounds %struct.months, %struct.months* %arrayidx58, i32 0, i32 3
  %53 = load i32, i32* %at59, align 4
  %54 = load i32, i32* %c, align 4
  %arrayidx60 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %54
  %days61 = getelementptr inbounds %struct.months, %struct.months* %arrayidx60, i32 0, i32 1
  %55 = load i32, i32* %days61, align 4
  %cmp62 = icmp slt i32 %53, %55
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond55
  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
  br i1 %56, label %while.body63, label %while.end

while.body63:                                     ; preds = %land.end
  %57 = load i32, i32* %c, align 4
  %arrayidx64 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %57
  %at65 = getelementptr inbounds %struct.months, %struct.months* %arrayidx64, i32 0, i32 3
  %58 = load i32, i32* %at65, align 4
  %inc66 = add nsw i32 %58, 1
  store i32 %inc66, i32* %at65, align 4
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 %inc66)
  %59 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %59, 7
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body63
  %60 = load i32, i32* %c, align 4
  %61 = load i32, i32* %to, align 4
  %sub69 = sub nsw i32 %61, 1
  %cmp70 = icmp slt i32 %60, %sub69
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false, %while.body63
  %call72 = call i32 @putchar(i32 32)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %lor.lhs.false
  br label %while.cond55

while.end:                                        ; preds = %land.end
  br label %while.cond74

while.cond74:                                     ; preds = %while.body81, %while.end
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  %cmp76 = icmp sle i32 %62, 7
  br i1 %cmp76, label %land.rhs77, label %land.end80

land.rhs77:                                       ; preds = %while.cond74
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %to, align 4
  %sub78 = sub nsw i32 %64, 1
  %cmp79 = icmp slt i32 %63, %sub78
  br label %land.end80

land.end80:                                       ; preds = %land.rhs77, %while.cond74
  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
  br i1 %65, label %while.body81, label %while.end82

while.body81:                                     ; preds = %land.end80
  call void @space(i32 3)
  br label %while.cond74

while.end82:                                      ; preds = %land.end80
  %66 = load i32, i32* %c, align 4
  %67 = load i32, i32* %to, align 4
  %sub83 = sub nsw i32 %67, 1
  %cmp84 = icmp slt i32 %66, %sub83
  br i1 %cmp84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %while.end82
  %68 = load i32, i32* @gap, align 4
  %sub86 = sub nsw i32 %68, 1
  call void @space(i32 %sub86)
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %while.end82
  %69 = load i32, i32* %c, align 4
  %arrayidx88 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %69
  %start_wday89 = getelementptr inbounds %struct.months, %struct.months* %arrayidx88, i32 0, i32 2
  store i32 0, i32* %start_wday89, align 8
  br label %for.inc90

for.inc90:                                        ; preds = %if.end87
  %70 = load i32, i32* %c, align 4
  %inc91 = add nsw i32 %70, 1
  store i32 %inc91, i32* %c, align 4
  br label %for.cond45

for.end92:                                        ; preds = %for.cond45
  %call93 = call i32 @putchar(i32 10)
  br label %while.body

while.end94:                                      ; preds = %if.then43
  %call95 = call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_year() #0 {
entry:
  %row = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* @year, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @width, align 4
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call2 = call i32 @strlen(i8* %arraydecay1) #4
  %sub = sub i32 %1, %call2
  %div = udiv i32 %sub, 2
  call void @space(i32 %div)
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* %arraydecay3)
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %row, align 4
  %3 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %row, align 4
  call void @print_row(i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %row, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %year_set = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %year_set, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %inc, %6
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8**, i8*** %v.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @atoi(i8* %9)
  store i32 %call3, i32* @width, align 4
  %cmp4 = icmp slt i32 %call3, 20
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  br label %bail

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end17

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %year_set, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else15, label %if.then7

if.then7:                                         ; preds = %if.else
  %11 = load i8**, i8*** %v.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then13

lor.lhs.false11:                                  ; preds = %if.then7
  %14 = load i32, i32* @year, align 4
  %cmp12 = icmp sle i32 %14, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.then7
  store i32 1969, i32* @year, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false11
  store i32 1, i32* %year_set, align 4
  br label %if.end16

if.else15:                                        ; preds = %if.else
  br label %bail

if.end16:                                         ; preds = %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @init_months()
  call void @print_year()
  ret i32 0

bail:                                             ; preds = %if.else15, %if.then5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i8**, i8*** %v.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %17, i32 0
  %18 = load i8*, i8** %arrayidx19, align 4
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i32 0, i32 0), i8* %18)
  call void @exit(i32 1) #5
  unreachable
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

declare i32 @atoi(i8* %0) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @width, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @strlen(i8* %arraydecay1) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %1, %call2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %div = udiv i32 %sub, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = udiv %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %mul, 12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i1 = slt %2, 12:i32
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = udiv %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i1 = slt %2, 12:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_year()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Calendar.c.bc'
source_filename = "./Calendar.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.months = type { i8*, i32, i32, i32 }
%struct._IO_FILE = type opaque

@width = hidden global i32 80, align 4
@year = hidden global i32 1969, align 4
@.str = private unnamed_addr constant [3 x i8] c"Su\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"Mo\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"Tu\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"We\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"Th\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"Fr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"Sa\00", align 1
@wdays = hidden global [7 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0)], align 16
@.str.7 = private unnamed_addr constant [8 x i8] c"January\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"February\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"March\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"April\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"June\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"July\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"August\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"September\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"October\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"November\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"December\00", align 1
@months = hidden global [12 x %struct.months] [%struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0), i32 28, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i32 31, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 30, i32 0, i32 0 }, %struct.months { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 31, i32 0, i32 0 }], align 16
@cols = hidden global i32 0, align 4
@gap = hidden global i32 0, align 4
@lead = hidden global i32 0, align 4
@.str.19 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"%2d\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"bad args\0AUsage: %s year [-w width (>= 20)]\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @space(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar(i32 32)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @init_months() #0 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @year, align 4
  %rem = srem i32 %0, 4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @year, align 4
  %rem1 = srem i32 %1, 100
  %tobool2 = icmp ne i32 %rem1, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* @year, align 4
  %rem3 = srem i32 %2, 400
  %tobool4 = icmp ne i32 %rem3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 29, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 1, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* @year, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* @year, align 4
  %4 = load i32, i32* @year, align 4
  %mul = mul nsw i32 %4, 365
  %5 = load i32, i32* @year, align 4
  %div = sdiv i32 %5, 4
  %add = add nsw i32 %mul, %div
  %6 = load i32, i32* @year, align 4
  %div5 = sdiv i32 %6, 100
  %sub = sub nsw i32 %add, %div5
  %7 = load i32, i32* @year, align 4
  %div6 = sdiv i32 %7, 400
  %add7 = add nsw i32 %sub, %div6
  %add8 = add nsw i32 %add7, 1
  %rem9 = srem i32 %add8, 7
  store i32 %rem9, i32* getelementptr inbounds ([12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 0, i32 2), align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %sub10 = sub nsw i32 %9, 1
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub10
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 2
  %10 = load i32, i32* %start_wday, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %arrayidx12 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %sub11
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx12, i32 0, i32 1
  %12 = load i32, i32* %days, align 4
  %add13 = add nsw i32 %10, %12
  %rem14 = srem i32 %add13, 7
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %13
  %start_wday16 = getelementptr inbounds %struct.months, %struct.months* %arrayidx15, i32 0, i32 2
  store i32 %rem14, i32* %start_wday16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* @width, align 4
  %add17 = add nsw i32 %15, 2
  %div18 = sdiv i32 %add17, 22
  store i32 %div18, i32* @cols, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %16 = load i32, i32* @cols, align 4
  %rem19 = srem i32 12, %16
  %tobool20 = icmp ne i32 %rem19, 0
  br i1 %tobool20, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load i32, i32* @cols, align 4
  %dec21 = add nsw i32 %17, -1
  store i32 %dec21, i32* @cols, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* @cols, align 4
  %sub22 = sub nsw i32 %18, 1
  %tobool23 = icmp ne i32 %sub22, 0
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %19 = load i32, i32* @width, align 4
  %20 = load i32, i32* @cols, align 4
  %mul24 = mul nsw i32 20, %20
  %sub25 = sub nsw i32 %19, %mul24
  %21 = load i32, i32* @cols, align 4
  %sub26 = sub nsw i32 %21, 1
  %div27 = sdiv i32 %sub25, %sub26
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div27, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* @gap, align 4
  %22 = load i32, i32* @gap, align 4
  %cmp28 = icmp sgt i32 %22, 4
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %cond.end
  store i32 4, i32* @gap, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %cond.end
  %23 = load i32, i32* @width, align 4
  %24 = load i32, i32* @gap, align 4
  %add31 = add nsw i32 20, %24
  %25 = load i32, i32* @cols, align 4
  %mul32 = mul nsw i32 %add31, %25
  %sub33 = sub nsw i32 %23, %mul32
  %26 = load i32, i32* @gap, align 4
  %add34 = add nsw i32 %sub33, %26
  %add35 = add nsw i32 %add34, 1
  %div36 = sdiv i32 %add35, 2
  store i32 %div36, i32* @lead, align 4
  %27 = load i32, i32* @year, align 4
  %inc37 = add nsw i32 %27, 1
  store i32 %inc37, i32* @year, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_row(i32 %row) #0 {
entry:
  %row.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %from = alloca i32, align 4
  %to = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %0, %1
  store i32 %mul, i32* %from, align 4
  %2 = load i32, i32* %from, align 4
  %3 = load i32, i32* @cols, align 4
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %to, align 4
  %4 = load i32, i32* @lead, align 4
  call void @space(i32 %4)
  %5 = load i32, i32* %from, align 4
  store i32 %5, i32* %c, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %c, align 4
  %7 = load i32, i32* %to, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %c, align 4
  %arrayidx = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %8
  %name = getelementptr inbounds %struct.months, %struct.months* %arrayidx, i32 0, i32 0
  %9 = load i8*, i8** %name, align 16
  %call = call i32 @strlen(i8* %9) #4
  store i32 %call, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 20, %10
  %div = sdiv i32 %sub, 2
  call void @space(i32 %div)
  %11 = load i32, i32* %c, align 4
  %arrayidx1 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %11
  %name2 = getelementptr inbounds %struct.months, %struct.months* %arrayidx1, i32 0, i32 0
  %12 = load i8*, i8** %name2, align 16
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* %12)
  %13 = load i32, i32* %i, align 4
  %sub4 = sub nsw i32 20, %13
  %14 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 20, %14
  %div6 = sdiv i32 %sub5, 2
  %sub7 = sub nsw i32 %sub4, %div6
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %to, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %17 = load i32, i32* @gap, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %17, %cond.false ]
  %add10 = add nsw i32 %sub7, %cond
  call void @space(i32 %add10)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %c, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %c, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call11 = call i32 @putchar(i32 10)
  %19 = load i32, i32* @lead, align 4
  call void @space(i32 %19)
  %20 = load i32, i32* %from, align 4
  store i32 %20, i32* %c, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc28, %for.end
  %21 = load i32, i32* %c, align 4
  %22 = load i32, i32* %to, align 4
  %cmp13 = icmp slt i32 %21, %22
  br i1 %cmp13, label %for.body14, label %for.end30

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.body14
  %23 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %23, 7
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds [7 x i8*], [7 x i8*]* @wdays, i32 0, i32 %24
  %25 = load i8*, i8** %arrayidx18, align 4
  %26 = load i32, i32* %i, align 4
  %cmp19 = icmp eq i32 %26, 6
  %27 = zext i1 %cmp19 to i64
  %cond20 = select i1 %cmp19, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* %25, i8* %cond20)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %28 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %28, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %to, align 4
  %sub25 = sub nsw i32 %30, 1
  %cmp26 = icmp slt i32 %29, %sub25
  br i1 %cmp26, label %if.then, label %if.else

if.then:                                          ; preds = %for.end24
  %31 = load i32, i32* @gap, align 4
  call void @space(i32 %31)
  br label %if.end

if.else:                                          ; preds = %for.end24
  %call27 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc28

for.inc28:                                        ; preds = %if.end
  %32 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %32, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond12

for.end30:                                        ; preds = %for.cond12
  br label %while.body

while.body:                                       ; preds = %for.end30, %for.end92
  %33 = load i32, i32* %from, align 4
  store i32 %33, i32* %c, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %while.body
  %34 = load i32, i32* %c, align 4
  %35 = load i32, i32* %to, align 4
  %cmp32 = icmp slt i32 %34, %35
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %36 = load i32, i32* %c, align 4
  %arrayidx34 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %36
  %at = getelementptr inbounds %struct.months, %struct.months* %arrayidx34, i32 0, i32 3
  %37 = load i32, i32* %at, align 4
  %38 = load i32, i32* %c, align 4
  %arrayidx35 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %38
  %days = getelementptr inbounds %struct.months, %struct.months* %arrayidx35, i32 0, i32 1
  %39 = load i32, i32* %days, align 4
  %cmp36 = icmp slt i32 %37, %39
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.end41

if.end38:                                         ; preds = %for.body33
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %40 = load i32, i32* %c, align 4
  %inc40 = add nsw i32 %40, 1
  store i32 %inc40, i32* %c, align 4
  br label %for.cond31

for.end41:                                        ; preds = %if.then37, %for.cond31
  %41 = load i32, i32* %c, align 4
  %42 = load i32, i32* %to, align 4
  %cmp42 = icmp eq i32 %41, %42
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end41
  br label %while.end94

if.end44:                                         ; preds = %for.end41
  %43 = load i32, i32* @lead, align 4
  call void @space(i32 %43)
  %44 = load i32, i32* %from, align 4
  store i32 %44, i32* %c, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc90, %if.end44
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %to, align 4
  %cmp46 = icmp slt i32 %45, %46
  br i1 %cmp46, label %for.body47, label %for.end92

for.body47:                                       ; preds = %for.cond45
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc52, %for.body47
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %c, align 4
  %arrayidx49 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %48
  %start_wday = getelementptr inbounds %struct.months, %struct.months* %arrayidx49, i32 0, i32 2
  %49 = load i32, i32* %start_wday, align 8
  %cmp50 = icmp slt i32 %47, %49
  br i1 %cmp50, label %for.body51, label %for.end54

for.body51:                                       ; preds = %for.cond48
  call void @space(i32 3)
  br label %for.inc52

for.inc52:                                        ; preds = %for.body51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond48

for.end54:                                        ; preds = %for.cond48
  br label %while.cond55

while.cond55:                                     ; preds = %if.end73, %for.end54
  %51 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %51, 1
  store i32 %inc56, i32* %i, align 4
  %cmp57 = icmp slt i32 %51, 7
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond55
  %52 = load i32, i32* %c, align 4
  %arrayidx58 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %52
  %at59 = getelementptr inbounds %struct.months, %struct.months* %arrayidx58, i32 0, i32 3
  %53 = load i32, i32* %at59, align 4
  %54 = load i32, i32* %c, align 4
  %arrayidx60 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %54
  %days61 = getelementptr inbounds %struct.months, %struct.months* %arrayidx60, i32 0, i32 1
  %55 = load i32, i32* %days61, align 4
  %cmp62 = icmp slt i32 %53, %55
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond55
  %56 = phi i1 [ false, %while.cond55 ], [ %cmp62, %land.rhs ]
  br i1 %56, label %while.body63, label %while.end

while.body63:                                     ; preds = %land.end
  %57 = load i32, i32* %c, align 4
  %arrayidx64 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %57
  %at65 = getelementptr inbounds %struct.months, %struct.months* %arrayidx64, i32 0, i32 3
  %58 = load i32, i32* %at65, align 4
  %inc66 = add nsw i32 %58, 1
  store i32 %inc66, i32* %at65, align 4
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 %inc66)
  %59 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %59, 7
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body63
  %60 = load i32, i32* %c, align 4
  %61 = load i32, i32* %to, align 4
  %sub69 = sub nsw i32 %61, 1
  %cmp70 = icmp slt i32 %60, %sub69
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false, %while.body63
  %call72 = call i32 @putchar(i32 32)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %lor.lhs.false
  br label %while.cond55

while.end:                                        ; preds = %land.end
  br label %while.cond74

while.cond74:                                     ; preds = %while.body81, %while.end
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  %cmp76 = icmp sle i32 %62, 7
  br i1 %cmp76, label %land.rhs77, label %land.end80

land.rhs77:                                       ; preds = %while.cond74
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %to, align 4
  %sub78 = sub nsw i32 %64, 1
  %cmp79 = icmp slt i32 %63, %sub78
  br label %land.end80

land.end80:                                       ; preds = %land.rhs77, %while.cond74
  %65 = phi i1 [ false, %while.cond74 ], [ %cmp79, %land.rhs77 ]
  br i1 %65, label %while.body81, label %while.end82

while.body81:                                     ; preds = %land.end80
  call void @space(i32 3)
  br label %while.cond74

while.end82:                                      ; preds = %land.end80
  %66 = load i32, i32* %c, align 4
  %67 = load i32, i32* %to, align 4
  %sub83 = sub nsw i32 %67, 1
  %cmp84 = icmp slt i32 %66, %sub83
  br i1 %cmp84, label %if.then85, label %if.end87

if.then85:                                        ; preds = %while.end82
  %68 = load i32, i32* @gap, align 4
  %sub86 = sub nsw i32 %68, 1
  call void @space(i32 %sub86)
  br label %if.end87

if.end87:                                         ; preds = %if.then85, %while.end82
  %69 = load i32, i32* %c, align 4
  %arrayidx88 = getelementptr inbounds [12 x %struct.months], [12 x %struct.months]* @months, i32 0, i32 %69
  %start_wday89 = getelementptr inbounds %struct.months, %struct.months* %arrayidx88, i32 0, i32 2
  store i32 0, i32* %start_wday89, align 8
  br label %for.inc90

for.inc90:                                        ; preds = %if.end87
  %70 = load i32, i32* %c, align 4
  %inc91 = add nsw i32 %70, 1
  store i32 %inc91, i32* %c, align 4
  br label %for.cond45

for.end92:                                        ; preds = %for.cond45
  %call93 = call i32 @putchar(i32 10)
  br label %while.body

while.end94:                                      ; preds = %if.then43
  %call95 = call i32 @putchar(i32 10)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_year() #0 {
entry:
  %row = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* @year, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 %0)
  %1 = load i32, i32* @width, align 4
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call2 = call i32 @strlen(i8* %arraydecay1) #4
  %sub = sub i32 %1, %call2
  %div = udiv i32 %sub, 2
  call void @space(i32 %div)
  %arraydecay3 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* %arraydecay3)
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %row, align 4
  %3 = load i32, i32* @cols, align 4
  %mul = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %row, align 4
  call void @print_row(i32 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %row, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %year_set = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 0, i32* %year_set, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %inc, %6
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i8**, i8*** %v.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @atoi(i8* %9)
  store i32 %call3, i32* @width, align 4
  %cmp4 = icmp slt i32 %call3, 20
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  br label %bail

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end17

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %year_set, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.else15, label %if.then7

if.then7:                                         ; preds = %if.else
  %11 = load i8**, i8*** %v.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx8, align 4
  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then13

lor.lhs.false11:                                  ; preds = %if.then7
  %14 = load i32, i32* @year, align 4
  %cmp12 = icmp sle i32 %14, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.then7
  store i32 1969, i32* @year, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %lor.lhs.false11
  store i32 1, i32* %year_set, align 4
  br label %if.end16

if.else15:                                        ; preds = %if.else
  br label %bail

if.end16:                                         ; preds = %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end17
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @init_months()
  call void @print_year()
  ret i32 0

bail:                                             ; preds = %if.else15, %if.then5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %17 = load i8**, i8*** %v.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %17, i32 0
  %18 = load i8*, i8** %arrayidx19, align 4
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i32 0, i32 0), i8* %18)
  call void @exit(i32 1) #5
  unreachable
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #2

declare i32 @atoi(i8* %0) #1

declare i32 @sscanf(i8* %0, i8* %1, ...) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0)) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %inc, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @atoi(i8* %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %call3, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 20:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %year_set, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call9 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32* @year)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %call9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* @year, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp sle i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 20:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
