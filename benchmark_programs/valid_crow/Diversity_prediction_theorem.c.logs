
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for mean()

; ModuleID = './Diversity_prediction_theorem.c.bc'
source_filename = "./Diversity_prediction_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"Usage : %s <reference value> <observations separated by commas>\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Average Error : %.9f\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Crowd Error : %.9f\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Diversity : %.9f\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden float @mean(float* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca float, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load float*, float** %arr.addr, align 4
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %2, i32 %3
  %4 = load float, float* %arrayidx, align 4
  %5 = load float, float* %sum, align 4
  %add = fadd float %5, %4
  store float %add, float* %sum, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load float, float* %sum, align 4
  %7 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %7 to float
  %div = fdiv float %6, %conv
  ret float %div
}

; Function Attrs: noinline nounwind optnone
define hidden float @variance(float %reference, float* %arr, i32 %size) #0 {
entry:
  %reference.addr = alloca float, align 4
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %newArr = alloca float*, align 4
  store float %reference, float* %reference.addr, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to float*
  store float* %1, float** %newArr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load float, float* %reference.addr, align 4
  %5 = load float*, float** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %5, i32 %6
  %7 = load float, float* %arrayidx, align 4
  %sub = fsub float %4, %7
  %8 = load float, float* %reference.addr, align 4
  %9 = load float*, float** %arr.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds float, float* %9, i32 %10
  %11 = load float, float* %arrayidx1, align 4
  %sub2 = fsub float %8, %11
  %mul3 = fmul float %sub, %sub2
  %12 = load float*, float** %newArr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds float, float* %12, i32 %13
  store float %mul3, float* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load float*, float** %newArr, align 4
  %16 = load i32, i32* %size.addr, align 4
  %call5 = call float @mean(float* %15, i32 %16)
  ret float %call5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden float* @extractData(i8* %str, i32* %len) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %len.addr = alloca i32*, align 4
  %arr = alloca float*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32* %len, i32** %len.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 44
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i32, i32* %count, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %count, align 4
  %mul = mul i32 %7, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %8 = bitcast i8* %call to float*
  store float* %8, float** %arr, align 4
  %9 = load i32, i32* %count, align 4
  %10 = load i32*, i32** %len.addr, align 4
  store i32 %9, i32* %10, align 4
  %11 = load i8*, i8** %str.addr, align 4
  %call7 = call i8* @strtok(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call7, i8** %token, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %while.end
  %12 = load i8*, i8** %token, align 4
  %cmp9 = icmp ne i8* %12, null
  br i1 %cmp9, label %while.body11, label %while.end17

while.body11:                                     ; preds = %while.cond8
  %13 = load i8*, i8** %token, align 4
  %call12 = call double @atof(i8* %13)
  %conv13 = fptrunc double %call12 to float
  %14 = load float*, float** %arr, align 4
  %15 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds float, float* %14, i32 %15
  store float %conv13, float* %arrayidx15, align 4
  %call16 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond8

while.end17:                                      ; preds = %while.cond8
  %16 = load float*, float** %arr, align 4
  ret float* %16
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @atof(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca float*, align 4
  %reference = alloca float, align 4
  %meanVal = alloca float, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 2
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call float* @extractData(i8* %2, i32* %len)
  store float* %call1, float** %arr, align 4
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx2, align 4
  %call3 = call double @atof(i8* %4)
  %conv = fptrunc double %call3 to float
  store float %conv, float* %reference, align 4
  %5 = load float*, float** %arr, align 4
  %6 = load i32, i32* %len, align 4
  %call4 = call float @mean(float* %5, i32 %6)
  store float %call4, float* %meanVal, align 4
  %7 = load float, float* %reference, align 4
  %8 = load float*, float** %arr, align 4
  %9 = load i32, i32* %len, align 4
  %call5 = call float @variance(float %7, float* %8, i32 %9)
  %conv6 = fpext float %call5 to double
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), double %conv6)
  %10 = load float, float* %reference, align 4
  %11 = load float, float* %meanVal, align 4
  %sub = fsub float %10, %11
  %12 = load float, float* %reference, align 4
  %13 = load float, float* %meanVal, align 4
  %sub8 = fsub float %12, %13
  %mul = fmul float %sub, %sub8
  %conv9 = fpext float %mul to double
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), double %conv9)
  %14 = load float, float* %meanVal, align 4
  %15 = load float*, float** %arr, align 4
  %16 = load i32, i32* %len, align 4
  %call11 = call float @variance(float %14, float* %15, i32 %16)
  %conv12 = fpext float %call11 to double
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), double %conv12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mean()

; entering Souper's runOnFunction() for variance()

; ModuleID = './Diversity_prediction_theorem.c.bc'
source_filename = "./Diversity_prediction_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"Usage : %s <reference value> <observations separated by commas>\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Average Error : %.9f\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Crowd Error : %.9f\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Diversity : %.9f\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden float @mean(float* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca float, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load float*, float** %arr.addr, align 4
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %2, i32 %3
  %4 = load float, float* %arrayidx, align 4
  %5 = load float, float* %sum, align 4
  %add = fadd float %5, %4
  store float %add, float* %sum, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load float, float* %sum, align 4
  %7 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %7 to float
  %div = fdiv float %6, %conv
  ret float %div
}

; Function Attrs: noinline nounwind optnone
define hidden float @variance(float %reference, float* %arr, i32 %size) #0 {
entry:
  %reference.addr = alloca float, align 4
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %newArr = alloca float*, align 4
  store float %reference, float* %reference.addr, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to float*
  store float* %1, float** %newArr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load float, float* %reference.addr, align 4
  %5 = load float*, float** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %5, i32 %6
  %7 = load float, float* %arrayidx, align 4
  %sub = fsub float %4, %7
  %8 = load float, float* %reference.addr, align 4
  %9 = load float*, float** %arr.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds float, float* %9, i32 %10
  %11 = load float, float* %arrayidx1, align 4
  %sub2 = fsub float %8, %11
  %mul3 = fmul float %sub, %sub2
  %12 = load float*, float** %newArr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds float, float* %12, i32 %13
  store float %mul3, float* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load float*, float** %newArr, align 4
  %16 = load i32, i32* %size.addr, align 4
  %call5 = call float @mean(float* %15, i32 %16)
  ret float %call5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden float* @extractData(i8* %str, i32* %len) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %len.addr = alloca i32*, align 4
  %arr = alloca float*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32* %len, i32** %len.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 44
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i32, i32* %count, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %count, align 4
  %mul = mul i32 %7, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %8 = bitcast i8* %call to float*
  store float* %8, float** %arr, align 4
  %9 = load i32, i32* %count, align 4
  %10 = load i32*, i32** %len.addr, align 4
  store i32 %9, i32* %10, align 4
  %11 = load i8*, i8** %str.addr, align 4
  %call7 = call i8* @strtok(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call7, i8** %token, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %while.end
  %12 = load i8*, i8** %token, align 4
  %cmp9 = icmp ne i8* %12, null
  br i1 %cmp9, label %while.body11, label %while.end17

while.body11:                                     ; preds = %while.cond8
  %13 = load i8*, i8** %token, align 4
  %call12 = call double @atof(i8* %13)
  %conv13 = fptrunc double %call12 to float
  %14 = load float*, float** %arr, align 4
  %15 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds float, float* %14, i32 %15
  store float %conv13, float* %arrayidx15, align 4
  %call16 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond8

while.end17:                                      ; preds = %while.cond8
  %16 = load float*, float** %arr, align 4
  ret float* %16
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @atof(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca float*, align 4
  %reference = alloca float, align 4
  %meanVal = alloca float, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 2
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call float* @extractData(i8* %2, i32* %len)
  store float* %call1, float** %arr, align 4
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx2, align 4
  %call3 = call double @atof(i8* %4)
  %conv = fptrunc double %call3 to float
  store float %conv, float* %reference, align 4
  %5 = load float*, float** %arr, align 4
  %6 = load i32, i32* %len, align 4
  %call4 = call float @mean(float* %5, i32 %6)
  store float %call4, float* %meanVal, align 4
  %7 = load float, float* %reference, align 4
  %8 = load float*, float** %arr, align 4
  %9 = load i32, i32* %len, align 4
  %call5 = call float @variance(float %7, float* %8, i32 %9)
  %conv6 = fpext float %call5 to double
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), double %conv6)
  %10 = load float, float* %reference, align 4
  %11 = load float, float* %meanVal, align 4
  %sub = fsub float %10, %11
  %12 = load float, float* %reference, align 4
  %13 = load float, float* %meanVal, align 4
  %sub8 = fsub float %12, %13
  %mul = fmul float %sub, %sub8
  %conv9 = fpext float %mul to double
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), double %conv9)
  %14 = load float, float* %meanVal, align 4
  %15 = load float*, float** %arr, align 4
  %16 = load i32, i32* %len, align 4
  %call11 = call float @variance(float %14, float* %15, i32 %16)
  %conv12 = fpext float %call11 to double
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), double %conv12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for variance()

; entering Souper's runOnFunction() for extractData()

; ModuleID = './Diversity_prediction_theorem.c.bc'
source_filename = "./Diversity_prediction_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"Usage : %s <reference value> <observations separated by commas>\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Average Error : %.9f\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Crowd Error : %.9f\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Diversity : %.9f\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden float @mean(float* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca float, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load float*, float** %arr.addr, align 4
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %2, i32 %3
  %4 = load float, float* %arrayidx, align 4
  %5 = load float, float* %sum, align 4
  %add = fadd float %5, %4
  store float %add, float* %sum, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load float, float* %sum, align 4
  %7 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %7 to float
  %div = fdiv float %6, %conv
  ret float %div
}

; Function Attrs: noinline nounwind optnone
define hidden float @variance(float %reference, float* %arr, i32 %size) #0 {
entry:
  %reference.addr = alloca float, align 4
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %newArr = alloca float*, align 4
  store float %reference, float* %reference.addr, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to float*
  store float* %1, float** %newArr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load float, float* %reference.addr, align 4
  %5 = load float*, float** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %5, i32 %6
  %7 = load float, float* %arrayidx, align 4
  %sub = fsub float %4, %7
  %8 = load float, float* %reference.addr, align 4
  %9 = load float*, float** %arr.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds float, float* %9, i32 %10
  %11 = load float, float* %arrayidx1, align 4
  %sub2 = fsub float %8, %11
  %mul3 = fmul float %sub, %sub2
  %12 = load float*, float** %newArr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds float, float* %12, i32 %13
  store float %mul3, float* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load float*, float** %newArr, align 4
  %16 = load i32, i32* %size.addr, align 4
  %call5 = call float @mean(float* %15, i32 %16)
  ret float %call5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden float* @extractData(i8* %str, i32* %len) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %len.addr = alloca i32*, align 4
  %arr = alloca float*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32* %len, i32** %len.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 44
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i32, i32* %count, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %count, align 4
  %mul = mul i32 %7, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %8 = bitcast i8* %call to float*
  store float* %8, float** %arr, align 4
  %9 = load i32, i32* %count, align 4
  %10 = load i32*, i32** %len.addr, align 4
  store i32 %9, i32* %10, align 4
  %11 = load i8*, i8** %str.addr, align 4
  %call7 = call i8* @strtok(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call7, i8** %token, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %while.end
  %12 = load i8*, i8** %token, align 4
  %cmp9 = icmp ne i8* %12, null
  br i1 %cmp9, label %while.body11, label %while.end17

while.body11:                                     ; preds = %while.cond8
  %13 = load i8*, i8** %token, align 4
  %call12 = call double @atof(i8* %13)
  %conv13 = fptrunc double %call12 to float
  %14 = load float*, float** %arr, align 4
  %15 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds float, float* %14, i32 %15
  store float %conv13, float* %arrayidx15, align 4
  %call16 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond8

while.end17:                                      ; preds = %while.cond8
  %16 = load float*, float** %arr, align 4
  ret float* %16
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @atof(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca float*, align 4
  %reference = alloca float, align 4
  %meanVal = alloca float, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 2
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call float* @extractData(i8* %2, i32* %len)
  store float* %call1, float** %arr, align 4
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx2, align 4
  %call3 = call double @atof(i8* %4)
  %conv = fptrunc double %call3 to float
  store float %conv, float* %reference, align 4
  %5 = load float*, float** %arr, align 4
  %6 = load i32, i32* %len, align 4
  %call4 = call float @mean(float* %5, i32 %6)
  store float %call4, float* %meanVal, align 4
  %7 = load float, float* %reference, align 4
  %8 = load float*, float** %arr, align 4
  %9 = load i32, i32* %len, align 4
  %call5 = call float @variance(float %7, float* %8, i32 %9)
  %conv6 = fpext float %call5 to double
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), double %conv6)
  %10 = load float, float* %reference, align 4
  %11 = load float, float* %meanVal, align 4
  %sub = fsub float %10, %11
  %12 = load float, float* %reference, align 4
  %13 = load float, float* %meanVal, align 4
  %sub8 = fsub float %12, %13
  %mul = fmul float %sub, %sub8
  %conv9 = fpext float %mul to double
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), double %conv9)
  %14 = load float, float* %meanVal, align 4
  %15 = load float*, float** %arr, align 4
  %16 = load i32, i32* %len, align 4
  %call11 = call float @variance(float %14, float* %15, i32 %16)
  %conv12 = fpext float %call11 to double
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), double %conv12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv3, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %7, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne i8* %12, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for extractData()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Diversity_prediction_theorem.c.bc'
source_filename = "./Diversity_prediction_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"Usage : %s <reference value> <observations separated by commas>\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Average Error : %.9f\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Crowd Error : %.9f\0A\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"Diversity : %.9f\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden float @mean(float* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca float, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  store float 0.000000e+00, float* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp ne i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load float*, float** %arr.addr, align 4
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %2, i32 %3
  %4 = load float, float* %arrayidx, align 4
  %5 = load float, float* %sum, align 4
  %add = fadd float %5, %4
  store float %add, float* %sum, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load float, float* %sum, align 4
  %7 = load i32, i32* %size.addr, align 4
  %conv = sitofp i32 %7 to float
  %div = fdiv float %6, %conv
  ret float %div
}

; Function Attrs: noinline nounwind optnone
define hidden float @variance(float %reference, float* %arr, i32 %size) #0 {
entry:
  %reference.addr = alloca float, align 4
  %arr.addr = alloca float*, align 4
  %size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %newArr = alloca float*, align 4
  store float %reference, float* %reference.addr, align 4
  store float* %arr, float** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %i, align 4
  %0 = load i32, i32* %size.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to float*
  store float* %1, float** %newArr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load float, float* %reference.addr, align 4
  %5 = load float*, float** %arr.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds float, float* %5, i32 %6
  %7 = load float, float* %arrayidx, align 4
  %sub = fsub float %4, %7
  %8 = load float, float* %reference.addr, align 4
  %9 = load float*, float** %arr.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds float, float* %9, i32 %10
  %11 = load float, float* %arrayidx1, align 4
  %sub2 = fsub float %8, %11
  %mul3 = fmul float %sub, %sub2
  %12 = load float*, float** %newArr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds float, float* %12, i32 %13
  store float %mul3, float* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load float*, float** %newArr, align 4
  %16 = load i32, i32* %size.addr, align 4
  %call5 = call float @mean(float* %15, i32 %16)
  ret float %call5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden float* @extractData(i8* %str, i32* %len) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %len.addr = alloca i32*, align 4
  %arr = alloca float*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32* %len, i32** %len.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %str.addr, align 4
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 44
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load i32, i32* %count, align 4
  %inc6 = add nsw i32 %6, 1
  store i32 %inc6, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %count, align 4
  %mul = mul i32 %7, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %8 = bitcast i8* %call to float*
  store float* %8, float** %arr, align 4
  %9 = load i32, i32* %count, align 4
  %10 = load i32*, i32** %len.addr, align 4
  store i32 %9, i32* %10, align 4
  %11 = load i8*, i8** %str.addr, align 4
  %call7 = call i8* @strtok(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call7, i8** %token, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %while.end
  %12 = load i8*, i8** %token, align 4
  %cmp9 = icmp ne i8* %12, null
  br i1 %cmp9, label %while.body11, label %while.end17

while.body11:                                     ; preds = %while.cond8
  %13 = load i8*, i8** %token, align 4
  %call12 = call double @atof(i8* %13)
  %conv13 = fptrunc double %call12 to float
  %14 = load float*, float** %arr, align 4
  %15 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %15, 1
  store i32 %inc14, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds float, float* %14, i32 %15
  store float %conv13, float* %arrayidx15, align 4
  %call16 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store i8* %call16, i8** %token, align 4
  br label %while.cond8

while.end17:                                      ; preds = %while.cond8
  %16 = load float*, float** %arr, align 4
  ret float* %16
}

declare i8* @strtok(i8* %0, i8* %1) #1

declare double @atof(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca float*, align 4
  %reference = alloca float, align 4
  %meanVal = alloca float, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 2
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call float* @extractData(i8* %2, i32* %len)
  store float* %call1, float** %arr, align 4
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx2, align 4
  %call3 = call double @atof(i8* %4)
  %conv = fptrunc double %call3 to float
  store float %conv, float* %reference, align 4
  %5 = load float*, float** %arr, align 4
  %6 = load i32, i32* %len, align 4
  %call4 = call float @mean(float* %5, i32 %6)
  store float %call4, float* %meanVal, align 4
  %7 = load float, float* %reference, align 4
  %8 = load float*, float** %arr, align 4
  %9 = load i32, i32* %len, align 4
  %call5 = call float @variance(float %7, float* %8, i32 %9)
  %conv6 = fpext float %call5 to double
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), double %conv6)
  %10 = load float, float* %reference, align 4
  %11 = load float, float* %meanVal, align 4
  %sub = fsub float %10, %11
  %12 = load float, float* %reference, align 4
  %13 = load float, float* %meanVal, align 4
  %sub8 = fsub float %12, %13
  %mul = fmul float %sub, %sub8
  %conv9 = fpext float %mul to double
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0), double %conv9)
  %14 = load float, float* %meanVal, align 4
  %15 = load float*, float** %arr, align 4
  %16 = load i32, i32* %len, align 4
  %call11 = call float @variance(float %14, float* %15, i32 %16)
  %conv12 = fpext float %call11 to double
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), double %conv12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
