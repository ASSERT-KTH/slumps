
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for vsub()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vsub()

; entering Souper's runOnFunction() for normalize()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for normalize()

; entering Souper's runOnFunction() for dot()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for dot()

; entering Souper's runOnFunction() for cross()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for cross()

; entering Souper's runOnFunction() for madd()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for madd()

; entering Souper's runOnFunction() for in_range()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %mul, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for in_range()

; entering Souper's runOnFunction() for face_hit()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = fcmp une double %3, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool9 = fcmp une double %25, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call18 = call i32 @in_range(double %27, double %30, double %33)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call27 = call i32 @in_range(double %35, double %38, double %41)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool28 = icmp ne i32 %call27, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %land.ext = zext i1 %42 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %tobool31 = fcmp une double %44, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call40 = call i32 @in_range(double %46, double %49, double %52)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne i32 %call40, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call50 = call i32 @in_range(double %54, double %57, double %60)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool51 = icmp ne i32 %call50, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %land.ext53 = zext i1 %61 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %tobool57 = fcmp une double %63, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call66 = call i32 @in_range(double %65, double %68, double %71)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool67 = icmp ne i32 %call66, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call76 = call i32 @in_range(double %73, double %76, double %79)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool77 = icmp ne i32 %call76, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %land.ext79 = zext i1 %80 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for face_hit()

; entering Souper's runOnFunction() for main()

; ModuleID = './Draw_a_cuboid.c.bc'
source_filename = "./Draw_a_cuboid.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.face_t = type { [4 x double*], [3 x double] }

@.str = private unnamed_addr constant [11 x i8] c".:!*oe&#%@\00", align 1
@shades = hidden global i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), align 4
@v000 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v100 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double -2.000000e+00], align 16
@v010 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v110 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double -2.000000e+00], align 16
@v001 = hidden global [3 x double] [double -4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v101 = hidden global [3 x double] [double 4.000000e+00, double -3.000000e+00, double 2.000000e+00], align 16
@v011 = hidden global [3 x double] [double -4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@v111 = hidden global [3 x double] [double 4.000000e+00, double 3.000000e+00, double 2.000000e+00], align 16
@f = hidden global [6 x %struct.face_t] [%struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double -1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double -1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0)], [3 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v000, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v100, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v101, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v001, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double -1.000000e+00, double 0.000000e+00] }, %struct.face_t { [4 x double*] [double* getelementptr inbounds ([3 x double], [3 x double]* @v010, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v110, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v111, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @v011, i32 0, i32 0)], [3 x double] [double 0.000000e+00, double 1.000000e+00, double 0.000000e+00] }], align 16
@__const.main.eye = private unnamed_addr constant [3 x double] [double 7.000000e+00, double 7.000000e+00, double 6.000000e+00], align 16
@__const.main.dir = private unnamed_addr constant [3 x double] [double -1.000000e+00, double -1.000000e+00, double -1.000000e+00], align 16
@__const.main.dy = private unnamed_addr constant [3 x double] [double 0.000000e+00, double 0.000000e+00, double 1.000000e+00], align 16
@__const.main.light = private unnamed_addr constant [3 x double] [double 6.000000e+00, double 8.000000e+00, double 6.000000e+00], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @vsub(double* %v1, double* %v2, double* %s) #0 {
entry:
  %v1.addr = alloca double*, align 4
  %v2.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %v1, double** %v1.addr, align 4
  store double* %v2, double** %v2.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %v1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v2.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %sub = fsub double %1, %3
  %4 = load double*, double** %s.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 0
  store double %sub, double* %arrayidx2, align 8
  %5 = load double*, double** %v1.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx3, align 8
  %7 = load double*, double** %v2.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 1
  %8 = load double, double* %arrayidx4, align 8
  %sub5 = fsub double %6, %8
  %9 = load double*, double** %s.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 1
  store double %sub5, double* %arrayidx6, align 8
  %10 = load double*, double** %v1.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double*, double** %v2.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %sub9 = fsub double %11, %13
  %14 = load double*, double** %s.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %14, i32 2
  store double %sub9, double* %arrayidx10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @normalize(double* %v) #0 {
entry:
  %v.addr = alloca double*, align 4
  %len = alloca double, align 8
  store double* %v, double** %v.addr, align 4
  %0 = load double*, double** %v.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %v.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %v.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %v.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %v.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %v.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  %12 = call double @llvm.sqrt.f64(double %add8)
  store double %12, double* %len, align 8
  %13 = load double, double* %len, align 8
  %14 = load double*, double** %v.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 0
  %15 = load double, double* %arrayidx9, align 8
  %div = fdiv double %15, %13
  store double %div, double* %arrayidx9, align 8
  %16 = load double, double* %len, align 8
  %17 = load double*, double** %v.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %17, i32 1
  %18 = load double, double* %arrayidx10, align 8
  %div11 = fdiv double %18, %16
  store double %div11, double* %arrayidx10, align 8
  %19 = load double, double* %len, align 8
  %20 = load double*, double** %v.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %20, i32 2
  %21 = load double, double* %arrayidx12, align 8
  %div13 = fdiv double %21, %19
  store double %div13, double* %arrayidx12, align 8
  %22 = load double, double* %len, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dot(double* %x, double* %y) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 1
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %add = fadd double %mul, %mul4
  %8 = load double*, double** %x.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 2
  %9 = load double, double* %arrayidx5, align 8
  %10 = load double*, double** %y.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %10, i32 2
  %11 = load double, double* %arrayidx6, align 8
  %mul7 = fmul double %9, %11
  %add8 = fadd double %add, %mul7
  ret double %add8
}

; Function Attrs: noinline nounwind optnone
define hidden double* @cross(double* %x, double* %y, double* %s) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 1
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 2
  %3 = load double, double* %arrayidx1, align 8
  %mul = fmul double %1, %3
  %4 = load double*, double** %x.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %4, i32 2
  %5 = load double, double* %arrayidx2, align 8
  %6 = load double*, double** %y.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %mul4 = fmul double %5, %7
  %sub = fsub double %mul, %mul4
  %8 = load double*, double** %s.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %8, i32 0
  store double %sub, double* %arrayidx5, align 8
  %9 = load double*, double** %x.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %9, i32 2
  %10 = load double, double* %arrayidx6, align 8
  %11 = load double*, double** %y.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 0
  %12 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %10, %12
  %13 = load double*, double** %x.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %13, i32 0
  %14 = load double, double* %arrayidx9, align 8
  %15 = load double*, double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double, double* %15, i32 2
  %16 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %14, %16
  %sub12 = fsub double %mul8, %mul11
  %17 = load double*, double** %s.addr, align 4
  %arrayidx13 = getelementptr inbounds double, double* %17, i32 1
  store double %sub12, double* %arrayidx13, align 8
  %18 = load double*, double** %x.addr, align 4
  %arrayidx14 = getelementptr inbounds double, double* %18, i32 0
  %19 = load double, double* %arrayidx14, align 8
  %20 = load double*, double** %y.addr, align 4
  %arrayidx15 = getelementptr inbounds double, double* %20, i32 1
  %21 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %19, %21
  %22 = load double*, double** %x.addr, align 4
  %arrayidx17 = getelementptr inbounds double, double* %22, i32 1
  %23 = load double, double* %arrayidx17, align 8
  %24 = load double*, double** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds double, double* %24, i32 0
  %25 = load double, double* %arrayidx18, align 8
  %mul19 = fmul double %23, %25
  %sub20 = fsub double %mul16, %mul19
  %26 = load double*, double** %s.addr, align 4
  %arrayidx21 = getelementptr inbounds double, double* %26, i32 2
  store double %sub20, double* %arrayidx21, align 8
  %27 = load double*, double** %s.addr, align 4
  ret double* %27
}

; Function Attrs: noinline nounwind optnone
define hidden double* @madd(double* %x, double* %y, double %d, double* %r) #0 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %d.addr = alloca double, align 8
  %r.addr = alloca double*, align 4
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store double %d, double* %d.addr, align 8
  store double* %r, double** %r.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %0, i32 0
  %1 = load double, double* %arrayidx, align 8
  %2 = load double*, double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %2, i32 0
  %3 = load double, double* %arrayidx1, align 8
  %4 = load double, double* %d.addr, align 8
  %mul = fmul double %3, %4
  %add = fadd double %1, %mul
  %5 = load double*, double** %r.addr, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 0
  store double %add, double* %arrayidx2, align 8
  %6 = load double*, double** %x.addr, align 4
  %arrayidx3 = getelementptr inbounds double, double* %6, i32 1
  %7 = load double, double* %arrayidx3, align 8
  %8 = load double*, double** %y.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %8, i32 1
  %9 = load double, double* %arrayidx4, align 8
  %10 = load double, double* %d.addr, align 8
  %mul5 = fmul double %9, %10
  %add6 = fadd double %7, %mul5
  %11 = load double*, double** %r.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %11, i32 1
  store double %add6, double* %arrayidx7, align 8
  %12 = load double*, double** %x.addr, align 4
  %arrayidx8 = getelementptr inbounds double, double* %12, i32 2
  %13 = load double, double* %arrayidx8, align 8
  %14 = load double*, double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 2
  %15 = load double, double* %arrayidx9, align 8
  %16 = load double, double* %d.addr, align 8
  %mul10 = fmul double %15, %16
  %add11 = fadd double %13, %mul10
  %17 = load double*, double** %r.addr, align 4
  %arrayidx12 = getelementptr inbounds double, double* %17, i32 2
  store double %add11, double* %arrayidx12, align 8
  %18 = load double*, double** %r.addr, align 4
  ret double* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_range(double %x, double %x0, double %x1) #0 {
entry:
  %x.addr = alloca double, align 8
  %x0.addr = alloca double, align 8
  %x1.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %x1, double* %x1.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %x0.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %x1.addr, align 8
  %sub1 = fsub double %2, %3
  %mul = fmul double %sub, %sub1
  %cmp = fcmp ole double %mul, 0.000000e+00
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @face_hit(%struct.face_t* %face, double* %src, double* %dir, double* %hit, double* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %face.addr = alloca %struct.face_t*, align 4
  %src.addr = alloca double*, align 4
  %dir.addr = alloca double*, align 4
  %hit.addr = alloca double*, align 4
  %d.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %dist = alloca double, align 8
  store %struct.face_t* %face, %struct.face_t** %face.addr, align 4
  store double* %src, double** %src.addr, align 4
  store double* %dir, double** %dir.addr, align 4
  store double* %hit, double** %hit.addr, align 4
  store double* %d, double** %d.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm = getelementptr inbounds %struct.face_t, %struct.face_t* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %norm, i32 0, i32 %2
  %3 = load double, double* %arrayidx, align 8
  %tobool = fcmp une double %3, 0.000000e+00
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v = getelementptr inbounds %struct.face_t, %struct.face_t* %4, i32 0, i32 0
  %arrayidx1 = getelementptr inbounds [4 x double*], [4 x double*]* %v, i32 0, i32 0
  %5 = load double*, double** %arrayidx1, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double, double* %5, i32 %6
  %7 = load double, double* %arrayidx2, align 8
  %8 = load double*, double** %src.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %8, i32 %9
  %10 = load double, double* %arrayidx3, align 8
  %sub = fsub double %7, %10
  %11 = load double*, double** %dir.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx4, align 8
  %div = fdiv double %sub, %13
  store double %div, double* %dist, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double*, double** %src.addr, align 4
  %16 = load double*, double** %dir.addr, align 4
  %17 = load double, double* %dist, align 8
  %18 = load double*, double** %hit.addr, align 4
  %call = call double* @madd(double* %15, double* %16, double %17, double* %18)
  %19 = load double*, double** %dir.addr, align 4
  %20 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm5 = getelementptr inbounds %struct.face_t, %struct.face_t* %20, i32 0, i32 1
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %norm5, i32 0, i32 0
  %call6 = call double @dot(double* %19, double* %arraydecay)
  %21 = load double, double* %dist, align 8
  %mul = fmul double %call6, %21
  %22 = call double @llvm.fabs.f64(double %mul)
  %23 = load double*, double** %d.addr, align 4
  store double %22, double* %23, align 8
  %24 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm7 = getelementptr inbounds %struct.face_t, %struct.face_t* %24, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [3 x double], [3 x double]* %norm7, i32 0, i32 0
  %25 = load double, double* %arrayidx8, align 8
  %tobool9 = fcmp une double %25, 0.000000e+00
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %for.end
  %26 = load double*, double** %hit.addr, align 4
  %arrayidx11 = getelementptr inbounds double, double* %26, i32 1
  %27 = load double, double* %arrayidx11, align 8
  %28 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v12 = getelementptr inbounds %struct.face_t, %struct.face_t* %28, i32 0, i32 0
  %arrayidx13 = getelementptr inbounds [4 x double*], [4 x double*]* %v12, i32 0, i32 0
  %29 = load double*, double** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds double, double* %29, i32 1
  %30 = load double, double* %arrayidx14, align 8
  %31 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v15 = getelementptr inbounds %struct.face_t, %struct.face_t* %31, i32 0, i32 0
  %arrayidx16 = getelementptr inbounds [4 x double*], [4 x double*]* %v15, i32 0, i32 2
  %32 = load double*, double** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds double, double* %32, i32 1
  %33 = load double, double* %arrayidx17, align 8
  %call18 = call i32 @in_range(double %27, double %30, double %33)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then10
  %34 = load double*, double** %hit.addr, align 4
  %arrayidx20 = getelementptr inbounds double, double* %34, i32 2
  %35 = load double, double* %arrayidx20, align 8
  %36 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v21 = getelementptr inbounds %struct.face_t, %struct.face_t* %36, i32 0, i32 0
  %arrayidx22 = getelementptr inbounds [4 x double*], [4 x double*]* %v21, i32 0, i32 0
  %37 = load double*, double** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds double, double* %37, i32 2
  %38 = load double, double* %arrayidx23, align 8
  %39 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v24 = getelementptr inbounds %struct.face_t, %struct.face_t* %39, i32 0, i32 0
  %arrayidx25 = getelementptr inbounds [4 x double*], [4 x double*]* %v24, i32 0, i32 2
  %40 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %40, i32 2
  %41 = load double, double* %arrayidx26, align 8
  %call27 = call i32 @in_range(double %35, double %38, double %41)
  %tobool28 = icmp ne i32 %call27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then10
  %42 = phi i1 [ false, %if.then10 ], [ %tobool28, %land.rhs ]
  %land.ext = zext i1 %42 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %for.end
  %43 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm29 = getelementptr inbounds %struct.face_t, %struct.face_t* %43, i32 0, i32 1
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %norm29, i32 0, i32 1
  %44 = load double, double* %arrayidx30, align 8
  %tobool31 = fcmp une double %44, 0.000000e+00
  br i1 %tobool31, label %if.then32, label %if.else54

if.then32:                                        ; preds = %if.else
  %45 = load double*, double** %hit.addr, align 4
  %arrayidx33 = getelementptr inbounds double, double* %45, i32 0
  %46 = load double, double* %arrayidx33, align 8
  %47 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v34 = getelementptr inbounds %struct.face_t, %struct.face_t* %47, i32 0, i32 0
  %arrayidx35 = getelementptr inbounds [4 x double*], [4 x double*]* %v34, i32 0, i32 0
  %48 = load double*, double** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds double, double* %48, i32 0
  %49 = load double, double* %arrayidx36, align 8
  %50 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v37 = getelementptr inbounds %struct.face_t, %struct.face_t* %50, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [4 x double*], [4 x double*]* %v37, i32 0, i32 2
  %51 = load double*, double** %arrayidx38, align 8
  %arrayidx39 = getelementptr inbounds double, double* %51, i32 0
  %52 = load double, double* %arrayidx39, align 8
  %call40 = call i32 @in_range(double %46, double %49, double %52)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %land.rhs42, label %land.end52

land.rhs42:                                       ; preds = %if.then32
  %53 = load double*, double** %hit.addr, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 2
  %54 = load double, double* %arrayidx43, align 8
  %55 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v44 = getelementptr inbounds %struct.face_t, %struct.face_t* %55, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [4 x double*], [4 x double*]* %v44, i32 0, i32 0
  %56 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %56, i32 2
  %57 = load double, double* %arrayidx46, align 8
  %58 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v47 = getelementptr inbounds %struct.face_t, %struct.face_t* %58, i32 0, i32 0
  %arrayidx48 = getelementptr inbounds [4 x double*], [4 x double*]* %v47, i32 0, i32 2
  %59 = load double*, double** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds double, double* %59, i32 2
  %60 = load double, double* %arrayidx49, align 8
  %call50 = call i32 @in_range(double %54, double %57, double %60)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end52

land.end52:                                       ; preds = %land.rhs42, %if.then32
  %61 = phi i1 [ false, %if.then32 ], [ %tobool51, %land.rhs42 ]
  %land.ext53 = zext i1 %61 to i32
  store i32 %land.ext53, i32* %retval, align 4
  br label %return

if.else54:                                        ; preds = %if.else
  %62 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %norm55 = getelementptr inbounds %struct.face_t, %struct.face_t* %62, i32 0, i32 1
  %arrayidx56 = getelementptr inbounds [3 x double], [3 x double]* %norm55, i32 0, i32 2
  %63 = load double, double* %arrayidx56, align 8
  %tobool57 = fcmp une double %63, 0.000000e+00
  br i1 %tobool57, label %if.then58, label %if.end80

if.then58:                                        ; preds = %if.else54
  %64 = load double*, double** %hit.addr, align 4
  %arrayidx59 = getelementptr inbounds double, double* %64, i32 0
  %65 = load double, double* %arrayidx59, align 8
  %66 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v60 = getelementptr inbounds %struct.face_t, %struct.face_t* %66, i32 0, i32 0
  %arrayidx61 = getelementptr inbounds [4 x double*], [4 x double*]* %v60, i32 0, i32 0
  %67 = load double*, double** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds double, double* %67, i32 0
  %68 = load double, double* %arrayidx62, align 8
  %69 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v63 = getelementptr inbounds %struct.face_t, %struct.face_t* %69, i32 0, i32 0
  %arrayidx64 = getelementptr inbounds [4 x double*], [4 x double*]* %v63, i32 0, i32 2
  %70 = load double*, double** %arrayidx64, align 8
  %arrayidx65 = getelementptr inbounds double, double* %70, i32 0
  %71 = load double, double* %arrayidx65, align 8
  %call66 = call i32 @in_range(double %65, double %68, double %71)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.rhs68, label %land.end78

land.rhs68:                                       ; preds = %if.then58
  %72 = load double*, double** %hit.addr, align 4
  %arrayidx69 = getelementptr inbounds double, double* %72, i32 1
  %73 = load double, double* %arrayidx69, align 8
  %74 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v70 = getelementptr inbounds %struct.face_t, %struct.face_t* %74, i32 0, i32 0
  %arrayidx71 = getelementptr inbounds [4 x double*], [4 x double*]* %v70, i32 0, i32 0
  %75 = load double*, double** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds double, double* %75, i32 1
  %76 = load double, double* %arrayidx72, align 8
  %77 = load %struct.face_t*, %struct.face_t** %face.addr, align 4
  %v73 = getelementptr inbounds %struct.face_t, %struct.face_t* %77, i32 0, i32 0
  %arrayidx74 = getelementptr inbounds [4 x double*], [4 x double*]* %v73, i32 0, i32 2
  %78 = load double*, double** %arrayidx74, align 8
  %arrayidx75 = getelementptr inbounds double, double* %78, i32 1
  %79 = load double, double* %arrayidx75, align 8
  %call76 = call i32 @in_range(double %73, double %76, double %79)
  %tobool77 = icmp ne i32 %call76, 0
  br label %land.end78

land.end78:                                       ; preds = %land.rhs68, %if.then58
  %80 = phi i1 [ false, %if.then58 ], [ %tobool77, %land.rhs68 ]
  %land.ext79 = zext i1 %80 to i32
  store i32 %land.ext79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.else54
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82

if.end82:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end82, %land.end78, %land.end52, %land.end
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %eye = alloca [3 x double], align 16
  %dir = alloca [3 x double], align 16
  %orig = alloca [3 x double], align 16
  %hit = alloca [3 x double], align 16
  %dx = alloca [3 x double], align 16
  %dy = alloca [3 x double], align 16
  %proj = alloca [3 x double], align 16
  %d = alloca double, align 8
  %norm = alloca double*, align 4
  %dbest = alloca double, align 8
  %b = alloca double, align 8
  %light = alloca [3 x double], align 16
  %ldist = alloca [3 x double], align 16
  %decay = alloca double, align 8
  %strength = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x double]* %eye to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x double]* @__const.main.eye to i8*), i32 24, i1 false)
  %1 = bitcast [3 x double]* %dir to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([3 x double]* @__const.main.dir to i8*), i32 24, i1 false)
  %2 = bitcast [3 x double]* %orig to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %2, i8 0, i32 24, i1 false)
  %3 = bitcast [3 x double]* %dy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 bitcast ([3 x double]* @__const.main.dy to i8*), i32 24, i1 false)
  %4 = bitcast [3 x double]* %light to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %4, i8* align 16 bitcast ([3 x double]* @__const.main.light to i8*), i32 24, i1 false)
  store double 1.000000e+01, double* %strength, align 8
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %call = call double* @cross(double* %arraydecay, double* %arraydecay1, double* %arraydecay2)
  %call3 = call double @normalize(double* %call)
  %arraydecay4 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %call7 = call double* @cross(double* %arraydecay4, double* %arraydecay5, double* %arraydecay6)
  %call8 = call double @normalize(double* %call7)
  store i32 -10, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc75, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %5, 17
  br i1 %cmp, label %for.body, label %for.end77

for.body:                                         ; preds = %for.cond
  store i32 -35, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc71, %for.body
  %6 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %6, 35
  br i1 %cmp10, label %for.body11, label %for.end73

for.body11:                                       ; preds = %for.cond9
  %arraydecay12 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x double], [3 x double]* %orig, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  call void @vsub(double* %arraydecay12, double* %arraydecay13, double* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [3 x double], [3 x double]* %dx, i32 0, i32 0
  %7 = load i32, i32* %j, align 4
  %conv = sitofp i32 %7 to double
  %div = fdiv double %conv, 6.000000e+00
  %arraydecay17 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call18 = call double* @madd(double* %arraydecay15, double* %arraydecay16, double %div, double* %arraydecay17)
  %arraydecay19 = getelementptr inbounds [3 x double], [3 x double]* %dy, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %conv20 = sitofp i32 %8 to double
  %div21 = fdiv double %conv20, 3.000000e+00
  %arraydecay22 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %call23 = call double* @madd(double* %call18, double* %arraydecay19, double %div21, double* %arraydecay22)
  %arraydecay24 = getelementptr inbounds [3 x double], [3 x double]* %proj, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  call void @vsub(double* %arraydecay24, double* %arraydecay25, double* %arraydecay26)
  store double 1.000000e+100, double* %dbest, align 8
  store double* null, double** %norm, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body11
  %9 = load i32, i32* %k, align 4
  %cmp28 = icmp slt i32 %9, 6
  br i1 %cmp28, label %for.body30, label %for.end

for.body30:                                       ; preds = %for.cond27
  %10 = load i32, i32* %k, align 4
  %add.ptr = getelementptr inbounds %struct.face_t, %struct.face_t* getelementptr inbounds ([6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 0), i32 %10
  %arraydecay31 = getelementptr inbounds [3 x double], [3 x double]* %eye, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [3 x double], [3 x double]* %dir, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
  %tobool = icmp ne i32 %call34, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body30
  br label %for.inc

if.end:                                           ; preds = %for.body30
  %11 = load double, double* %dbest, align 8
  %12 = load double, double* %d, align 8
  %cmp35 = fcmp ogt double %11, %12
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end
  %13 = load double, double* %d, align 8
  store double %13, double* %dbest, align 8
  %14 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.face_t], [6 x %struct.face_t]* @f, i32 0, i32 %14
  %norm38 = getelementptr inbounds %struct.face_t, %struct.face_t* %arrayidx, i32 0, i32 1
  %arraydecay39 = getelementptr inbounds [3 x double], [3 x double]* %norm38, i32 0, i32 0
  store double* %arraydecay39, double** %norm, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then
  %15 = load i32, i32* %k, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %16 = load double*, double** %norm, align 4
  %tobool41 = icmp ne double* %16, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %for.end
  %call43 = call i32 @putchar(i32 32)
  br label %for.inc71

if.end44:                                         ; preds = %for.end
  %arraydecay45 = getelementptr inbounds [3 x double], [3 x double]* %light, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [3 x double], [3 x double]* %hit, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  call void @vsub(double* %arraydecay45, double* %arraydecay46, double* %arraydecay47)
  %arraydecay48 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call49 = call double @normalize(double* %arraydecay48)
  store double %call49, double* %decay, align 8
  %17 = load double*, double** %norm, align 4
  %arraydecay50 = getelementptr inbounds [3 x double], [3 x double]* %ldist, i32 0, i32 0
  %call51 = call double @dot(double* %17, double* %arraydecay50)
  %18 = load double, double* %decay, align 8
  %div52 = fdiv double %call51, %18
  %19 = load double, double* %strength, align 8
  %mul = fmul double %div52, %19
  store double %mul, double* %b, align 8
  %20 = load double, double* %b, align 8
  %cmp53 = fcmp olt double %20, 0.000000e+00
  br i1 %cmp53, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end44
  store double 0.000000e+00, double* %b, align 8
  br label %if.end60

if.else:                                          ; preds = %if.end44
  %21 = load double, double* %b, align 8
  %cmp56 = fcmp ogt double %21, 1.000000e+00
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.else
  store double 1.000000e+00, double* %b, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then55
  %22 = load double, double* %b, align 8
  %add = fadd double %22, 2.000000e-01
  store double %add, double* %b, align 8
  %23 = load double, double* %b, align 8
  %cmp61 = fcmp ogt double %23, 1.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %if.end60
  store double 0.000000e+00, double* %b, align 8
  br label %if.end65

if.else64:                                        ; preds = %if.end60
  %24 = load double, double* %b, align 8
  %sub = fsub double 1.000000e+00, %24
  store double %sub, double* %b, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  %25 = load i8*, i8** @shades, align 4
  %26 = load double, double* %b, align 8
  %mul66 = fmul double %26, 2.000000e+00
  %conv67 = fptosi double %mul66 to i32
  %arrayidx68 = getelementptr inbounds i8, i8* %25, i32 %conv67
  %27 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %27 to i32
  %call70 = call i32 @putchar(i32 %conv69)
  br label %for.inc71

for.inc71:                                        ; preds = %if.end65, %if.then42
  %28 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %28, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond9

for.end73:                                        ; preds = %for.cond9
  %call74 = call i32 @putchar(i32 10)
  br label %for.inc75

for.inc75:                                        ; preds = %for.end73
  %29 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %29, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond

for.end77:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @putchar(i32 %0) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %5, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %6, 35
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 35:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %9, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call34 = call i32 @face_hit(%struct.face_t* %add.ptr, double* %arraydecay31, double* %arraydecay32, double* %arraydecay33, double* %d)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp35 = fcmp ogt double %11, %12
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne double* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp53 = fcmp olt double %20, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp56 = fcmp ogt double %21, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp61 = fcmp ogt double %23, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv67 = fptosi double %mul66 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx68, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv69 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc72 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc76 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 17:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 35:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
