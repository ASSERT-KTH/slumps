
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for pascal_low()

; ModuleID = './Pascal_matrix_generation.c.bc'
source_filename = "./Pascal_matrix_generation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"=== Pascal upper matrix ===\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%4d%c\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"=== Pascal lower matrix ===\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"=== Pascal symmetric matrix ===\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_low(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp slt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %j, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %sub15 = sub nsw i32 %23, 1
  %arrayidx16 = getelementptr inbounds i32*, i32** %22, i32 %sub15
  %24 = load i32*, i32** %arrayidx16, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_upp(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp sgt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %i, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32*, i32** %22, i32 %23
  %24 = load i32*, i32** %arrayidx15, align 4
  %25 = load i32, i32* %j, align 4
  %sub16 = sub nsw i32 %25, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %sub16
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_sym(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body3
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp eq i32 %5, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 1, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i32**, i32*** %mat.addr, align 4
  %11 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx7 = getelementptr inbounds i32*, i32** %10, i32 %sub
  %12 = load i32*, i32** %arrayidx7, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx8, align 4
  %15 = load i32**, i32*** %mat.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %18, 1
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i32 %sub10
  %19 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %14, %19
  %20 = load i32**, i32*** %mat.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32*, i32** %20, i32 %21
  %22 = load i32*, i32** %arrayidx12, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %add, i32* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %25, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %mat = alloca i32**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 5, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 4)
  %1 = bitcast i8* %call to i32**
  store i32** %1, i32*** %mat, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n, align 4
  %call1 = call noalias i8* @calloc(i32 %4, i32 4)
  %5 = bitcast i8* %call1 to i32*
  %6 = load i32**, i32*** %mat, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  store i32* %5, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  %9 = load i32**, i32*** %mat, align 4
  %10 = load i32, i32* %n, align 4
  call void @pascal_upp(i32** %9, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc16, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end18

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc13, %for.body5
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end15

for.body8:                                        ; preds = %for.cond6
  %15 = load i32**, i32*** %mat, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %21, 1
  %cmp11 = icmp slt i32 %20, %sub
  %22 = zext i1 %cmp11 to i64
  %cond = select i1 %cmp11, i32 32, i32 10
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %cond)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body8
  %23 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %23, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond6

for.end15:                                        ; preds = %for.cond6
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %24 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %24, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond3

for.end18:                                        ; preds = %for.cond3
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i32 0, i32 0))
  %25 = load i32**, i32*** %mat, align 4
  %26 = load i32, i32* %n, align 4
  call void @pascal_low(i32** %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %for.end18
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n, align 4
  %cmp21 = icmp slt i32 %27, %28
  br i1 %cmp21, label %for.body22, label %for.end37

for.body22:                                       ; preds = %for.cond20
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc32, %for.body22
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %n, align 4
  %cmp24 = icmp slt i32 %29, %30
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %31 = load i32**, i32*** %mat, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32*, i32** %31, i32 %32
  %33 = load i32*, i32** %arrayidx26, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %n, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %38 = zext i1 %cmp29 to i64
  %cond30 = select i1 %cmp29, i32 32, i32 10
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %cond30)
  br label %for.inc32

for.inc32:                                        ; preds = %for.body25
  %39 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %39, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %40 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %40, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %for.cond20
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0))
  %41 = load i32**, i32*** %mat, align 4
  %42 = load i32, i32* %n, align 4
  call void @pascal_sym(i32** %41, i32 %42)
  store i32 0, i32* %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc54, %for.end37
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n, align 4
  %cmp40 = icmp slt i32 %43, %44
  br i1 %cmp40, label %for.body41, label %for.end56

for.body41:                                       ; preds = %for.cond39
  store i32 0, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc51, %for.body41
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %n, align 4
  %cmp43 = icmp slt i32 %45, %46
  br i1 %cmp43, label %for.body44, label %for.end53

for.body44:                                       ; preds = %for.cond42
  %47 = load i32**, i32*** %mat, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i32*, i32** %47, i32 %48
  %49 = load i32*, i32** %arrayidx45, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %n, align 4
  %sub47 = sub nsw i32 %53, 1
  %cmp48 = icmp slt i32 %52, %sub47
  %54 = zext i1 %cmp48 to i64
  %cond49 = select i1 %cmp48, i32 32, i32 10
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %51, i32 %cond49)
  br label %for.inc51

for.inc51:                                        ; preds = %for.body44
  %55 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %55, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond42

for.end53:                                        ; preds = %for.cond42
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %56 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %56, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond39

for.end56:                                        ; preds = %for.cond39
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %21, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pascal_low()

; entering Souper's runOnFunction() for pascal_upp()

; ModuleID = './Pascal_matrix_generation.c.bc'
source_filename = "./Pascal_matrix_generation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"=== Pascal upper matrix ===\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%4d%c\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"=== Pascal lower matrix ===\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"=== Pascal symmetric matrix ===\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_low(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp slt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %j, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %sub15 = sub nsw i32 %23, 1
  %arrayidx16 = getelementptr inbounds i32*, i32** %22, i32 %sub15
  %24 = load i32*, i32** %arrayidx16, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_upp(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp sgt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %i, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32*, i32** %22, i32 %23
  %24 = load i32*, i32** %arrayidx15, align 4
  %25 = load i32, i32* %j, align 4
  %sub16 = sub nsw i32 %25, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %sub16
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_sym(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body3
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp eq i32 %5, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 1, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i32**, i32*** %mat.addr, align 4
  %11 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx7 = getelementptr inbounds i32*, i32** %10, i32 %sub
  %12 = load i32*, i32** %arrayidx7, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx8, align 4
  %15 = load i32**, i32*** %mat.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %18, 1
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i32 %sub10
  %19 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %14, %19
  %20 = load i32**, i32*** %mat.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32*, i32** %20, i32 %21
  %22 = load i32*, i32** %arrayidx12, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %add, i32* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %25, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %mat = alloca i32**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 5, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 4)
  %1 = bitcast i8* %call to i32**
  store i32** %1, i32*** %mat, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n, align 4
  %call1 = call noalias i8* @calloc(i32 %4, i32 4)
  %5 = bitcast i8* %call1 to i32*
  %6 = load i32**, i32*** %mat, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  store i32* %5, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  %9 = load i32**, i32*** %mat, align 4
  %10 = load i32, i32* %n, align 4
  call void @pascal_upp(i32** %9, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc16, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end18

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc13, %for.body5
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end15

for.body8:                                        ; preds = %for.cond6
  %15 = load i32**, i32*** %mat, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %21, 1
  %cmp11 = icmp slt i32 %20, %sub
  %22 = zext i1 %cmp11 to i64
  %cond = select i1 %cmp11, i32 32, i32 10
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %cond)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body8
  %23 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %23, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond6

for.end15:                                        ; preds = %for.cond6
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %24 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %24, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond3

for.end18:                                        ; preds = %for.cond3
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i32 0, i32 0))
  %25 = load i32**, i32*** %mat, align 4
  %26 = load i32, i32* %n, align 4
  call void @pascal_low(i32** %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %for.end18
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n, align 4
  %cmp21 = icmp slt i32 %27, %28
  br i1 %cmp21, label %for.body22, label %for.end37

for.body22:                                       ; preds = %for.cond20
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc32, %for.body22
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %n, align 4
  %cmp24 = icmp slt i32 %29, %30
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %31 = load i32**, i32*** %mat, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32*, i32** %31, i32 %32
  %33 = load i32*, i32** %arrayidx26, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %n, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %38 = zext i1 %cmp29 to i64
  %cond30 = select i1 %cmp29, i32 32, i32 10
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %cond30)
  br label %for.inc32

for.inc32:                                        ; preds = %for.body25
  %39 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %39, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %40 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %40, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %for.cond20
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0))
  %41 = load i32**, i32*** %mat, align 4
  %42 = load i32, i32* %n, align 4
  call void @pascal_sym(i32** %41, i32 %42)
  store i32 0, i32* %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc54, %for.end37
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n, align 4
  %cmp40 = icmp slt i32 %43, %44
  br i1 %cmp40, label %for.body41, label %for.end56

for.body41:                                       ; preds = %for.cond39
  store i32 0, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc51, %for.body41
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %n, align 4
  %cmp43 = icmp slt i32 %45, %46
  br i1 %cmp43, label %for.body44, label %for.end53

for.body44:                                       ; preds = %for.cond42
  %47 = load i32**, i32*** %mat, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i32*, i32** %47, i32 %48
  %49 = load i32*, i32** %arrayidx45, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %n, align 4
  %sub47 = sub nsw i32 %53, 1
  %cmp48 = icmp slt i32 %52, %sub47
  %54 = zext i1 %cmp48 to i64
  %cond49 = select i1 %cmp48, i32 32, i32 10
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %51, i32 %cond49)
  br label %for.inc51

for.inc51:                                        ; preds = %for.body44
  %55 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %55, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond42

for.end53:                                        ; preds = %for.cond42
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %56 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %56, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond39

for.end56:                                        ; preds = %for.cond39
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp eq i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub16 = sub nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %21, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for pascal_upp()

; entering Souper's runOnFunction() for pascal_sym()

; ModuleID = './Pascal_matrix_generation.c.bc'
source_filename = "./Pascal_matrix_generation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"=== Pascal upper matrix ===\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%4d%c\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"=== Pascal lower matrix ===\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"=== Pascal symmetric matrix ===\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_low(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp slt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %j, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %sub15 = sub nsw i32 %23, 1
  %arrayidx16 = getelementptr inbounds i32*, i32** %22, i32 %sub15
  %24 = load i32*, i32** %arrayidx16, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_upp(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp sgt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %i, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32*, i32** %22, i32 %23
  %24 = load i32*, i32** %arrayidx15, align 4
  %25 = load i32, i32* %j, align 4
  %sub16 = sub nsw i32 %25, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %sub16
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_sym(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body3
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp eq i32 %5, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 1, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i32**, i32*** %mat.addr, align 4
  %11 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx7 = getelementptr inbounds i32*, i32** %10, i32 %sub
  %12 = load i32*, i32** %arrayidx7, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx8, align 4
  %15 = load i32**, i32*** %mat.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %18, 1
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i32 %sub10
  %19 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %14, %19
  %20 = load i32**, i32*** %mat.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32*, i32** %20, i32 %21
  %22 = load i32*, i32** %arrayidx12, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %add, i32* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %25, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %mat = alloca i32**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 5, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 4)
  %1 = bitcast i8* %call to i32**
  store i32** %1, i32*** %mat, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n, align 4
  %call1 = call noalias i8* @calloc(i32 %4, i32 4)
  %5 = bitcast i8* %call1 to i32*
  %6 = load i32**, i32*** %mat, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  store i32* %5, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  %9 = load i32**, i32*** %mat, align 4
  %10 = load i32, i32* %n, align 4
  call void @pascal_upp(i32** %9, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc16, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end18

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc13, %for.body5
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end15

for.body8:                                        ; preds = %for.cond6
  %15 = load i32**, i32*** %mat, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %21, 1
  %cmp11 = icmp slt i32 %20, %sub
  %22 = zext i1 %cmp11 to i64
  %cond = select i1 %cmp11, i32 32, i32 10
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %cond)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body8
  %23 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %23, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond6

for.end15:                                        ; preds = %for.cond6
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %24 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %24, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond3

for.end18:                                        ; preds = %for.cond3
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i32 0, i32 0))
  %25 = load i32**, i32*** %mat, align 4
  %26 = load i32, i32* %n, align 4
  call void @pascal_low(i32** %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %for.end18
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n, align 4
  %cmp21 = icmp slt i32 %27, %28
  br i1 %cmp21, label %for.body22, label %for.end37

for.body22:                                       ; preds = %for.cond20
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc32, %for.body22
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %n, align 4
  %cmp24 = icmp slt i32 %29, %30
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %31 = load i32**, i32*** %mat, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32*, i32** %31, i32 %32
  %33 = load i32*, i32** %arrayidx26, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %n, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %38 = zext i1 %cmp29 to i64
  %cond30 = select i1 %cmp29, i32 32, i32 10
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %cond30)
  br label %for.inc32

for.inc32:                                        ; preds = %for.body25
  %39 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %39, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %40 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %40, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %for.cond20
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0))
  %41 = load i32**, i32*** %mat, align 4
  %42 = load i32, i32* %n, align 4
  call void @pascal_sym(i32** %41, i32 %42)
  store i32 0, i32* %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc54, %for.end37
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n, align 4
  %cmp40 = icmp slt i32 %43, %44
  br i1 %cmp40, label %for.body41, label %for.end56

for.body41:                                       ; preds = %for.cond39
  store i32 0, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc51, %for.body41
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %n, align 4
  %cmp43 = icmp slt i32 %45, %46
  br i1 %cmp43, label %for.body44, label %for.end53

for.body44:                                       ; preds = %for.cond42
  %47 = load i32**, i32*** %mat, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i32*, i32** %47, i32 %48
  %49 = load i32*, i32** %arrayidx45, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %n, align 4
  %sub47 = sub nsw i32 %53, 1
  %cmp48 = icmp slt i32 %52, %sub47
  %54 = zext i1 %cmp48 to i64
  %cond49 = select i1 %cmp48, i32 32, i32 10
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %51, i32 %cond49)
  br label %for.inc51

for.inc51:                                        ; preds = %for.body44
  %55 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %55, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond42

for.end53:                                        ; preds = %for.cond42
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %56 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %56, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond39

for.end56:                                        ; preds = %for.cond39
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for pascal_sym()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Pascal_matrix_generation.c.bc'
source_filename = "./Pascal_matrix_generation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"=== Pascal upper matrix ===\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%4d%c\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"=== Pascal lower matrix ===\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"=== Pascal symmetric matrix ===\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_low(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp slt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %j, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %sub15 = sub nsw i32 %23, 1
  %arrayidx16 = getelementptr inbounds i32*, i32** %22, i32 %sub15
  %24 = load i32*, i32** %arrayidx16, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_upp(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end23

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp sgt i32 %4, %5
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end20

if.else:                                          ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %j, align 4
  %cmp6 = icmp eq i32 %10, %11
  br i1 %cmp6, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %12 = load i32, i32* %i, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %13 = load i32**, i32*** %mat.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %13, i32 %14
  %15 = load i32*, i32** %arrayidx9, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 1, i32* %arrayidx10, align 4
  br label %if.end

if.else11:                                        ; preds = %lor.lhs.false
  %17 = load i32**, i32*** %mat.addr, align 4
  %18 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %18, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %17, i32 %sub
  %19 = load i32*, i32** %arrayidx12, align 4
  %20 = load i32, i32* %j, align 4
  %sub13 = sub nsw i32 %20, 1
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i32 %sub13
  %21 = load i32, i32* %arrayidx14, align 4
  %22 = load i32**, i32*** %mat.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32*, i32** %22, i32 %23
  %24 = load i32*, i32** %arrayidx15, align 4
  %25 = load i32, i32* %j, align 4
  %sub16 = sub nsw i32 %25, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %24, i32 %sub16
  %26 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %21, %26
  %27 = load i32**, i32*** %mat.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %27, i32 %28
  %29 = load i32*, i32** %arrayidx18, align 4
  %30 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %add, i32* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %31 = load i32, i32* %j, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %32, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond

for.end23:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pascal_sym(i32** %mat, i32 %n) #0 {
entry:
  %mat.addr = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %mat, i32*** %mat.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body3
  %5 = load i32, i32* %j, align 4
  %cmp5 = icmp eq i32 %5, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body3
  %6 = load i32**, i32*** %mat.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  %8 = load i32*, i32** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %8, i32 %9
  store i32 1, i32* %arrayidx6, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i32**, i32*** %mat.addr, align 4
  %11 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx7 = getelementptr inbounds i32*, i32** %10, i32 %sub
  %12 = load i32*, i32** %arrayidx7, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx8, align 4
  %15 = load i32**, i32*** %mat.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %18, 1
  %arrayidx11 = getelementptr inbounds i32, i32* %17, i32 %sub10
  %19 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %14, %19
  %20 = load i32**, i32*** %mat.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32*, i32** %20, i32 %21
  %22 = load i32*, i32** %arrayidx12, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %add, i32* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %25, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %mat = alloca i32**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 5, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 4)
  %1 = bitcast i8* %call to i32**
  store i32** %1, i32*** %mat, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n, align 4
  %call1 = call noalias i8* @calloc(i32 %4, i32 4)
  %5 = bitcast i8* %call1 to i32*
  %6 = load i32**, i32*** %mat, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 %7
  store i32* %5, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  %9 = load i32**, i32*** %mat, align 4
  %10 = load i32, i32* %n, align 4
  call void @pascal_upp(i32** %9, i32 %10)
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc16, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %n, align 4
  %cmp4 = icmp slt i32 %11, %12
  br i1 %cmp4, label %for.body5, label %for.end18

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc13, %for.body5
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body8, label %for.end15

for.body8:                                        ; preds = %for.cond6
  %15 = load i32**, i32*** %mat, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i32 %16
  %17 = load i32*, i32** %arrayidx9, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %21, 1
  %cmp11 = icmp slt i32 %20, %sub
  %22 = zext i1 %cmp11 to i64
  %cond = select i1 %cmp11, i32 32, i32 10
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %cond)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body8
  %23 = load i32, i32* %j, align 4
  %inc14 = add nsw i32 %23, 1
  store i32 %inc14, i32* %j, align 4
  br label %for.cond6

for.end15:                                        ; preds = %for.cond6
  br label %for.inc16

for.inc16:                                        ; preds = %for.end15
  %24 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %24, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond3

for.end18:                                        ; preds = %for.cond3
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i32 0, i32 0))
  %25 = load i32**, i32*** %mat, align 4
  %26 = load i32, i32* %n, align 4
  call void @pascal_low(i32** %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %for.end18
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %n, align 4
  %cmp21 = icmp slt i32 %27, %28
  br i1 %cmp21, label %for.body22, label %for.end37

for.body22:                                       ; preds = %for.cond20
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc32, %for.body22
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %n, align 4
  %cmp24 = icmp slt i32 %29, %30
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %31 = load i32**, i32*** %mat, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32*, i32** %31, i32 %32
  %33 = load i32*, i32** %arrayidx26, align 4
  %34 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %n, align 4
  %sub28 = sub nsw i32 %37, 1
  %cmp29 = icmp slt i32 %36, %sub28
  %38 = zext i1 %cmp29 to i64
  %cond30 = select i1 %cmp29, i32 32, i32 10
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %cond30)
  br label %for.inc32

for.inc32:                                        ; preds = %for.body25
  %39 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %39, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %40 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %40, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %for.cond20
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i32 0, i32 0))
  %41 = load i32**, i32*** %mat, align 4
  %42 = load i32, i32* %n, align 4
  call void @pascal_sym(i32** %41, i32 %42)
  store i32 0, i32* %i, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc54, %for.end37
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %n, align 4
  %cmp40 = icmp slt i32 %43, %44
  br i1 %cmp40, label %for.body41, label %for.end56

for.body41:                                       ; preds = %for.cond39
  store i32 0, i32* %j, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc51, %for.body41
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* %n, align 4
  %cmp43 = icmp slt i32 %45, %46
  br i1 %cmp43, label %for.body44, label %for.end53

for.body44:                                       ; preds = %for.cond42
  %47 = load i32**, i32*** %mat, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i32*, i32** %47, i32 %48
  %49 = load i32*, i32** %arrayidx45, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx46, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %n, align 4
  %sub47 = sub nsw i32 %53, 1
  %cmp48 = icmp slt i32 %52, %sub47
  %54 = zext i1 %cmp48 to i64
  %cond49 = select i1 %cmp48, i32 32, i32 10
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %51, i32 %cond49)
  br label %for.inc51

for.inc51:                                        ; preds = %for.body44
  %55 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %55, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond42

for.end53:                                        ; preds = %for.cond42
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %56 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %56, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond39

for.end56:                                        ; preds = %for.cond39
  ret i32 0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %20, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp11, i32 32, i32 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2 (hasExternalUses)
%4:i32 = select %3, 32:i32, 10:i32
infer %4

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %arrayidx27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp29 = icmp slt i32 %36, %sub28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cond30 = select i1 %cmp29, i32 32, i32 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2 (hasExternalUses)
%4:i32 = select %3, 32:i32, 10:i32
infer %4

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp40 = icmp slt i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp43 = icmp slt i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %arrayidx46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub47 = sub nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp48 = icmp slt i32 %52, %sub47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cond49 = select i1 %cmp48, i32 32, i32 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2 (hasExternalUses)
%4:i32 = select %3, 32:i32, 10:i32
infer %4

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc52 = add nsw i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc55 = add nsw i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2 (hasExternalUses)
%4:i32 = select %3, 32:i32, 10:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
