
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for typeDetector()

; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  %conv8 = zext i1 %cmp7 to i32
  %cmp9 = icmp ne i32 %conv8, 0
  br i1 %cmp9, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  %conv30 = zext i1 %cmp29 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @isalnum(i32 %conv) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %or = or i32 %conv6, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub i32 %or, 97
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
infer %3

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %sub, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %conv8 = zext i1 %cmp7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
infer %5

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne i32 %conv8, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
%6:i1 = ne 0:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call18 = call i32 @iscntrl(i32 %conv17) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub28 = sub i32 %conv27, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp29 = icmp ult i32 %sub28, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %conv30 = zext i1 %cmp29 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp31 = icmp ne i32 %conv30, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv35 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx38, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv39 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub40 = sub i32 %conv39, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp41 = icmp ult i32 %sub40, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
infer %3

; *****
; For LLVM instruction:
;  %conv42 = zext i1 %cmp41 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp43 = icmp ne i32 %conv42, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx50, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv51 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call52 = call i32 @ispunct(i32 %conv51) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ne i32 %call52, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx56, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv57 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %arrayidx60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv61 = sext i8 %25 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call62 = call i32 @isxdigit(i32 %conv61) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %call62, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv67 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11011111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -106
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
%6:i1 = ne 0:i32, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32

Cost = 4
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  %conv8 = zext i1 %cmp7 to i32
  %cmp9 = icmp ne i32 %conv8, 0
  br i1 %cmp9, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  %conv30 = zext i1 %cmp29 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %cmp9 = icmp ne i32 %conv8, 0"
; from ""
; with "  %cmp7 = icmp ult i32 %sub, 26" in:
"%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
%6:i1 = ne 0:i32, %5
cand %6 %4
"
; with "  %cmp7 = icmp ult i32 %sub, 26"

Module after replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  %conv30 = zext i1 %cmp29 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for typeDetector()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for typeDetector()

; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  %conv30 = zext i1 %cmp29 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @isalnum(i32 %conv) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %or = or i32 %conv6, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub i32 %or, 97
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
infer %3

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %sub, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call18 = call i32 @iscntrl(i32 %conv17) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub28 = sub i32 %conv27, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp29 = icmp ult i32 %sub28, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %conv30 = zext i1 %cmp29 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp31 = icmp ne i32 %conv30, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv35 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx38, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv39 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub40 = sub i32 %conv39, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp41 = icmp ult i32 %sub40, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
infer %3

; *****
; For LLVM instruction:
;  %conv42 = zext i1 %cmp41 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp43 = icmp ne i32 %conv42, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx50, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv51 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call52 = call i32 @ispunct(i32 %conv51) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ne i32 %call52, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx56, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv57 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %arrayidx60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv61 = sext i8 %25 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call62 = call i32 @isxdigit(i32 %conv61) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %call62, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv67 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32

Cost = 3
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  %conv30 = zext i1 %cmp29 to i32
  %cmp31 = icmp ne i32 %conv30, 0
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %cmp31 = icmp ne i32 %conv30, 0"
; from ""
; with "  %cmp29 = icmp ult i32 %sub28, 10" in:
"%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
cand %5 %3
"
; with "  %cmp29 = icmp ult i32 %sub28, 10"

Module after replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for typeDetector()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for typeDetector()

; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @isalnum(i32 %conv) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %or = or i32 %conv6, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub i32 %or, 97
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
infer %3

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %sub, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call18 = call i32 @iscntrl(i32 %conv17) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub28 = sub i32 %conv27, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp29 = icmp ult i32 %sub28, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv35 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx38, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv39 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub40 = sub i32 %conv39, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp41 = icmp ult i32 %sub40, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
infer %3

; *****
; For LLVM instruction:
;  %conv42 = zext i1 %cmp41 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp43 = icmp ne i32 %conv42, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx50, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv51 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call52 = call i32 @ispunct(i32 %conv51) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ne i32 %call52, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx56, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv57 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %arrayidx60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv61 = sext i8 %25 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call62 = call i32 @isxdigit(i32 %conv61) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %call62, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv67 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -33
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32

Cost = 3
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv42, 0
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %cmp43 = icmp ne i32 %conv42, 0"
; from ""
; with "  %cmp41 = icmp ult i32 %sub40, 95" in:
"%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
%4:i32 = zext %3
%5:i1 = ne 0:i32, %4
cand %5 %3
"
; with "  %cmp41 = icmp ult i32 %sub40, 95"

Module after replacement:
; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  br i1 %cmp41, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for typeDetector()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for typeDetector()

; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  br i1 %cmp41, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @isalnum(i32 %conv) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %or = or i32 %conv6, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub i32 %or, 97
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
infer %3

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %sub, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = or 32:i32, %1
%3:i32 = sub %2, 97:i32
%4:i1 = ult %3, 26:i32
infer %4

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call18 = call i32 @iscntrl(i32 %conv17) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp ne i32 %call18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx22, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv23 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub28 = sub i32 %conv27, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp29 = icmp ult i32 %sub28, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv35 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx38, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv39 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub40 = sub i32 %conv39, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp41 = icmp ult i32 %sub40, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 32:i32
%3:i1 = ult %2, 95:i32
infer %3

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv47 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* %arrayidx50, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv51 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call52 = call i32 @ispunct(i32 %conv51) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp ne i32 %call52, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx56, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv57 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i8, i8* %arrayidx60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv61 = sext i8 %25 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call62 = call i32 @isxdigit(i32 %conv61) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp ne i32 %call62, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i8, i8* %arrayidx66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv67 = sext i8 %27 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for typeDetector()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Type_detection.c.bc'
source_filename = "./Type_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [20 x i8] c"\0A%c is alphanumeric\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A%c is alphabetic\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0A%c is a control character\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"\0A%c is a digit\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"\0A%c is printable\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A%c is a punctuation character\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A%c is a hexadecimal digit\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"Usage : %s <followed by ASCII characters>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @typeDetector(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 4
  store i8* %str, i8** %str.addr, align 4
  %0 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @isalnum(i32 %conv) #3
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %str.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i32 %conv3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %str.addr, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %4, i32 0
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %5 to i32
  %or = or i32 %conv6, 32
  %sub = sub i32 %or, 97
  %cmp7 = icmp ult i32 %sub, 26
  br i1 %cmp7, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end
  %6 = load i8*, i8** %str.addr, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %6, i32 0
  %7 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %7 to i32
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 %conv13)
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %8 = load i8*, i8** %str.addr, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %8, i32 0
  %9 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %9 to i32
  %call18 = call i32 @iscntrl(i32 %conv17) #3
  %cmp19 = icmp ne i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end25

if.then21:                                        ; preds = %if.end15
  %10 = load i8*, i8** %str.addr, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %10, i32 0
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %11 to i32
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i32 0, i32 0), i32 %conv23)
  br label %if.end25

if.end25:                                         ; preds = %if.then21, %if.end15
  %12 = load i8*, i8** %str.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %13 to i32
  %sub28 = sub i32 %conv27, 48
  %cmp29 = icmp ult i32 %sub28, 10
  br i1 %cmp29, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.end25
  %14 = load i8*, i8** %str.addr, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %14, i32 0
  %15 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %15 to i32
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i32 %conv35)
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %if.end25
  %16 = load i8*, i8** %str.addr, align 4
  %arrayidx38 = getelementptr inbounds i8, i8* %16, i32 0
  %17 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %17 to i32
  %sub40 = sub i32 %conv39, 32
  %cmp41 = icmp ult i32 %sub40, 95
  br i1 %cmp41, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end37
  %18 = load i8*, i8** %str.addr, align 4
  %arrayidx46 = getelementptr inbounds i8, i8* %18, i32 0
  %19 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %19 to i32
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i32 0, i32 0), i32 %conv47)
  br label %if.end49

if.end49:                                         ; preds = %if.then45, %if.end37
  %20 = load i8*, i8** %str.addr, align 4
  %arrayidx50 = getelementptr inbounds i8, i8* %20, i32 0
  %21 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %21 to i32
  %call52 = call i32 @ispunct(i32 %conv51) #3
  %cmp53 = icmp ne i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end49
  %22 = load i8*, i8** %str.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %22, i32 0
  %23 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %23 to i32
  %call58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i32 %conv57)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.end49
  %24 = load i8*, i8** %str.addr, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %24, i32 0
  %25 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %25 to i32
  %call62 = call i32 @isxdigit(i32 %conv61) #3
  %cmp63 = icmp ne i32 %call62, 0
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end59
  %26 = load i8*, i8** %str.addr, align 4
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i32 0
  %27 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %27 to i32
  %call68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i32 0, i32 0), i32 %conv67)
  br label %if.end69

if.end69:                                         ; preds = %if.then65, %if.end59
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32 %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @iscntrl(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @ispunct(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %argC.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** %argV.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 %4
  %5 = load i8*, i8** %arrayidx, align 4
  call void @typeDetector(i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 3 replacements done on this module
Total of 3 replacements candidates on this module
