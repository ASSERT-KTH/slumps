
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for f()

; ModuleID = './Stern-Brocot_sequence.c.bc'
source_filename = "./Stern-Brocot_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [19 x i8] c"%3u at Stern #%u.\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%u \00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"are the first fifteen.\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"All GCDs are 1.\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"GCD of #%d and #%d is not 1\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @f(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  br label %cond.end8

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true1, label %cond.false5

cond.true1:                                       ; preds = %cond.false
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 2
  %call = call i32 @f(i32 %div)
  %4 = load i32, i32* %n.addr, align 4
  %div2 = udiv i32 %4, 2
  %add = add i32 %div2, 1
  %call3 = call i32 @f(i32 %add)
  %add4 = add i32 %call, %call3
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load i32, i32* %n.addr, align 4
  %div6 = udiv i32 %5, 2
  %call7 = call i32 @f(i32 %div6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true1
  %cond = phi i32 [ %add4, %cond.true1 ], [ %call7, %cond.false5 ]
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ %1, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false4

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %cond.true1, label %cond.false

cond.true1:                                       ; preds = %cond.true
  %3 = load i32, i32* %b.addr, align 4
  %4 = load i32, i32* %a.addr, align 4
  %rem = urem i32 %3, %4
  %5 = load i32, i32* %a.addr, align 4
  %call = call i32 @gcd(i32 %rem, i32 %5)
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem2 = urem i32 %6, %7
  %8 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @gcd(i32 %rem2, i32 %8)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true1
  %cond = phi i32 [ %call, %cond.true1 ], [ %call3, %cond.false ]
  br label %cond.end5

cond.false4:                                      ; preds = %entry
  %9 = load i32, i32* %b.addr, align 4
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.end
  %cond6 = phi i32 [ %cond, %cond.end ], [ %9, %cond.false4 ]
  ret i32 %cond6
}

; Function Attrs: noinline nounwind optnone
define hidden void @find(i32 %from, i32 %to) #0 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %0 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %0)
  %1 = load i32, i32* %from.addr, align 4
  %cmp = icmp ne i32 %call, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %from.addr, align 4
  %4 = load i32, i32* %n, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %4)
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %5 = load i32, i32* %from.addr, align 4
  %inc2 = add i32 %5, 1
  store i32 %inc2, i32* %from.addr, align 4
  %6 = load i32, i32* %to.addr, align 4
  %cmp3 = icmp ule i32 %inc2, %6
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %1)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0))
  call void @find(i32 1, i32 10)
  call void @find(i32 100, i32 0)
  store i32 1, i32* %n, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc10, %for.end
  %3 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %3, 1000
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond3
  %4 = load i32, i32* %n, align 4
  %call5 = call i32 @f(i32 %4)
  %5 = load i32, i32* %n, align 4
  %add = add i32 %5, 1
  %call6 = call i32 @f(i32 %add)
  %call7 = call i32 @gcd(i32 %call5, i32 %call6)
  %cmp8 = icmp eq i32 %call7, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %6 = phi i1 [ false, %for.cond3 ], [ %cmp8, %land.rhs ]
  br i1 %6, label %for.body9, label %for.end12

for.body9:                                        ; preds = %land.end
  br label %for.inc10

for.inc10:                                        ; preds = %for.body9
  %7 = load i32, i32* %n, align 4
  %inc11 = add i32 %7, 1
  store i32 %inc11, i32* %n, align 4
  br label %for.cond3

for.end12:                                        ; preds = %land.end
  %8 = load i32, i32* %n, align 4
  %cmp13 = icmp eq i32 %8, 1000
  %9 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0)
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %n, align 4
  %add14 = add i32 %11, 1
  %call15 = call i32 (i8*, ...) @printf(i8* %cond, i32 %10, i32 %add14)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @f(i32 %div)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div2 = udiv i32 %4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 %div2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = add 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call3 = call i32 @f(i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add i32 %call, %call3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div6 = udiv i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @f(i32 %div6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %add4, %cond.true1 ], [ %call7, %cond.false5 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5

; *****
; For LLVM instruction:
;  %cond9 = phi i32 [ %1, %cond.true ], [ %cond, %cond.end ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = var
%7:i32 = phi %2, %5, %6
%8:i32 = phi %0, %1, %7
infer %8
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = add 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = udiv %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = add %3, %4
%6:i32 = var
%7:i32 = phi %2, %5, %6
%8:i32 = phi %0, %1, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for f()

; entering Souper's runOnFunction() for gcd()

; ModuleID = './Stern-Brocot_sequence.c.bc'
source_filename = "./Stern-Brocot_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [19 x i8] c"%3u at Stern #%u.\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%u \00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"are the first fifteen.\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"All GCDs are 1.\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"GCD of #%d and #%d is not 1\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @f(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  br label %cond.end8

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true1, label %cond.false5

cond.true1:                                       ; preds = %cond.false
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 2
  %call = call i32 @f(i32 %div)
  %4 = load i32, i32* %n.addr, align 4
  %div2 = udiv i32 %4, 2
  %add = add i32 %div2, 1
  %call3 = call i32 @f(i32 %add)
  %add4 = add i32 %call, %call3
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load i32, i32* %n.addr, align 4
  %div6 = udiv i32 %5, 2
  %call7 = call i32 @f(i32 %div6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true1
  %cond = phi i32 [ %add4, %cond.true1 ], [ %call7, %cond.false5 ]
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ %1, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false4

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %cond.true1, label %cond.false

cond.true1:                                       ; preds = %cond.true
  %3 = load i32, i32* %b.addr, align 4
  %4 = load i32, i32* %a.addr, align 4
  %rem = urem i32 %3, %4
  %5 = load i32, i32* %a.addr, align 4
  %call = call i32 @gcd(i32 %rem, i32 %5)
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem2 = urem i32 %6, %7
  %8 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @gcd(i32 %rem2, i32 %8)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true1
  %cond = phi i32 [ %call, %cond.true1 ], [ %call3, %cond.false ]
  br label %cond.end5

cond.false4:                                      ; preds = %entry
  %9 = load i32, i32* %b.addr, align 4
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.end
  %cond6 = phi i32 [ %cond, %cond.end ], [ %9, %cond.false4 ]
  ret i32 %cond6
}

; Function Attrs: noinline nounwind optnone
define hidden void @find(i32 %from, i32 %to) #0 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %0 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %0)
  %1 = load i32, i32* %from.addr, align 4
  %cmp = icmp ne i32 %call, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %from.addr, align 4
  %4 = load i32, i32* %n, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %4)
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %5 = load i32, i32* %from.addr, align 4
  %inc2 = add i32 %5, 1
  store i32 %inc2, i32* %from.addr, align 4
  %6 = load i32, i32* %to.addr, align 4
  %cmp3 = icmp ule i32 %inc2, %6
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %1)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0))
  call void @find(i32 1, i32 10)
  call void @find(i32 100, i32 0)
  store i32 1, i32* %n, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc10, %for.end
  %3 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %3, 1000
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond3
  %4 = load i32, i32* %n, align 4
  %call5 = call i32 @f(i32 %4)
  %5 = load i32, i32* %n, align 4
  %add = add i32 %5, 1
  %call6 = call i32 @f(i32 %add)
  %call7 = call i32 @gcd(i32 %call5, i32 %call6)
  %cmp8 = icmp eq i32 %call7, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %6 = phi i1 [ false, %for.cond3 ], [ %cmp8, %land.rhs ]
  br i1 %6, label %for.body9, label %for.end12

for.body9:                                        ; preds = %land.end
  br label %for.inc10

for.inc10:                                        ; preds = %for.body9
  %7 = load i32, i32* %n, align 4
  %inc11 = add i32 %7, 1
  store i32 %inc11, i32* %n, align 4
  br label %for.cond3

for.end12:                                        ; preds = %land.end
  %8 = load i32, i32* %n, align 4
  %cmp13 = icmp eq i32 %8, 1000
  %9 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0)
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %n, align 4
  %add14 = add i32 %11, 1
  %call15 = call i32 (i8*, ...) @printf(i8* %cond, i32 %10, i32 %add14)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @gcd(i32 %rem, i32 %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem2 = urem i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @gcd(i32 %rem2, i32 %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %call, %cond.true1 ], [ %call3, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond6 = phi i32 [ %cond, %cond.end ], [ %9, %cond.false4 ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = phi %1, %2, %3
%5:i32 = var
%6:i32 = phi %0, %4, %5
infer %6
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = var
%4:i32 = phi %1, %2, %3
%5:i32 = var
%6:i32 = phi %0, %4, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for gcd()

; entering Souper's runOnFunction() for find()

; ModuleID = './Stern-Brocot_sequence.c.bc'
source_filename = "./Stern-Brocot_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [19 x i8] c"%3u at Stern #%u.\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%u \00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"are the first fifteen.\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"All GCDs are 1.\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"GCD of #%d and #%d is not 1\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @f(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  br label %cond.end8

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true1, label %cond.false5

cond.true1:                                       ; preds = %cond.false
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 2
  %call = call i32 @f(i32 %div)
  %4 = load i32, i32* %n.addr, align 4
  %div2 = udiv i32 %4, 2
  %add = add i32 %div2, 1
  %call3 = call i32 @f(i32 %add)
  %add4 = add i32 %call, %call3
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load i32, i32* %n.addr, align 4
  %div6 = udiv i32 %5, 2
  %call7 = call i32 @f(i32 %div6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true1
  %cond = phi i32 [ %add4, %cond.true1 ], [ %call7, %cond.false5 ]
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ %1, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false4

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %cond.true1, label %cond.false

cond.true1:                                       ; preds = %cond.true
  %3 = load i32, i32* %b.addr, align 4
  %4 = load i32, i32* %a.addr, align 4
  %rem = urem i32 %3, %4
  %5 = load i32, i32* %a.addr, align 4
  %call = call i32 @gcd(i32 %rem, i32 %5)
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem2 = urem i32 %6, %7
  %8 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @gcd(i32 %rem2, i32 %8)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true1
  %cond = phi i32 [ %call, %cond.true1 ], [ %call3, %cond.false ]
  br label %cond.end5

cond.false4:                                      ; preds = %entry
  %9 = load i32, i32* %b.addr, align 4
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.end
  %cond6 = phi i32 [ %cond, %cond.end ], [ %9, %cond.false4 ]
  ret i32 %cond6
}

; Function Attrs: noinline nounwind optnone
define hidden void @find(i32 %from, i32 %to) #0 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %0 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %0)
  %1 = load i32, i32* %from.addr, align 4
  %cmp = icmp ne i32 %call, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %from.addr, align 4
  %4 = load i32, i32* %n, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %4)
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %5 = load i32, i32* %from.addr, align 4
  %inc2 = add i32 %5, 1
  store i32 %inc2, i32* %from.addr, align 4
  %6 = load i32, i32* %to.addr, align 4
  %cmp3 = icmp ule i32 %inc2, %6
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %1)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0))
  call void @find(i32 1, i32 10)
  call void @find(i32 100, i32 0)
  store i32 1, i32* %n, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc10, %for.end
  %3 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %3, 1000
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond3
  %4 = load i32, i32* %n, align 4
  %call5 = call i32 @f(i32 %4)
  %5 = load i32, i32* %n, align 4
  %add = add i32 %5, 1
  %call6 = call i32 @f(i32 %add)
  %call7 = call i32 @gcd(i32 %call5, i32 %call6)
  %cmp8 = icmp eq i32 %call7, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %6 = phi i1 [ false, %for.cond3 ], [ %cmp8, %land.rhs ]
  br i1 %6, label %for.body9, label %for.end12

for.body9:                                        ; preds = %land.end
  br label %for.inc10

for.inc10:                                        ; preds = %for.body9
  %7 = load i32, i32* %n, align 4
  %inc11 = add i32 %7, 1
  store i32 %inc11, i32* %n, align 4
  br label %for.cond3

for.end12:                                        ; preds = %land.end
  %8 = load i32, i32* %n, align 4
  %cmp13 = icmp eq i32 %8, 1000
  %9 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0)
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %n, align 4
  %add14 = add i32 %11, 1
  %call15 = call i32 (i8*, ...) @printf(i8* %cond, i32 %10, i32 %add14)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @f(i32 %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc2 = add i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %to.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ule i32 %inc2, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ule %1, %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ule %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for find()

; entering Souper's runOnFunction() for main()

; ModuleID = './Stern-Brocot_sequence.c.bc'
source_filename = "./Stern-Brocot_sequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [19 x i8] c"%3u at Stern #%u.\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%u \00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"are the first fifteen.\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"All GCDs are 1.\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"GCD of #%d and #%d is not 1\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @f(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  br label %cond.end8

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %and = and i32 %2, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true1, label %cond.false5

cond.true1:                                       ; preds = %cond.false
  %3 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %3, 2
  %call = call i32 @f(i32 %div)
  %4 = load i32, i32* %n.addr, align 4
  %div2 = udiv i32 %4, 2
  %add = add i32 %div2, 1
  %call3 = call i32 @f(i32 %add)
  %add4 = add i32 %call, %call3
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load i32, i32* %n.addr, align 4
  %div6 = udiv i32 %5, 2
  %call7 = call i32 @f(i32 %div6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true1
  %cond = phi i32 [ %add4, %cond.true1 ], [ %call7, %cond.false5 ]
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ %1, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false4

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %cmp = icmp ult i32 %1, %2
  br i1 %cmp, label %cond.true1, label %cond.false

cond.true1:                                       ; preds = %cond.true
  %3 = load i32, i32* %b.addr, align 4
  %4 = load i32, i32* %a.addr, align 4
  %rem = urem i32 %3, %4
  %5 = load i32, i32* %a.addr, align 4
  %call = call i32 @gcd(i32 %rem, i32 %5)
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem2 = urem i32 %6, %7
  %8 = load i32, i32* %b.addr, align 4
  %call3 = call i32 @gcd(i32 %rem2, i32 %8)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true1
  %cond = phi i32 [ %call, %cond.true1 ], [ %call3, %cond.false ]
  br label %cond.end5

cond.false4:                                      ; preds = %entry
  %9 = load i32, i32* %b.addr, align 4
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.end
  %cond6 = phi i32 [ %cond, %cond.end ], [ %9, %cond.false4 ]
  ret i32 %cond6
}

; Function Attrs: noinline nounwind optnone
define hidden void @find(i32 %from, i32 %to) #0 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %0 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %0)
  %1 = load i32, i32* %from.addr, align 4
  %cmp = icmp ne i32 %call, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %from.addr, align 4
  %4 = load i32, i32* %n, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %4)
  br label %do.cond

do.cond:                                          ; preds = %for.end
  %5 = load i32, i32* %from.addr, align 4
  %inc2 = add i32 %5, 1
  store i32 %inc2, i32* %from.addr, align 4
  %6 = load i32, i32* %to.addr, align 4
  %cmp3 = icmp ule i32 %inc2, %6
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call = call i32 @f(i32 %1)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0))
  call void @find(i32 1, i32 10)
  call void @find(i32 100, i32 0)
  store i32 1, i32* %n, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc10, %for.end
  %3 = load i32, i32* %n, align 4
  %cmp4 = icmp ult i32 %3, 1000
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond3
  %4 = load i32, i32* %n, align 4
  %call5 = call i32 @f(i32 %4)
  %5 = load i32, i32* %n, align 4
  %add = add i32 %5, 1
  %call6 = call i32 @f(i32 %add)
  %call7 = call i32 @gcd(i32 %call5, i32 %call6)
  %cmp8 = icmp eq i32 %call7, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %6 = phi i1 [ false, %for.cond3 ], [ %cmp8, %land.rhs ]
  br i1 %6, label %for.body9, label %for.end12

for.body9:                                        ; preds = %land.end
  br label %for.inc10

for.inc10:                                        ; preds = %for.body9
  %7 = load i32, i32* %n, align 4
  %inc11 = add i32 %7, 1
  store i32 %inc11, i32* %n, align 4
  br label %for.cond3

for.end12:                                        ; preds = %land.end
  %8 = load i32, i32* %n, align 4
  %cmp13 = icmp eq i32 %8, 1000
  %9 = zext i1 %cmp13 to i64
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0)
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %n, align 4
  %add14 = add i32 %11, 1
  %call15 = call i32 (i8*, ...) @printf(i8* %cond, i32 %10, i32 %add14)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 16
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @f(i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %3, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 1000:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call5 = call i32 @f(i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call6 = call i32 @f(i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call7 = call i32 @gcd(i32 %call5, i32 %call6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %call7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %for.cond3 ], [ %cmp8, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp eq i32 %8, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1000:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 16:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 1000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1000:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
