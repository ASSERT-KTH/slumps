
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Display_a_linear_combination.c.bc'
source_filename = "./Display_a_linear_combination.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [69 x i8] c"Usage : %s <Vector component coefficients seperated by single space>\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"Vector for [\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s,\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\08] -> \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"e%d \00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"- e%d \00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"- %lf e%d \00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"- %ld e%d \00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"%lf e%d \00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"%ld e%d \00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"%c e%d \00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"%c %lf e%d \00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"%c %ld e%d \00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %zeroCount = alloca i32, align 4
  %firstNonZero = alloca i32, align 4
  %vector = alloca double*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store i32 0, i32* %zeroCount, align 4
  store i32 -1, i32* %firstNonZero, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str, i32 0, i32 0), i8* %2)
  br label %if.end205

if.else:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8**, i8*** %argV.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  %9 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %9, 1
  %mul = mul i32 %sub, 8
  %call6 = call noalias i8* @malloc(i32 %mul)
  %10 = bitcast i8* %call6 to double*
  store double* %10, double** %vector, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc26, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %argC.addr, align 4
  %cmp8 = icmp sle i32 %11, %12
  br i1 %cmp8, label %for.body9, label %for.end28

for.body9:                                        ; preds = %for.cond7
  %13 = load i8**, i8*** %argV.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx10, align 4
  %call11 = call double @atof(i8* %15)
  %16 = load double*, double** %vector, align 4
  %17 = load i32, i32* %i, align 4
  %sub12 = sub nsw i32 %17, 1
  %arrayidx13 = getelementptr inbounds double, double* %16, i32 %sub12
  store double %call11, double* %arrayidx13, align 8
  %18 = load double*, double** %vector, align 4
  %19 = load i32, i32* %i, align 4
  %sub14 = sub nsw i32 %19, 1
  %arrayidx15 = getelementptr inbounds double, double* %18, i32 %sub14
  %20 = load double, double* %arrayidx15, align 8
  %cmp16 = fcmp oeq double %20, 0.000000e+00
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %for.body9
  %21 = load i32, i32* %zeroCount, align 4
  %inc18 = add nsw i32 %21, 1
  store i32 %inc18, i32* %zeroCount, align 4
  br label %if.end

if.end:                                           ; preds = %if.then17, %for.body9
  %22 = load double*, double** %vector, align 4
  %23 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %23, 1
  %arrayidx20 = getelementptr inbounds double, double* %22, i32 %sub19
  %24 = load double, double* %arrayidx20, align 8
  %cmp21 = fcmp une double %24, 0.000000e+00
  br i1 %cmp21, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end
  %25 = load i32, i32* %firstNonZero, align 4
  %cmp22 = icmp eq i32 %25, -1
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true
  %26 = load i32, i32* %i, align 4
  %sub24 = sub nsw i32 %26, 1
  store i32 %sub24, i32* %firstNonZero, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %if.end
  br label %for.inc26

for.inc26:                                        ; preds = %if.end25
  %27 = load i32, i32* %i, align 4
  %inc27 = add nsw i32 %27, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond7

for.end28:                                        ; preds = %for.cond7
  %28 = load i32, i32* %zeroCount, align 4
  %29 = load i32, i32* %argC.addr, align 4
  %cmp29 = icmp eq i32 %28, %29
  br i1 %cmp29, label %if.then30, label %if.else32

if.then30:                                        ; preds = %for.end28
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end204

if.else32:                                        ; preds = %for.end28
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc201, %if.else32
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %argC.addr, align 4
  %cmp34 = icmp slt i32 %30, %31
  br i1 %cmp34, label %for.body35, label %for.end203

for.body35:                                       ; preds = %for.cond33
  %32 = load i32, i32* %i, align 4
  %33 = load i32, i32* %firstNonZero, align 4
  %cmp36 = icmp eq i32 %32, %33
  br i1 %cmp36, label %land.lhs.true37, label %if.else42

land.lhs.true37:                                  ; preds = %for.body35
  %34 = load double*, double** %vector, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds double, double* %34, i32 %35
  %36 = load double, double* %arrayidx38, align 8
  %cmp39 = fcmp oeq double %36, 1.000000e+00
  br i1 %cmp39, label %if.then40, label %if.else42

if.then40:                                        ; preds = %land.lhs.true37
  %37 = load i32, i32* %i, align 4
  %add = add nsw i32 %37, 1
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %add)
  br label %if.end200

if.else42:                                        ; preds = %land.lhs.true37, %for.body35
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %firstNonZero, align 4
  %cmp43 = icmp eq i32 %38, %39
  br i1 %cmp43, label %land.lhs.true44, label %if.else50

land.lhs.true44:                                  ; preds = %if.else42
  %40 = load double*, double** %vector, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds double, double* %40, i32 %41
  %42 = load double, double* %arrayidx45, align 8
  %cmp46 = fcmp oeq double %42, -1.000000e+00
  br i1 %cmp46, label %if.then47, label %if.else50

if.then47:                                        ; preds = %land.lhs.true44
  %43 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %43, 1
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 %add48)
  br label %if.end199

if.else50:                                        ; preds = %land.lhs.true44, %if.else42
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %firstNonZero, align 4
  %cmp51 = icmp eq i32 %44, %45
  br i1 %cmp51, label %land.lhs.true52, label %if.else67

land.lhs.true52:                                  ; preds = %if.else50
  %46 = load double*, double** %vector, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds double, double* %46, i32 %47
  %48 = load double, double* %arrayidx53, align 8
  %cmp54 = fcmp olt double %48, 0.000000e+00
  br i1 %cmp54, label %land.lhs.true55, label %if.else67

land.lhs.true55:                                  ; preds = %land.lhs.true52
  %49 = load double*, double** %vector, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx56 = getelementptr inbounds double, double* %49, i32 %50
  %51 = load double, double* %arrayidx56, align 8
  %52 = call double @llvm.fabs.f64(double %51)
  %53 = load double*, double** %vector, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx57 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx57, align 8
  %conv = fptosi double %55 to i32
  %call58 = call i32 @abs(i32 %conv) #4
  %conv59 = sitofp i32 %call58 to double
  %sub60 = fsub double %52, %conv59
  %cmp61 = fcmp ogt double %sub60, 0.000000e+00
  br i1 %cmp61, label %if.then63, label %if.else67

if.then63:                                        ; preds = %land.lhs.true55
  %56 = load double*, double** %vector, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx64 = getelementptr inbounds double, double* %56, i32 %57
  %58 = load double, double* %arrayidx64, align 8
  %59 = call double @llvm.fabs.f64(double %58)
  %60 = load i32, i32* %i, align 4
  %add65 = add nsw i32 %60, 1
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), double %59, i32 %add65)
  br label %if.end198

if.else67:                                        ; preds = %land.lhs.true55, %land.lhs.true52, %if.else50
  %61 = load i32, i32* %i, align 4
  %62 = load i32, i32* %firstNonZero, align 4
  %cmp68 = icmp eq i32 %61, %62
  br i1 %cmp68, label %land.lhs.true70, label %if.else89

land.lhs.true70:                                  ; preds = %if.else67
  %63 = load double*, double** %vector, align 4
  %64 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds double, double* %63, i32 %64
  %65 = load double, double* %arrayidx71, align 8
  %cmp72 = fcmp olt double %65, 0.000000e+00
  br i1 %cmp72, label %land.lhs.true74, label %if.else89

land.lhs.true74:                                  ; preds = %land.lhs.true70
  %66 = load double*, double** %vector, align 4
  %67 = load i32, i32* %i, align 4
  %arrayidx75 = getelementptr inbounds double, double* %66, i32 %67
  %68 = load double, double* %arrayidx75, align 8
  %69 = call double @llvm.fabs.f64(double %68)
  %70 = load double*, double** %vector, align 4
  %71 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds double, double* %70, i32 %71
  %72 = load double, double* %arrayidx76, align 8
  %conv77 = fptosi double %72 to i32
  %call78 = call i32 @abs(i32 %conv77) #4
  %conv79 = sitofp i32 %call78 to double
  %sub80 = fsub double %69, %conv79
  %cmp81 = fcmp oeq double %sub80, 0.000000e+00
  br i1 %cmp81, label %if.then83, label %if.else89

if.then83:                                        ; preds = %land.lhs.true74
  %73 = load double*, double** %vector, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx84 = getelementptr inbounds double, double* %73, i32 %74
  %75 = load double, double* %arrayidx84, align 8
  %conv85 = fptosi double %75 to i32
  %call86 = call i32 @labs(i32 %conv85) #4
  %76 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %76, 1
  %call88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i32 %call86, i32 %add87)
  br label %if.end197

if.else89:                                        ; preds = %land.lhs.true74, %land.lhs.true70, %if.else67
  %77 = load i32, i32* %i, align 4
  %78 = load i32, i32* %firstNonZero, align 4
  %cmp90 = icmp eq i32 %77, %78
  br i1 %cmp90, label %land.lhs.true92, label %if.else109

land.lhs.true92:                                  ; preds = %if.else89
  %79 = load double*, double** %vector, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx93 = getelementptr inbounds double, double* %79, i32 %80
  %81 = load double, double* %arrayidx93, align 8
  %cmp94 = fcmp ogt double %81, 0.000000e+00
  br i1 %cmp94, label %land.lhs.true96, label %if.else109

land.lhs.true96:                                  ; preds = %land.lhs.true92
  %82 = load double*, double** %vector, align 4
  %83 = load i32, i32* %i, align 4
  %arrayidx97 = getelementptr inbounds double, double* %82, i32 %83
  %84 = load double, double* %arrayidx97, align 8
  %85 = call double @llvm.fabs.f64(double %84)
  %86 = load double*, double** %vector, align 4
  %87 = load i32, i32* %i, align 4
  %arrayidx98 = getelementptr inbounds double, double* %86, i32 %87
  %88 = load double, double* %arrayidx98, align 8
  %conv99 = fptosi double %88 to i32
  %call100 = call i32 @abs(i32 %conv99) #4
  %conv101 = sitofp i32 %call100 to double
  %sub102 = fsub double %85, %conv101
  %cmp103 = fcmp ogt double %sub102, 0.000000e+00
  br i1 %cmp103, label %if.then105, label %if.else109

if.then105:                                       ; preds = %land.lhs.true96
  %89 = load double*, double** %vector, align 4
  %90 = load i32, i32* %i, align 4
  %arrayidx106 = getelementptr inbounds double, double* %89, i32 %90
  %91 = load double, double* %arrayidx106, align 8
  %92 = load i32, i32* %i, align 4
  %add107 = add nsw i32 %92, 1
  %call108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), double %91, i32 %add107)
  br label %if.end196

if.else109:                                       ; preds = %land.lhs.true96, %land.lhs.true92, %if.else89
  %93 = load i32, i32* %i, align 4
  %94 = load i32, i32* %firstNonZero, align 4
  %cmp110 = icmp eq i32 %93, %94
  br i1 %cmp110, label %land.lhs.true112, label %if.else129

land.lhs.true112:                                 ; preds = %if.else109
  %95 = load double*, double** %vector, align 4
  %96 = load i32, i32* %i, align 4
  %arrayidx113 = getelementptr inbounds double, double* %95, i32 %96
  %97 = load double, double* %arrayidx113, align 8
  %cmp114 = fcmp ogt double %97, 0.000000e+00
  br i1 %cmp114, label %land.lhs.true116, label %if.else129

land.lhs.true116:                                 ; preds = %land.lhs.true112
  %98 = load double*, double** %vector, align 4
  %99 = load i32, i32* %i, align 4
  %arrayidx117 = getelementptr inbounds double, double* %98, i32 %99
  %100 = load double, double* %arrayidx117, align 8
  %101 = call double @llvm.fabs.f64(double %100)
  %102 = load double*, double** %vector, align 4
  %103 = load i32, i32* %i, align 4
  %arrayidx118 = getelementptr inbounds double, double* %102, i32 %103
  %104 = load double, double* %arrayidx118, align 8
  %conv119 = fptosi double %104 to i32
  %call120 = call i32 @abs(i32 %conv119) #4
  %conv121 = sitofp i32 %call120 to double
  %sub122 = fsub double %101, %conv121
  %cmp123 = fcmp oeq double %sub122, 0.000000e+00
  br i1 %cmp123, label %if.then125, label %if.else129

if.then125:                                       ; preds = %land.lhs.true116
  %105 = load double*, double** %vector, align 4
  %106 = load i32, i32* %i, align 4
  %arrayidx126 = getelementptr inbounds double, double* %105, i32 %106
  %107 = load double, double* %arrayidx126, align 8
  %108 = load i32, i32* %i, align 4
  %add127 = add nsw i32 %108, 1
  %call128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i32 0, i32 0), double %107, i32 %add127)
  br label %if.end195

if.else129:                                       ; preds = %land.lhs.true116, %land.lhs.true112, %if.else109
  %109 = load double*, double** %vector, align 4
  %110 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds double, double* %109, i32 %110
  %111 = load double, double* %arrayidx130, align 8
  %112 = call double @llvm.fabs.f64(double %111)
  %cmp131 = fcmp oeq double %112, 1.000000e+00
  br i1 %cmp131, label %land.lhs.true133, label %if.else142

land.lhs.true133:                                 ; preds = %if.else129
  %113 = load i32, i32* %i, align 4
  %cmp134 = icmp ne i32 %113, 0
  br i1 %cmp134, label %if.then136, label %if.else142

if.then136:                                       ; preds = %land.lhs.true133
  %114 = load double*, double** %vector, align 4
  %115 = load i32, i32* %i, align 4
  %arrayidx137 = getelementptr inbounds double, double* %114, i32 %115
  %116 = load double, double* %arrayidx137, align 8
  %cmp138 = fcmp oeq double %116, -1.000000e+00
  %117 = zext i1 %cmp138 to i64
  %cond = select i1 %cmp138, i32 45, i32 43
  %118 = load i32, i32* %i, align 4
  %add140 = add nsw i32 %118, 1
  %call141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 %cond, i32 %add140)
  br label %if.end194

if.else142:                                       ; preds = %land.lhs.true133, %if.else129
  %119 = load i32, i32* %i, align 4
  %cmp143 = icmp ne i32 %119, 0
  br i1 %cmp143, label %land.lhs.true145, label %if.else166

land.lhs.true145:                                 ; preds = %if.else142
  %120 = load double*, double** %vector, align 4
  %121 = load i32, i32* %i, align 4
  %arrayidx146 = getelementptr inbounds double, double* %120, i32 %121
  %122 = load double, double* %arrayidx146, align 8
  %cmp147 = fcmp une double %122, 0.000000e+00
  br i1 %cmp147, label %land.lhs.true149, label %if.else166

land.lhs.true149:                                 ; preds = %land.lhs.true145
  %123 = load double*, double** %vector, align 4
  %124 = load i32, i32* %i, align 4
  %arrayidx150 = getelementptr inbounds double, double* %123, i32 %124
  %125 = load double, double* %arrayidx150, align 8
  %126 = call double @llvm.fabs.f64(double %125)
  %127 = load double*, double** %vector, align 4
  %128 = load i32, i32* %i, align 4
  %arrayidx151 = getelementptr inbounds double, double* %127, i32 %128
  %129 = load double, double* %arrayidx151, align 8
  %conv152 = fptosi double %129 to i32
  %call153 = call i32 @abs(i32 %conv152) #4
  %conv154 = sitofp i32 %call153 to double
  %sub155 = fsub double %126, %conv154
  %cmp156 = fcmp ogt double %sub155, 0.000000e+00
  br i1 %cmp156, label %if.then158, label %if.else166

if.then158:                                       ; preds = %land.lhs.true149
  %130 = load double*, double** %vector, align 4
  %131 = load i32, i32* %i, align 4
  %arrayidx159 = getelementptr inbounds double, double* %130, i32 %131
  %132 = load double, double* %arrayidx159, align 8
  %cmp160 = fcmp olt double %132, 0.000000e+00
  %133 = zext i1 %cmp160 to i64
  %cond162 = select i1 %cmp160, i32 45, i32 43
  %134 = load double*, double** %vector, align 4
  %135 = load i32, i32* %i, align 4
  %arrayidx163 = getelementptr inbounds double, double* %134, i32 %135
  %136 = load double, double* %arrayidx163, align 8
  %137 = call double @llvm.fabs.f64(double %136)
  %138 = load i32, i32* %i, align 4
  %add164 = add nsw i32 %138, 1
  %call165 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i32 0, i32 0), i32 %cond162, double %137, i32 %add164)
  br label %if.end193

if.else166:                                       ; preds = %land.lhs.true149, %land.lhs.true145, %if.else142
  %139 = load i32, i32* %i, align 4
  %cmp167 = icmp ne i32 %139, 0
  br i1 %cmp167, label %land.lhs.true169, label %if.end192

land.lhs.true169:                                 ; preds = %if.else166
  %140 = load double*, double** %vector, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx170 = getelementptr inbounds double, double* %140, i32 %141
  %142 = load double, double* %arrayidx170, align 8
  %cmp171 = fcmp une double %142, 0.000000e+00
  br i1 %cmp171, label %land.lhs.true173, label %if.end192

land.lhs.true173:                                 ; preds = %land.lhs.true169
  %143 = load double*, double** %vector, align 4
  %144 = load i32, i32* %i, align 4
  %arrayidx174 = getelementptr inbounds double, double* %143, i32 %144
  %145 = load double, double* %arrayidx174, align 8
  %146 = call double @llvm.fabs.f64(double %145)
  %147 = load double*, double** %vector, align 4
  %148 = load i32, i32* %i, align 4
  %arrayidx175 = getelementptr inbounds double, double* %147, i32 %148
  %149 = load double, double* %arrayidx175, align 8
  %conv176 = fptosi double %149 to i32
  %call177 = call i32 @abs(i32 %conv176) #4
  %conv178 = sitofp i32 %call177 to double
  %sub179 = fsub double %146, %conv178
  %cmp180 = fcmp oeq double %sub179, 0.000000e+00
  br i1 %cmp180, label %if.then182, label %if.end192

if.then182:                                       ; preds = %land.lhs.true173
  %150 = load double*, double** %vector, align 4
  %151 = load i32, i32* %i, align 4
  %arrayidx183 = getelementptr inbounds double, double* %150, i32 %151
  %152 = load double, double* %arrayidx183, align 8
  %cmp184 = fcmp olt double %152, 0.000000e+00
  %153 = zext i1 %cmp184 to i64
  %cond186 = select i1 %cmp184, i32 45, i32 43
  %154 = load double*, double** %vector, align 4
  %155 = load i32, i32* %i, align 4
  %arrayidx187 = getelementptr inbounds double, double* %154, i32 %155
  %156 = load double, double* %arrayidx187, align 8
  %conv188 = fptosi double %156 to i32
  %call189 = call i32 @labs(i32 %conv188) #4
  %157 = load i32, i32* %i, align 4
  %add190 = add nsw i32 %157, 1
  %call191 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i32 %cond186, i32 %call189, i32 %add190)
  br label %if.end192

if.end192:                                        ; preds = %if.then182, %land.lhs.true173, %land.lhs.true169, %if.else166
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %if.then158
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %if.then136
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.then125
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.then105
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.then83
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.then63
  br label %if.end199

if.end199:                                        ; preds = %if.end198, %if.then47
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.then40
  br label %for.inc201

for.inc201:                                       ; preds = %if.end200
  %158 = load i32, i32* %i, align 4
  %inc202 = add nsw i32 %158, 1
  store i32 %inc202, i32* %i, align 4
  br label %for.cond33

for.end203:                                       ; preds = %for.cond33
  br label %if.end204

if.end204:                                        ; preds = %for.end203, %if.then30
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then
  %159 = load double*, double** %vector, align 4
  %160 = bitcast double* %159 to i8*
  call void @free(i8* %160)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare double @atof(i8* %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @labs(i32 %0) #3

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %sub, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp sle i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = fcmp oeq double %20, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %zeroCount, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = fcmp une double %24, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp eq i32 %25, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub24 = sub nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc27 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %zeroCount, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp eq i32 %28, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp34 = icmp slt i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp eq i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = fcmp oeq double %36, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp43 = icmp eq i32 %38, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = fcmp oeq double %42, -1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp51 = icmp eq i32 %44, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp54 = fcmp olt double %48, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = fptosi double %55 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call58 = call i32 @abs(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp61 = fcmp ogt double %sub60, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add65 = add nsw i32 %60, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp68 = icmp eq i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = fcmp olt double %65, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv77 = fptosi double %72 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call78 = call i32 @abs(i32 %conv77) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp81 = fcmp oeq double %sub80, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv85 = fptosi double %75 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call86 = call i32 @labs(i32 %conv85) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add87 = add nsw i32 %76, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp90 = icmp eq i32 %77, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp94 = fcmp ogt double %81, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv99 = fptosi double %88 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call100 = call i32 @abs(i32 %conv99) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp103 = fcmp ogt double %sub102, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add107 = add nsw i32 %92, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %firstNonZero, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp110 = icmp eq i32 %93, %94
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp114 = fcmp ogt double %97, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv119 = fptosi double %104 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call120 = call i32 @abs(i32 %conv119) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp123 = fcmp oeq double %sub122, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %106 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %108 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add127 = add nsw i32 %108, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %110 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp131 = fcmp oeq double %112, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp134 = icmp ne i32 %113, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %115 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp138 = fcmp oeq double %116, -1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp138, i32 45, i32 43
; Looking for a replacement for:
%0:i1 = var
%1:i32 = select %0, 45:i32, 43:i32
infer %1

; *****
; For LLVM instruction:
;  %118 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add140 = add nsw i32 %118, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %119 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp143 = icmp ne i32 %119, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %121 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp147 = fcmp une double %122, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %124 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %128 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv152 = fptosi double %129 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call153 = call i32 @abs(i32 %conv152) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp156 = fcmp ogt double %sub155, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %131 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp160 = fcmp olt double %132, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cond162 = select i1 %cmp160, i32 45, i32 43
; Looking for a replacement for:
%0:i1 = var
%1:i32 = select %0, 45:i32, 43:i32
infer %1

; *****
; For LLVM instruction:
;  %135 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %138 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add164 = add nsw i32 %138, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %139 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp167 = icmp ne i32 %139, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %141 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp171 = fcmp une double %142, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %144 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %148 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv176 = fptosi double %149 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call177 = call i32 @abs(i32 %conv176) #4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp180 = fcmp oeq double %sub179, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %151 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp184 = fcmp olt double %152, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cond186 = select i1 %cmp184, i32 45, i32 43
; Looking for a replacement for:
%0:i1 = var
%1:i32 = select %0, 45:i32, 43:i32
infer %1

; *****
; For LLVM instruction:
;  %155 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv188 = fptosi double %156 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call189 = call i32 @labs(i32 %conv188) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %157 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add190 = add nsw i32 %157, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %158 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc202 = add nsw i32 %158, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 8:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483640
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 497679720
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = select %0, 45:i32, 43:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 43
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 45
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
