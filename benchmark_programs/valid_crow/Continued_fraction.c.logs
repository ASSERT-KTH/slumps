
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for calc()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %expansions.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %9, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for calc()

; entering Souper's runOnFunction() for sqrt2_a()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sqrt2_a()

; entering Souper's runOnFunction() for sqrt2_b()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for sqrt2_b()

; entering Souper's runOnFunction() for napier_a()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for napier_a()

; entering Souper's runOnFunction() for napier_b()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %conv, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for napier_b()

; entering Souper's runOnFunction() for pi_a()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for pi_a()

; entering Souper's runOnFunction() for pi_b()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for pi_b()

; entering Souper's runOnFunction() for main()

; ModuleID = './Continued_fraction.c.bc'
source_filename = "./Continued_fraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [25 x i8] c"%12.10g\0A%12.10g\0A%12.10g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @calc(double (i32)* %f_a, double (i32)* %f_b, i32 %expansions) #0 {
entry:
  %f_a.addr = alloca double (i32)*, align 4
  %f_b.addr = alloca double (i32)*, align 4
  %expansions.addr = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %r = alloca double, align 8
  %i = alloca i32, align 4
  store double (i32)* %f_a, double (i32)** %f_a.addr, align 4
  store double (i32)* %f_b, double (i32)** %f_b.addr, align 4
  store i32 %expansions, i32* %expansions.addr, align 4
  store double 0.000000e+00, double* %r, align 8
  store double 0.000000e+00, double* %b, align 8
  store double 0.000000e+00, double* %a, align 8
  %0 = load i32, i32* %expansions.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ugt i32 %1, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %call = call double %2(i32 %3)
  store double %call, double* %a, align 8
  %4 = load double (i32)*, double (i32)** %f_b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call1 = call double %4(i32 %5)
  store double %call1, double* %b, align 8
  %6 = load double, double* %b, align 8
  %7 = load double, double* %a, align 8
  %8 = load double, double* %r, align 8
  %add = fadd double %7, %8
  %div = fdiv double %6, %add
  store double %div, double* %r, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load double (i32)*, double (i32)** %f_a.addr, align 4
  %call2 = call double %10(i32 0)
  store double %call2, double* %a, align 8
  %11 = load double, double* %a, align 8
  %12 = load double, double* %r, align 8
  %add3 = fadd double %11, %12
  ret double %add3
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 2.000000e+00, double 1.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @sqrt2_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %1 to double
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 2.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @napier_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %cmp = fcmp ogt double %conv, 1.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = uitofp i32 %1 to double
  %sub = fsub double %conv2, 1.000000e+00
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub, %cond.true ], [ 1.000000e+00, %cond.false ]
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_a(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, double 6.000000e+00, double 3.000000e+00
  ret double %cond
}

; Function Attrs: noinline nounwind optnone
define hidden double @pi_b(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %c = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = uitofp i32 %0 to double
  %mul = fmul double 2.000000e+00, %conv
  %sub = fsub double %mul, 1.000000e+00
  store double %sub, double* %c, align 8
  %1 = load double, double* %c, align 8
  %2 = load double, double* %c, align 8
  %mul1 = fmul double %1, %2
  ret double %mul1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %sqrt2 = alloca double, align 8
  %napier = alloca double, align 8
  %pi = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @calc(double (i32)* @sqrt2_a, double (i32)* @sqrt2_b, i32 1000)
  store double %call, double* %sqrt2, align 8
  %call1 = call double @calc(double (i32)* @napier_a, double (i32)* @napier_b, i32 1000)
  store double %call1, double* %napier, align 8
  %call2 = call double @calc(double (i32)* @pi_a, double (i32)* @pi_b, i32 1000)
  store double %call2, double* %pi, align 8
  %0 = load double, double* %sqrt2, align 8
  %1 = load double, double* %napier, align 8
  %2 = load double, double* %pi, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), double %0, double %1, double %2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
