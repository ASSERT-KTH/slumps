
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for show_set()

; ModuleID = './Set.c.bc'
source_filename = "./Set.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%s is:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\09%d%s in set a\0A\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" not\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"union(a, b)\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"c = common(a, b)\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"a - b\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"b - a\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"b is%s a subset of a\0A\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"c is%s a subset of a\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"union(a, b) - common(a, b) %s union(a - b, b - a)\0A\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"equals\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"does not equal\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_set(i32 %x, i8* %name) #0 {
entry:
  %x.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i8* %name, i8** %name.addr, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %2 = load i32, i32* %x.addr, align 4
  %cmp = icmp ule i32 %shl, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %shl1 = shl i32 1, %4
  %and = and i32 %3, %shl1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %2 = load i32, i32* %a, align 4
  %or = or i32 %2, %shl
  store i32 %or, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 3
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %a, align 4
  call void @show_set(i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc5, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 5
  br i1 %cmp2, label %for.body3, label %for.end6

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %a, align 4
  %8 = load i32, i32* %i, align 4
  %shl4 = shl i32 1, %8
  %and = and i32 %7, %shl4
  %tobool = icmp ne i32 %and, 0
  %9 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), i32 %6, i8* %cond)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end6:                                         ; preds = %for.cond1
  %11 = load i32, i32* %a, align 4
  store i32 %11, i32* %b, align 4
  %12 = load i32, i32* %b, align 4
  %or7 = or i32 %12, 32
  store i32 %or7, i32* %b, align 4
  %13 = load i32, i32* %b, align 4
  %or8 = or i32 %13, 1024
  store i32 %or8, i32* %b, align 4
  %14 = load i32, i32* %b, align 4
  %and9 = and i32 %14, -2
  store i32 %and9, i32* %b, align 4
  %15 = load i32, i32* %b, align 4
  call void @show_set(i32 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %16 = load i32, i32* %a, align 4
  %17 = load i32, i32* %b, align 4
  %or10 = or i32 %16, %17
  call void @show_set(i32 %or10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0))
  %18 = load i32, i32* %a, align 4
  %19 = load i32, i32* %b, align 4
  %and11 = and i32 %18, %19
  store i32 %and11, i32* %c, align 4
  call void @show_set(i32 %and11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i32 0, i32 0))
  %20 = load i32, i32* %a, align 4
  %21 = load i32, i32* %b, align 4
  %neg = xor i32 %21, -1
  %and12 = and i32 %20, %neg
  call void @show_set(i32 %and12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %22 = load i32, i32* %b, align 4
  %23 = load i32, i32* %a, align 4
  %neg13 = xor i32 %23, -1
  %and14 = and i32 %22, %neg13
  call void @show_set(i32 %and14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %24 = load i32, i32* %b, align 4
  %25 = load i32, i32* %a, align 4
  %neg15 = xor i32 %25, -1
  %and16 = and i32 %24, %neg15
  %tobool17 = icmp ne i32 %and16, 0
  %lnot = xor i1 %tobool17, true
  %26 = zext i1 %lnot to i64
  %cond18 = select i1 %lnot, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i32 0, i32 0), i8* %cond18)
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %a, align 4
  %neg20 = xor i32 %28, -1
  %and21 = and i32 %27, %neg20
  %tobool22 = icmp ne i32 %and21, 0
  %lnot23 = xor i1 %tobool22, true
  %29 = zext i1 %lnot23 to i64
  %cond24 = select i1 %lnot23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i32 0, i32 0), i8* %cond24)
  %30 = load i32, i32* %a, align 4
  %31 = load i32, i32* %b, align 4
  %or26 = or i32 %30, %31
  %32 = load i32, i32* %a, align 4
  %33 = load i32, i32* %b, align 4
  %and27 = and i32 %32, %33
  %neg28 = xor i32 %and27, -1
  %and29 = and i32 %or26, %neg28
  %34 = load i32, i32* %a, align 4
  %35 = load i32, i32* %b, align 4
  %neg30 = xor i32 %35, -1
  %and31 = and i32 %34, %neg30
  %36 = load i32, i32* %b, align 4
  %37 = load i32, i32* %a, align 4
  %neg32 = xor i32 %37, -1
  %and33 = and i32 %36, %neg32
  %or34 = or i32 %and31, %and33
  %cmp35 = icmp eq i32 %and29, %or34
  %38 = zext i1 %cmp35 to i64
  %cond36 = select i1 %cmp35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0)
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i32 0, i32 0), i8* %cond36)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %shl, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = var
%3:i1 = ule %1, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl1 = shl i32 1, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and = and i32 %3, %shl1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = var
%3:i1 = ule %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show_set()

; entering Souper's runOnFunction() for main()

; ModuleID = './Set.c.bc'
source_filename = "./Set.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%s is:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"\09%d%s in set a\0A\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" not\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"union(a, b)\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"c = common(a, b)\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"a - b\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"b - a\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"b is%s a subset of a\0A\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"c is%s a subset of a\0A\00", align 1
@.str.13 = private unnamed_addr constant [51 x i8] c"union(a, b) - common(a, b) %s union(a - b, b - a)\0A\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"equals\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"does not equal\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @show_set(i32 %x, i8* %name) #0 {
entry:
  %x.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i8* %name, i8** %name.addr, align 4
  %0 = load i8*, i8** %name.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %2 = load i32, i32* %x.addr, align 4
  %cmp = icmp ule i32 %shl, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %i, align 4
  %shl1 = shl i32 1, %4
  %and = and i32 %3, %shl1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %2 = load i32, i32* %a, align 4
  %or = or i32 %2, %shl
  store i32 %or, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 3
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i32, i32* %a, align 4
  call void @show_set(i32 %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc5, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 5
  br i1 %cmp2, label %for.body3, label %for.end6

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %a, align 4
  %8 = load i32, i32* %i, align 4
  %shl4 = shl i32 1, %8
  %and = and i32 %7, %shl4
  %tobool = icmp ne i32 %and, 0
  %9 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), i32 %6, i8* %cond)
  br label %for.inc5

for.inc5:                                         ; preds = %for.body3
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end6:                                         ; preds = %for.cond1
  %11 = load i32, i32* %a, align 4
  store i32 %11, i32* %b, align 4
  %12 = load i32, i32* %b, align 4
  %or7 = or i32 %12, 32
  store i32 %or7, i32* %b, align 4
  %13 = load i32, i32* %b, align 4
  %or8 = or i32 %13, 1024
  store i32 %or8, i32* %b, align 4
  %14 = load i32, i32* %b, align 4
  %and9 = and i32 %14, -2
  store i32 %and9, i32* %b, align 4
  %15 = load i32, i32* %b, align 4
  call void @show_set(i32 %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %16 = load i32, i32* %a, align 4
  %17 = load i32, i32* %b, align 4
  %or10 = or i32 %16, %17
  call void @show_set(i32 %or10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0))
  %18 = load i32, i32* %a, align 4
  %19 = load i32, i32* %b, align 4
  %and11 = and i32 %18, %19
  store i32 %and11, i32* %c, align 4
  call void @show_set(i32 %and11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i32 0, i32 0))
  %20 = load i32, i32* %a, align 4
  %21 = load i32, i32* %b, align 4
  %neg = xor i32 %21, -1
  %and12 = and i32 %20, %neg
  call void @show_set(i32 %and12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  %22 = load i32, i32* %b, align 4
  %23 = load i32, i32* %a, align 4
  %neg13 = xor i32 %23, -1
  %and14 = and i32 %22, %neg13
  call void @show_set(i32 %and14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0))
  %24 = load i32, i32* %b, align 4
  %25 = load i32, i32* %a, align 4
  %neg15 = xor i32 %25, -1
  %and16 = and i32 %24, %neg15
  %tobool17 = icmp ne i32 %and16, 0
  %lnot = xor i1 %tobool17, true
  %26 = zext i1 %lnot to i64
  %cond18 = select i1 %lnot, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i32 0, i32 0), i8* %cond18)
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %a, align 4
  %neg20 = xor i32 %28, -1
  %and21 = and i32 %27, %neg20
  %tobool22 = icmp ne i32 %and21, 0
  %lnot23 = xor i1 %tobool22, true
  %29 = zext i1 %lnot23 to i64
  %cond24 = select i1 %lnot23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i32 0, i32 0), i8* %cond24)
  %30 = load i32, i32* %a, align 4
  %31 = load i32, i32* %b, align 4
  %or26 = or i32 %30, %31
  %32 = load i32, i32* %a, align 4
  %33 = load i32, i32* %b, align 4
  %and27 = and i32 %32, %33
  %neg28 = xor i32 %and27, -1
  %and29 = and i32 %or26, %neg28
  %34 = load i32, i32* %a, align 4
  %35 = load i32, i32* %b, align 4
  %neg30 = xor i32 %35, -1
  %and31 = and i32 %34, %neg30
  %36 = load i32, i32* %b, align 4
  %37 = load i32, i32* %a, align 4
  %neg32 = xor i32 %37, -1
  %and33 = and i32 %36, %neg32
  %or34 = or i32 %and31, %and33
  %cmp35 = icmp eq i32 %and29, %or34
  %38 = zext i1 %cmp35 to i64
  %cond36 = select i1 %cmp35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0)
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13, i32 0, i32 0), i8* %cond36)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %2, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl4 = shl i32 1, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and = and i32 %7, %shl4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %or7 = or i32 %12, 32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = or 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111101111111111)

; *****
; For LLVM instruction:
;  %or8 = or i32 %13, 1024
; Looking for a replacement for:
%0:i32 = var
%1:i32 = or 1024:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %and9 = and i32 %14, -2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 4294967294:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or10 = or i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and11 = and i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg = xor i32 %21, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and12 = and i32 %20, %neg
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg13 = xor i32 %23, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and14 = and i32 %22, %neg13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg15 = xor i32 %25, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and16 = and i32 %24, %neg15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool17 = icmp ne i32 %and16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool17, true
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
%5:i1 = xor 1:i1, %4
infer %5

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg20 = xor i32 %28, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and21 = and i32 %27, %neg20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool22 = icmp ne i32 %and21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %lnot23 = xor i1 %tobool22, true
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
%5:i1 = xor 1:i1, %4
infer %5

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or26 = or i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %and27 = and i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2

; *****
; For LLVM instruction:
;  %neg28 = xor i32 %and27, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i32 = xor 4294967295:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %and29 = and i32 %or26, %neg28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = and %3, %4
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %2, %6
infer %7

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg30 = xor i32 %35, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and31 = and i32 %34, %neg30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %neg32 = xor i32 %37, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %and33 = and i32 %36, %neg32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3

; *****
; For LLVM instruction:
;  %or34 = or i32 %and31, %and33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %4, %6
%8:i32 = or %3, %7
infer %8

; *****
; For LLVM instruction:
;  %cmp35 = icmp eq i32 %and29, %or34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = and %3, %4
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %2, %6
%8:i32 = var
%9:i32 = var
%10:i32 = xor 4294967295:i32, %9
%11:i32 = and %8, %10
%12:i32 = var
%13:i32 = var
%14:i32 = xor 4294967295:i32, %13
%15:i32 = and %12, %14
%16:i32 = or %11, %15
%17:i1 = eq %7, %16
infer %17
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl 1:i32, %1
%3:i32 = or %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111011111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -131105
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = or 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -131073
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111101111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -132097
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = or 1024:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1024
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -131073
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 4294967294:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = xor 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = xor 4294967295:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3
%5:i1 = xor 1:i1, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i1 = ne 0:i32, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i32 = xor 4294967295:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = and %3, %4
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %2, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = and %0, %1
%3:i32 = xor 4294967295:i32, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2
%4:i32 = var
%5:i32 = var
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %4, %6
%8:i32 = or %3, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = xor 4294967295:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = xor 4294967295:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = xor 4294967295:i32, %1
%3:i32 = and %0, %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = or %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = and %3, %4
%6:i32 = xor 4294967295:i32, %5
%7:i32 = and %2, %6
%8:i32 = var
%9:i32 = var
%10:i32 = xor 4294967295:i32, %9
%11:i32 = and %8, %10
%12:i32 = var
%13:i32 = var
%14:i32 = xor 4294967295:i32, %13
%15:i32 = and %12, %14
%16:i32 = or %11, %15
%17:i1 = eq %7, %16
infer %17


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
