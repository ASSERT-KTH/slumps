
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for append()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = phi %0, %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 %6, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0111111111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i64 %8, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=1111111111111111111111111111111111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %or = or i64 1, %shl
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = or 1:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = phi %0, %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0111111111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9223372036854775807
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 1:i64
infer %1 (demandedBits=1111111111111111111111111111111111111111111111111111111111111110)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 1:i64
%2:i64 = or 1:i64, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 1:i64

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for append()

; entering Souper's runOnFunction() for show()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000000000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i64 %1, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i64 %and, 0
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 1:i64, %0
%2:i1 = ne 0:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool1, i32 40, i32 41
; Looking for a replacement for:
%0:i64 = var
%1:i64 = and 1:i64, %0
%2:i1 = ne 0:i64, %1 (hasExternalUses)
%3:i32 = select %2, 40:i32, 41:i32
infer %3

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=1111111111111111111111111111111111111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = lshr i64 %3, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = lshr %0, 1:i64
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000000000000000000000000000000000001)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = and 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = and 1:i64, %0
%2:i1 = ne 0:i64, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = and 1:i64, %0
%2:i1 = ne 0:i64, %1 (hasExternalUses)
%3:i32 = select %2, 40:i32, 41:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 41
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 40
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=1111111111111111111111111111111111111111111111111111111111111110)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = lshr %0, 1:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9223372036854775807
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for show()

; entering Souper's runOnFunction() for listtrees()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %arrayidx2, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for listtrees()

; entering Souper's runOnFunction() for assemble()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %rem.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %rem.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %rem.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp uge i32 %6, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %9, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %dec, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 2, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sh_prom = zext i32 %mul to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i64 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %shl = shl i64 %13, %sh_prom
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i64 = zext %2
%4:i64 = shl %0, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i64, i64* %arrayidx11, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i64 %shl, %17
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i32 = var
%3:i32 = mul 2:i32, %2
%4:i64 = zext %3
%5:i64 = shl %1, %4
%6:i64 = or %0, %5
infer %6

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %rem.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %20, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i64, i64* %t.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %sl.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %rem.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i64 = zext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i64 = zext %2
%4:i64 = shl %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i64 = zext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i32 = var
%3:i32 = mul 2:i32, %2
%4:i64 = zext %3
%5:i64 = shl %1, %4
%6:i64 = or %0, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 2:i32, %0
%2:i64 = zext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i64 = zext %2
%4:i64 = shl %0, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for assemble()

; entering Souper's runOnFunction() for mktrees()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mktrees()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './List_rooted_trees.c.bc'
source_filename = "./List_rooted_trees.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@list = hidden global i64* null, align 4
@cap = hidden global i32 0, align 4
@len = hidden global i32 0, align 4
@offset = hidden global <{ i32, i32, [30 x i32] }> <{ i32 0, i32 1, [30 x i32] zeroinitializer }>, align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [24 x i8] c"Number of %d-trees: %u\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @append(i64 %t) #0 {
entry:
  %t.addr = alloca i64, align 8
  store i64 %t, i64* %t.addr, align 8
  %0 = load i32, i32* @len, align 4
  %1 = load i32, i32* @cap, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @cap, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @cap, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, i32* @cap, align 4
  %4 = load i64*, i64** @list, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @cap, align 4
  %mul1 = mul i32 %6, 8
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @list, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i64, i64* %t.addr, align 8
  %shl = shl i64 %8, 1
  %or = or i64 1, %shl
  %9 = load i64*, i64** @list, align 4
  %10 = load i32, i32* @len, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* @len, align 4
  %arrayidx = getelementptr inbounds i64, i64* %9, i32 %10
  store i64 %or, i64* %arrayidx, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @show(i64 %t, i32 %len) #0 {
entry:
  %t.addr = alloca i64, align 8
  %len.addr = alloca i32, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %t.addr, align 8
  %and = and i64 %1, 1
  %tobool1 = icmp ne i64 %and, 0
  %2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 40, i32 41
  %call = call i32 @putchar(i32 %cond)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %t.addr, align 8
  %shr = lshr i64 %3, 1
  store i64 %shr, i64* %t.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @listtrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add = add i32 %3, 1
  %arrayidx1 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %4 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp ult i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64*, i64** @list, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i64, i64* %5, i32 %6
  %7 = load i64, i64* %arrayidx2, align 8
  %8 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %8, 2
  call void @show(i64 %7, i32 %mul)
  %call = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @assemble(i32 %n, i64 %t, i32 %sl, i32 %pos, i32 %rem) #0 {
entry:
  %n.addr = alloca i32, align 4
  %t.addr = alloca i64, align 8
  %sl.addr = alloca i32, align 4
  %pos.addr = alloca i32, align 4
  %rem.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i64 %t, i64* %t.addr, align 8
  store i32 %sl, i32* %sl.addr, align 4
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %rem, i32* %rem.addr, align 4
  %0 = load i32, i32* %rem.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %t.addr, align 8
  call void @append(i64 %1)
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sl.addr, align 4
  %3 = load i32, i32* %rem.addr, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %rem.addr, align 4
  store i32 %4, i32* %sl.addr, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %pos.addr, align 4
  br label %if.end10

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %pos.addr, align 4
  %7 = load i32, i32* %sl.addr, align 4
  %add = add i32 %7, 1
  %arrayidx2 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp uge i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.else
  %9 = load i32, i32* %sl.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %sl.addr, align 4
  %tobool5 = icmp ne i32 %dec, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then4
  br label %return

if.end7:                                          ; preds = %if.then4
  %10 = load i32, i32* %sl.addr, align 4
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %10
  %11 = load i32, i32* %arrayidx8, align 4
  store i32 %11, i32* %pos.addr, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end7, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then1
  %12 = load i32, i32* %n.addr, align 4
  %13 = load i64, i64* %t.addr, align 8
  %14 = load i32, i32* %sl.addr, align 4
  %mul = mul i32 2, %14
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %13, %sh_prom
  %15 = load i64*, i64** @list, align 4
  %16 = load i32, i32* %pos.addr, align 4
  %arrayidx11 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx11, align 8
  %or = or i64 %shl, %17
  %18 = load i32, i32* %sl.addr, align 4
  %19 = load i32, i32* %pos.addr, align 4
  %20 = load i32, i32* %rem.addr, align 4
  %21 = load i32, i32* %sl.addr, align 4
  %sub = sub i32 %20, %21
  call void @assemble(i32 %12, i64 %or, i32 %18, i32 %19, i32 %sub)
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i64, i64* %t.addr, align 8
  %24 = load i32, i32* %sl.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %add12 = add i32 %25, 1
  %26 = load i32, i32* %rem.addr, align 4
  call void @assemble(i32 %22, i64 %23, i32 %24, i32 %add12, i32 %26)
  br label %return

return:                                           ; preds = %if.end10, %if.then6, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mktrees(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add i32 %0, 1
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %3, 1
  call void @mktrees(i32 %sub)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub4 = sub i32 %5, 1
  %6 = load i32, i32* %n.addr, align 4
  %sub5 = sub i32 %6, 1
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %sub5
  %7 = load i32, i32* %arrayidx6, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub7 = sub i32 %8, 1
  call void @assemble(i32 %4, i64 0, i32 %sub4, i32 %7, i32 %sub7)
  %9 = load i32, i32* @len, align 4
  %10 = load i32, i32* %n.addr, align 4
  %add8 = add i32 %10, 1
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add8
  store i32 %9, i32* %arrayidx9, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %n, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %n, align 4
  %cmp3 = icmp sgt i32 %3, 25
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 5, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  call void @append(i64 0)
  %4 = load i32, i32* %n, align 4
  call void @mktrees(i32 %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %6 = load i32, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %add = add nsw i32 %7, 1
  %arrayidx4 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %add
  %8 = load i32, i32* %arrayidx4, align 4
  %9 = load i32, i32* %n, align 4
  %arrayidx5 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, [30 x i32] }>* @offset to [32 x i32]*), i32 0, i32 %9
  %10 = load i32, i32* %arrayidx5, align 4
  %sub = sub i32 %8, %10
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %6, i32 %sub)
  %11 = load i32, i32* %n, align 4
  call void @listtrees(i32 %11)
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sle i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %3, 25
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 25:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 25:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
