
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for valid_cc()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot = xor i1 %cmp20, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %3, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv5 = zext i1 %cmp4 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool8 = icmp ne i32 %call7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %5, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv11 = zext i1 %cmp10 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool14 = icmp ne i32 %call13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp eq i32 %7, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv17 = zext i1 %cmp16 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool20 = icmp ne i32 %call19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp eq i32 %9, 16
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv23 = zext i1 %cmp22 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 16:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool26 = icmp ne i32 %call25, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp eq i32 %11, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv29 = zext i1 %cmp28 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool32 = icmp ne i32 %call31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp34 = icmp eq i32 %13, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv35 = zext i1 %cmp34 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool38 = icmp ne i32 %call37, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp40 = icmp eq i32 %15, 29
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 29:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv41 = zext i1 %cmp40 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 29:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool44 = icmp ne i32 %call43, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = icmp eq i32 %17, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv47 = zext i1 %cmp46 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool50 = icmp ne i32 %call49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp eq i32 %19, 21
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv53 = zext i1 %cmp52 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool56 = icmp ne i32 %call55, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp58 = icmp eq i32 %21, 21
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv59 = zext i1 %cmp58 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool62 = icmp ne i32 %call61, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp64 = icmp eq i32 %23, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv65 = zext i1 %cmp64 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool68 = icmp ne i32 %call67, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp70 = icmp eq i32 %25, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv71 = zext i1 %cmp70 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool74 = icmp ne i32 %call73, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp76 = icmp eq i32 %27, 18
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv77 = zext i1 %cmp76 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool80 = icmp ne i32 %call79, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp82 = icmp eq i32 %29, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv83 = zext i1 %cmp82 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool86 = icmp ne i32 %call85, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp88 = icmp eq i32 %31, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv89 = zext i1 %cmp88 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool92 = icmp ne i32 %call91, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp94 = icmp eq i32 %33, 18
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv95 = zext i1 %cmp94 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool98 = icmp ne i32 %call97, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp100 = icmp eq i32 %35, 18
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv101 = zext i1 %cmp100 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool104 = icmp ne i32 %call103, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp106 = icmp eq i32 %37, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv107 = zext i1 %cmp106 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool110 = icmp ne i32 %call109, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp112 = icmp eq i32 %39, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv113 = zext i1 %cmp112 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool116 = icmp ne i32 %call115, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp118 = icmp eq i32 %41, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv119 = zext i1 %cmp118 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool122 = icmp ne i32 %call121, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp124 = icmp eq i32 %43, 23
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv125 = zext i1 %cmp124 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool128 = icmp ne i32 %call127, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp130 = icmp eq i32 %45, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv131 = zext i1 %cmp130 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool134 = icmp ne i32 %call133, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp136 = icmp eq i32 %47, 18
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv137 = zext i1 %cmp136 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool140 = icmp ne i32 %call139, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp142 = icmp eq i32 %49, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv143 = zext i1 %cmp142 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool146 = icmp ne i32 %call145, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp148 = icmp eq i32 %51, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv149 = zext i1 %cmp148 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool152 = icmp ne i32 %call151, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp154 = icmp eq i32 %53, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 26:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv155 = zext i1 %cmp154 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 26:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool158 = icmp ne i32 %call157, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp160 = icmp eq i32 %55, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv161 = zext i1 %cmp160 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool164 = icmp ne i32 %call163, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp166 = icmp eq i32 %57, 23
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv167 = zext i1 %cmp166 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool170 = icmp ne i32 %call169, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp172 = icmp eq i32 %59, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv173 = zext i1 %cmp172 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool176 = icmp ne i32 %call175, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp178 = icmp eq i32 %61, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv179 = zext i1 %cmp178 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool182 = icmp ne i32 %call181, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp184 = icmp eq i32 %63, 30
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 30:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv185 = zext i1 %cmp184 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 30:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool188 = icmp ne i32 %call187, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp190 = icmp eq i32 %65, 21
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv191 = zext i1 %cmp190 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool194 = icmp ne i32 %call193, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp196 = icmp eq i32 %67, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv197 = zext i1 %cmp196 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool200 = icmp ne i32 %call199, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp202 = icmp eq i32 %69, 21
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv203 = zext i1 %cmp202 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool206 = icmp ne i32 %call205, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp208 = icmp eq i32 %71, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv209 = zext i1 %cmp208 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool212 = icmp ne i32 %call211, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp214 = icmp eq i32 %73, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv215 = zext i1 %cmp214 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool218 = icmp ne i32 %call217, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp220 = icmp eq i32 %75, 19
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv221 = zext i1 %cmp220 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 19:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool224 = icmp ne i32 %call223, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp226 = icmp eq i32 %77, 31
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 31:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv227 = zext i1 %cmp226 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 31:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool230 = icmp ne i32 %call229, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp232 = icmp eq i32 %79, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv233 = zext i1 %cmp232 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool236 = icmp ne i32 %call235, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp238 = icmp eq i32 %81, 30
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 30:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv239 = zext i1 %cmp238 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 30:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool242 = icmp ne i32 %call241, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp244 = icmp eq i32 %83, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv245 = zext i1 %cmp244 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool248 = icmp ne i32 %call247, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp250 = icmp eq i32 %85, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv251 = zext i1 %cmp250 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool254 = icmp ne i32 %call253, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp256 = icmp eq i32 %87, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv257 = zext i1 %cmp256 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool260 = icmp ne i32 %call259, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp262 = icmp eq i32 %89, 18
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv263 = zext i1 %cmp262 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool266 = icmp ne i32 %call265, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp268 = icmp eq i32 %91, 15
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 15:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv269 = zext i1 %cmp268 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 15:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool272 = icmp ne i32 %call271, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp274 = icmp eq i32 %93, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv275 = zext i1 %cmp274 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool278 = icmp ne i32 %call277, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp280 = icmp eq i32 %95, 29
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 29:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv281 = zext i1 %cmp280 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 29:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool284 = icmp ne i32 %call283, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %97 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp286 = icmp eq i32 %97, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv287 = zext i1 %cmp286 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool290 = icmp ne i32 %call289, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp292 = icmp eq i32 %99, 25
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 25:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv293 = zext i1 %cmp292 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 25:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool296 = icmp ne i32 %call295, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp298 = icmp eq i32 %101, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv299 = zext i1 %cmp298 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool302 = icmp ne i32 %call301, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %103 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp304 = icmp eq i32 %103, 27
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv305 = zext i1 %cmp304 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool308 = icmp ne i32 %call307, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp310 = icmp eq i32 %105, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv311 = zext i1 %cmp310 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool314 = icmp ne i32 %call313, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp316 = icmp eq i32 %107, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv317 = zext i1 %cmp316 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool320 = icmp ne i32 %call319, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %109 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp322 = icmp eq i32 %109, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv323 = zext i1 %cmp322 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool326 = icmp ne i32 %call325, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %111 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp328 = icmp eq i32 %111, 19
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 19:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv329 = zext i1 %cmp328 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 19:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool332 = icmp ne i32 %call331, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp334 = icmp eq i32 %113, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv335 = zext i1 %cmp334 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool338 = icmp ne i32 %call337, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %115 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp340 = icmp eq i32 %115, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv341 = zext i1 %cmp340 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool344 = icmp ne i32 %call343, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %117 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp346 = icmp eq i32 %117, 21
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv347 = zext i1 %cmp346 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool350 = icmp ne i32 %call349, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %119 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp352 = icmp eq i32 %119, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv353 = zext i1 %cmp352 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool356 = icmp ne i32 %call355, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %121 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp358 = icmp eq i32 %121, 26
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 26:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv359 = zext i1 %cmp358 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 26:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool362 = icmp ne i32 %call361, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %123 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp364 = icmp eq i32 %123, 23
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv365 = zext i1 %cmp364 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 23:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool368 = icmp ne i32 %call367, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %125 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp370 = icmp eq i32 %125, 22
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv371 = zext i1 %cmp370 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool374 = icmp ne i32 %call373, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %127 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp376 = icmp eq i32 %127, 24
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv377 = zext i1 %cmp376 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %128 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 28:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 28:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 24:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 24:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 20:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 20:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 16:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 22:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 22:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 29:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 29:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 21:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 21:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 18:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 18:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 27:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 27:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 23:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 23:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 26:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 26:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 30:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 30:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 19:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 19:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 31:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 31:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 15:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 15:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 25:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 25:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for valid_cc()

; entering Souper's runOnFunction() for strip()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot = xor i1 %cmp20, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %conv, 32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 32:i32
infer %2

; *****
; For LLVM instruction:
;  %conv4 = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 32:i32
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, %conv4
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i1 = sle %2, 32:i32
%4:i32 = zext %3
%5:i32 = addnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 32:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 32:i32
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i1 = sle %2, 32:i32
%4:i32 = zext %3
%5:i32 = addnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i1 = sle %1, 32:i32
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for strip()

; entering Souper's runOnFunction() for mod97()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot = xor i1 %cmp20, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %0, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %parts, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem1 = srem i32 %4, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %rem1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %1, 7:i32
%3:i1 = ne 0:i32, %2
%4:i32 = zext %3
%5:i32 = addnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %2, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = srem %2, 7:i32
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %1, %5
%7:i1 = sle %0, %6
infer %7

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %sub, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mulnsw 7:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call6 = call i32 @atoi(i8* %arraydecay5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem7 = srem i32 %call6, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div8 = sdiv i32 %7, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %div8, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv10 = trunc i32 %add9 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem11 = srem i32 %8, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %rem11, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv13 = trunc i32 %add12 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call16 = call i32 @atoi(i8* %arraydecay15)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem17 = srem i32 %call16, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 97:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108864
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 7:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %1, 7:i32
%3:i1 = ne 0:i32, %2
%4:i32 = zext %3
%5:i32 = addnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = srem %0, 7:i32

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = srem %2, 7:i32
%4:i1 = ne 0:i32, %3
%5:i32 = zext %4
%6:i32 = addnsw %1, %5
%7:i1 = sle %0, %6
infer %7


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = srem %0, 7:i32
%2:i1 = ne 0:i32, %1

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mulnsw 7:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2464
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 97:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 175328128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 168804208
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 50
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 10:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 52
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mod97()

; entering Souper's runOnFunction() for valid_iban()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot = xor i1 %cmp20, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strip(i8* %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @isdigit(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub i32 %conv3, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @isupper(i32 %conv8) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %call9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub14 = sub i32 %conv13, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp15 = icmp ult i32 %sub14, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv18 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub19 = sub i32 %conv18, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp20 = icmp ult i32 %sub19, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
infer %3

; *****
; For LLVM instruction:
;  %lnot = xor i1 %cmp20, true
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %lnot22 = xor i1 %lnot, true
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
%5:i1 = xor 1:i1, %4
infer %5

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
%5:i1 = xor 1:i1, %4
%6:i32 = zext %5
infer %6

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, %lnot.ext
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = sub %2, 65:i32
%4:i1 = ult %3, 26:i32
%5:i1 = xor 1:i1, %4
%6:i1 = xor 1:i1, %5
%7:i32 = zext %6
%8:i32 = addnsw %0, %7
infer %8

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool24 = icmp ne i32 %call23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add32 = add nsw i32 %add31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp slt i32 %35, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i8, i8* %arrayidx40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv41 = sext i8 %39 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call42 = call i32 @isdigit(i32 %conv41) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool43 = icmp ne i32 %call42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %arrayidx45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv46 = sext i8 %42 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub47 = sub i32 %conv46, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp48 = icmp ult i32 %sub47, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i8, i8* %arrayidx51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %arrayidx53, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv54 = sext i8 %50 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub55 = sub nsw i32 %conv54, 55
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
infer %2

; *****
; For LLVM instruction:
;  %div = sdiv i32 %sub55, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add56 = add nsw i32 %div, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv57 = trunc i32 %add56 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i8, i8* %arrayidx59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %55 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub61 = sub nsw i32 %conv60, 55
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
infer %2

; *****
; For LLVM instruction:
;  %rem = srem i32 %sub61, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add62 = add nsw i32 %rem, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv63 = trunc i32 %add62 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc68 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %59, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add71 = add nsw i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call72 = call i32 @mod97(i8* %60, i32 %add71)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %call72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv74 = zext i1 %cmp73 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -66
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
%5:i1 = xor 1:i1, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32

Cost = 3
second query is UNSAT

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot = xor i1 %cmp20, true
  %lnot22 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot22 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %lnot22 = xor i1 %lnot, true"
; from ""
; with "  %cmp20 = icmp ult i32 %sub19, 26" in:
"%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i1 = xor 1:i1, %3
%5:i1 = xor 1:i1, %4
cand %5 %3
"
; with "  %cmp20 = icmp ult i32 %sub19, 26"

Module after replacement:
; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot.ext = zext i1 %cmp20 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for valid_iban()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for valid_iban()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot.ext = zext i1 %cmp20 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strip(i8* %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @isdigit(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub i32 %conv3, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp4 = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @isupper(i32 %conv8) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %call9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub14 = sub i32 %conv13, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp15 = icmp ult i32 %sub14, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv18 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub19 = sub i32 %conv18, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp20 = icmp ult i32 %sub19, 26
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
infer %3

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %cmp20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, %lnot.ext
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = sub %2, 65:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
%6:i32 = addnsw %0, %5
infer %6

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool24 = icmp ne i32 %call23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add32 = add nsw i32 %add31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp slt i32 %35, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i8, i8* %arrayidx40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv41 = sext i8 %39 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call42 = call i32 @isdigit(i32 %conv41) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool43 = icmp ne i32 %call42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %arrayidx45, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv46 = sext i8 %42 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub47 = sub i32 %conv46, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp48 = icmp ult i32 %sub47, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i8, i8* %arrayidx51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %arrayidx53, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv54 = sext i8 %50 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub55 = sub nsw i32 %conv54, 55
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
infer %2

; *****
; For LLVM instruction:
;  %div = sdiv i32 %sub55, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add56 = add nsw i32 %div, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv57 = trunc i32 %add56 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i8, i8* %arrayidx59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv60 = sext i8 %55 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub61 = sub nsw i32 %conv60, 55
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
infer %2

; *****
; For LLVM instruction:
;  %rem = srem i32 %sub61, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add62 = add nsw i32 %rem, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv63 = trunc i32 %add62 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc68 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %59, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %sz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add71 = add nsw i32 %61, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call72 = call i32 @mod97(i8* %60, i32 %add71)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %call72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv74 = zext i1 %cmp73 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = sub %2, 65:i32
%4:i1 = ult %3, 26:i32
%5:i32 = zext %4
%6:i32 = addnsw %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 65:i32
%3:i1 = ult %2, 26:i32
%4:i32 = zext %3

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -55
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 251
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 43
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 36
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = sdiv %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 43
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 36
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 251
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 43
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32

Cost = 7
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 55:i32
%3:i32 = srem %2, 10:i32
%4:i32 = addnsw 48:i32, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 43
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for valid_iban()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './IBAN.c.bc'
source_filename = "./IBAN.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"AL\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"AD\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"AT\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"AZ\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"BE\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"BH\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"BA\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"BR\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"BG\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"CR\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"HR\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"CY\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"CZ\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"DK\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"DO\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"EE\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"FO\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"FI\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"FR\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"GE\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"DE\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"GI\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"GR\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"GL\00", align 1
@.str.24 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"IS\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"IE\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"IL\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"IT\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"KZ\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"KW\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"LV\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"LB\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"LI\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"LT\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"LU\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"MK\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"MT\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"MR\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"MU\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"MC\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"ME\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"NL\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"PK\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"PS\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"PL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"PT\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c"RO\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"SM\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"SA\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"RS\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"SK\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"SI\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"SE\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"CH\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"TN\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"TR\00", align 1
@.str.61 = private unnamed_addr constant [3 x i8] c"AE\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"GB\00", align 1
@.str.63 = private unnamed_addr constant [3 x i8] c"VG\00", align 1
@__const.mod97.rem = private unnamed_addr constant [10 x i8] c"00\00\00\00\00\00\00\00\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"%s is %svalid.\0A\00", align 1
@.str.65 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"in\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_cc(i8* %iban, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %1, 28
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %iban.addr, align 4
  %call1 = call i32 @strncmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %len.addr, align 4
  %cmp4 = icmp eq i32 %3, 24
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %4 = load i8*, i8** %iban.addr, align 4
  %call7 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 2)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end6
  %5 = load i32, i32* %len.addr, align 4
  %cmp10 = icmp eq i32 %5, 20
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %6 = load i8*, i8** %iban.addr, align 4
  %call13 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 2)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %if.end12
  %7 = load i32, i32* %len.addr, align 4
  %cmp16 = icmp eq i32 %7, 28
  %conv17 = zext i1 %cmp16 to i32
  store i32 %conv17, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end12
  %8 = load i8*, i8** %iban.addr, align 4
  %call19 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 2)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end24, label %if.then21

if.then21:                                        ; preds = %if.end18
  %9 = load i32, i32* %len.addr, align 4
  %cmp22 = icmp eq i32 %9, 16
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  %10 = load i8*, i8** %iban.addr, align 4
  %call25 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 2)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end30, label %if.then27

if.then27:                                        ; preds = %if.end24
  %11 = load i32, i32* %len.addr, align 4
  %cmp28 = icmp eq i32 %11, 22
  %conv29 = zext i1 %cmp28 to i32
  store i32 %conv29, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %12 = load i8*, i8** %iban.addr, align 4
  %call31 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i32 2)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end30
  %13 = load i32, i32* %len.addr, align 4
  %cmp34 = icmp eq i32 %13, 20
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.end30
  %14 = load i8*, i8** %iban.addr, align 4
  %call37 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i32 2)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end36
  %15 = load i32, i32* %len.addr, align 4
  %cmp40 = icmp eq i32 %15, 29
  %conv41 = zext i1 %cmp40 to i32
  store i32 %conv41, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end36
  %16 = load i8*, i8** %iban.addr, align 4
  %call43 = call i32 @strncmp(i8* %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i32 2)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end48, label %if.then45

if.then45:                                        ; preds = %if.end42
  %17 = load i32, i32* %len.addr, align 4
  %cmp46 = icmp eq i32 %17, 22
  %conv47 = zext i1 %cmp46 to i32
  store i32 %conv47, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end42
  %18 = load i8*, i8** %iban.addr, align 4
  %call49 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i32 2)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end54, label %if.then51

if.then51:                                        ; preds = %if.end48
  %19 = load i32, i32* %len.addr, align 4
  %cmp52 = icmp eq i32 %19, 21
  %conv53 = zext i1 %cmp52 to i32
  store i32 %conv53, i32* %retval, align 4
  br label %return

if.end54:                                         ; preds = %if.end48
  %20 = load i8*, i8** %iban.addr, align 4
  %call55 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 2)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %if.end54
  %21 = load i32, i32* %len.addr, align 4
  %cmp58 = icmp eq i32 %21, 21
  %conv59 = zext i1 %cmp58 to i32
  store i32 %conv59, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %22 = load i8*, i8** %iban.addr, align 4
  %call61 = call i32 @strncmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i32 2)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end66, label %if.then63

if.then63:                                        ; preds = %if.end60
  %23 = load i32, i32* %len.addr, align 4
  %cmp64 = icmp eq i32 %23, 28
  %conv65 = zext i1 %cmp64 to i32
  store i32 %conv65, i32* %retval, align 4
  br label %return

if.end66:                                         ; preds = %if.end60
  %24 = load i8*, i8** %iban.addr, align 4
  %call67 = call i32 @strncmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i32 2)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end72, label %if.then69

if.then69:                                        ; preds = %if.end66
  %25 = load i32, i32* %len.addr, align 4
  %cmp70 = icmp eq i32 %25, 24
  %conv71 = zext i1 %cmp70 to i32
  store i32 %conv71, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.end66
  %26 = load i8*, i8** %iban.addr, align 4
  %call73 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i32 2)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.end72
  %27 = load i32, i32* %len.addr, align 4
  %cmp76 = icmp eq i32 %27, 18
  %conv77 = zext i1 %cmp76 to i32
  store i32 %conv77, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.end72
  %28 = load i8*, i8** %iban.addr, align 4
  %call79 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i32 2)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end84, label %if.then81

if.then81:                                        ; preds = %if.end78
  %29 = load i32, i32* %len.addr, align 4
  %cmp82 = icmp eq i32 %29, 28
  %conv83 = zext i1 %cmp82 to i32
  store i32 %conv83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %if.end78
  %30 = load i8*, i8** %iban.addr, align 4
  %call85 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i32 2)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end84
  %31 = load i32, i32* %len.addr, align 4
  %cmp88 = icmp eq i32 %31, 20
  %conv89 = zext i1 %cmp88 to i32
  store i32 %conv89, i32* %retval, align 4
  br label %return

if.end90:                                         ; preds = %if.end84
  %32 = load i8*, i8** %iban.addr, align 4
  %call91 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i32 2)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end96, label %if.then93

if.then93:                                        ; preds = %if.end90
  %33 = load i32, i32* %len.addr, align 4
  %cmp94 = icmp eq i32 %33, 18
  %conv95 = zext i1 %cmp94 to i32
  store i32 %conv95, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %34 = load i8*, i8** %iban.addr, align 4
  %call97 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i32 2)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.end102, label %if.then99

if.then99:                                        ; preds = %if.end96
  %35 = load i32, i32* %len.addr, align 4
  %cmp100 = icmp eq i32 %35, 18
  %conv101 = zext i1 %cmp100 to i32
  store i32 %conv101, i32* %retval, align 4
  br label %return

if.end102:                                        ; preds = %if.end96
  %36 = load i8*, i8** %iban.addr, align 4
  %call103 = call i32 @strncmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i32 2)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end108, label %if.then105

if.then105:                                       ; preds = %if.end102
  %37 = load i32, i32* %len.addr, align 4
  %cmp106 = icmp eq i32 %37, 27
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.end102
  %38 = load i8*, i8** %iban.addr, align 4
  %call109 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i32 2)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end108
  %39 = load i32, i32* %len.addr, align 4
  %cmp112 = icmp eq i32 %39, 22
  %conv113 = zext i1 %cmp112 to i32
  store i32 %conv113, i32* %retval, align 4
  br label %return

if.end114:                                        ; preds = %if.end108
  %40 = load i8*, i8** %iban.addr, align 4
  %call115 = call i32 @strncmp(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i32 0, i32 0), i32 2)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end120, label %if.then117

if.then117:                                       ; preds = %if.end114
  %41 = load i32, i32* %len.addr, align 4
  %cmp118 = icmp eq i32 %41, 22
  %conv119 = zext i1 %cmp118 to i32
  store i32 %conv119, i32* %retval, align 4
  br label %return

if.end120:                                        ; preds = %if.end114
  %42 = load i8*, i8** %iban.addr, align 4
  %call121 = call i32 @strncmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 2)
  %tobool122 = icmp ne i32 %call121, 0
  br i1 %tobool122, label %if.end126, label %if.then123

if.then123:                                       ; preds = %if.end120
  %43 = load i32, i32* %len.addr, align 4
  %cmp124 = icmp eq i32 %43, 23
  %conv125 = zext i1 %cmp124 to i32
  store i32 %conv125, i32* %retval, align 4
  br label %return

if.end126:                                        ; preds = %if.end120
  %44 = load i8*, i8** %iban.addr, align 4
  %call127 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0), i32 2)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.end126
  %45 = load i32, i32* %len.addr, align 4
  %cmp130 = icmp eq i32 %45, 27
  %conv131 = zext i1 %cmp130 to i32
  store i32 %conv131, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.end126
  %46 = load i8*, i8** %iban.addr, align 4
  %call133 = call i32 @strncmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i32 2)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end138, label %if.then135

if.then135:                                       ; preds = %if.end132
  %47 = load i32, i32* %len.addr, align 4
  %cmp136 = icmp eq i32 %47, 18
  %conv137 = zext i1 %cmp136 to i32
  store i32 %conv137, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %if.end132
  %48 = load i8*, i8** %iban.addr, align 4
  %call139 = call i32 @strncmp(i8* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i32 0, i32 0), i32 2)
  %tobool140 = icmp ne i32 %call139, 0
  br i1 %tobool140, label %if.end144, label %if.then141

if.then141:                                       ; preds = %if.end138
  %49 = load i32, i32* %len.addr, align 4
  %cmp142 = icmp eq i32 %49, 28
  %conv143 = zext i1 %cmp142 to i32
  store i32 %conv143, i32* %retval, align 4
  br label %return

if.end144:                                        ; preds = %if.end138
  %50 = load i8*, i8** %iban.addr, align 4
  %call145 = call i32 @strncmp(i8* %50, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i32 2)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end150, label %if.then147

if.then147:                                       ; preds = %if.end144
  %51 = load i32, i32* %len.addr, align 4
  %cmp148 = icmp eq i32 %51, 28
  %conv149 = zext i1 %cmp148 to i32
  store i32 %conv149, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.end144
  %52 = load i8*, i8** %iban.addr, align 4
  %call151 = call i32 @strncmp(i8* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i32 2)
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.end150
  %53 = load i32, i32* %len.addr, align 4
  %cmp154 = icmp eq i32 %53, 26
  %conv155 = zext i1 %cmp154 to i32
  store i32 %conv155, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end150
  %54 = load i8*, i8** %iban.addr, align 4
  %call157 = call i32 @strncmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i32 2)
  %tobool158 = icmp ne i32 %call157, 0
  br i1 %tobool158, label %if.end162, label %if.then159

if.then159:                                       ; preds = %if.end156
  %55 = load i32, i32* %len.addr, align 4
  %cmp160 = icmp eq i32 %55, 22
  %conv161 = zext i1 %cmp160 to i32
  store i32 %conv161, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %if.end156
  %56 = load i8*, i8** %iban.addr, align 4
  %call163 = call i32 @strncmp(i8* %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 2)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.end168, label %if.then165

if.then165:                                       ; preds = %if.end162
  %57 = load i32, i32* %len.addr, align 4
  %cmp166 = icmp eq i32 %57, 23
  %conv167 = zext i1 %cmp166 to i32
  store i32 %conv167, i32* %retval, align 4
  br label %return

if.end168:                                        ; preds = %if.end162
  %58 = load i8*, i8** %iban.addr, align 4
  %call169 = call i32 @strncmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 2)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %if.end168
  %59 = load i32, i32* %len.addr, align 4
  %cmp172 = icmp eq i32 %59, 27
  %conv173 = zext i1 %cmp172 to i32
  store i32 %conv173, i32* %retval, align 4
  br label %return

if.end174:                                        ; preds = %if.end168
  %60 = load i8*, i8** %iban.addr, align 4
  %call175 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end180, label %if.then177

if.then177:                                       ; preds = %if.end174
  %61 = load i32, i32* %len.addr, align 4
  %cmp178 = icmp eq i32 %61, 20
  %conv179 = zext i1 %cmp178 to i32
  store i32 %conv179, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end174
  %62 = load i8*, i8** %iban.addr, align 4
  %call181 = call i32 @strncmp(i8* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 2)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %if.end186, label %if.then183

if.then183:                                       ; preds = %if.end180
  %63 = load i32, i32* %len.addr, align 4
  %cmp184 = icmp eq i32 %63, 30
  %conv185 = zext i1 %cmp184 to i32
  store i32 %conv185, i32* %retval, align 4
  br label %return

if.end186:                                        ; preds = %if.end180
  %64 = load i8*, i8** %iban.addr, align 4
  %call187 = call i32 @strncmp(i8* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 2)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end192, label %if.then189

if.then189:                                       ; preds = %if.end186
  %65 = load i32, i32* %len.addr, align 4
  %cmp190 = icmp eq i32 %65, 21
  %conv191 = zext i1 %cmp190 to i32
  store i32 %conv191, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end186
  %66 = load i8*, i8** %iban.addr, align 4
  %call193 = call i32 @strncmp(i8* %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 2)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end198, label %if.then195

if.then195:                                       ; preds = %if.end192
  %67 = load i32, i32* %len.addr, align 4
  %cmp196 = icmp eq i32 %67, 28
  %conv197 = zext i1 %cmp196 to i32
  store i32 %conv197, i32* %retval, align 4
  br label %return

if.end198:                                        ; preds = %if.end192
  %68 = load i8*, i8** %iban.addr, align 4
  %call199 = call i32 @strncmp(i8* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2)
  %tobool200 = icmp ne i32 %call199, 0
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end198
  %69 = load i32, i32* %len.addr, align 4
  %cmp202 = icmp eq i32 %69, 21
  %conv203 = zext i1 %cmp202 to i32
  store i32 %conv203, i32* %retval, align 4
  br label %return

if.end204:                                        ; preds = %if.end198
  %70 = load i8*, i8** %iban.addr, align 4
  %call205 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 2)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end210, label %if.then207

if.then207:                                       ; preds = %if.end204
  %71 = load i32, i32* %len.addr, align 4
  %cmp208 = icmp eq i32 %71, 20
  %conv209 = zext i1 %cmp208 to i32
  store i32 %conv209, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end204
  %72 = load i8*, i8** %iban.addr, align 4
  %call211 = call i32 @strncmp(i8* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 2)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end210
  %73 = load i32, i32* %len.addr, align 4
  %cmp214 = icmp eq i32 %73, 20
  %conv215 = zext i1 %cmp214 to i32
  store i32 %conv215, i32* %retval, align 4
  br label %return

if.end216:                                        ; preds = %if.end210
  %74 = load i8*, i8** %iban.addr, align 4
  %call217 = call i32 @strncmp(i8* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i32 0, i32 0), i32 2)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end222, label %if.then219

if.then219:                                       ; preds = %if.end216
  %75 = load i32, i32* %len.addr, align 4
  %cmp220 = icmp eq i32 %75, 19
  %conv221 = zext i1 %cmp220 to i32
  store i32 %conv221, i32* %retval, align 4
  br label %return

if.end222:                                        ; preds = %if.end216
  %76 = load i8*, i8** %iban.addr, align 4
  %call223 = call i32 @strncmp(i8* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 2)
  %tobool224 = icmp ne i32 %call223, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end222
  %77 = load i32, i32* %len.addr, align 4
  %cmp226 = icmp eq i32 %77, 31
  %conv227 = zext i1 %cmp226 to i32
  store i32 %conv227, i32* %retval, align 4
  br label %return

if.end228:                                        ; preds = %if.end222
  %78 = load i8*, i8** %iban.addr, align 4
  %call229 = call i32 @strncmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0), i32 2)
  %tobool230 = icmp ne i32 %call229, 0
  br i1 %tobool230, label %if.end234, label %if.then231

if.then231:                                       ; preds = %if.end228
  %79 = load i32, i32* %len.addr, align 4
  %cmp232 = icmp eq i32 %79, 27
  %conv233 = zext i1 %cmp232 to i32
  store i32 %conv233, i32* %retval, align 4
  br label %return

if.end234:                                        ; preds = %if.end228
  %80 = load i8*, i8** %iban.addr, align 4
  %call235 = call i32 @strncmp(i8* %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %if.end234
  %81 = load i32, i32* %len.addr, align 4
  %cmp238 = icmp eq i32 %81, 30
  %conv239 = zext i1 %cmp238 to i32
  store i32 %conv239, i32* %retval, align 4
  br label %return

if.end240:                                        ; preds = %if.end234
  %82 = load i8*, i8** %iban.addr, align 4
  %call241 = call i32 @strncmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0), i32 2)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end246, label %if.then243

if.then243:                                       ; preds = %if.end240
  %83 = load i32, i32* %len.addr, align 4
  %cmp244 = icmp eq i32 %83, 27
  %conv245 = zext i1 %cmp244 to i32
  store i32 %conv245, i32* %retval, align 4
  br label %return

if.end246:                                        ; preds = %if.end240
  %84 = load i8*, i8** %iban.addr, align 4
  %call247 = call i32 @strncmp(i8* %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2)
  %tobool248 = icmp ne i32 %call247, 0
  br i1 %tobool248, label %if.end252, label %if.then249

if.then249:                                       ; preds = %if.end246
  %85 = load i32, i32* %len.addr, align 4
  %cmp250 = icmp eq i32 %85, 24
  %conv251 = zext i1 %cmp250 to i32
  store i32 %conv251, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end246
  %86 = load i8*, i8** %iban.addr, align 4
  %call253 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i32 2)
  %tobool254 = icmp ne i32 %call253, 0
  br i1 %tobool254, label %if.end258, label %if.then255

if.then255:                                       ; preds = %if.end252
  %87 = load i32, i32* %len.addr, align 4
  %cmp256 = icmp eq i32 %87, 22
  %conv257 = zext i1 %cmp256 to i32
  store i32 %conv257, i32* %retval, align 4
  br label %return

if.end258:                                        ; preds = %if.end252
  %88 = load i8*, i8** %iban.addr, align 4
  %call259 = call i32 @strncmp(i8* %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end264, label %if.then261

if.then261:                                       ; preds = %if.end258
  %89 = load i32, i32* %len.addr, align 4
  %cmp262 = icmp eq i32 %89, 18
  %conv263 = zext i1 %cmp262 to i32
  store i32 %conv263, i32* %retval, align 4
  br label %return

if.end264:                                        ; preds = %if.end258
  %90 = load i8*, i8** %iban.addr, align 4
  %call265 = call i32 @strncmp(i8* %90, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i32 2)
  %tobool266 = icmp ne i32 %call265, 0
  br i1 %tobool266, label %if.end270, label %if.then267

if.then267:                                       ; preds = %if.end264
  %91 = load i32, i32* %len.addr, align 4
  %cmp268 = icmp eq i32 %91, 15
  %conv269 = zext i1 %cmp268 to i32
  store i32 %conv269, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.end264
  %92 = load i8*, i8** %iban.addr, align 4
  %call271 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2)
  %tobool272 = icmp ne i32 %call271, 0
  br i1 %tobool272, label %if.end276, label %if.then273

if.then273:                                       ; preds = %if.end270
  %93 = load i32, i32* %len.addr, align 4
  %cmp274 = icmp eq i32 %93, 24
  %conv275 = zext i1 %cmp274 to i32
  store i32 %conv275, i32* %retval, align 4
  br label %return

if.end276:                                        ; preds = %if.end270
  %94 = load i8*, i8** %iban.addr, align 4
  %call277 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i32 2)
  %tobool278 = icmp ne i32 %call277, 0
  br i1 %tobool278, label %if.end282, label %if.then279

if.then279:                                       ; preds = %if.end276
  %95 = load i32, i32* %len.addr, align 4
  %cmp280 = icmp eq i32 %95, 29
  %conv281 = zext i1 %cmp280 to i32
  store i32 %conv281, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %if.end276
  %96 = load i8*, i8** %iban.addr, align 4
  %call283 = call i32 @strncmp(i8* %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0), i32 2)
  %tobool284 = icmp ne i32 %call283, 0
  br i1 %tobool284, label %if.end288, label %if.then285

if.then285:                                       ; preds = %if.end282
  %97 = load i32, i32* %len.addr, align 4
  %cmp286 = icmp eq i32 %97, 28
  %conv287 = zext i1 %cmp286 to i32
  store i32 %conv287, i32* %retval, align 4
  br label %return

if.end288:                                        ; preds = %if.end282
  %98 = load i8*, i8** %iban.addr, align 4
  %call289 = call i32 @strncmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i32 2)
  %tobool290 = icmp ne i32 %call289, 0
  br i1 %tobool290, label %if.end294, label %if.then291

if.then291:                                       ; preds = %if.end288
  %99 = load i32, i32* %len.addr, align 4
  %cmp292 = icmp eq i32 %99, 25
  %conv293 = zext i1 %cmp292 to i32
  store i32 %conv293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.end288
  %100 = load i8*, i8** %iban.addr, align 4
  %call295 = call i32 @strncmp(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2)
  %tobool296 = icmp ne i32 %call295, 0
  br i1 %tobool296, label %if.end300, label %if.then297

if.then297:                                       ; preds = %if.end294
  %101 = load i32, i32* %len.addr, align 4
  %cmp298 = icmp eq i32 %101, 24
  %conv299 = zext i1 %cmp298 to i32
  store i32 %conv299, i32* %retval, align 4
  br label %return

if.end300:                                        ; preds = %if.end294
  %102 = load i8*, i8** %iban.addr, align 4
  %call301 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i32 2)
  %tobool302 = icmp ne i32 %call301, 0
  br i1 %tobool302, label %if.end306, label %if.then303

if.then303:                                       ; preds = %if.end300
  %103 = load i32, i32* %len.addr, align 4
  %cmp304 = icmp eq i32 %103, 27
  %conv305 = zext i1 %cmp304 to i32
  store i32 %conv305, i32* %retval, align 4
  br label %return

if.end306:                                        ; preds = %if.end300
  %104 = load i8*, i8** %iban.addr, align 4
  %call307 = call i32 @strncmp(i8* %104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i32 0, i32 0), i32 2)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end312, label %if.then309

if.then309:                                       ; preds = %if.end306
  %105 = load i32, i32* %len.addr, align 4
  %cmp310 = icmp eq i32 %105, 24
  %conv311 = zext i1 %cmp310 to i32
  store i32 %conv311, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end306
  %106 = load i8*, i8** %iban.addr, align 4
  %call313 = call i32 @strncmp(i8* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i32 2)
  %tobool314 = icmp ne i32 %call313, 0
  br i1 %tobool314, label %if.end318, label %if.then315

if.then315:                                       ; preds = %if.end312
  %107 = load i32, i32* %len.addr, align 4
  %cmp316 = icmp eq i32 %107, 22
  %conv317 = zext i1 %cmp316 to i32
  store i32 %conv317, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end312
  %108 = load i8*, i8** %iban.addr, align 4
  %call319 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i32 0, i32 0), i32 2)
  %tobool320 = icmp ne i32 %call319, 0
  br i1 %tobool320, label %if.end324, label %if.then321

if.then321:                                       ; preds = %if.end318
  %109 = load i32, i32* %len.addr, align 4
  %cmp322 = icmp eq i32 %109, 24
  %conv323 = zext i1 %cmp322 to i32
  store i32 %conv323, i32* %retval, align 4
  br label %return

if.end324:                                        ; preds = %if.end318
  %110 = load i8*, i8** %iban.addr, align 4
  %call325 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i32 2)
  %tobool326 = icmp ne i32 %call325, 0
  br i1 %tobool326, label %if.end330, label %if.then327

if.then327:                                       ; preds = %if.end324
  %111 = load i32, i32* %len.addr, align 4
  %cmp328 = icmp eq i32 %111, 19
  %conv329 = zext i1 %cmp328 to i32
  store i32 %conv329, i32* %retval, align 4
  br label %return

if.end330:                                        ; preds = %if.end324
  %112 = load i8*, i8** %iban.addr, align 4
  %call331 = call i32 @strncmp(i8* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i32 0, i32 0), i32 2)
  %tobool332 = icmp ne i32 %call331, 0
  br i1 %tobool332, label %if.end336, label %if.then333

if.then333:                                       ; preds = %if.end330
  %113 = load i32, i32* %len.addr, align 4
  %cmp334 = icmp eq i32 %113, 24
  %conv335 = zext i1 %cmp334 to i32
  store i32 %conv335, i32* %retval, align 4
  br label %return

if.end336:                                        ; preds = %if.end330
  %114 = load i8*, i8** %iban.addr, align 4
  %call337 = call i32 @strncmp(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i32 2)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.end342, label %if.then339

if.then339:                                       ; preds = %if.end336
  %115 = load i32, i32* %len.addr, align 4
  %cmp340 = icmp eq i32 %115, 24
  %conv341 = zext i1 %cmp340 to i32
  store i32 %conv341, i32* %retval, align 4
  br label %return

if.end342:                                        ; preds = %if.end336
  %116 = load i8*, i8** %iban.addr, align 4
  %call343 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i32 0, i32 0), i32 2)
  %tobool344 = icmp ne i32 %call343, 0
  br i1 %tobool344, label %if.end348, label %if.then345

if.then345:                                       ; preds = %if.end342
  %117 = load i32, i32* %len.addr, align 4
  %cmp346 = icmp eq i32 %117, 21
  %conv347 = zext i1 %cmp346 to i32
  store i32 %conv347, i32* %retval, align 4
  br label %return

if.end348:                                        ; preds = %if.end342
  %118 = load i8*, i8** %iban.addr, align 4
  %call349 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i32 2)
  %tobool350 = icmp ne i32 %call349, 0
  br i1 %tobool350, label %if.end354, label %if.then351

if.then351:                                       ; preds = %if.end348
  %119 = load i32, i32* %len.addr, align 4
  %cmp352 = icmp eq i32 %119, 24
  %conv353 = zext i1 %cmp352 to i32
  store i32 %conv353, i32* %retval, align 4
  br label %return

if.end354:                                        ; preds = %if.end348
  %120 = load i8*, i8** %iban.addr, align 4
  %call355 = call i32 @strncmp(i8* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i32 2)
  %tobool356 = icmp ne i32 %call355, 0
  br i1 %tobool356, label %if.end360, label %if.then357

if.then357:                                       ; preds = %if.end354
  %121 = load i32, i32* %len.addr, align 4
  %cmp358 = icmp eq i32 %121, 26
  %conv359 = zext i1 %cmp358 to i32
  store i32 %conv359, i32* %retval, align 4
  br label %return

if.end360:                                        ; preds = %if.end354
  %122 = load i8*, i8** %iban.addr, align 4
  %call361 = call i32 @strncmp(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61, i32 0, i32 0), i32 2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %if.end366, label %if.then363

if.then363:                                       ; preds = %if.end360
  %123 = load i32, i32* %len.addr, align 4
  %cmp364 = icmp eq i32 %123, 23
  %conv365 = zext i1 %cmp364 to i32
  store i32 %conv365, i32* %retval, align 4
  br label %return

if.end366:                                        ; preds = %if.end360
  %124 = load i8*, i8** %iban.addr, align 4
  %call367 = call i32 @strncmp(i8* %124, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i32 2)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end372, label %if.then369

if.then369:                                       ; preds = %if.end366
  %125 = load i32, i32* %len.addr, align 4
  %cmp370 = icmp eq i32 %125, 22
  %conv371 = zext i1 %cmp370 to i32
  store i32 %conv371, i32* %retval, align 4
  br label %return

if.end372:                                        ; preds = %if.end366
  %126 = load i8*, i8** %iban.addr, align 4
  %call373 = call i32 @strncmp(i8* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.63, i32 0, i32 0), i32 2)
  %tobool374 = icmp ne i32 %call373, 0
  br i1 %tobool374, label %if.end378, label %if.then375

if.then375:                                       ; preds = %if.end372
  %127 = load i32, i32* %len.addr, align 4
  %cmp376 = icmp eq i32 %127, 24
  %conv377 = zext i1 %cmp376 to i32
  store i32 %conv377, i32* %retval, align 4
  br label %return

if.end378:                                        ; preds = %if.end372
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end378, %if.then375, %if.then369, %if.then363, %if.then357, %if.then351, %if.then345, %if.then339, %if.then333, %if.then327, %if.then321, %if.then315, %if.then309, %if.then303, %if.then297, %if.then291, %if.then285, %if.then279, %if.then273, %if.then267, %if.then261, %if.then255, %if.then249, %if.then243, %if.then237, %if.then231, %if.then225, %if.then219, %if.then213, %if.then207, %if.then201, %if.then195, %if.then189, %if.then183, %if.then177, %if.then171, %if.then165, %if.then159, %if.then153, %if.then147, %if.then141, %if.then135, %if.then129, %if.then123, %if.then117, %if.then111, %if.then105, %if.then99, %if.then93, %if.then87, %if.then81, %if.then75, %if.then69, %if.then63, %if.then57, %if.then51, %if.then45, %if.then39, %if.then33, %if.then27, %if.then21, %if.then15, %if.then9, %if.then3, %if.then
  %128 = load i32, i32* %retval, align 4
  ret i32 %128
}

declare i32 @strncmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @strip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 -1, i32* %i, align 4
  store i32 0, i32* %m, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %inc
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %6 = load i8*, i8** %s.addr, align 4
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %m, align 4
  %sub = sub nsw i32 %7, %8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %sub
  store i8 %5, i8* %arrayidx2, align 1
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp sle i32 %conv, 32
  %conv4 = zext i1 %cmp to i32
  %12 = load i32, i32* %m, align 4
  %add = add nsw i32 %12, %conv4
  store i32 %add, i32* %m, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %13 = load i8*, i8** %s.addr, align 4
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %m, align 4
  %sub5 = sub nsw i32 %14, %15
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i32 %sub5
  store i8 0, i8* %arrayidx6, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %m, align 4
  %sub7 = sub nsw i32 %16, %17
  ret i32 %sub7
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @mod97(i8* %s, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %parts = alloca i32, align 4
  %rem = alloca [10 x i8], align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %div = sdiv i32 %0, 7
  store i32 %div, i32* %parts, align 4
  %1 = bitcast [10 x i8]* %rem to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.mod97.rem, i32 0, i32 0), i32 10, i1 false)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %parts, align 4
  %4 = load i32, i32* %len.addr, align 4
  %rem1 = srem i32 %4, 7
  %cmp = icmp ne i32 %rem1, 0
  %conv = zext i1 %cmp to i32
  %add = add nsw i32 %3, %conv
  %cmp2 = icmp sle i32 %2, %add
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 2
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %6, 1
  %mul = mul nsw i32 %sub, 7
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i32 %mul
  %call = call i8* @strncpy(i8* %add.ptr, i8* %add.ptr4, i32 7)
  %arraydecay5 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call6 = call i32 @atoi(i8* %arraydecay5)
  %rem7 = srem i32 %call6, 97
  store i32 %rem7, i32* %j, align 4
  %7 = load i32, i32* %j, align 4
  %div8 = sdiv i32 %7, 10
  %add9 = add nsw i32 %div8, 48
  %conv10 = trunc i32 %add9 to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  store i8 %conv10, i8* %arrayidx, align 1
  %8 = load i32, i32* %j, align 4
  %rem11 = srem i32 %8, 10
  %add12 = add nsw i32 %rem11, 48
  %conv13 = trunc i32 %add12 to i8
  %arrayidx14 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 1
  store i8 %conv13, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay15 = getelementptr inbounds [10 x i8], [10 x i8]* %rem, i32 0, i32 0
  %call16 = call i32 @atoi(i8* %arraydecay15)
  %rem17 = srem i32 %call16, 97
  ret i32 %rem17
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @valid_iban(i8* %iban) #0 {
entry:
  %retval = alloca i32, align 4
  %iban.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %sz = alloca i32, align 4
  %rot = alloca i8*, align 4
  %trans = alloca i8*, align 4
  store i8* %iban, i8** %iban.addr, align 4
  store i32 0, i32* %l, align 4
  %0 = load i8*, i8** %iban.addr, align 4
  %call = call i32 @strip(i8* %0)
  store i32 %call, i32* %sz, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %sz, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %iban.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @isdigit(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %iban.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %sub = sub i32 %conv3, 48
  %cmp4 = icmp ult i32 %sub, 10
  br i1 %cmp4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true6, label %cond.false11

cond.true6:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %iban.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %11 to i32
  %call9 = call i32 @isupper(i32 %conv8) #4
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end, label %if.then

cond.false11:                                     ; preds = %land.lhs.true
  %12 = load i8*, i8** %iban.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %14 to i32
  %sub14 = sub i32 %conv13, 65
  %cmp15 = icmp ult i32 %sub14, 26
  br i1 %cmp15, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false11, %cond.true6
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.false11, %cond.true6, %cond.false, %cond.true
  %15 = load i8*, i8** %iban.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %17 to i32
  %sub19 = sub i32 %conv18, 65
  %cmp20 = icmp ult i32 %sub19, 26
  %lnot.ext = zext i1 %cmp20 to i32
  %18 = load i32, i32* %l, align 4
  %add = add nsw i32 %18, %lnot.ext
  store i32 %add, i32* %l, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %iban.addr, align 4
  %21 = load i32, i32* %sz, align 4
  %call23 = call i32 @valid_cc(i8* %20, i32 %21)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %for.end
  %22 = load i32, i32* %sz, align 4
  %23 = alloca i8, i32 %22, align 16
  store i8* %23, i8** %rot, align 4
  %24 = load i8*, i8** %rot, align 4
  %25 = load i8*, i8** %iban.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %25, i32 4
  %call27 = call i8* @strcpy(i8* %24, i8* %add.ptr)
  %26 = load i8*, i8** %rot, align 4
  %27 = load i32, i32* %sz, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %26, i32 %27
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr28, i32 -4
  %28 = load i8*, i8** %iban.addr, align 4
  %call30 = call i8* @strncpy(i8* %add.ptr29, i8* %28, i32 4)
  %29 = load i32, i32* %sz, align 4
  %30 = load i32, i32* %l, align 4
  %add31 = add nsw i32 %29, %30
  %add32 = add nsw i32 %add31, 1
  %31 = alloca i8, i32 %add32, align 16
  store i8* %31, i8** %trans, align 4
  %32 = load i8*, i8** %trans, align 4
  %33 = load i32, i32* %sz, align 4
  %34 = load i32, i32* %l, align 4
  %add33 = add nsw i32 %33, %34
  %arrayidx34 = getelementptr inbounds i8, i8* %32, i32 %add33
  store i8 0, i8* %arrayidx34, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc67, %if.end26
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %sz, align 4
  %cmp36 = icmp slt i32 %35, %36
  br i1 %cmp36, label %for.body38, label %for.end70

for.body38:                                       ; preds = %for.cond35
  br i1 false, label %cond.true39, label %cond.false44

cond.true39:                                      ; preds = %for.body38
  %37 = load i8*, i8** %rot, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %call42 = call i32 @isdigit(i32 %conv41) #4
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then50, label %if.else

cond.false44:                                     ; preds = %for.body38
  %40 = load i8*, i8** %rot, align 4
  %41 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %cond.false44, %cond.true39
  %43 = load i8*, i8** %rot, align 4
  %44 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds i8, i8* %43, i32 %44
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %trans, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i32 %47
  store i8 %45, i8* %arrayidx52, align 1
  br label %if.end66

if.else:                                          ; preds = %cond.false44, %cond.true39
  %48 = load i8*, i8** %rot, align 4
  %49 = load i32, i32* %i, align 4
  %arrayidx53 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %50 to i32
  %sub55 = sub nsw i32 %conv54, 55
  %div = sdiv i32 %sub55, 10
  %add56 = add nsw i32 %div, 48
  %conv57 = trunc i32 %add56 to i8
  %51 = load i8*, i8** %trans, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i32 %52
  store i8 %conv57, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %rot, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i32 %54
  %55 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %55 to i32
  %sub61 = sub nsw i32 %conv60, 55
  %rem = srem i32 %sub61, 10
  %add62 = add nsw i32 %rem, 48
  %conv63 = trunc i32 %add62 to i8
  %56 = load i8*, i8** %trans, align 4
  %57 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %57, 1
  store i32 %inc64, i32* %j, align 4
  %arrayidx65 = getelementptr inbounds i8, i8* %56, i32 %inc64
  store i8 %conv63, i8* %arrayidx65, align 1
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then50
  br label %for.inc67

for.inc67:                                        ; preds = %if.end66
  %58 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i, align 4
  %59 = load i32, i32* %j, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %j, align 4
  br label %for.cond35

for.end70:                                        ; preds = %for.cond35
  %60 = load i8*, i8** %trans, align 4
  %61 = load i32, i32* %sz, align 4
  %62 = load i32, i32* %l, align 4
  %add71 = add nsw i32 %61, %62
  %call72 = call i32 @mod97(i8* %60, i32 %add71)
  %cmp73 = icmp eq i32 %call72, 1
  %conv74 = zext i1 %cmp73 to i32
  store i32 %conv74, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end70, %if.then25, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #3

; Function Attrs: nounwind readonly
declare i32 @isupper(i32 %0) #3

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %_, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %_.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %_, i32* %_.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %_.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %_.addr, align 4
  %1 = load i8**, i8*** %argv.addr, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1
  store i8** %incdec.ptr, i8*** %argv.addr, align 4
  %2 = load i8*, i8** %incdec.ptr, align 4
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %argv.addr, align 4
  %4 = load i8*, i8** %3, align 4
  %5 = load i8**, i8*** %argv.addr, align 4
  %6 = load i8*, i8** %5, align 4
  %call = call i32 @valid_iban(i8* %6)
  %tobool1 = icmp ne i32 %call, 0
  %7 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i8* %4, i8* %cond)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %_.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @valid_iban(i8* %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
