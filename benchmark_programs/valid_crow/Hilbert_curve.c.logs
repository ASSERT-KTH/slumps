
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for rot()

; ModuleID = './Hilbert_curve.c.bc'
source_filename = "./Hilbert_curve.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.point = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @rot(i32 %n, %struct.point* %p, i32 %rx, i32 %ry) #0 {
entry:
  %n.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %rx.addr = alloca i32, align 4
  %ry.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 %rx, i32* %rx.addr, align 4
  store i32 %ry, i32* %ry.addr, align 4
  %0 = load i32, i32* %ry.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %rx.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %3, i32 0, i32 0
  %4 = load i32, i32* %x, align 4
  %sub2 = sub nsw i32 %sub, %4
  %5 = load %struct.point*, %struct.point** %p.addr, align 4
  %x3 = getelementptr inbounds %struct.point, %struct.point* %5, i32 0, i32 0
  store i32 %sub2, i32* %x3, align 4
  %6 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %6, 1
  %7 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %7, i32 0, i32 1
  %8 = load i32, i32* %y, align 4
  %sub5 = sub nsw i32 %sub4, %8
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %y6 = getelementptr inbounds %struct.point, %struct.point* %9, i32 0, i32 1
  store i32 %sub5, i32* %y6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %10 = load %struct.point*, %struct.point** %p.addr, align 4
  %x7 = getelementptr inbounds %struct.point, %struct.point* %10, i32 0, i32 0
  %11 = load i32, i32* %x7, align 4
  store i32 %11, i32* %t, align 4
  %12 = load %struct.point*, %struct.point** %p.addr, align 4
  %y8 = getelementptr inbounds %struct.point, %struct.point* %12, i32 0, i32 1
  %13 = load i32, i32* %y8, align 4
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  store i32 %13, i32* %x9, align 4
  %15 = load i32, i32* %t, align 4
  %16 = load %struct.point*, %struct.point** %p.addr, align 4
  %y10 = getelementptr inbounds %struct.point, %struct.point* %16, i32 0, i32 1
  store i32 %15, i32* %y10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @d2pt(i32 %n, i32 %d, %struct.point* %p) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  %rx = alloca i32, align 4
  %ry = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 1, i32* %s, align 4
  %0 = load i32, i32* %d.addr, align 4
  store i32 %0, i32* %t, align 4
  %1 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %1, i32 0, i32 0
  store i32 0, i32* %x, align 4
  %2 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %2, i32 0, i32 1
  store i32 0, i32* %y, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %s, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %t, align 4
  %div = sdiv i32 %5, 2
  %and = and i32 1, %div
  store i32 %and, i32* %rx, align 4
  %6 = load i32, i32* %t, align 4
  %7 = load i32, i32* %rx, align 4
  %xor = xor i32 %6, %7
  %and1 = and i32 1, %xor
  store i32 %and1, i32* %ry, align 4
  %8 = load i32, i32* %s, align 4
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %10 = load i32, i32* %rx, align 4
  %11 = load i32, i32* %ry, align 4
  call void @rot(i32 %8, %struct.point* %9, i32 %10, i32 %11)
  %12 = load i32, i32* %s, align 4
  %13 = load i32, i32* %rx, align 4
  %mul = mul nsw i32 %12, %13
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x2 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  %15 = load i32, i32* %x2, align 4
  %add = add nsw i32 %15, %mul
  store i32 %add, i32* %x2, align 4
  %16 = load i32, i32* %s, align 4
  %17 = load i32, i32* %ry, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load %struct.point*, %struct.point** %p.addr, align 4
  %y4 = getelementptr inbounds %struct.point, %struct.point* %18, i32 0, i32 1
  %19 = load i32, i32* %y4, align 4
  %add5 = add nsw i32 %19, %mul3
  store i32 %add5, i32* %y4, align 4
  %20 = load i32, i32* %t, align 4
  %div6 = sdiv i32 %20, 4
  store i32 %div6, i32* %t, align 4
  %21 = load i32, i32* %s, align 4
  %mul7 = mul nsw i32 %21, 2
  store i32 %mul7, i32* %s, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %d = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %cx = alloca i32, align 4
  %cy = alloca i32, align 4
  %px = alloca i32, align 4
  %py = alloca i32, align 4
  %pts = alloca [96 x [96 x i8]], align 16
  %curr = alloca %struct.point, align 4
  %prev = alloca %struct.point, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %x, align 4
  %cmp = icmp slt i32 %0, 96
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %y, align 4
  %cmp2 = icmp slt i32 %1, 96
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %x, align 4
  %arrayidx = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %2
  %3 = load i32, i32* %y, align 4
  %arrayidx4 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx, i32 0, i32 %3
  store i8 32, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %4 = load i32, i32* %y, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %5 = load i32, i32* %x, align 4
  %inc6 = add nsw i32 %5, 1
  store i32 %inc6, i32* %x, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %y8 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  store i32 0, i32* %y8, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  store i32 0, i32* %x9, align 4
  %arrayidx10 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx10, i32 0, i32 0
  store i8 46, i8* %arrayidx11, align 16
  store i32 1, i32* %d, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc68, %for.end7
  %6 = load i32, i32* %d, align 4
  %cmp13 = icmp slt i32 %6, 1024
  br i1 %cmp13, label %for.body14, label %for.end70

for.body14:                                       ; preds = %for.cond12
  %7 = load i32, i32* %d, align 4
  call void @d2pt(i32 32, i32 %7, %struct.point* %curr)
  %x15 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 0
  %8 = load i32, i32* %x15, align 4
  %mul = mul nsw i32 %8, 3
  store i32 %mul, i32* %cx, align 4
  %y16 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 1
  %9 = load i32, i32* %y16, align 4
  %mul17 = mul nsw i32 %9, 3
  store i32 %mul17, i32* %cy, align 4
  %x18 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  %10 = load i32, i32* %x18, align 4
  %mul19 = mul nsw i32 %10, 3
  store i32 %mul19, i32* %px, align 4
  %y20 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  %11 = load i32, i32* %y20, align 4
  %mul21 = mul nsw i32 %11, 3
  store i32 %mul21, i32* %py, align 4
  %12 = load i32, i32* %cx, align 4
  %arrayidx22 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %12
  %13 = load i32, i32* %cy, align 4
  %arrayidx23 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx22, i32 0, i32 %13
  store i8 46, i8* %arrayidx23, align 1
  %14 = load i32, i32* %cx, align 4
  %15 = load i32, i32* %px, align 4
  %cmp24 = icmp eq i32 %14, %15
  br i1 %cmp24, label %if.then, label %if.else44

if.then:                                          ; preds = %for.body14
  %16 = load i32, i32* %py, align 4
  %17 = load i32, i32* %cy, align 4
  %cmp25 = icmp slt i32 %16, %17
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then
  %18 = load i32, i32* %py, align 4
  %add = add nsw i32 %18, 1
  store i32 %add, i32* %y, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc32, %if.then26
  %19 = load i32, i32* %y, align 4
  %20 = load i32, i32* %cy, align 4
  %cmp28 = icmp slt i32 %19, %20
  br i1 %cmp28, label %for.body29, label %for.end34

for.body29:                                       ; preds = %for.cond27
  %21 = load i32, i32* %cx, align 4
  %arrayidx30 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %21
  %22 = load i32, i32* %y, align 4
  %arrayidx31 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx30, i32 0, i32 %22
  store i8 124, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body29
  %23 = load i32, i32* %y, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %y, align 4
  br label %for.cond27

for.end34:                                        ; preds = %for.cond27
  br label %if.end

if.else:                                          ; preds = %if.then
  %24 = load i32, i32* %cy, align 4
  %add35 = add nsw i32 %24, 1
  store i32 %add35, i32* %y, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc41, %if.else
  %25 = load i32, i32* %y, align 4
  %26 = load i32, i32* %py, align 4
  %cmp37 = icmp slt i32 %25, %26
  br i1 %cmp37, label %for.body38, label %for.end43

for.body38:                                       ; preds = %for.cond36
  %27 = load i32, i32* %cx, align 4
  %arrayidx39 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %27
  %28 = load i32, i32* %y, align 4
  %arrayidx40 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx39, i32 0, i32 %28
  store i8 124, i8* %arrayidx40, align 1
  br label %for.inc41

for.inc41:                                        ; preds = %for.body38
  %29 = load i32, i32* %y, align 4
  %inc42 = add nsw i32 %29, 1
  store i32 %inc42, i32* %y, align 4
  br label %for.cond36

for.end43:                                        ; preds = %for.cond36
  br label %if.end

if.end:                                           ; preds = %for.end43, %for.end34
  br label %if.end67

if.else44:                                        ; preds = %for.body14
  %30 = load i32, i32* %px, align 4
  %31 = load i32, i32* %cx, align 4
  %cmp45 = icmp slt i32 %30, %31
  br i1 %cmp45, label %if.then46, label %if.else56

if.then46:                                        ; preds = %if.else44
  %32 = load i32, i32* %px, align 4
  %add47 = add nsw i32 %32, 1
  store i32 %add47, i32* %x, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc53, %if.then46
  %33 = load i32, i32* %x, align 4
  %34 = load i32, i32* %cx, align 4
  %cmp49 = icmp slt i32 %33, %34
  br i1 %cmp49, label %for.body50, label %for.end55

for.body50:                                       ; preds = %for.cond48
  %35 = load i32, i32* %x, align 4
  %arrayidx51 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %35
  %36 = load i32, i32* %cy, align 4
  %arrayidx52 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx51, i32 0, i32 %36
  store i8 95, i8* %arrayidx52, align 1
  br label %for.inc53

for.inc53:                                        ; preds = %for.body50
  %37 = load i32, i32* %x, align 4
  %inc54 = add nsw i32 %37, 1
  store i32 %inc54, i32* %x, align 4
  br label %for.cond48

for.end55:                                        ; preds = %for.cond48
  br label %if.end66

if.else56:                                        ; preds = %if.else44
  %38 = load i32, i32* %cx, align 4
  %add57 = add nsw i32 %38, 1
  store i32 %add57, i32* %x, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc63, %if.else56
  %39 = load i32, i32* %x, align 4
  %40 = load i32, i32* %px, align 4
  %cmp59 = icmp slt i32 %39, %40
  br i1 %cmp59, label %for.body60, label %for.end65

for.body60:                                       ; preds = %for.cond58
  %41 = load i32, i32* %x, align 4
  %arrayidx61 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %41
  %42 = load i32, i32* %cy, align 4
  %arrayidx62 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx61, i32 0, i32 %42
  store i8 95, i8* %arrayidx62, align 1
  br label %for.inc63

for.inc63:                                        ; preds = %for.body60
  %43 = load i32, i32* %x, align 4
  %inc64 = add nsw i32 %43, 1
  store i32 %inc64, i32* %x, align 4
  br label %for.cond58

for.end65:                                        ; preds = %for.cond58
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %for.end55
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end
  %44 = bitcast %struct.point* %prev to i8*
  %45 = bitcast %struct.point* %curr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %44, i8* align 4 %45, i32 8, i1 false)
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67
  %46 = load i32, i32* %d, align 4
  %inc69 = add nsw i32 %46, 1
  store i32 %inc69, i32* %d, align 4
  br label %for.cond12

for.end70:                                        ; preds = %for.cond12
  store i32 0, i32* %x, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc83, %for.end70
  %47 = load i32, i32* %x, align 4
  %cmp72 = icmp slt i32 %47, 96
  br i1 %cmp72, label %for.body73, label %for.end85

for.body73:                                       ; preds = %for.cond71
  store i32 0, i32* %y, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc79, %for.body73
  %48 = load i32, i32* %y, align 4
  %cmp75 = icmp slt i32 %48, 96
  br i1 %cmp75, label %for.body76, label %for.end81

for.body76:                                       ; preds = %for.cond74
  %49 = load i32, i32* %y, align 4
  %arrayidx77 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %49
  %50 = load i32, i32* %x, align 4
  %arrayidx78 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx77, i32 0, i32 %50
  %51 = load i8, i8* %arrayidx78, align 1
  %conv = sext i8 %51 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %conv)
  br label %for.inc79

for.inc79:                                        ; preds = %for.body76
  %52 = load i32, i32* %y, align 4
  %inc80 = add nsw i32 %52, 1
  store i32 %inc80, i32* %y, align 4
  br label %for.cond74

for.end81:                                        ; preds = %for.cond74
  %call82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc83

for.inc83:                                        ; preds = %for.end81
  %53 = load i32, i32* %x, align 4
  %inc84 = add nsw i32 %53, 1
  store i32 %inc84, i32* %x, align 4
  br label %for.cond71

for.end85:                                        ; preds = %for.cond71
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %ry.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub2 = sub nsw i32 %sub, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 %sub4, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %x7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %y8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = var
%3:i32 = subnsw %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rot()

; entering Souper's runOnFunction() for d2pt()

; ModuleID = './Hilbert_curve.c.bc'
source_filename = "./Hilbert_curve.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.point = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @rot(i32 %n, %struct.point* %p, i32 %rx, i32 %ry) #0 {
entry:
  %n.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %rx.addr = alloca i32, align 4
  %ry.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 %rx, i32* %rx.addr, align 4
  store i32 %ry, i32* %ry.addr, align 4
  %0 = load i32, i32* %ry.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %rx.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %3, i32 0, i32 0
  %4 = load i32, i32* %x, align 4
  %sub2 = sub nsw i32 %sub, %4
  %5 = load %struct.point*, %struct.point** %p.addr, align 4
  %x3 = getelementptr inbounds %struct.point, %struct.point* %5, i32 0, i32 0
  store i32 %sub2, i32* %x3, align 4
  %6 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %6, 1
  %7 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %7, i32 0, i32 1
  %8 = load i32, i32* %y, align 4
  %sub5 = sub nsw i32 %sub4, %8
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %y6 = getelementptr inbounds %struct.point, %struct.point* %9, i32 0, i32 1
  store i32 %sub5, i32* %y6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %10 = load %struct.point*, %struct.point** %p.addr, align 4
  %x7 = getelementptr inbounds %struct.point, %struct.point* %10, i32 0, i32 0
  %11 = load i32, i32* %x7, align 4
  store i32 %11, i32* %t, align 4
  %12 = load %struct.point*, %struct.point** %p.addr, align 4
  %y8 = getelementptr inbounds %struct.point, %struct.point* %12, i32 0, i32 1
  %13 = load i32, i32* %y8, align 4
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  store i32 %13, i32* %x9, align 4
  %15 = load i32, i32* %t, align 4
  %16 = load %struct.point*, %struct.point** %p.addr, align 4
  %y10 = getelementptr inbounds %struct.point, %struct.point* %16, i32 0, i32 1
  store i32 %15, i32* %y10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @d2pt(i32 %n, i32 %d, %struct.point* %p) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  %rx = alloca i32, align 4
  %ry = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 1, i32* %s, align 4
  %0 = load i32, i32* %d.addr, align 4
  store i32 %0, i32* %t, align 4
  %1 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %1, i32 0, i32 0
  store i32 0, i32* %x, align 4
  %2 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %2, i32 0, i32 1
  store i32 0, i32* %y, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %s, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %t, align 4
  %div = sdiv i32 %5, 2
  %and = and i32 1, %div
  store i32 %and, i32* %rx, align 4
  %6 = load i32, i32* %t, align 4
  %7 = load i32, i32* %rx, align 4
  %xor = xor i32 %6, %7
  %and1 = and i32 1, %xor
  store i32 %and1, i32* %ry, align 4
  %8 = load i32, i32* %s, align 4
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %10 = load i32, i32* %rx, align 4
  %11 = load i32, i32* %ry, align 4
  call void @rot(i32 %8, %struct.point* %9, i32 %10, i32 %11)
  %12 = load i32, i32* %s, align 4
  %13 = load i32, i32* %rx, align 4
  %mul = mul nsw i32 %12, %13
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x2 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  %15 = load i32, i32* %x2, align 4
  %add = add nsw i32 %15, %mul
  store i32 %add, i32* %x2, align 4
  %16 = load i32, i32* %s, align 4
  %17 = load i32, i32* %ry, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load %struct.point*, %struct.point** %p.addr, align 4
  %y4 = getelementptr inbounds %struct.point, %struct.point* %18, i32 0, i32 1
  %19 = load i32, i32* %y4, align 4
  %add5 = add nsw i32 %19, %mul3
  store i32 %add5, i32* %y4, align 4
  %20 = load i32, i32* %t, align 4
  %div6 = sdiv i32 %20, 4
  store i32 %div6, i32* %t, align 4
  %21 = load i32, i32* %s, align 4
  %mul7 = mul nsw i32 %21, 2
  store i32 %mul7, i32* %s, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %d = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %cx = alloca i32, align 4
  %cy = alloca i32, align 4
  %px = alloca i32, align 4
  %py = alloca i32, align 4
  %pts = alloca [96 x [96 x i8]], align 16
  %curr = alloca %struct.point, align 4
  %prev = alloca %struct.point, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %x, align 4
  %cmp = icmp slt i32 %0, 96
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %y, align 4
  %cmp2 = icmp slt i32 %1, 96
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %x, align 4
  %arrayidx = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %2
  %3 = load i32, i32* %y, align 4
  %arrayidx4 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx, i32 0, i32 %3
  store i8 32, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %4 = load i32, i32* %y, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %5 = load i32, i32* %x, align 4
  %inc6 = add nsw i32 %5, 1
  store i32 %inc6, i32* %x, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %y8 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  store i32 0, i32* %y8, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  store i32 0, i32* %x9, align 4
  %arrayidx10 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx10, i32 0, i32 0
  store i8 46, i8* %arrayidx11, align 16
  store i32 1, i32* %d, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc68, %for.end7
  %6 = load i32, i32* %d, align 4
  %cmp13 = icmp slt i32 %6, 1024
  br i1 %cmp13, label %for.body14, label %for.end70

for.body14:                                       ; preds = %for.cond12
  %7 = load i32, i32* %d, align 4
  call void @d2pt(i32 32, i32 %7, %struct.point* %curr)
  %x15 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 0
  %8 = load i32, i32* %x15, align 4
  %mul = mul nsw i32 %8, 3
  store i32 %mul, i32* %cx, align 4
  %y16 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 1
  %9 = load i32, i32* %y16, align 4
  %mul17 = mul nsw i32 %9, 3
  store i32 %mul17, i32* %cy, align 4
  %x18 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  %10 = load i32, i32* %x18, align 4
  %mul19 = mul nsw i32 %10, 3
  store i32 %mul19, i32* %px, align 4
  %y20 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  %11 = load i32, i32* %y20, align 4
  %mul21 = mul nsw i32 %11, 3
  store i32 %mul21, i32* %py, align 4
  %12 = load i32, i32* %cx, align 4
  %arrayidx22 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %12
  %13 = load i32, i32* %cy, align 4
  %arrayidx23 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx22, i32 0, i32 %13
  store i8 46, i8* %arrayidx23, align 1
  %14 = load i32, i32* %cx, align 4
  %15 = load i32, i32* %px, align 4
  %cmp24 = icmp eq i32 %14, %15
  br i1 %cmp24, label %if.then, label %if.else44

if.then:                                          ; preds = %for.body14
  %16 = load i32, i32* %py, align 4
  %17 = load i32, i32* %cy, align 4
  %cmp25 = icmp slt i32 %16, %17
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then
  %18 = load i32, i32* %py, align 4
  %add = add nsw i32 %18, 1
  store i32 %add, i32* %y, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc32, %if.then26
  %19 = load i32, i32* %y, align 4
  %20 = load i32, i32* %cy, align 4
  %cmp28 = icmp slt i32 %19, %20
  br i1 %cmp28, label %for.body29, label %for.end34

for.body29:                                       ; preds = %for.cond27
  %21 = load i32, i32* %cx, align 4
  %arrayidx30 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %21
  %22 = load i32, i32* %y, align 4
  %arrayidx31 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx30, i32 0, i32 %22
  store i8 124, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body29
  %23 = load i32, i32* %y, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %y, align 4
  br label %for.cond27

for.end34:                                        ; preds = %for.cond27
  br label %if.end

if.else:                                          ; preds = %if.then
  %24 = load i32, i32* %cy, align 4
  %add35 = add nsw i32 %24, 1
  store i32 %add35, i32* %y, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc41, %if.else
  %25 = load i32, i32* %y, align 4
  %26 = load i32, i32* %py, align 4
  %cmp37 = icmp slt i32 %25, %26
  br i1 %cmp37, label %for.body38, label %for.end43

for.body38:                                       ; preds = %for.cond36
  %27 = load i32, i32* %cx, align 4
  %arrayidx39 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %27
  %28 = load i32, i32* %y, align 4
  %arrayidx40 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx39, i32 0, i32 %28
  store i8 124, i8* %arrayidx40, align 1
  br label %for.inc41

for.inc41:                                        ; preds = %for.body38
  %29 = load i32, i32* %y, align 4
  %inc42 = add nsw i32 %29, 1
  store i32 %inc42, i32* %y, align 4
  br label %for.cond36

for.end43:                                        ; preds = %for.cond36
  br label %if.end

if.end:                                           ; preds = %for.end43, %for.end34
  br label %if.end67

if.else44:                                        ; preds = %for.body14
  %30 = load i32, i32* %px, align 4
  %31 = load i32, i32* %cx, align 4
  %cmp45 = icmp slt i32 %30, %31
  br i1 %cmp45, label %if.then46, label %if.else56

if.then46:                                        ; preds = %if.else44
  %32 = load i32, i32* %px, align 4
  %add47 = add nsw i32 %32, 1
  store i32 %add47, i32* %x, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc53, %if.then46
  %33 = load i32, i32* %x, align 4
  %34 = load i32, i32* %cx, align 4
  %cmp49 = icmp slt i32 %33, %34
  br i1 %cmp49, label %for.body50, label %for.end55

for.body50:                                       ; preds = %for.cond48
  %35 = load i32, i32* %x, align 4
  %arrayidx51 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %35
  %36 = load i32, i32* %cy, align 4
  %arrayidx52 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx51, i32 0, i32 %36
  store i8 95, i8* %arrayidx52, align 1
  br label %for.inc53

for.inc53:                                        ; preds = %for.body50
  %37 = load i32, i32* %x, align 4
  %inc54 = add nsw i32 %37, 1
  store i32 %inc54, i32* %x, align 4
  br label %for.cond48

for.end55:                                        ; preds = %for.cond48
  br label %if.end66

if.else56:                                        ; preds = %if.else44
  %38 = load i32, i32* %cx, align 4
  %add57 = add nsw i32 %38, 1
  store i32 %add57, i32* %x, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc63, %if.else56
  %39 = load i32, i32* %x, align 4
  %40 = load i32, i32* %px, align 4
  %cmp59 = icmp slt i32 %39, %40
  br i1 %cmp59, label %for.body60, label %for.end65

for.body60:                                       ; preds = %for.cond58
  %41 = load i32, i32* %x, align 4
  %arrayidx61 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %41
  %42 = load i32, i32* %cy, align 4
  %arrayidx62 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx61, i32 0, i32 %42
  store i8 95, i8* %arrayidx62, align 1
  br label %for.inc63

for.inc63:                                        ; preds = %for.body60
  %43 = load i32, i32* %x, align 4
  %inc64 = add nsw i32 %43, 1
  store i32 %inc64, i32* %x, align 4
  br label %for.cond58

for.end65:                                        ; preds = %for.cond58
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %for.end55
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end
  %44 = bitcast %struct.point* %prev to i8*
  %45 = bitcast %struct.point* %curr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %44, i8* align 4 %45, i32 8, i1 false)
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67
  %46 = load i32, i32* %d, align 4
  %inc69 = add nsw i32 %46, 1
  store i32 %inc69, i32* %d, align 4
  br label %for.cond12

for.end70:                                        ; preds = %for.cond12
  store i32 0, i32* %x, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc83, %for.end70
  %47 = load i32, i32* %x, align 4
  %cmp72 = icmp slt i32 %47, 96
  br i1 %cmp72, label %for.body73, label %for.end85

for.body73:                                       ; preds = %for.cond71
  store i32 0, i32* %y, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc79, %for.body73
  %48 = load i32, i32* %y, align 4
  %cmp75 = icmp slt i32 %48, 96
  br i1 %cmp75, label %for.body76, label %for.end81

for.body76:                                       ; preds = %for.cond74
  %49 = load i32, i32* %y, align 4
  %arrayidx77 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %49
  %50 = load i32, i32* %x, align 4
  %arrayidx78 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx77, i32 0, i32 %50
  %51 = load i8, i8* %arrayidx78, align 1
  %conv = sext i8 %51 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %conv)
  br label %for.inc79

for.inc79:                                        ; preds = %for.body76
  %52 = load i32, i32* %y, align 4
  %inc80 = add nsw i32 %52, 1
  store i32 %inc80, i32* %y, align 4
  br label %for.cond74

for.end81:                                        ; preds = %for.cond74
  %call82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc83

for.inc83:                                        ; preds = %for.end81
  %53 = load i32, i32* %x, align 4
  %inc84 = add nsw i32 %53, 1
  store i32 %inc84, i32* %x, align 4
  br label %for.cond71

for.end85:                                        ; preds = %for.cond71
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 1, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
%2:i32 = and 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %rx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %xor = xor i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and1 = and i32 1, %xor
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
%3:i32 = and 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %rx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ry, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %rx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %x2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %15, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %ry, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %y4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %19, %mul3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div6 = sdiv i32 %20, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %21, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
%2:i32 = and 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sdiv %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
infer %2 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1
%3:i32 = and 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = xor %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 161982144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for d2pt()

; entering Souper's runOnFunction() for main()

; ModuleID = './Hilbert_curve.c.bc'
source_filename = "./Hilbert_curve.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.point = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @rot(i32 %n, %struct.point* %p, i32 %rx, i32 %ry) #0 {
entry:
  %n.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %rx.addr = alloca i32, align 4
  %ry.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 %rx, i32* %rx.addr, align 4
  store i32 %ry, i32* %ry.addr, align 4
  %0 = load i32, i32* %ry.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %rx.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %2 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %3, i32 0, i32 0
  %4 = load i32, i32* %x, align 4
  %sub2 = sub nsw i32 %sub, %4
  %5 = load %struct.point*, %struct.point** %p.addr, align 4
  %x3 = getelementptr inbounds %struct.point, %struct.point* %5, i32 0, i32 0
  store i32 %sub2, i32* %x3, align 4
  %6 = load i32, i32* %n.addr, align 4
  %sub4 = sub nsw i32 %6, 1
  %7 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %7, i32 0, i32 1
  %8 = load i32, i32* %y, align 4
  %sub5 = sub nsw i32 %sub4, %8
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %y6 = getelementptr inbounds %struct.point, %struct.point* %9, i32 0, i32 1
  store i32 %sub5, i32* %y6, align 4
  br label %if.end

if.end:                                           ; preds = %if.then1, %if.then
  %10 = load %struct.point*, %struct.point** %p.addr, align 4
  %x7 = getelementptr inbounds %struct.point, %struct.point* %10, i32 0, i32 0
  %11 = load i32, i32* %x7, align 4
  store i32 %11, i32* %t, align 4
  %12 = load %struct.point*, %struct.point** %p.addr, align 4
  %y8 = getelementptr inbounds %struct.point, %struct.point* %12, i32 0, i32 1
  %13 = load i32, i32* %y8, align 4
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  store i32 %13, i32* %x9, align 4
  %15 = load i32, i32* %t, align 4
  %16 = load %struct.point*, %struct.point** %p.addr, align 4
  %y10 = getelementptr inbounds %struct.point, %struct.point* %16, i32 0, i32 1
  store i32 %15, i32* %y10, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @d2pt(i32 %n, i32 %d, %struct.point* %p) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %p.addr = alloca %struct.point*, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  %rx = alloca i32, align 4
  %ry = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store %struct.point* %p, %struct.point** %p.addr, align 4
  store i32 1, i32* %s, align 4
  %0 = load i32, i32* %d.addr, align 4
  store i32 %0, i32* %t, align 4
  %1 = load %struct.point*, %struct.point** %p.addr, align 4
  %x = getelementptr inbounds %struct.point, %struct.point* %1, i32 0, i32 0
  store i32 0, i32* %x, align 4
  %2 = load %struct.point*, %struct.point** %p.addr, align 4
  %y = getelementptr inbounds %struct.point, %struct.point* %2, i32 0, i32 1
  store i32 0, i32* %y, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i32, i32* %s, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %t, align 4
  %div = sdiv i32 %5, 2
  %and = and i32 1, %div
  store i32 %and, i32* %rx, align 4
  %6 = load i32, i32* %t, align 4
  %7 = load i32, i32* %rx, align 4
  %xor = xor i32 %6, %7
  %and1 = and i32 1, %xor
  store i32 %and1, i32* %ry, align 4
  %8 = load i32, i32* %s, align 4
  %9 = load %struct.point*, %struct.point** %p.addr, align 4
  %10 = load i32, i32* %rx, align 4
  %11 = load i32, i32* %ry, align 4
  call void @rot(i32 %8, %struct.point* %9, i32 %10, i32 %11)
  %12 = load i32, i32* %s, align 4
  %13 = load i32, i32* %rx, align 4
  %mul = mul nsw i32 %12, %13
  %14 = load %struct.point*, %struct.point** %p.addr, align 4
  %x2 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 0
  %15 = load i32, i32* %x2, align 4
  %add = add nsw i32 %15, %mul
  store i32 %add, i32* %x2, align 4
  %16 = load i32, i32* %s, align 4
  %17 = load i32, i32* %ry, align 4
  %mul3 = mul nsw i32 %16, %17
  %18 = load %struct.point*, %struct.point** %p.addr, align 4
  %y4 = getelementptr inbounds %struct.point, %struct.point* %18, i32 0, i32 1
  %19 = load i32, i32* %y4, align 4
  %add5 = add nsw i32 %19, %mul3
  store i32 %add5, i32* %y4, align 4
  %20 = load i32, i32* %t, align 4
  %div6 = sdiv i32 %20, 4
  store i32 %div6, i32* %t, align 4
  %21 = load i32, i32* %s, align 4
  %mul7 = mul nsw i32 %21, 2
  store i32 %mul7, i32* %s, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %d = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %cx = alloca i32, align 4
  %cy = alloca i32, align 4
  %px = alloca i32, align 4
  %py = alloca i32, align 4
  %pts = alloca [96 x [96 x i8]], align 16
  %curr = alloca %struct.point, align 4
  %prev = alloca %struct.point, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %x, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %x, align 4
  %cmp = icmp slt i32 %0, 96
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %y, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %y, align 4
  %cmp2 = icmp slt i32 %1, 96
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %x, align 4
  %arrayidx = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %2
  %3 = load i32, i32* %y, align 4
  %arrayidx4 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx, i32 0, i32 %3
  store i8 32, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %4 = load i32, i32* %y, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %5 = load i32, i32* %x, align 4
  %inc6 = add nsw i32 %5, 1
  store i32 %inc6, i32* %x, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  %y8 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  store i32 0, i32* %y8, align 4
  %x9 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  store i32 0, i32* %x9, align 4
  %arrayidx10 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 0
  %arrayidx11 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx10, i32 0, i32 0
  store i8 46, i8* %arrayidx11, align 16
  store i32 1, i32* %d, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc68, %for.end7
  %6 = load i32, i32* %d, align 4
  %cmp13 = icmp slt i32 %6, 1024
  br i1 %cmp13, label %for.body14, label %for.end70

for.body14:                                       ; preds = %for.cond12
  %7 = load i32, i32* %d, align 4
  call void @d2pt(i32 32, i32 %7, %struct.point* %curr)
  %x15 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 0
  %8 = load i32, i32* %x15, align 4
  %mul = mul nsw i32 %8, 3
  store i32 %mul, i32* %cx, align 4
  %y16 = getelementptr inbounds %struct.point, %struct.point* %curr, i32 0, i32 1
  %9 = load i32, i32* %y16, align 4
  %mul17 = mul nsw i32 %9, 3
  store i32 %mul17, i32* %cy, align 4
  %x18 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 0
  %10 = load i32, i32* %x18, align 4
  %mul19 = mul nsw i32 %10, 3
  store i32 %mul19, i32* %px, align 4
  %y20 = getelementptr inbounds %struct.point, %struct.point* %prev, i32 0, i32 1
  %11 = load i32, i32* %y20, align 4
  %mul21 = mul nsw i32 %11, 3
  store i32 %mul21, i32* %py, align 4
  %12 = load i32, i32* %cx, align 4
  %arrayidx22 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %12
  %13 = load i32, i32* %cy, align 4
  %arrayidx23 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx22, i32 0, i32 %13
  store i8 46, i8* %arrayidx23, align 1
  %14 = load i32, i32* %cx, align 4
  %15 = load i32, i32* %px, align 4
  %cmp24 = icmp eq i32 %14, %15
  br i1 %cmp24, label %if.then, label %if.else44

if.then:                                          ; preds = %for.body14
  %16 = load i32, i32* %py, align 4
  %17 = load i32, i32* %cy, align 4
  %cmp25 = icmp slt i32 %16, %17
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then
  %18 = load i32, i32* %py, align 4
  %add = add nsw i32 %18, 1
  store i32 %add, i32* %y, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc32, %if.then26
  %19 = load i32, i32* %y, align 4
  %20 = load i32, i32* %cy, align 4
  %cmp28 = icmp slt i32 %19, %20
  br i1 %cmp28, label %for.body29, label %for.end34

for.body29:                                       ; preds = %for.cond27
  %21 = load i32, i32* %cx, align 4
  %arrayidx30 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %21
  %22 = load i32, i32* %y, align 4
  %arrayidx31 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx30, i32 0, i32 %22
  store i8 124, i8* %arrayidx31, align 1
  br label %for.inc32

for.inc32:                                        ; preds = %for.body29
  %23 = load i32, i32* %y, align 4
  %inc33 = add nsw i32 %23, 1
  store i32 %inc33, i32* %y, align 4
  br label %for.cond27

for.end34:                                        ; preds = %for.cond27
  br label %if.end

if.else:                                          ; preds = %if.then
  %24 = load i32, i32* %cy, align 4
  %add35 = add nsw i32 %24, 1
  store i32 %add35, i32* %y, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc41, %if.else
  %25 = load i32, i32* %y, align 4
  %26 = load i32, i32* %py, align 4
  %cmp37 = icmp slt i32 %25, %26
  br i1 %cmp37, label %for.body38, label %for.end43

for.body38:                                       ; preds = %for.cond36
  %27 = load i32, i32* %cx, align 4
  %arrayidx39 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %27
  %28 = load i32, i32* %y, align 4
  %arrayidx40 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx39, i32 0, i32 %28
  store i8 124, i8* %arrayidx40, align 1
  br label %for.inc41

for.inc41:                                        ; preds = %for.body38
  %29 = load i32, i32* %y, align 4
  %inc42 = add nsw i32 %29, 1
  store i32 %inc42, i32* %y, align 4
  br label %for.cond36

for.end43:                                        ; preds = %for.cond36
  br label %if.end

if.end:                                           ; preds = %for.end43, %for.end34
  br label %if.end67

if.else44:                                        ; preds = %for.body14
  %30 = load i32, i32* %px, align 4
  %31 = load i32, i32* %cx, align 4
  %cmp45 = icmp slt i32 %30, %31
  br i1 %cmp45, label %if.then46, label %if.else56

if.then46:                                        ; preds = %if.else44
  %32 = load i32, i32* %px, align 4
  %add47 = add nsw i32 %32, 1
  store i32 %add47, i32* %x, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc53, %if.then46
  %33 = load i32, i32* %x, align 4
  %34 = load i32, i32* %cx, align 4
  %cmp49 = icmp slt i32 %33, %34
  br i1 %cmp49, label %for.body50, label %for.end55

for.body50:                                       ; preds = %for.cond48
  %35 = load i32, i32* %x, align 4
  %arrayidx51 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %35
  %36 = load i32, i32* %cy, align 4
  %arrayidx52 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx51, i32 0, i32 %36
  store i8 95, i8* %arrayidx52, align 1
  br label %for.inc53

for.inc53:                                        ; preds = %for.body50
  %37 = load i32, i32* %x, align 4
  %inc54 = add nsw i32 %37, 1
  store i32 %inc54, i32* %x, align 4
  br label %for.cond48

for.end55:                                        ; preds = %for.cond48
  br label %if.end66

if.else56:                                        ; preds = %if.else44
  %38 = load i32, i32* %cx, align 4
  %add57 = add nsw i32 %38, 1
  store i32 %add57, i32* %x, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc63, %if.else56
  %39 = load i32, i32* %x, align 4
  %40 = load i32, i32* %px, align 4
  %cmp59 = icmp slt i32 %39, %40
  br i1 %cmp59, label %for.body60, label %for.end65

for.body60:                                       ; preds = %for.cond58
  %41 = load i32, i32* %x, align 4
  %arrayidx61 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %41
  %42 = load i32, i32* %cy, align 4
  %arrayidx62 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx61, i32 0, i32 %42
  store i8 95, i8* %arrayidx62, align 1
  br label %for.inc63

for.inc63:                                        ; preds = %for.body60
  %43 = load i32, i32* %x, align 4
  %inc64 = add nsw i32 %43, 1
  store i32 %inc64, i32* %x, align 4
  br label %for.cond58

for.end65:                                        ; preds = %for.cond58
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %for.end55
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end
  %44 = bitcast %struct.point* %prev to i8*
  %45 = bitcast %struct.point* %curr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %44, i8* align 4 %45, i32 8, i1 false)
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67
  %46 = load i32, i32* %d, align 4
  %inc69 = add nsw i32 %46, 1
  store i32 %inc69, i32* %d, align 4
  br label %for.cond12

for.end70:                                        ; preds = %for.cond12
  store i32 0, i32* %x, align 4
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc83, %for.end70
  %47 = load i32, i32* %x, align 4
  %cmp72 = icmp slt i32 %47, 96
  br i1 %cmp72, label %for.body73, label %for.end85

for.body73:                                       ; preds = %for.cond71
  store i32 0, i32* %y, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc79, %for.body73
  %48 = load i32, i32* %y, align 4
  %cmp75 = icmp slt i32 %48, 96
  br i1 %cmp75, label %for.body76, label %for.end81

for.body76:                                       ; preds = %for.cond74
  %49 = load i32, i32* %y, align 4
  %arrayidx77 = getelementptr inbounds [96 x [96 x i8]], [96 x [96 x i8]]* %pts, i32 0, i32 %49
  %50 = load i32, i32* %x, align 4
  %arrayidx78 = getelementptr inbounds [96 x i8], [96 x i8]* %arrayidx77, i32 0, i32 %50
  %51 = load i8, i8* %arrayidx78, align 1
  %conv = sext i8 %51 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %conv)
  br label %for.inc79

for.inc79:                                        ; preds = %for.body76
  %52 = load i32, i32* %y, align 4
  %inc80 = add nsw i32 %52, 1
  store i32 %inc80, i32* %y, align 4
  br label %for.cond74

for.end81:                                        ; preds = %for.cond74
  %call82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc83

for.inc83:                                        ; preds = %for.end81
  %53 = load i32, i32* %x, align 4
  %inc84 = add nsw i32 %53, 1
  store i32 %inc84, i32* %x, align 4
  br label %for.cond71

for.end85:                                        ; preds = %for.cond71
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 96
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 96:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %1, 96
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 96:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %6, 1024
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1024:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %8, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %y16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul17 = mul nsw i32 %9, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul19 = mul nsw i32 %10, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %y20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul21 = mul nsw i32 %11, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %px, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %py, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp slt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %py, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %py, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp37 = icmp slt i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %px, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp45 = icmp slt i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %px, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add47 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp49 = icmp slt i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc54 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %cx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add57 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %px, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp59 = icmp slt i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %cy, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp72 = icmp slt i32 %47, 96
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 96:i32
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp75 = icmp slt i32 %48, 96
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 96:i32
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i8, i8* %arrayidx78, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %51 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc80 = add nsw i32 %52, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc84 = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 96:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1024:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1530
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
