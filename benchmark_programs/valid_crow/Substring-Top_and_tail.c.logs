
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Substring-Top_and_tail.c.bc'
source_filename = "./Substring-Top_and_tail.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"knight\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"socks\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"brooms\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"%s\0A%s\0A%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %str_a = alloca i8*, align 4
  %str_b = alloca i8*, align 4
  %str_c = alloca i8*, align 4
  %new_a = alloca i8*, align 4
  %new_b = alloca i8*, align 4
  %new_c = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8** %str_a, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8** %str_b, align 4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8** %str_c, align 4
  %0 = load i8*, i8** %str_a, align 4
  %call = call i32 @strlen(i8* %0) #3
  %sub = sub i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %sub)
  store i8* %call1, i8** %new_a, align 4
  %1 = load i8*, i8** %str_b, align 4
  %call2 = call i32 @strlen(i8* %1) #3
  %sub3 = sub i32 %call2, 1
  %call4 = call noalias i8* @malloc(i32 %sub3)
  store i8* %call4, i8** %new_b, align 4
  %2 = load i8*, i8** %str_c, align 4
  %call5 = call i32 @strlen(i8* %2) #3
  %sub6 = sub i32 %call5, 2
  %call7 = call noalias i8* @malloc(i32 %sub6)
  store i8* %call7, i8** %new_c, align 4
  %3 = load i8*, i8** %new_a, align 4
  %4 = load i8*, i8** %str_a, align 4
  %add.ptr = getelementptr inbounds i8, i8* %4, i32 1
  %call8 = call i8* @strcpy(i8* %3, i8* %add.ptr)
  %5 = load i8*, i8** %new_b, align 4
  %6 = load i8*, i8** %str_b, align 4
  %7 = load i8*, i8** %str_b, align 4
  %call9 = call i32 @strlen(i8* %7) #3
  %sub10 = sub i32 %call9, 1
  %call11 = call i8* @strncpy(i8* %5, i8* %6, i32 %sub10)
  %8 = load i8*, i8** %new_c, align 4
  %9 = load i8*, i8** %str_c, align 4
  %add.ptr12 = getelementptr inbounds i8, i8* %9, i32 1
  %10 = load i8*, i8** %str_c, align 4
  %call13 = call i32 @strlen(i8* %10) #3
  %sub14 = sub i32 %call13, 2
  %call15 = call i8* @strncpy(i8* %8, i8* %add.ptr12, i32 %sub14)
  %11 = load i8*, i8** %new_a, align 4
  %12 = load i8*, i8** %new_b, align 4
  %13 = load i8*, i8** %new_c, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %11, i8* %12, i8* %13)
  %14 = load i8*, i8** %new_a, align 4
  call void @free(i8* %14)
  %15 = load i8*, i8** %new_b, align 4
  call void @free(i8* %15)
  %16 = load i8*, i8** %new_c, align 4
  call void @free(i8* %16)
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub i32 %call2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call5 = call i32 @strlen(i8* %2) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub i32 %call5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @strlen(i8* %7) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub i32 %call9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call13 = call i32 @strlen(i8* %10) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub i32 %call13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
