
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for item_cmp()

; ModuleID = './Knapsack_problem-Continuous.c.bc'
source_filename = "./Knapsack_problem-Continuous.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item = type { double, double, i8* }

@.str = private unnamed_addr constant [5 x i8] c"beef\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"pork\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"ham\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"greaves\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"flitch\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"brawn\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"welt\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"salami\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"sausage\00", align 1
@items = hidden global [9 x %struct.item] [%struct.item { double 3.800000e+00, double 3.600000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0) }, %struct.item { double 5.400000e+00, double 4.300000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %struct.item { double 3.600000e+00, double 9.000000e+01, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0) }, %struct.item { double 2.400000e+00, double 4.500000e+01, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0) }, %struct.item { double 4.000000e+00, double 3.000000e+01, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0) }, %struct.item { double 2.500000e+00, double 5.600000e+01, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0) }, %struct.item { double 3.700000e+00, double 6.700000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0) }, %struct.item { double 3.000000e+00, double 9.500000e+01, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0) }, %struct.item { double 5.900000e+00, double 9.800000e+01, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0) }], align 16
@.str.9 = private unnamed_addr constant [13 x i8] c"take all %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"take %gkg of %g kg of %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @item_cmp(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca %struct.item*, align 4
  %b = alloca %struct.item*, align 4
  %ua = alloca double, align 8
  %ub = alloca double, align 8
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.item*
  store %struct.item* %1, %struct.item** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.item*
  store %struct.item* %3, %struct.item** %b, align 4
  %4 = load %struct.item*, %struct.item** %a, align 4
  %v = getelementptr inbounds %struct.item, %struct.item* %4, i32 0, i32 1
  %5 = load double, double* %v, align 8
  %6 = load %struct.item*, %struct.item** %a, align 4
  %w = getelementptr inbounds %struct.item, %struct.item* %6, i32 0, i32 0
  %7 = load double, double* %w, align 8
  %div = fdiv double %5, %7
  store double %div, double* %ua, align 8
  %8 = load %struct.item*, %struct.item** %b, align 4
  %v1 = getelementptr inbounds %struct.item, %struct.item* %8, i32 0, i32 1
  %9 = load double, double* %v1, align 8
  %10 = load %struct.item*, %struct.item** %b, align 4
  %w2 = getelementptr inbounds %struct.item, %struct.item* %10, i32 0, i32 0
  %11 = load double, double* %w2, align 8
  %div3 = fdiv double %9, %11
  store double %div3, double* %ub, align 8
  %12 = load double, double* %ua, align 8
  %13 = load double, double* %ub, align 8
  %cmp = fcmp olt double %12, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load double, double* %ua, align 8
  %15 = load double, double* %ub, align 8
  %cmp4 = fcmp ogt double %14, %15
  %conv = zext i1 %cmp4 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %it = alloca %struct.item*, align 4
  %space = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 1.500000e+01, double* %space, align 8
  call void @qsort(i8* bitcast ([9 x %struct.item]* @items to i8*), i32 9, i32 24, i32 (i8*, i8*)* @item_cmp)
  store %struct.item* getelementptr inbounds (%struct.item, %struct.item* getelementptr inbounds ([9 x %struct.item], [9 x %struct.item]* @items, i32 0, i32 0), i32 9), %struct.item** %it, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.item*, %struct.item** %it, align 4
  %incdec.ptr = getelementptr inbounds %struct.item, %struct.item* %0, i32 -1
  store %struct.item* %incdec.ptr, %struct.item** %it, align 4
  %sub.ptr.lhs.cast = ptrtoint %struct.item* %0 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([9 x %struct.item]* @items to i32)
  %sub.ptr.div = sdiv exact i32 %sub.ptr.sub, 24
  %tobool = icmp ne i32 %sub.ptr.div, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load double, double* %space, align 8
  %cmp = fcmp ogt double %1, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %2 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %3 = load double, double* %space, align 8
  %4 = load %struct.item*, %struct.item** %it, align 4
  %w = getelementptr inbounds %struct.item, %struct.item* %4, i32 0, i32 0
  %5 = load double, double* %w, align 8
  %cmp1 = fcmp oge double %3, %5
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load %struct.item*, %struct.item** %it, align 4
  %name = getelementptr inbounds %struct.item, %struct.item* %6, i32 0, i32 2
  %7 = load i8*, i8** %name, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %7)
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load double, double* %space, align 8
  %9 = load %struct.item*, %struct.item** %it, align 4
  %w2 = getelementptr inbounds %struct.item, %struct.item* %9, i32 0, i32 0
  %10 = load double, double* %w2, align 8
  %11 = load %struct.item*, %struct.item** %it, align 4
  %name3 = getelementptr inbounds %struct.item, %struct.item* %11, i32 0, i32 2
  %12 = load i8*, i8** %name3, align 8
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i32 0, i32 0), double %8, double %10, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load %struct.item*, %struct.item** %it, align 4
  %w5 = getelementptr inbounds %struct.item, %struct.item* %13, i32 0, i32 0
  %14 = load double, double* %w5, align 8
  %15 = load double, double* %space, align 8
  %sub = fsub double %15, %14
  store double %sub, double* %space, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret i32 0
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %12, %13
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = fcmp ogt double %14, %15
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp4 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i32 = zext %1
%3:i32 = phi %0, 4294967295:i32, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i32 = zext %1
%3:i32 = phi %0, 4294967295:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for item_cmp()

; entering Souper's runOnFunction() for main()

; ModuleID = './Knapsack_problem-Continuous.c.bc'
source_filename = "./Knapsack_problem-Continuous.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item = type { double, double, i8* }

@.str = private unnamed_addr constant [5 x i8] c"beef\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"pork\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"ham\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"greaves\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"flitch\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"brawn\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"welt\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"salami\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"sausage\00", align 1
@items = hidden global [9 x %struct.item] [%struct.item { double 3.800000e+00, double 3.600000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0) }, %struct.item { double 5.400000e+00, double 4.300000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %struct.item { double 3.600000e+00, double 9.000000e+01, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0) }, %struct.item { double 2.400000e+00, double 4.500000e+01, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0) }, %struct.item { double 4.000000e+00, double 3.000000e+01, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0) }, %struct.item { double 2.500000e+00, double 5.600000e+01, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0) }, %struct.item { double 3.700000e+00, double 6.700000e+01, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0) }, %struct.item { double 3.000000e+00, double 9.500000e+01, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0) }, %struct.item { double 5.900000e+00, double 9.800000e+01, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0) }], align 16
@.str.9 = private unnamed_addr constant [13 x i8] c"take all %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"take %gkg of %g kg of %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @item_cmp(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca %struct.item*, align 4
  %b = alloca %struct.item*, align 4
  %ua = alloca double, align 8
  %ub = alloca double, align 8
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to %struct.item*
  store %struct.item* %1, %struct.item** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to %struct.item*
  store %struct.item* %3, %struct.item** %b, align 4
  %4 = load %struct.item*, %struct.item** %a, align 4
  %v = getelementptr inbounds %struct.item, %struct.item* %4, i32 0, i32 1
  %5 = load double, double* %v, align 8
  %6 = load %struct.item*, %struct.item** %a, align 4
  %w = getelementptr inbounds %struct.item, %struct.item* %6, i32 0, i32 0
  %7 = load double, double* %w, align 8
  %div = fdiv double %5, %7
  store double %div, double* %ua, align 8
  %8 = load %struct.item*, %struct.item** %b, align 4
  %v1 = getelementptr inbounds %struct.item, %struct.item* %8, i32 0, i32 1
  %9 = load double, double* %v1, align 8
  %10 = load %struct.item*, %struct.item** %b, align 4
  %w2 = getelementptr inbounds %struct.item, %struct.item* %10, i32 0, i32 0
  %11 = load double, double* %w2, align 8
  %div3 = fdiv double %9, %11
  store double %div3, double* %ub, align 8
  %12 = load double, double* %ua, align 8
  %13 = load double, double* %ub, align 8
  %cmp = fcmp olt double %12, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load double, double* %ua, align 8
  %15 = load double, double* %ub, align 8
  %cmp4 = fcmp ogt double %14, %15
  %conv = zext i1 %cmp4 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %it = alloca %struct.item*, align 4
  %space = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 1.500000e+01, double* %space, align 8
  call void @qsort(i8* bitcast ([9 x %struct.item]* @items to i8*), i32 9, i32 24, i32 (i8*, i8*)* @item_cmp)
  store %struct.item* getelementptr inbounds (%struct.item, %struct.item* getelementptr inbounds ([9 x %struct.item], [9 x %struct.item]* @items, i32 0, i32 0), i32 9), %struct.item** %it, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.item*, %struct.item** %it, align 4
  %incdec.ptr = getelementptr inbounds %struct.item, %struct.item* %0, i32 -1
  store %struct.item* %incdec.ptr, %struct.item** %it, align 4
  %sub.ptr.lhs.cast = ptrtoint %struct.item* %0 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([9 x %struct.item]* @items to i32)
  %sub.ptr.div = sdiv exact i32 %sub.ptr.sub, 24
  %tobool = icmp ne i32 %sub.ptr.div, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load double, double* %space, align 8
  %cmp = fcmp ogt double %1, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %2 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
  br i1 %2, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %3 = load double, double* %space, align 8
  %4 = load %struct.item*, %struct.item** %it, align 4
  %w = getelementptr inbounds %struct.item, %struct.item* %4, i32 0, i32 0
  %5 = load double, double* %w, align 8
  %cmp1 = fcmp oge double %3, %5
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load %struct.item*, %struct.item** %it, align 4
  %name = getelementptr inbounds %struct.item, %struct.item* %6, i32 0, i32 2
  %7 = load i8*, i8** %name, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %7)
  br label %if.end

if.else:                                          ; preds = %for.body
  %8 = load double, double* %space, align 8
  %9 = load %struct.item*, %struct.item** %it, align 4
  %w2 = getelementptr inbounds %struct.item, %struct.item* %9, i32 0, i32 0
  %10 = load double, double* %w2, align 8
  %11 = load %struct.item*, %struct.item** %it, align 4
  %name3 = getelementptr inbounds %struct.item, %struct.item* %11, i32 0, i32 2
  %12 = load i8*, i8** %name3, align 8
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i32 0, i32 0), double %8, double %10, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load %struct.item*, %struct.item** %it, align 4
  %w5 = getelementptr inbounds %struct.item, %struct.item* %13, i32 0, i32 0
  %14 = load double, double* %w5, align 8
  %15 = load double, double* %space, align 8
  %sub = fsub double %15, %14
  store double %sub, double* %space, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret i32 0
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint %struct.item* %0 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, ptrtoint ([9 x %struct.item]* @items to i32)
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub.ptr.div = sdiv exact i32 %sub.ptr.sub, 24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
%3:i32 = sdivexact %2, 24:i32
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %sub.ptr.div, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
%3:i32 = sdivexact %2, 24:i32
%4:i1 = ne 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp = fcmp ogt double %1, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp oge double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
%3:i32 = sdivexact %2, 24:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108864
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000) (nonZero)
%2:i32 = sub %0, %1
%3:i32 = sdivexact %2, 24:i32
%4:i1 = ne 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
