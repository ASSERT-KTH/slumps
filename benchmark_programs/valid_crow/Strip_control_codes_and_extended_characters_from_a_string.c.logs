
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ascii()

; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %and = and i32 %call1, 255
  %conv = trunc i32 %and to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %0 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %min, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = zext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %conv, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = sle %1, %3
infer %4

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %max, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = zext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %conv3, %conv4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = sle %1, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = sle %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ascii()

; entering Souper's runOnFunction() for ascii_ext()

; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %and = and i32 %call1, 255
  %conv = trunc i32 %and to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %0 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %min_ext, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = zext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %conv, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = sle %1, %3
infer %4

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %max_ext, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = zext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %conv3, %conv4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = sle %1, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for ascii_ext()

; entering Souper's runOnFunction() for strip()

; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %and = and i32 %call1, 255
  %conv = trunc i32 %and to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 255:i32
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %ext.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @ascii_ext(i8 zeroext %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @ascii(i8 zeroext %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %call4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp ult i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 255:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 255
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for strip()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %and = and i32 %call1, 255
  %conv = trunc i32 %and to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %seed, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %4, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %and = and i32 %call1, 255
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 255:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %and to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 255:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 100:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 255:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %and = and i32 %call1, 255
  %conv = trunc i32 %and to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %and = and i32 %call1, 255"
; from ""
; with "  %call1 = call i32 @rand()" in:
"%0:i32 = var
%1:i32 = and 255:i32, %0
cand %1 %0 (demandedBits=00000000000000000000000011111111)
"
; with "  %call1 = call i32 @rand()"

Module after replacement:
; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %conv = trunc i32 %call1 to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Strip_control_codes_and_extended_characters_from_a_string.c.bc'
source_filename = "./Strip_control_codes_and_extended_characters_from_a_string.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@stdout = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [11 x i8] c"Original:\09\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"\0AEXT:\09%s\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"\0AASCII:\09%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min = alloca i8, align 1
  %max = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 32, i8* %min, align 1
  store i8 126, i8* %max, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ascii_ext(i8 zeroext %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %min_ext = alloca i8, align 1
  %max_ext = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 -128, i8* %min_ext, align 1
  store i8 -1, i8* %max_ext, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %min_ext, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sge i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %c.addr, align 1
  %conv3 = zext i8 %2 to i32
  %3 = load i8, i8* %max_ext, align 1
  %conv4 = zext i8 %3 to i32
  %cmp5 = icmp sle i32 %conv3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @strip(i8* %str, i32 %n, i32 %ext) #0 {
entry:
  %str.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %ext.addr = alloca i32, align 4
  %buffer = alloca [256 x i8], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %ext, i32* %ext.addr, align 4
  %0 = bitcast [256 x i8]* %buffer to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 256, i1 false)
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp ult i32 %1, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 255, %cond.false ]
  store i32 %cond, i32* %max, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %max, align 4
  %cmp1 = icmp ult i32 %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %ext.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %call = call i32 @ascii_ext(i8 zeroext %8)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx3, align 1
  %call4 = call i32 @ascii(i8 zeroext %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx6, align 1
  %15 = load i32, i32* %j, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %15
  store i8 %14, i8* %arrayidx7, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %16 = load i32, i32* %i, align 4
  %inc8 = add i32 %16, 1
  store i32 %inc8, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %str.addr, align 4
  %18 = load i32, i32* %max, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %17, i8 0, i32 %18, i1 false)
  store i32 0, i32* %i, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %j, align 4
  %cmp10 = icmp ult i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buffer, i32 0, i32 %21
  %22 = load i8, i8* %arrayidx12, align 1
  %23 = load i8*, i8** %str.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i32 %24
  store i8 %22, i8* %arrayidx13, align 1
  %25 = load i32, i32* %i, align 4
  %inc14 = add i32 %25, 1
  store i32 %inc14, i32* %i, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i8*, i8** %str.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %arrayidx16, align 1
  %28 = load i8*, i8** %str.addr, align 4
  ret i8* %28
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %seed = alloca i32, align 4
  %badstring = alloca [100 x i8], align 16
  %bs_2 = alloca [100 x i8], align 16
  %goodstring = alloca i8*, align 4
  %goodstring_ext = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 134529, i32* %seed, align 4
  %0 = bitcast [100 x i8]* %badstring to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 100, i1 false)
  %1 = bitcast [100 x i8]* %bs_2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 100, i1 false)
  store i8* null, i8** %goodstring, align 4
  store i8* null, i8** %goodstring_ext, align 4
  store i32 0, i32* %i, align 4
  %2 = load i32, i32* %seed, align 4
  call void @srand(i32 %2)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @rand()
  %conv = trunc i32 %call1 to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %5
  store i8 %conv, i8* %arrayidx, align 1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %arraydecay, i8* align 16 %arraydecay6, i32 100, i1 false)
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %badstring, i32 0, i32 0
  %call8 = call i8* @strip(i8* %arraydecay7, i32 100, i32 1)
  store i8* %call8, i8** %goodstring_ext, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %12 = load i8*, i8** %goodstring_ext, align 4
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i8* %12)
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %bs_2, i32 0, i32 0
  %call11 = call i8* @strip(i8* %arraydecay10, i32 100, i32 0)
  store i8* %call11, i8** %goodstring, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %14 = load i8*, i8** %goodstring, align 4
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i32 0, i32 0), i8* %14)
  ret i32 0
}

declare void @srand(i32 %0) #2

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare i32 @rand() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %seed, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %4, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %call1 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
