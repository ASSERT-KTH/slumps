
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for roman()

; ModuleID = './Roman_numerals-Encode.c.bc'
source_filename = "./Roman_numerals-Encode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [34 x i8] c"Roman numeral for zero requested.\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"%4u: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @roman(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 @fputs(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i32 0, i32 0), %struct._IO_FILE* %1)
  call void @exit(i32 1) #3
  unreachable

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp uge i32 %2, 1000
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  store i8 77, i8* %3, align 1
  %4 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %4, 1000
  store i32 %sub, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp uge i32 %5, 900
  br i1 %cmp2, label %if.then3, label %if.end7

if.then3:                                         ; preds = %while.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  store i8 67, i8* %6, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr5, i8** %s.addr, align 4
  store i8 77, i8* %7, align 1
  %8 = load i32, i32* %n.addr, align 4
  %sub6 = sub i32 %8, 900
  store i32 %sub6, i32* %n.addr, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then3, %while.end
  %9 = load i32, i32* %n.addr, align 4
  %cmp8 = icmp uge i32 %9, 500
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end7
  %10 = load i8*, i8** %s.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr10, i8** %s.addr, align 4
  store i8 68, i8* %10, align 1
  %11 = load i32, i32* %n.addr, align 4
  %sub11 = sub i32 %11, 500
  store i32 %sub11, i32* %n.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp uge i32 %12, 400
  br i1 %cmp13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.end12
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  store i8 67, i8* %13, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr16 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr16, i8** %s.addr, align 4
  store i8 68, i8* %14, align 1
  %15 = load i32, i32* %n.addr, align 4
  %sub17 = sub i32 %15, 400
  store i32 %sub17, i32* %n.addr, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %if.end12
  br label %while.cond19

while.cond19:                                     ; preds = %while.body21, %if.end18
  %16 = load i32, i32* %n.addr, align 4
  %cmp20 = icmp uge i32 %16, 100
  br i1 %cmp20, label %while.body21, label %while.end24

while.body21:                                     ; preds = %while.cond19
  %17 = load i8*, i8** %s.addr, align 4
  %incdec.ptr22 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr22, i8** %s.addr, align 4
  store i8 67, i8* %17, align 1
  %18 = load i32, i32* %n.addr, align 4
  %sub23 = sub i32 %18, 100
  store i32 %sub23, i32* %n.addr, align 4
  br label %while.cond19

while.end24:                                      ; preds = %while.cond19
  %19 = load i32, i32* %n.addr, align 4
  %cmp25 = icmp uge i32 %19, 90
  br i1 %cmp25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %while.end24
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr27 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr27, i8** %s.addr, align 4
  store i8 88, i8* %20, align 1
  %21 = load i8*, i8** %s.addr, align 4
  %incdec.ptr28 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr28, i8** %s.addr, align 4
  store i8 67, i8* %21, align 1
  %22 = load i32, i32* %n.addr, align 4
  %sub29 = sub i32 %22, 90
  store i32 %sub29, i32* %n.addr, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %while.end24
  %23 = load i32, i32* %n.addr, align 4
  %cmp31 = icmp uge i32 %23, 50
  br i1 %cmp31, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end30
  %24 = load i8*, i8** %s.addr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr33, i8** %s.addr, align 4
  store i8 76, i8* %24, align 1
  %25 = load i32, i32* %n.addr, align 4
  %sub34 = sub i32 %25, 50
  store i32 %sub34, i32* %n.addr, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end30
  %26 = load i32, i32* %n.addr, align 4
  %cmp36 = icmp uge i32 %26, 40
  br i1 %cmp36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %if.end35
  %27 = load i8*, i8** %s.addr, align 4
  %incdec.ptr38 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr38, i8** %s.addr, align 4
  store i8 88, i8* %27, align 1
  %28 = load i8*, i8** %s.addr, align 4
  %incdec.ptr39 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr39, i8** %s.addr, align 4
  store i8 76, i8* %28, align 1
  %29 = load i32, i32* %n.addr, align 4
  %sub40 = sub i32 %29, 40
  store i32 %sub40, i32* %n.addr, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then37, %if.end35
  br label %while.cond42

while.cond42:                                     ; preds = %while.body44, %if.end41
  %30 = load i32, i32* %n.addr, align 4
  %cmp43 = icmp uge i32 %30, 10
  br i1 %cmp43, label %while.body44, label %while.end47

while.body44:                                     ; preds = %while.cond42
  %31 = load i8*, i8** %s.addr, align 4
  %incdec.ptr45 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr45, i8** %s.addr, align 4
  store i8 88, i8* %31, align 1
  %32 = load i32, i32* %n.addr, align 4
  %sub46 = sub i32 %32, 10
  store i32 %sub46, i32* %n.addr, align 4
  br label %while.cond42

while.end47:                                      ; preds = %while.cond42
  %33 = load i32, i32* %n.addr, align 4
  %cmp48 = icmp uge i32 %33, 9
  br i1 %cmp48, label %if.then49, label %if.end53

if.then49:                                        ; preds = %while.end47
  %34 = load i8*, i8** %s.addr, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %s.addr, align 4
  store i8 73, i8* %34, align 1
  %35 = load i8*, i8** %s.addr, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr51, i8** %s.addr, align 4
  store i8 88, i8* %35, align 1
  %36 = load i32, i32* %n.addr, align 4
  %sub52 = sub i32 %36, 9
  store i32 %sub52, i32* %n.addr, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then49, %while.end47
  %37 = load i32, i32* %n.addr, align 4
  %cmp54 = icmp uge i32 %37, 5
  br i1 %cmp54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end53
  %38 = load i8*, i8** %s.addr, align 4
  %incdec.ptr56 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr56, i8** %s.addr, align 4
  store i8 86, i8* %38, align 1
  %39 = load i32, i32* %n.addr, align 4
  %sub57 = sub i32 %39, 5
  store i32 %sub57, i32* %n.addr, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.end53
  %40 = load i32, i32* %n.addr, align 4
  %cmp59 = icmp uge i32 %40, 4
  br i1 %cmp59, label %if.then60, label %if.end64

if.then60:                                        ; preds = %if.end58
  %41 = load i8*, i8** %s.addr, align 4
  %incdec.ptr61 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr61, i8** %s.addr, align 4
  store i8 73, i8* %41, align 1
  %42 = load i8*, i8** %s.addr, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr62, i8** %s.addr, align 4
  store i8 86, i8* %42, align 1
  %43 = load i32, i32* %n.addr, align 4
  %sub63 = sub i32 %43, 4
  store i32 %sub63, i32* %n.addr, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then60, %if.end58
  br label %while.cond65

while.cond65:                                     ; preds = %while.body67, %if.end64
  %44 = load i32, i32* %n.addr, align 4
  %cmp66 = icmp uge i32 %44, 1
  br i1 %cmp66, label %while.body67, label %while.end70

while.body67:                                     ; preds = %while.cond65
  %45 = load i8*, i8** %s.addr, align 4
  %incdec.ptr68 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr68, i8** %s.addr, align 4
  store i8 73, i8* %45, align 1
  %46 = load i32, i32* %n.addr, align 4
  %sub69 = sub i32 %46, 1
  store i32 %sub69, i32* %n.addr, align 4
  br label %while.cond65

while.end70:                                      ; preds = %while.cond65
  %47 = load i8*, i8** %s.addr, align 4
  store i8 0, i8* %47, align 1
  ret void
}

declare i32 @fputs(i8* %0, %struct._IO_FILE* %1) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buffer = alloca [16 x i8], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 4000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  call void @roman(i8* %arraydecay, i32 %1)
  %2 = load i32, i32* %i, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i8* %arraydecay1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp uge i32 %2, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 1000:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %4, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1000:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp uge i32 %5, 900
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 900:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub i32 %8, 900
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 900:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp uge i32 %9, 500
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 500:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub11 = sub i32 %11, 500
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 500:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp uge i32 %12, 400
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 400:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub i32 %15, 400
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 400:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp uge i32 %16, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub23 = sub i32 %18, 100
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 100:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp uge i32 %19, 90
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 90:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub i32 %22, 90
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 90:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp uge i32 %23, 50
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 50:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub34 = sub i32 %25, 50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 50:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp uge i32 %26, 40
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 40:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub40 = sub i32 %29, 40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 40:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp43 = icmp uge i32 %30, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub46 = sub i32 %32, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp uge i32 %33, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 9:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub52 = sub i32 %36, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp54 = icmp uge i32 %37, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub57 = sub i32 %39, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp59 = icmp uge i32 %40, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub63 = sub i32 %43, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp66 = icmp uge i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub69 = sub i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 1000:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1000:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1000
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1001
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 900:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 900:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -900
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -901
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 500:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 500:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -500
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -501
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 400:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 400:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -400
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -401
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 100:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 100:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -100
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -101
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 90:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 90:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -90
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -91
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 50:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 50:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -50
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -51
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 40:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 40:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -40
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -41
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -11
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 9:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -5
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -6
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for roman()

; entering Souper's runOnFunction() for main()

; ModuleID = './Roman_numerals-Encode.c.bc'
source_filename = "./Roman_numerals-Encode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [34 x i8] c"Roman numeral for zero requested.\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"%4u: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @roman(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 @fputs(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i32 0, i32 0), %struct._IO_FILE* %1)
  call void @exit(i32 1) #3
  unreachable

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp uge i32 %2, 1000
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  store i8 77, i8* %3, align 1
  %4 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %4, 1000
  store i32 %sub, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp uge i32 %5, 900
  br i1 %cmp2, label %if.then3, label %if.end7

if.then3:                                         ; preds = %while.end
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %s.addr, align 4
  store i8 67, i8* %6, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr5, i8** %s.addr, align 4
  store i8 77, i8* %7, align 1
  %8 = load i32, i32* %n.addr, align 4
  %sub6 = sub i32 %8, 900
  store i32 %sub6, i32* %n.addr, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then3, %while.end
  %9 = load i32, i32* %n.addr, align 4
  %cmp8 = icmp uge i32 %9, 500
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end7
  %10 = load i8*, i8** %s.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr10, i8** %s.addr, align 4
  store i8 68, i8* %10, align 1
  %11 = load i32, i32* %n.addr, align 4
  %sub11 = sub i32 %11, 500
  store i32 %sub11, i32* %n.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp uge i32 %12, 400
  br i1 %cmp13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.end12
  %13 = load i8*, i8** %s.addr, align 4
  %incdec.ptr15 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr15, i8** %s.addr, align 4
  store i8 67, i8* %13, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr16 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr16, i8** %s.addr, align 4
  store i8 68, i8* %14, align 1
  %15 = load i32, i32* %n.addr, align 4
  %sub17 = sub i32 %15, 400
  store i32 %sub17, i32* %n.addr, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %if.end12
  br label %while.cond19

while.cond19:                                     ; preds = %while.body21, %if.end18
  %16 = load i32, i32* %n.addr, align 4
  %cmp20 = icmp uge i32 %16, 100
  br i1 %cmp20, label %while.body21, label %while.end24

while.body21:                                     ; preds = %while.cond19
  %17 = load i8*, i8** %s.addr, align 4
  %incdec.ptr22 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr22, i8** %s.addr, align 4
  store i8 67, i8* %17, align 1
  %18 = load i32, i32* %n.addr, align 4
  %sub23 = sub i32 %18, 100
  store i32 %sub23, i32* %n.addr, align 4
  br label %while.cond19

while.end24:                                      ; preds = %while.cond19
  %19 = load i32, i32* %n.addr, align 4
  %cmp25 = icmp uge i32 %19, 90
  br i1 %cmp25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %while.end24
  %20 = load i8*, i8** %s.addr, align 4
  %incdec.ptr27 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %incdec.ptr27, i8** %s.addr, align 4
  store i8 88, i8* %20, align 1
  %21 = load i8*, i8** %s.addr, align 4
  %incdec.ptr28 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr28, i8** %s.addr, align 4
  store i8 67, i8* %21, align 1
  %22 = load i32, i32* %n.addr, align 4
  %sub29 = sub i32 %22, 90
  store i32 %sub29, i32* %n.addr, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %while.end24
  %23 = load i32, i32* %n.addr, align 4
  %cmp31 = icmp uge i32 %23, 50
  br i1 %cmp31, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end30
  %24 = load i8*, i8** %s.addr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr33, i8** %s.addr, align 4
  store i8 76, i8* %24, align 1
  %25 = load i32, i32* %n.addr, align 4
  %sub34 = sub i32 %25, 50
  store i32 %sub34, i32* %n.addr, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end30
  %26 = load i32, i32* %n.addr, align 4
  %cmp36 = icmp uge i32 %26, 40
  br i1 %cmp36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %if.end35
  %27 = load i8*, i8** %s.addr, align 4
  %incdec.ptr38 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr38, i8** %s.addr, align 4
  store i8 88, i8* %27, align 1
  %28 = load i8*, i8** %s.addr, align 4
  %incdec.ptr39 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr39, i8** %s.addr, align 4
  store i8 76, i8* %28, align 1
  %29 = load i32, i32* %n.addr, align 4
  %sub40 = sub i32 %29, 40
  store i32 %sub40, i32* %n.addr, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then37, %if.end35
  br label %while.cond42

while.cond42:                                     ; preds = %while.body44, %if.end41
  %30 = load i32, i32* %n.addr, align 4
  %cmp43 = icmp uge i32 %30, 10
  br i1 %cmp43, label %while.body44, label %while.end47

while.body44:                                     ; preds = %while.cond42
  %31 = load i8*, i8** %s.addr, align 4
  %incdec.ptr45 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr45, i8** %s.addr, align 4
  store i8 88, i8* %31, align 1
  %32 = load i32, i32* %n.addr, align 4
  %sub46 = sub i32 %32, 10
  store i32 %sub46, i32* %n.addr, align 4
  br label %while.cond42

while.end47:                                      ; preds = %while.cond42
  %33 = load i32, i32* %n.addr, align 4
  %cmp48 = icmp uge i32 %33, 9
  br i1 %cmp48, label %if.then49, label %if.end53

if.then49:                                        ; preds = %while.end47
  %34 = load i8*, i8** %s.addr, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %s.addr, align 4
  store i8 73, i8* %34, align 1
  %35 = load i8*, i8** %s.addr, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr51, i8** %s.addr, align 4
  store i8 88, i8* %35, align 1
  %36 = load i32, i32* %n.addr, align 4
  %sub52 = sub i32 %36, 9
  store i32 %sub52, i32* %n.addr, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then49, %while.end47
  %37 = load i32, i32* %n.addr, align 4
  %cmp54 = icmp uge i32 %37, 5
  br i1 %cmp54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end53
  %38 = load i8*, i8** %s.addr, align 4
  %incdec.ptr56 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr56, i8** %s.addr, align 4
  store i8 86, i8* %38, align 1
  %39 = load i32, i32* %n.addr, align 4
  %sub57 = sub i32 %39, 5
  store i32 %sub57, i32* %n.addr, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %if.end53
  %40 = load i32, i32* %n.addr, align 4
  %cmp59 = icmp uge i32 %40, 4
  br i1 %cmp59, label %if.then60, label %if.end64

if.then60:                                        ; preds = %if.end58
  %41 = load i8*, i8** %s.addr, align 4
  %incdec.ptr61 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr61, i8** %s.addr, align 4
  store i8 73, i8* %41, align 1
  %42 = load i8*, i8** %s.addr, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr62, i8** %s.addr, align 4
  store i8 86, i8* %42, align 1
  %43 = load i32, i32* %n.addr, align 4
  %sub63 = sub i32 %43, 4
  store i32 %sub63, i32* %n.addr, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then60, %if.end58
  br label %while.cond65

while.cond65:                                     ; preds = %while.body67, %if.end64
  %44 = load i32, i32* %n.addr, align 4
  %cmp66 = icmp uge i32 %44, 1
  br i1 %cmp66, label %while.body67, label %while.end70

while.body67:                                     ; preds = %while.cond65
  %45 = load i8*, i8** %s.addr, align 4
  %incdec.ptr68 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr68, i8** %s.addr, align 4
  store i8 73, i8* %45, align 1
  %46 = load i32, i32* %n.addr, align 4
  %sub69 = sub i32 %46, 1
  store i32 %sub69, i32* %n.addr, align 4
  br label %while.cond65

while.end70:                                      ; preds = %while.cond65
  %47 = load i8*, i8** %s.addr, align 4
  store i8 0, i8* %47, align 1
  ret void
}

declare i32 @fputs(i8* %0, %struct._IO_FILE* %1) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buffer = alloca [16 x i8], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 4000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  call void @roman(i8* %arraydecay, i32 %1)
  %2 = load i32, i32* %i, align 4
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %2, i8* %arraydecay1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 4000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 4000:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 4000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
