
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for intcmp()

; ModuleID = './Sort_an_integer_array.c.bc'
source_filename = "./Sort_an_integer_array.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.nums = private unnamed_addr constant [5 x i32] [i32 2, i32 4, i32 3, i32 1, i32 2], align 16
@.str = private unnamed_addr constant [24 x i8] c"result: %d %d %d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @intcmp(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca i32*, align 4
  %b = alloca i32*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %b, align 4
  %4 = load i32*, i32** %a, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load i32*, i32** %b, align 4
  %7 = load i32, i32* %6, align 4
  %cmp = icmp slt i32 %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32*, i32** %a, align 4
  %9 = load i32, i32* %8, align 4
  %10 = load i32*, i32** %b, align 4
  %11 = load i32, i32* %10, align 4
  %cmp1 = icmp sgt i32 %9, %11
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %nums = alloca [5 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i32]* %nums to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.nums to i8*), i32 20, i1 false)
  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 0
  %1 = bitcast i32* %arraydecay to i8*
  call void @qsort(i8* %1, i32 5, i32 4, i32 (i8*, i8*)* @intcmp)
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 0
  %2 = load i32, i32* %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 2
  %4 = load i32, i32* %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 3
  %5 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 4
  %6 = load i32, i32* %arrayidx4, align 16
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %2, i32 %3, i32 %4, i32 %5, i32 %6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %9, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for intcmp()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sort_an_integer_array.c.bc'
source_filename = "./Sort_an_integer_array.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.nums = private unnamed_addr constant [5 x i32] [i32 2, i32 4, i32 3, i32 1, i32 2], align 16
@.str = private unnamed_addr constant [24 x i8] c"result: %d %d %d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @intcmp(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %a = alloca i32*, align 4
  %b = alloca i32*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %a, align 4
  %2 = load i8*, i8** %bb.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %b, align 4
  %4 = load i32*, i32** %a, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load i32*, i32** %b, align 4
  %7 = load i32, i32* %6, align 4
  %cmp = icmp slt i32 %5, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %8 = load i32*, i32** %a, align 4
  %9 = load i32, i32* %8, align 4
  %10 = load i32*, i32** %b, align 4
  %11 = load i32, i32* %10, align 4
  %cmp1 = icmp sgt i32 %9, %11
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %nums = alloca [5 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i32]* %nums to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.nums to i8*), i32 20, i1 false)
  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 0
  %1 = bitcast i32* %arraydecay to i8*
  call void @qsort(i8* %1, i32 5, i32 4, i32 (i8*, i8*)* @intcmp)
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 0
  %2 = load i32, i32* %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 2
  %4 = load i32, i32* %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 3
  %5 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %nums, i32 0, i32 4
  %6 = load i32, i32* %arrayidx4, align 16
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i32 0, i32 0), i32 %2, i32 %3, i32 %4, i32 %5, i32 %6)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx2, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx4, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
