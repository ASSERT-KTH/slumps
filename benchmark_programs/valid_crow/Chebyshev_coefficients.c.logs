
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for test_func()

; ModuleID = './Chebyshev_coefficients.c.bc'
source_filename = "./Chebyshev_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"Coefficients:\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c" %lg\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A\0AApproximation:\0A   x           func(x)     approx      diff\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"% 10.8lf % 10.8lf % 10.8lf % 4.1le\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @test_func(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = call double @llvm.cos.f64(double %0)
  ret double %1
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @map(double %x, double %min_x, double %max_x, double %min_to, double %max_to) #0 {
entry:
  %x.addr = alloca double, align 8
  %min_x.addr = alloca double, align 8
  %max_x.addr = alloca double, align 8
  %min_to.addr = alloca double, align 8
  %max_to.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %min_x, double* %min_x.addr, align 8
  store double %max_x, double* %max_x.addr, align 8
  store double %min_to, double* %min_to.addr, align 8
  store double %max_to, double* %max_to.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min_x.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %max_x.addr, align 8
  %3 = load double, double* %min_x.addr, align 8
  %sub1 = fsub double %2, %3
  %div = fdiv double %sub, %sub1
  %4 = load double, double* %max_to.addr, align 8
  %5 = load double, double* %min_to.addr, align 8
  %sub2 = fsub double %4, %5
  %mul = fmul double %div, %sub2
  %6 = load double, double* %min_to.addr, align 8
  %add = fadd double %mul, %6
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden void @cheb_coef(double (double)* %func, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %func.addr = alloca double (double)*, align 4
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %f = alloca double, align 8
  %j = alloca i32, align 4
  store double (double)* %func, double (double)** %func.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  %0 = load double*, double** %coef.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %n.addr, align 4
  %mul = mul i32 8, %2
  call void @llvm.memset.p0i8.i32(i8* align 8 %1, i8 0, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %5 = load double (double)*, double (double)** %func.addr, align 4
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to float
  %add = fadd float %conv, 5.000000e-01
  %conv1 = fpext float %add to double
  %mul2 = fmul double 0x400921FB54442D18, %conv1
  %7 = load i32, i32* %n.addr, align 4
  %conv3 = sitofp i32 %7 to double
  %div = fdiv double %mul2, %conv3
  %8 = call double @llvm.cos.f64(double %div)
  %9 = load double, double* %min.addr, align 8
  %10 = load double, double* %max.addr, align 8
  %call = call double @map(double %8, double -1.000000e+00, double 1.000000e+00, double %9, double %10)
  %call4 = call double %5(double %call)
  %mul5 = fmul double %call4, 2.000000e+00
  %11 = load i32, i32* %n.addr, align 4
  %conv6 = sitofp i32 %11 to double
  %div7 = fdiv double %mul5, %conv6
  store double %div7, double* %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %14 = load double, double* %f, align 8
  %15 = load i32, i32* %j, align 4
  %conv12 = sitofp i32 %15 to double
  %mul13 = fmul double 0x400921FB54442D18, %conv12
  %16 = load i32, i32* %i, align 4
  %conv14 = sitofp i32 %16 to float
  %add15 = fadd float %conv14, 5.000000e-01
  %conv16 = fpext float %add15 to double
  %mul17 = fmul double %mul13, %conv16
  %17 = load i32, i32* %n.addr, align 4
  %conv18 = sitofp i32 %17 to double
  %div19 = fdiv double %mul17, %conv18
  %18 = call double @llvm.cos.f64(double %div19)
  %mul20 = fmul double %14, %18
  %19 = load double*, double** %coef.addr, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx, align 8
  %add21 = fadd double %21, %mul20
  store double %add21, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %23, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cheb_approx(double %x, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %res = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  store double 1.000000e+00, double* %a, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min.addr, align 8
  %2 = load double, double* %max.addr, align 8
  %call = call double @map(double %0, double %1, double %2, double -1.000000e+00, double 1.000000e+00)
  store double %call, double* %b, align 8
  %3 = load double*, double** %coef.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %3, i32 0
  %4 = load double, double* %arrayidx, align 8
  %div = fdiv double %4, 2.000000e+00
  %5 = load double*, double** %coef.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx1, align 8
  %7 = load double, double* %b, align 8
  %mul = fmul double %6, %7
  %add = fadd double %div, %mul
  store double %add, double* %res, align 8
  %8 = load double, double* %b, align 8
  %mul2 = fmul double 2.000000e+00, %8
  store double %mul2, double* %x.addr, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %coef.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx3, align 8
  %14 = load double, double* %x.addr, align 8
  %15 = load double, double* %b, align 8
  %mul4 = fmul double %14, %15
  %16 = load double, double* %a, align 8
  %sub = fsub double %mul4, %16
  store double %sub, double* %c, align 8
  %mul5 = fmul double %13, %sub
  %17 = load double, double* %res, align 8
  %add6 = fadd double %17, %mul5
  store double %add6, double* %res, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load double, double* %b, align 8
  store double %18, double* %a, align 8
  %19 = load double, double* %c, align 8
  store double %19, double* %b, align 8
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load double, double* %res, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [10 x double], align 16
  %min = alloca double, align 8
  %max = alloca double, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %x = alloca double, align 8
  %f = alloca double, align 8
  %approx = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 0.000000e+00, double* %min, align 8
  store double 1.000000e+00, double* %max, align 8
  %0 = load double, double* %min, align 8
  %1 = load double, double* %max, align 8
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  call void @cheb_coef(double (double)* @test_func, i32 10, double %0, double %1, double* %arraydecay)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), double %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i3, align 4
  %cmp5 = icmp sle i32 %6, 20
  br i1 %cmp5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i3, align 4
  %conv = sitofp i32 %7 to double
  %8 = load double, double* %min, align 8
  %9 = load double, double* %max, align 8
  %call7 = call double @map(double %conv, double 0.000000e+00, double 2.000000e+01, double %8, double %9)
  store double %call7, double* %x, align 8
  %10 = load double, double* %x, align 8
  %call8 = call double @test_func(double %10)
  store double %call8, double* %f, align 8
  %11 = load double, double* %x, align 8
  %12 = load double, double* %min, align 8
  %13 = load double, double* %max, align 8
  %arraydecay9 = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  %call10 = call double @cheb_approx(double %11, i32 10, double %12, double %13, double* %arraydecay9)
  store double %call10, double* %approx, align 8
  %14 = load double, double* %x, align 8
  %15 = load double, double* %f, align 8
  %16 = load double, double* %approx, align 8
  %17 = load double, double* %approx, align 8
  %18 = load double, double* %f, align 8
  %sub = fsub double %17, %18
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %14, double %15, double %16, double %sub)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %19 = load i32, i32* %i3, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %i3, align 4
  br label %for.cond4

for.end14:                                        ; preds = %for.cond4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i32 @puts(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for test_func()

; entering Souper's runOnFunction() for map()

; ModuleID = './Chebyshev_coefficients.c.bc'
source_filename = "./Chebyshev_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"Coefficients:\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c" %lg\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A\0AApproximation:\0A   x           func(x)     approx      diff\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"% 10.8lf % 10.8lf % 10.8lf % 4.1le\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @test_func(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = call double @llvm.cos.f64(double %0)
  ret double %1
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @map(double %x, double %min_x, double %max_x, double %min_to, double %max_to) #0 {
entry:
  %x.addr = alloca double, align 8
  %min_x.addr = alloca double, align 8
  %max_x.addr = alloca double, align 8
  %min_to.addr = alloca double, align 8
  %max_to.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %min_x, double* %min_x.addr, align 8
  store double %max_x, double* %max_x.addr, align 8
  store double %min_to, double* %min_to.addr, align 8
  store double %max_to, double* %max_to.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min_x.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %max_x.addr, align 8
  %3 = load double, double* %min_x.addr, align 8
  %sub1 = fsub double %2, %3
  %div = fdiv double %sub, %sub1
  %4 = load double, double* %max_to.addr, align 8
  %5 = load double, double* %min_to.addr, align 8
  %sub2 = fsub double %4, %5
  %mul = fmul double %div, %sub2
  %6 = load double, double* %min_to.addr, align 8
  %add = fadd double %mul, %6
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden void @cheb_coef(double (double)* %func, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %func.addr = alloca double (double)*, align 4
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %f = alloca double, align 8
  %j = alloca i32, align 4
  store double (double)* %func, double (double)** %func.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  %0 = load double*, double** %coef.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %n.addr, align 4
  %mul = mul i32 8, %2
  call void @llvm.memset.p0i8.i32(i8* align 8 %1, i8 0, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %5 = load double (double)*, double (double)** %func.addr, align 4
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to float
  %add = fadd float %conv, 5.000000e-01
  %conv1 = fpext float %add to double
  %mul2 = fmul double 0x400921FB54442D18, %conv1
  %7 = load i32, i32* %n.addr, align 4
  %conv3 = sitofp i32 %7 to double
  %div = fdiv double %mul2, %conv3
  %8 = call double @llvm.cos.f64(double %div)
  %9 = load double, double* %min.addr, align 8
  %10 = load double, double* %max.addr, align 8
  %call = call double @map(double %8, double -1.000000e+00, double 1.000000e+00, double %9, double %10)
  %call4 = call double %5(double %call)
  %mul5 = fmul double %call4, 2.000000e+00
  %11 = load i32, i32* %n.addr, align 4
  %conv6 = sitofp i32 %11 to double
  %div7 = fdiv double %mul5, %conv6
  store double %div7, double* %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %14 = load double, double* %f, align 8
  %15 = load i32, i32* %j, align 4
  %conv12 = sitofp i32 %15 to double
  %mul13 = fmul double 0x400921FB54442D18, %conv12
  %16 = load i32, i32* %i, align 4
  %conv14 = sitofp i32 %16 to float
  %add15 = fadd float %conv14, 5.000000e-01
  %conv16 = fpext float %add15 to double
  %mul17 = fmul double %mul13, %conv16
  %17 = load i32, i32* %n.addr, align 4
  %conv18 = sitofp i32 %17 to double
  %div19 = fdiv double %mul17, %conv18
  %18 = call double @llvm.cos.f64(double %div19)
  %mul20 = fmul double %14, %18
  %19 = load double*, double** %coef.addr, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx, align 8
  %add21 = fadd double %21, %mul20
  store double %add21, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %23, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cheb_approx(double %x, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %res = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  store double 1.000000e+00, double* %a, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min.addr, align 8
  %2 = load double, double* %max.addr, align 8
  %call = call double @map(double %0, double %1, double %2, double -1.000000e+00, double 1.000000e+00)
  store double %call, double* %b, align 8
  %3 = load double*, double** %coef.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %3, i32 0
  %4 = load double, double* %arrayidx, align 8
  %div = fdiv double %4, 2.000000e+00
  %5 = load double*, double** %coef.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx1, align 8
  %7 = load double, double* %b, align 8
  %mul = fmul double %6, %7
  %add = fadd double %div, %mul
  store double %add, double* %res, align 8
  %8 = load double, double* %b, align 8
  %mul2 = fmul double 2.000000e+00, %8
  store double %mul2, double* %x.addr, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %coef.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx3, align 8
  %14 = load double, double* %x.addr, align 8
  %15 = load double, double* %b, align 8
  %mul4 = fmul double %14, %15
  %16 = load double, double* %a, align 8
  %sub = fsub double %mul4, %16
  store double %sub, double* %c, align 8
  %mul5 = fmul double %13, %sub
  %17 = load double, double* %res, align 8
  %add6 = fadd double %17, %mul5
  store double %add6, double* %res, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load double, double* %b, align 8
  store double %18, double* %a, align 8
  %19 = load double, double* %c, align 8
  store double %19, double* %b, align 8
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load double, double* %res, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [10 x double], align 16
  %min = alloca double, align 8
  %max = alloca double, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %x = alloca double, align 8
  %f = alloca double, align 8
  %approx = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 0.000000e+00, double* %min, align 8
  store double 1.000000e+00, double* %max, align 8
  %0 = load double, double* %min, align 8
  %1 = load double, double* %max, align 8
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  call void @cheb_coef(double (double)* @test_func, i32 10, double %0, double %1, double* %arraydecay)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), double %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i3, align 4
  %cmp5 = icmp sle i32 %6, 20
  br i1 %cmp5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i3, align 4
  %conv = sitofp i32 %7 to double
  %8 = load double, double* %min, align 8
  %9 = load double, double* %max, align 8
  %call7 = call double @map(double %conv, double 0.000000e+00, double 2.000000e+01, double %8, double %9)
  store double %call7, double* %x, align 8
  %10 = load double, double* %x, align 8
  %call8 = call double @test_func(double %10)
  store double %call8, double* %f, align 8
  %11 = load double, double* %x, align 8
  %12 = load double, double* %min, align 8
  %13 = load double, double* %max, align 8
  %arraydecay9 = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  %call10 = call double @cheb_approx(double %11, i32 10, double %12, double %13, double* %arraydecay9)
  store double %call10, double* %approx, align 8
  %14 = load double, double* %x, align 8
  %15 = load double, double* %f, align 8
  %16 = load double, double* %approx, align 8
  %17 = load double, double* %approx, align 8
  %18 = load double, double* %f, align 8
  %sub = fsub double %17, %18
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %14, double %15, double %16, double %sub)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %19 = load i32, i32* %i3, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %i3, align 4
  br label %for.cond4

for.end14:                                        ; preds = %for.cond4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i32 @puts(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for map()

; entering Souper's runOnFunction() for cheb_coef()

; ModuleID = './Chebyshev_coefficients.c.bc'
source_filename = "./Chebyshev_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"Coefficients:\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c" %lg\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A\0AApproximation:\0A   x           func(x)     approx      diff\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"% 10.8lf % 10.8lf % 10.8lf % 4.1le\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @test_func(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = call double @llvm.cos.f64(double %0)
  ret double %1
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @map(double %x, double %min_x, double %max_x, double %min_to, double %max_to) #0 {
entry:
  %x.addr = alloca double, align 8
  %min_x.addr = alloca double, align 8
  %max_x.addr = alloca double, align 8
  %min_to.addr = alloca double, align 8
  %max_to.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %min_x, double* %min_x.addr, align 8
  store double %max_x, double* %max_x.addr, align 8
  store double %min_to, double* %min_to.addr, align 8
  store double %max_to, double* %max_to.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min_x.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %max_x.addr, align 8
  %3 = load double, double* %min_x.addr, align 8
  %sub1 = fsub double %2, %3
  %div = fdiv double %sub, %sub1
  %4 = load double, double* %max_to.addr, align 8
  %5 = load double, double* %min_to.addr, align 8
  %sub2 = fsub double %4, %5
  %mul = fmul double %div, %sub2
  %6 = load double, double* %min_to.addr, align 8
  %add = fadd double %mul, %6
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden void @cheb_coef(double (double)* %func, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %func.addr = alloca double (double)*, align 4
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %f = alloca double, align 8
  %j = alloca i32, align 4
  store double (double)* %func, double (double)** %func.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  %0 = load double*, double** %coef.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %n.addr, align 4
  %mul = mul i32 8, %2
  call void @llvm.memset.p0i8.i32(i8* align 8 %1, i8 0, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %5 = load double (double)*, double (double)** %func.addr, align 4
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to float
  %add = fadd float %conv, 5.000000e-01
  %conv1 = fpext float %add to double
  %mul2 = fmul double 0x400921FB54442D18, %conv1
  %7 = load i32, i32* %n.addr, align 4
  %conv3 = sitofp i32 %7 to double
  %div = fdiv double %mul2, %conv3
  %8 = call double @llvm.cos.f64(double %div)
  %9 = load double, double* %min.addr, align 8
  %10 = load double, double* %max.addr, align 8
  %call = call double @map(double %8, double -1.000000e+00, double 1.000000e+00, double %9, double %10)
  %call4 = call double %5(double %call)
  %mul5 = fmul double %call4, 2.000000e+00
  %11 = load i32, i32* %n.addr, align 4
  %conv6 = sitofp i32 %11 to double
  %div7 = fdiv double %mul5, %conv6
  store double %div7, double* %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %14 = load double, double* %f, align 8
  %15 = load i32, i32* %j, align 4
  %conv12 = sitofp i32 %15 to double
  %mul13 = fmul double 0x400921FB54442D18, %conv12
  %16 = load i32, i32* %i, align 4
  %conv14 = sitofp i32 %16 to float
  %add15 = fadd float %conv14, 5.000000e-01
  %conv16 = fpext float %add15 to double
  %mul17 = fmul double %mul13, %conv16
  %17 = load i32, i32* %n.addr, align 4
  %conv18 = sitofp i32 %17 to double
  %div19 = fdiv double %mul17, %conv18
  %18 = call double @llvm.cos.f64(double %div19)
  %mul20 = fmul double %14, %18
  %19 = load double*, double** %coef.addr, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx, align 8
  %add21 = fadd double %21, %mul20
  store double %add21, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %23, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cheb_approx(double %x, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %res = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  store double 1.000000e+00, double* %a, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min.addr, align 8
  %2 = load double, double* %max.addr, align 8
  %call = call double @map(double %0, double %1, double %2, double -1.000000e+00, double 1.000000e+00)
  store double %call, double* %b, align 8
  %3 = load double*, double** %coef.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %3, i32 0
  %4 = load double, double* %arrayidx, align 8
  %div = fdiv double %4, 2.000000e+00
  %5 = load double*, double** %coef.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx1, align 8
  %7 = load double, double* %b, align 8
  %mul = fmul double %6, %7
  %add = fadd double %div, %mul
  store double %add, double* %res, align 8
  %8 = load double, double* %b, align 8
  %mul2 = fmul double 2.000000e+00, %8
  store double %mul2, double* %x.addr, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %coef.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx3, align 8
  %14 = load double, double* %x.addr, align 8
  %15 = load double, double* %b, align 8
  %mul4 = fmul double %14, %15
  %16 = load double, double* %a, align 8
  %sub = fsub double %mul4, %16
  store double %sub, double* %c, align 8
  %mul5 = fmul double %13, %sub
  %17 = load double, double* %res, align 8
  %add6 = fadd double %17, %mul5
  store double %add6, double* %res, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load double, double* %b, align 8
  store double %18, double* %a, align 8
  %19 = load double, double* %c, align 8
  store double %19, double* %b, align 8
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load double, double* %res, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [10 x double], align 16
  %min = alloca double, align 8
  %max = alloca double, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %x = alloca double, align 8
  %f = alloca double, align 8
  %approx = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 0.000000e+00, double* %min, align 8
  store double 1.000000e+00, double* %max, align 8
  %0 = load double, double* %min, align 8
  %1 = load double, double* %max, align 8
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  call void @cheb_coef(double (double)* @test_func, i32 10, double %0, double %1, double* %arraydecay)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), double %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i3, align 4
  %cmp5 = icmp sle i32 %6, 20
  br i1 %cmp5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i3, align 4
  %conv = sitofp i32 %7 to double
  %8 = load double, double* %min, align 8
  %9 = load double, double* %max, align 8
  %call7 = call double @map(double %conv, double 0.000000e+00, double 2.000000e+01, double %8, double %9)
  store double %call7, double* %x, align 8
  %10 = load double, double* %x, align 8
  %call8 = call double @test_func(double %10)
  store double %call8, double* %f, align 8
  %11 = load double, double* %x, align 8
  %12 = load double, double* %min, align 8
  %13 = load double, double* %max, align 8
  %arraydecay9 = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  %call10 = call double @cheb_approx(double %11, i32 10, double %12, double %13, double* %arraydecay9)
  store double %call10, double* %approx, align 8
  %14 = load double, double* %x, align 8
  %15 = load double, double* %f, align 8
  %16 = load double, double* %approx, align 8
  %17 = load double, double* %approx, align 8
  %18 = load double, double* %f, align 8
  %sub = fsub double %17, %18
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %14, double %15, double %16, double %sub)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %19 = load i32, i32* %i3, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %i3, align 4
  br label %for.cond4

for.end14:                                        ; preds = %for.cond4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i32 @puts(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 8, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cheb_coef()

; entering Souper's runOnFunction() for cheb_approx()

; ModuleID = './Chebyshev_coefficients.c.bc'
source_filename = "./Chebyshev_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"Coefficients:\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c" %lg\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A\0AApproximation:\0A   x           func(x)     approx      diff\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"% 10.8lf % 10.8lf % 10.8lf % 4.1le\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @test_func(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = call double @llvm.cos.f64(double %0)
  ret double %1
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @map(double %x, double %min_x, double %max_x, double %min_to, double %max_to) #0 {
entry:
  %x.addr = alloca double, align 8
  %min_x.addr = alloca double, align 8
  %max_x.addr = alloca double, align 8
  %min_to.addr = alloca double, align 8
  %max_to.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %min_x, double* %min_x.addr, align 8
  store double %max_x, double* %max_x.addr, align 8
  store double %min_to, double* %min_to.addr, align 8
  store double %max_to, double* %max_to.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min_x.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %max_x.addr, align 8
  %3 = load double, double* %min_x.addr, align 8
  %sub1 = fsub double %2, %3
  %div = fdiv double %sub, %sub1
  %4 = load double, double* %max_to.addr, align 8
  %5 = load double, double* %min_to.addr, align 8
  %sub2 = fsub double %4, %5
  %mul = fmul double %div, %sub2
  %6 = load double, double* %min_to.addr, align 8
  %add = fadd double %mul, %6
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden void @cheb_coef(double (double)* %func, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %func.addr = alloca double (double)*, align 4
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %f = alloca double, align 8
  %j = alloca i32, align 4
  store double (double)* %func, double (double)** %func.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  %0 = load double*, double** %coef.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %n.addr, align 4
  %mul = mul i32 8, %2
  call void @llvm.memset.p0i8.i32(i8* align 8 %1, i8 0, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %5 = load double (double)*, double (double)** %func.addr, align 4
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to float
  %add = fadd float %conv, 5.000000e-01
  %conv1 = fpext float %add to double
  %mul2 = fmul double 0x400921FB54442D18, %conv1
  %7 = load i32, i32* %n.addr, align 4
  %conv3 = sitofp i32 %7 to double
  %div = fdiv double %mul2, %conv3
  %8 = call double @llvm.cos.f64(double %div)
  %9 = load double, double* %min.addr, align 8
  %10 = load double, double* %max.addr, align 8
  %call = call double @map(double %8, double -1.000000e+00, double 1.000000e+00, double %9, double %10)
  %call4 = call double %5(double %call)
  %mul5 = fmul double %call4, 2.000000e+00
  %11 = load i32, i32* %n.addr, align 4
  %conv6 = sitofp i32 %11 to double
  %div7 = fdiv double %mul5, %conv6
  store double %div7, double* %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %14 = load double, double* %f, align 8
  %15 = load i32, i32* %j, align 4
  %conv12 = sitofp i32 %15 to double
  %mul13 = fmul double 0x400921FB54442D18, %conv12
  %16 = load i32, i32* %i, align 4
  %conv14 = sitofp i32 %16 to float
  %add15 = fadd float %conv14, 5.000000e-01
  %conv16 = fpext float %add15 to double
  %mul17 = fmul double %mul13, %conv16
  %17 = load i32, i32* %n.addr, align 4
  %conv18 = sitofp i32 %17 to double
  %div19 = fdiv double %mul17, %conv18
  %18 = call double @llvm.cos.f64(double %div19)
  %mul20 = fmul double %14, %18
  %19 = load double*, double** %coef.addr, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx, align 8
  %add21 = fadd double %21, %mul20
  store double %add21, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %23, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cheb_approx(double %x, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %res = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  store double 1.000000e+00, double* %a, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min.addr, align 8
  %2 = load double, double* %max.addr, align 8
  %call = call double @map(double %0, double %1, double %2, double -1.000000e+00, double 1.000000e+00)
  store double %call, double* %b, align 8
  %3 = load double*, double** %coef.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %3, i32 0
  %4 = load double, double* %arrayidx, align 8
  %div = fdiv double %4, 2.000000e+00
  %5 = load double*, double** %coef.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx1, align 8
  %7 = load double, double* %b, align 8
  %mul = fmul double %6, %7
  %add = fadd double %div, %mul
  store double %add, double* %res, align 8
  %8 = load double, double* %b, align 8
  %mul2 = fmul double 2.000000e+00, %8
  store double %mul2, double* %x.addr, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %coef.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx3, align 8
  %14 = load double, double* %x.addr, align 8
  %15 = load double, double* %b, align 8
  %mul4 = fmul double %14, %15
  %16 = load double, double* %a, align 8
  %sub = fsub double %mul4, %16
  store double %sub, double* %c, align 8
  %mul5 = fmul double %13, %sub
  %17 = load double, double* %res, align 8
  %add6 = fadd double %17, %mul5
  store double %add6, double* %res, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load double, double* %b, align 8
  store double %18, double* %a, align 8
  %19 = load double, double* %c, align 8
  store double %19, double* %b, align 8
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load double, double* %res, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [10 x double], align 16
  %min = alloca double, align 8
  %max = alloca double, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %x = alloca double, align 8
  %f = alloca double, align 8
  %approx = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 0.000000e+00, double* %min, align 8
  store double 1.000000e+00, double* %max, align 8
  %0 = load double, double* %min, align 8
  %1 = load double, double* %max, align 8
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  call void @cheb_coef(double (double)* @test_func, i32 10, double %0, double %1, double* %arraydecay)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), double %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i3, align 4
  %cmp5 = icmp sle i32 %6, 20
  br i1 %cmp5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i3, align 4
  %conv = sitofp i32 %7 to double
  %8 = load double, double* %min, align 8
  %9 = load double, double* %max, align 8
  %call7 = call double @map(double %conv, double 0.000000e+00, double 2.000000e+01, double %8, double %9)
  store double %call7, double* %x, align 8
  %10 = load double, double* %x, align 8
  %call8 = call double @test_func(double %10)
  store double %call8, double* %f, align 8
  %11 = load double, double* %x, align 8
  %12 = load double, double* %min, align 8
  %13 = load double, double* %max, align 8
  %arraydecay9 = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  %call10 = call double @cheb_approx(double %11, i32 10, double %12, double %13, double* %arraydecay9)
  store double %call10, double* %approx, align 8
  %14 = load double, double* %x, align 8
  %15 = load double, double* %f, align 8
  %16 = load double, double* %approx, align 8
  %17 = load double, double* %approx, align 8
  %18 = load double, double* %f, align 8
  %sub = fsub double %17, %18
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %14, double %15, double %16, double %sub)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %19 = load i32, i32* %i3, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %i3, align 4
  br label %for.cond4

for.end14:                                        ; preds = %for.cond4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i32 @puts(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for cheb_approx()

; entering Souper's runOnFunction() for main()

; ModuleID = './Chebyshev_coefficients.c.bc'
source_filename = "./Chebyshev_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [14 x i8] c"Coefficients:\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c" %lg\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A\0AApproximation:\0A   x           func(x)     approx      diff\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"% 10.8lf % 10.8lf % 10.8lf % 4.1le\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @test_func(double %x) #0 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = call double @llvm.cos.f64(double %0)
  ret double %1
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double @map(double %x, double %min_x, double %max_x, double %min_to, double %max_to) #0 {
entry:
  %x.addr = alloca double, align 8
  %min_x.addr = alloca double, align 8
  %max_x.addr = alloca double, align 8
  %min_to.addr = alloca double, align 8
  %max_to.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %min_x, double* %min_x.addr, align 8
  store double %max_x, double* %max_x.addr, align 8
  store double %min_to, double* %min_to.addr, align 8
  store double %max_to, double* %max_to.addr, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min_x.addr, align 8
  %sub = fsub double %0, %1
  %2 = load double, double* %max_x.addr, align 8
  %3 = load double, double* %min_x.addr, align 8
  %sub1 = fsub double %2, %3
  %div = fdiv double %sub, %sub1
  %4 = load double, double* %max_to.addr, align 8
  %5 = load double, double* %min_to.addr, align 8
  %sub2 = fsub double %4, %5
  %mul = fmul double %div, %sub2
  %6 = load double, double* %min_to.addr, align 8
  %add = fadd double %mul, %6
  ret double %add
}

; Function Attrs: noinline nounwind optnone
define hidden void @cheb_coef(double (double)* %func, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %func.addr = alloca double (double)*, align 4
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %i = alloca i32, align 4
  %f = alloca double, align 8
  %j = alloca i32, align 4
  store double (double)* %func, double (double)** %func.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  %0 = load double*, double** %coef.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %n.addr, align 4
  %mul = mul i32 8, %2
  call void @llvm.memset.p0i8.i32(i8* align 8 %1, i8 0, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc22, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end24

for.body:                                         ; preds = %for.cond
  %5 = load double (double)*, double (double)** %func.addr, align 4
  %6 = load i32, i32* %i, align 4
  %conv = sitofp i32 %6 to float
  %add = fadd float %conv, 5.000000e-01
  %conv1 = fpext float %add to double
  %mul2 = fmul double 0x400921FB54442D18, %conv1
  %7 = load i32, i32* %n.addr, align 4
  %conv3 = sitofp i32 %7 to double
  %div = fdiv double %mul2, %conv3
  %8 = call double @llvm.cos.f64(double %div)
  %9 = load double, double* %min.addr, align 8
  %10 = load double, double* %max.addr, align 8
  %call = call double @map(double %8, double -1.000000e+00, double 1.000000e+00, double %9, double %10)
  %call4 = call double %5(double %call)
  %mul5 = fmul double %call4, 2.000000e+00
  %11 = load i32, i32* %n.addr, align 4
  %conv6 = sitofp i32 %11 to double
  %div7 = fdiv double %mul5, %conv6
  store double %div7, double* %f, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond8
  %14 = load double, double* %f, align 8
  %15 = load i32, i32* %j, align 4
  %conv12 = sitofp i32 %15 to double
  %mul13 = fmul double 0x400921FB54442D18, %conv12
  %16 = load i32, i32* %i, align 4
  %conv14 = sitofp i32 %16 to float
  %add15 = fadd float %conv14, 5.000000e-01
  %conv16 = fpext float %add15 to double
  %mul17 = fmul double %mul13, %conv16
  %17 = load i32, i32* %n.addr, align 4
  %conv18 = sitofp i32 %17 to double
  %div19 = fdiv double %mul17, %conv18
  %18 = call double @llvm.cos.f64(double %div19)
  %mul20 = fmul double %14, %18
  %19 = load double*, double** %coef.addr, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx, align 8
  %add21 = fadd double %21, %mul20
  store double %add21, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond8

for.end:                                          ; preds = %for.cond8
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %23 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %23, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond

for.end24:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden double @cheb_approx(double %x, i32 %n, double %min, double %max, double* %coef) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %coef.addr = alloca double*, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %res = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %min, double* %min.addr, align 8
  store double %max, double* %max.addr, align 8
  store double* %coef, double** %coef.addr, align 4
  store double 1.000000e+00, double* %a, align 8
  %0 = load double, double* %x.addr, align 8
  %1 = load double, double* %min.addr, align 8
  %2 = load double, double* %max.addr, align 8
  %call = call double @map(double %0, double %1, double %2, double -1.000000e+00, double 1.000000e+00)
  store double %call, double* %b, align 8
  %3 = load double*, double** %coef.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %3, i32 0
  %4 = load double, double* %arrayidx, align 8
  %div = fdiv double %4, 2.000000e+00
  %5 = load double*, double** %coef.addr, align 4
  %arrayidx1 = getelementptr inbounds double, double* %5, i32 1
  %6 = load double, double* %arrayidx1, align 8
  %7 = load double, double* %b, align 8
  %mul = fmul double %6, %7
  %add = fadd double %div, %mul
  store double %add, double* %res, align 8
  %8 = load double, double* %b, align 8
  %mul2 = fmul double 2.000000e+00, %8
  store double %mul2, double* %x.addr, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load double*, double** %coef.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds double, double* %11, i32 %12
  %13 = load double, double* %arrayidx3, align 8
  %14 = load double, double* %x.addr, align 8
  %15 = load double, double* %b, align 8
  %mul4 = fmul double %14, %15
  %16 = load double, double* %a, align 8
  %sub = fsub double %mul4, %16
  store double %sub, double* %c, align 8
  %mul5 = fmul double %13, %sub
  %17 = load double, double* %res, align 8
  %add6 = fadd double %17, %mul5
  store double %add6, double* %res, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load double, double* %b, align 8
  store double %18, double* %a, align 8
  %19 = load double, double* %c, align 8
  store double %19, double* %b, align 8
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load double, double* %res, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [10 x double], align 16
  %min = alloca double, align 8
  %max = alloca double, align 8
  %i = alloca i32, align 4
  %i3 = alloca i32, align 4
  %x = alloca double, align 8
  %f = alloca double, align 8
  %approx = alloca double, align 8
  store i32 0, i32* %retval, align 4
  store double 0.000000e+00, double* %min, align 8
  store double 1.000000e+00, double* %max, align 8
  %0 = load double, double* %min, align 8
  %1 = load double, double* %max, align 8
  %arraydecay = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  call void @cheb_coef(double (double)* @test_func, i32 10, double %0, double %1, double* %arraydecay)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 %3
  %4 = load double, double* %arrayidx, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), double %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @puts(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i3, align 4
  %cmp5 = icmp sle i32 %6, 20
  br i1 %cmp5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %i3, align 4
  %conv = sitofp i32 %7 to double
  %8 = load double, double* %min, align 8
  %9 = load double, double* %max, align 8
  %call7 = call double @map(double %conv, double 0.000000e+00, double 2.000000e+01, double %8, double %9)
  store double %call7, double* %x, align 8
  %10 = load double, double* %x, align 8
  %call8 = call double @test_func(double %10)
  store double %call8, double* %f, align 8
  %11 = load double, double* %x, align 8
  %12 = load double, double* %min, align 8
  %13 = load double, double* %max, align 8
  %arraydecay9 = getelementptr inbounds [10 x double], [10 x double]* %c, i32 0, i32 0
  %call10 = call double @cheb_approx(double %11, i32 10, double %12, double %13, double* %arraydecay9)
  store double %call10, double* %approx, align 8
  %14 = load double, double* %x, align 8
  %15 = load double, double* %f, align 8
  %16 = load double, double* %approx, align 8
  %17 = load double, double* %approx, align 8
  %18 = load double, double* %f, align 8
  %sub = fsub double %17, %18
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0), double %14, double %15, double %16, double %sub)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %19 = load i32, i32* %i3, align 4
  %inc13 = add nsw i32 %19, 1
  store i32 %inc13, i32* %i3, align 4
  br label %for.cond4

for.end14:                                        ; preds = %for.cond4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i32 @puts(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %6, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
