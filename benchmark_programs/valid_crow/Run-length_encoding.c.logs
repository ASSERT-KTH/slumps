
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for sget()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %pos2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sget()

; entering Souper's runOnFunction() for sput()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %cond to i8
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %8, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, 0:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sput()

; entering Souper's runOnFunction() for file_put()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for file_put()

; entering Souper's runOnFunction() for output()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 128, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 128:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 128:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 160
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for output()

; entering Souper's runOnFunction() for encode()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 %5(%struct.stream_t* %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv5 = trunc i32 %8 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %repeat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = zext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv16 = zext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp17 = icmp ne i32 %conv13, %conv16
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %repeat, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool21 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp eq i32 %17, 129
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 129:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool25 = icmp ne i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool27 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub28 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %arrayidx30, align 16
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv31 = zext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub33 = sub nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub37 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx38, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv39 = zext i8 %30 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub40 = sub nsw i32 %31, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %arrayidx41, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv42 = zext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp43 = icmp eq i32 %conv39, %conv42
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = icmp sgt i32 %33, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub49 = sub nsw i32 %35, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub50 = sub nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %arrayidx51, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp56 = icmp eq i32 %38, 128
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 128:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool59 = icmp ne i32 %39, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 129:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 128:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for encode()

; entering Souper's runOnFunction() for decode()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 %1(%struct.stream_t* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %4, 128
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 128:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, 128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 128:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %cnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call7 = call i32 %12(%struct.stream_t* %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call11 = call i32 %17(%struct.stream_t* %18)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %cnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 128:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 128:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -96
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for decode()

; entering Souper's runOnFunction() for main()

; ModuleID = './Run-length_encoding.c.bc'
source_filename = "./Run-length_encoding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.string_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, i8*, i32 }
%struct.stream_t = type { {}*, i32 (%struct.stream_t*, i32)* }
%struct._IO_FILE = type opaque
%struct.file_stream = type { i32 (%struct.stream_t*)*, i32 (%struct.stream_t*, i32)*, %struct._IO_FILE* }

@.str = private unnamed_addr constant [68 x i8] c"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\00", align 1
@__const.main.str_in = private unnamed_addr constant %struct.string_stream { i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*, i32)* null, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i32 0, i32 0), i32 0 }, align 4
@stdout = external constant %struct._IO_FILE*, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @sget(%struct.stream_t* %in) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %2, i32 0, i32 2
  %3 = load i8*, i8** %string, align 4
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 3
  %5 = load i32, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %3, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos2 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %8, i32 0, i32 3
  %9 = load i32, i32* %pos2, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos2, align 4
  %10 = load i32, i32* %c, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sput(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %s = alloca %struct.string_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.string_stream*
  store %struct.string_stream* %1, %struct.string_stream** %s, align 4
  %2 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ]
  %conv = trunc i32 %cond to i8
  %4 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %4, i32 0, i32 2
  %5 = load i8*, i8** %string, align 4
  %6 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %6, i32 0, i32 3
  %7 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %7
  store i8 %conv, i8* %arrayidx, align 1
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.string_stream*, %struct.string_stream** %s, align 4
  %pos3 = getelementptr inbounds %struct.string_stream, %struct.string_stream* %9, i32 0, i32 3
  store i32 0, i32* %pos3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @file_put(%struct.stream_t* %out, i32 %c) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %c.addr = alloca i32, align 4
  %f = alloca %struct.file_stream*, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %1 = bitcast %struct.stream_t* %0 to %struct.file_stream*
  store %struct.file_stream* %1, %struct.file_stream** %f, align 4
  %2 = load i32, i32* %c.addr, align 4
  %3 = load %struct.file_stream*, %struct.file_stream** %f, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %3, i32 0, i32 2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 4
  %call = call i32 @fputc(i32 %2, %struct._IO_FILE* %4)
  ret i32 %call
}

declare i32 @fputc(i32 %0, %struct._IO_FILE* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @output(%struct.stream_t* %out, i8* %buf, i32 %len) #0 {
entry:
  %out.addr = alloca %struct.stream_t*, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 1
  %1 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %3 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 128, %3
  %call = call i32 %1(%struct.stream_t* %2, i32 %add)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %6, i32 0, i32 1
  %7 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put1, align 4
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %9 = load i8*, i8** %buf.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %call2 = call i32 %7(%struct.stream_t* %8, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @encode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i32, align 4
  %repeat = alloca i32, align 4
  %end = alloca i32, align 4
  %c = alloca i32, align 4
  %get = alloca i32 (%struct.stream_t*)*, align 4
  %put = alloca i32 (%struct.stream_t*, i32)*, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  store i32 0, i32* %end, align 4
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get1 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get2 = bitcast {}** %get1 to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get2, align 4
  store i32 (%struct.stream_t*)* %1, i32 (%struct.stream_t*)** %get, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put3 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %2, i32 0, i32 1
  %3 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put3, align 4
  store i32 (%struct.stream_t*, i32)* %3, i32 (%struct.stream_t*, i32)** %put, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end63, %if.end54, %if.then8, %entry
  %4 = load i32, i32* %end, align 4
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get, align 4
  %6 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %5(%struct.stream_t* %6)
  store i32 %call, i32* %c, align 4
  %cmp = icmp eq i32 %call, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %end, align 4
  %7 = load i32, i32* %end, align 4
  %tobool4 = icmp ne i32 %7, 0
  br i1 %tobool4, label %if.end9, label %if.then

if.then:                                          ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %conv5 = trunc i32 %8 to i8
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %9
  store i8 %conv5, i8* %arrayidx, align 1
  %10 = load i32, i32* %len, align 4
  %cmp6 = icmp sle i32 %10, 1
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  br label %while.cond

if.end:                                           ; preds = %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %while.body
  %11 = load i32, i32* %repeat, align 4
  %tobool10 = icmp ne i32 %11, 0
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end9
  %12 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub
  %13 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %13 to i32
  %14 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %14, 2
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub14
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %cmp17 = icmp ne i32 %conv13, %conv16
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then11
  store i32 0, i32* %repeat, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.then11
  %16 = load i32, i32* %repeat, align 4
  %tobool21 = icmp ne i32 %16, 0
  br i1 %tobool21, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.end20
  %17 = load i32, i32* %len, align 4
  %cmp22 = icmp eq i32 %17, 129
  br i1 %cmp22, label %if.then26, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %end, align 4
  %tobool25 = icmp ne i32 %18, 0
  br i1 %tobool25, label %if.then26, label %if.end36

if.then26:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.end20
  %19 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %20 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %21 = load i32, i32* %end, align 4
  %tobool27 = icmp ne i32 %21, 0
  br i1 %tobool27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then26
  %22 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then26
  %23 = load i32, i32* %len, align 4
  %sub28 = sub nsw i32 %23, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %22, %cond.true ], [ %sub28, %cond.false ]
  %call29 = call i32 %19(%struct.stream_t* %20, i32 %cond)
  %24 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %25 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arrayidx30 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %26 = load i8, i8* %arrayidx30, align 16
  %conv31 = zext i8 %26 to i32
  %call32 = call i32 %24(%struct.stream_t* %25, i32 %conv31)
  %27 = load i32, i32* %len, align 4
  %sub33 = sub nsw i32 %27, 1
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub33
  %28 = load i8, i8* %arrayidx34, align 1
  %arrayidx35 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %28, i8* %arrayidx35, align 16
  store i32 1, i32* %len, align 4
  br label %if.end36

if.end36:                                         ; preds = %cond.end, %lor.lhs.false24
  br label %if.end63

if.else:                                          ; preds = %if.end9
  %29 = load i32, i32* %len, align 4
  %sub37 = sub nsw i32 %29, 1
  %arrayidx38 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub37
  %30 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %30 to i32
  %31 = load i32, i32* %len, align 4
  %sub40 = sub nsw i32 %31, 2
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub40
  %32 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %32 to i32
  %cmp43 = icmp eq i32 %conv39, %conv42
  br i1 %cmp43, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else
  store i32 1, i32* %repeat, align 4
  %33 = load i32, i32* %len, align 4
  %cmp46 = icmp sgt i32 %33, 2
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.then45
  %34 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %35 = load i32, i32* %len, align 4
  %sub49 = sub nsw i32 %35, 2
  call void @output(%struct.stream_t* %34, i8* %arraydecay, i32 %sub49)
  %36 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %36, 1
  %arrayidx51 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 %sub50
  %37 = load i8, i8* %arrayidx51, align 1
  %arrayidx52 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 1
  store i8 %37, i8* %arrayidx52, align 1
  %arrayidx53 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8 %37, i8* %arrayidx53, align 16
  store i32 2, i32* %len, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %while.cond

if.end55:                                         ; preds = %if.else
  %38 = load i32, i32* %len, align 4
  %cmp56 = icmp eq i32 %38, 128
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %if.end55
  %39 = load i32, i32* %end, align 4
  %tobool59 = icmp ne i32 %39, 0
  br i1 %tobool59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %lor.lhs.false58, %if.end55
  %40 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  %41 = load i32, i32* %len, align 4
  call void @output(%struct.stream_t* %40, i8* %arraydecay61, i32 %41)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %repeat, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %lor.lhs.false58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end36
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %43 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %call64 = call i32 %42(%struct.stream_t* %43, i32 -1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decode(%struct.stream_t* %in, %struct.stream_t* %out) #0 {
entry:
  %in.addr = alloca %struct.stream_t*, align 4
  %out.addr = alloca %struct.stream_t*, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.stream_t* %in, %struct.stream_t** %in.addr, align 4
  store %struct.stream_t* %out, %struct.stream_t** %out.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get = getelementptr inbounds %struct.stream_t, %struct.stream_t* %0, i32 0, i32 0
  %get1 = bitcast {}** %get to i32 (%struct.stream_t*)**
  %1 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get1, align 4
  %2 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call = call i32 %1(%struct.stream_t* %2)
  store i32 %call, i32* %c, align 4
  %3 = load i32, i32* %c, align 4
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  ret void

if.end:                                           ; preds = %while.body
  %4 = load i32, i32* %c, align 4
  %cmp2 = icmp sgt i32 %4, 128
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %5, 128
  store i32 %sub, i32* %cnt, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then3
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %cnt, align 4
  %cmp4 = icmp slt i32 %6, %7
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put = getelementptr inbounds %struct.stream_t, %struct.stream_t* %8, i32 0, i32 1
  %9 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put, align 4
  %10 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %11 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get5 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %11, i32 0, i32 0
  %get6 = bitcast {}** %get5 to i32 (%struct.stream_t*)**
  %12 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get6, align 4
  %13 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call7 = call i32 %12(%struct.stream_t* %13)
  %call8 = call i32 %9(%struct.stream_t* %10, i32 %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %c, align 4
  store i32 %15, i32* %cnt, align 4
  %16 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %get9 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %16, i32 0, i32 0
  %get10 = bitcast {}** %get9 to i32 (%struct.stream_t*)**
  %17 = load i32 (%struct.stream_t*)*, i32 (%struct.stream_t*)** %get10, align 4
  %18 = load %struct.stream_t*, %struct.stream_t** %in.addr, align 4
  %call11 = call i32 %17(%struct.stream_t* %18)
  store i32 %call11, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %if.else
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %cnt, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %21 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %put15 = getelementptr inbounds %struct.stream_t, %struct.stream_t* %21, i32 0, i32 1
  %22 = load i32 (%struct.stream_t*, i32)*, i32 (%struct.stream_t*, i32)** %put15, align 4
  %23 = load %struct.stream_t*, %struct.stream_t** %out.addr, align 4
  %24 = load i32, i32* %c, align 4
  %call16 = call i32 %22(%struct.stream_t* %23, i32 %24)
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %25 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %25, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  br label %if.end20

if.end20:                                         ; preds = %for.end19, %for.end
  br label %while.body
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %str_in = alloca %struct.string_stream, align 4
  %str_out = alloca %struct.string_stream, align 4
  %file = alloca %struct.file_stream, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast %struct.string_stream* %str_in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.string_stream* @__const.main.str_in to i8*), i32 16, i1 false)
  %get = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 0
  store i32 (%struct.stream_t*)* @sget, i32 (%struct.stream_t*)** %get, align 4
  %put = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @sput, i32 (%struct.stream_t*, i32)** %put, align 4
  %string = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 2
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %string, align 4
  %pos = getelementptr inbounds %struct.string_stream, %struct.string_stream* %str_out, i32 0, i32 3
  store i32 0, i32* %pos, align 4
  %get1 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 0
  store i32 (%struct.stream_t*)* null, i32 (%struct.stream_t*)** %get1, align 4
  %put2 = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 1
  store i32 (%struct.stream_t*, i32)* @file_put, i32 (%struct.stream_t*, i32)** %put2, align 4
  %fp = getelementptr inbounds %struct.file_stream, %struct.file_stream* %file, i32 0, i32 2
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %1, %struct._IO_FILE** %fp, align 4
  %2 = bitcast %struct.string_stream* %str_in to %struct.stream_t*
  %3 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  call void @encode(%struct.stream_t* %2, %struct.stream_t* %3)
  %4 = bitcast %struct.string_stream* %str_out to %struct.stream_t*
  %5 = bitcast %struct.file_stream* %file to %struct.stream_t*
  call void @decode(%struct.stream_t* %4, %struct.stream_t* %5)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
