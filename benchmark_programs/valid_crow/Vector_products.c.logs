
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for dotProduct()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for dotProduct()

; entering Souper's runOnFunction() for crossProduct()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for crossProduct()

; entering Souper's runOnFunction() for scalarTripleProduct()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for scalarTripleProduct()

; entering Souper's runOnFunction() for vectorTripleProduct()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vectorTripleProduct()

; entering Souper's runOnFunction() for printVector()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for printVector()

; entering Souper's runOnFunction() for main()

; ModuleID = './Vector_products.c.bc'
source_filename = "./Vector_products.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Vector = type { float, float, float }

@a = hidden global %struct.Vector { float 3.000000e+00, float 4.000000e+00, float 5.000000e+00 }, align 4
@b = hidden global %struct.Vector { float 4.000000e+00, float 3.000000e+00, float 5.000000e+00 }, align 4
@c = hidden global %struct.Vector { float -5.000000e+00, float -1.200000e+01, float -1.300000e+01 }, align 4
@.str = private unnamed_addr constant [14 x i8] c"( %f, %f, %f)\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A a = \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"\0A b = \00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"\0A c = \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"\0A a . b = %f\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"\0A a x b = \00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"\0A a . (b x c) = %f\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0A a x (b x c) = \00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %i1 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %1 = load float, float* %i1, align 4
  %mul = fmul float %0, %1
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %2 = load float, float* %j, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %add = fadd float %mul, %mul3
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k, align 4
  %k4 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %5 = load float, float* %k4, align 4
  %mul5 = fmul float %4, %5
  %add6 = fadd float %add, %mul5
  ret float %add6
}

; Function Attrs: noinline nounwind optnone
define hidden void @crossProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 0
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %0 = load float, float* %j, align 4
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %1 = load float, float* %k, align 4
  %mul = fmul float %0, %1
  %k1 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k1, align 4
  %j2 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %3 = load float, float* %j2, align 4
  %mul3 = fmul float %2, %3
  %sub = fsub float %mul, %mul3
  store float %sub, float* %i, align 4
  %j4 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 1
  %k5 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %4 = load float, float* %k5, align 4
  %i6 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %5 = load float, float* %i6, align 4
  %mul7 = fmul float %4, %5
  %i8 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %6 = load float, float* %i8, align 4
  %k9 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 2
  %7 = load float, float* %k9, align 4
  %mul10 = fmul float %6, %7
  %sub11 = fsub float %mul7, %mul10
  store float %sub11, float* %j4, align 4
  %k12 = getelementptr inbounds %struct.Vector, %struct.Vector* %agg.result, i32 0, i32 2
  %i13 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %8 = load float, float* %i13, align 4
  %j14 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 1
  %9 = load float, float* %j14, align 4
  %mul15 = fmul float %8, %9
  %j16 = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %10 = load float, float* %j16, align 4
  %i17 = getelementptr inbounds %struct.Vector, %struct.Vector* %b, i32 0, i32 0
  %11 = load float, float* %i17, align 4
  %mul18 = fmul float %10, %11
  %sub19 = fsub float %mul15, %mul18
  store float %sub19, float* %k12, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  %call = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret float %call
}

; Function Attrs: noinline nounwind optnone
define hidden void @vectorTripleProduct(%struct.Vector* noalias sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c) #0 {
entry:
  %agg.tmp = alloca %struct.Vector, align 4
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 %b, %struct.Vector* byval(%struct.Vector) align 4 %c)
  call void @crossProduct(%struct.Vector* sret align 4 %agg.result, %struct.Vector* byval(%struct.Vector) align 4 %a, %struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %a) #0 {
entry:
  %i = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 0
  %0 = load float, float* %i, align 4
  %conv = fpext float %0 to double
  %j = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 1
  %1 = load float, float* %j, align 4
  %conv1 = fpext float %1 to double
  %k = getelementptr inbounds %struct.Vector, %struct.Vector* %a, i32 0, i32 2
  %2 = load float, float* %k, align 4
  %conv2 = fpext float %2 to double
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), double %conv, double %conv1, double %conv2)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %agg.tmp = alloca %struct.Vector, align 4
  %agg.tmp10 = alloca %struct.Vector, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @a)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @b)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 @c)
  %call3 = call float @dotProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  %conv = fpext float %call3 to double
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), double %conv)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i32 0, i32 0))
  call void @crossProduct(%struct.Vector* sret align 4 %agg.tmp, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp)
  %call6 = call float @scalarTripleProduct(%struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  %conv7 = fpext float %call6 to double
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i32 0, i32 0), double %conv7)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i32 0, i32 0))
  call void @vectorTripleProduct(%struct.Vector* sret align 4 %agg.tmp10, %struct.Vector* byval(%struct.Vector) align 4 @a, %struct.Vector* byval(%struct.Vector) align 4 @b, %struct.Vector* byval(%struct.Vector) align 4 @c)
  call void @printVector(%struct.Vector* byval(%struct.Vector) align 4 %agg.tmp10)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
