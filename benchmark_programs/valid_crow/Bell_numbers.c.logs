
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for bellIndex()

; ModuleID = './Bell_numbers.c.bc'
source_filename = "./Bell_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"First fifteen Bell numbers:\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%2d: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"\0AThe first ten rows of Bell's triangle:\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @bellIndex(i32 %row, i32 %col) #0 {
entry:
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %row.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  %2 = load i32, i32* %col.addr, align 4
  %add = add nsw i32 %div, %2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @getBell(i32* %bellTri, i32 %row, i32 %col) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32*, i32** %bellTri.addr, align 4
  %3 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @setBell(i32* %bellTri, i32 %row, i32 %col, i32 %value) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %bellTri.addr, align 4
  %4 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @bellTriangle(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %length = alloca i32, align 4
  %tri = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %length, align 4
  %2 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %tri, align 4
  %4 = load i32*, i32** %tri, align 4
  call void @setBell(i32* %4, i32 1, i32 0, i32 1)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %tri, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32*, i32** %tri, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %11, 2
  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
  call void @setBell(i32* %7, i32 %8, i32 0, i32 %call2)
  store i32 1, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %14 = load i32*, i32** %tri, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %sub6 = sub nsw i32 %16, 1
  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
  %17 = load i32*, i32** %tri, align 4
  %18 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %18, 1
  %19 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %19, 1
  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
  %add11 = add nsw i32 %call7, %call10
  store i32 %add11, i32* %value, align 4
  %20 = load i32*, i32** %tri, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %value, align 4
  call void @setBell(i32* %20, i32 %21, i32 %22, i32 %23)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %25, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %26 = load i32*, i32** %tri, align 4
  ret i32* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %rows = alloca i32, align 4
  %bt = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 15, i32* %rows, align 4
  %call = call i32* @bellTriangle(i32 15)
  store i32* %call, i32** %bt, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %bt, align 4
  %3 = load i32, i32* %i, align 4
  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %1, i32 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc19, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp sle i32 %5, 10
  br i1 %cmp6, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond5
  %6 = load i32*, i32** %bt, align 4
  %7 = load i32, i32* %i, align 4
  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.body7
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %8, %9
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %10 = load i32*, i32** %bt, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %13 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %for.inc19

for.inc19:                                        ; preds = %for.end17
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond5

for.end21:                                        ; preds = %for.cond5
  %15 = load i32*, i32** %bt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %col.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %div, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %2, 1:i32
%4:i32 = mulnsw %1, %3
%5:i32 = sdiv %4, 2:i32
%6:i32 = addnsw %0, %5
infer %6
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2013020161
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %2, 1:i32
%4:i32 = mulnsw %1, %3
%5:i32 = sdiv %4, 2:i32
%6:i32 = addnsw %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bellIndex()

; entering Souper's runOnFunction() for getBell()

; ModuleID = './Bell_numbers.c.bc'
source_filename = "./Bell_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"First fifteen Bell numbers:\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%2d: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"\0AThe first ten rows of Bell's triangle:\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @bellIndex(i32 %row, i32 %col) #0 {
entry:
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %row.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  %2 = load i32, i32* %col.addr, align 4
  %add = add nsw i32 %div, %2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @getBell(i32* %bellTri, i32 %row, i32 %col) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32*, i32** %bellTri.addr, align 4
  %3 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @setBell(i32* %bellTri, i32 %row, i32 %col, i32 %value) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %bellTri.addr, align 4
  %4 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @bellTriangle(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %length = alloca i32, align 4
  %tri = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %length, align 4
  %2 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %tri, align 4
  %4 = load i32*, i32** %tri, align 4
  call void @setBell(i32* %4, i32 1, i32 0, i32 1)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %tri, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32*, i32** %tri, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %11, 2
  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
  call void @setBell(i32* %7, i32 %8, i32 0, i32 %call2)
  store i32 1, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %14 = load i32*, i32** %tri, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %sub6 = sub nsw i32 %16, 1
  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
  %17 = load i32*, i32** %tri, align 4
  %18 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %18, 1
  %19 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %19, 1
  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
  %add11 = add nsw i32 %call7, %call10
  store i32 %add11, i32* %value, align 4
  %20 = load i32*, i32** %tri, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %value, align 4
  call void @setBell(i32* %20, i32 %21, i32 %22, i32 %23)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %25, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %26 = load i32*, i32** %tri, align 4
  ret i32* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %rows = alloca i32, align 4
  %bt = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 15, i32* %rows, align 4
  %call = call i32* @bellTriangle(i32 15)
  store i32* %call, i32** %bt, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %bt, align 4
  %3 = load i32, i32* %i, align 4
  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %1, i32 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc19, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp sle i32 %5, 10
  br i1 %cmp6, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond5
  %6 = load i32*, i32** %bt, align 4
  %7 = load i32, i32* %i, align 4
  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.body7
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %8, %9
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %10 = load i32*, i32** %bt, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %13 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %for.inc19

for.inc19:                                        ; preds = %for.end17
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond5

for.end21:                                        ; preds = %for.cond5
  %15 = load i32*, i32** %bt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %col.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @bellIndex(i32 %0, i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for getBell()

; entering Souper's runOnFunction() for setBell()

; ModuleID = './Bell_numbers.c.bc'
source_filename = "./Bell_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"First fifteen Bell numbers:\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%2d: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"\0AThe first ten rows of Bell's triangle:\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @bellIndex(i32 %row, i32 %col) #0 {
entry:
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %row.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  %2 = load i32, i32* %col.addr, align 4
  %add = add nsw i32 %div, %2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @getBell(i32* %bellTri, i32 %row, i32 %col) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32*, i32** %bellTri.addr, align 4
  %3 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @setBell(i32* %bellTri, i32 %row, i32 %col, i32 %value) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %bellTri.addr, align 4
  %4 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @bellTriangle(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %length = alloca i32, align 4
  %tri = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %length, align 4
  %2 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %tri, align 4
  %4 = load i32*, i32** %tri, align 4
  call void @setBell(i32* %4, i32 1, i32 0, i32 1)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %tri, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32*, i32** %tri, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %11, 2
  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
  call void @setBell(i32* %7, i32 %8, i32 0, i32 %call2)
  store i32 1, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %14 = load i32*, i32** %tri, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %sub6 = sub nsw i32 %16, 1
  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
  %17 = load i32*, i32** %tri, align 4
  %18 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %18, 1
  %19 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %19, 1
  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
  %add11 = add nsw i32 %call7, %call10
  store i32 %add11, i32* %value, align 4
  %20 = load i32*, i32** %tri, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %value, align 4
  call void @setBell(i32* %20, i32 %21, i32 %22, i32 %23)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %25, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %26 = load i32*, i32** %tri, align 4
  ret i32* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %rows = alloca i32, align 4
  %bt = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 15, i32* %rows, align 4
  %call = call i32* @bellTriangle(i32 15)
  store i32* %call, i32** %bt, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %bt, align 4
  %3 = load i32, i32* %i, align 4
  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %1, i32 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc19, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp sle i32 %5, 10
  br i1 %cmp6, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond5
  %6 = load i32*, i32** %bt, align 4
  %7 = load i32, i32* %i, align 4
  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.body7
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %8, %9
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %10 = load i32*, i32** %bt, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %13 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %for.inc19

for.inc19:                                        ; preds = %for.end17
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond5

for.end21:                                        ; preds = %for.cond5
  %15 = load i32*, i32** %bt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %col.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @bellIndex(i32 %0, i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %index, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for setBell()

; entering Souper's runOnFunction() for bellTriangle()

; ModuleID = './Bell_numbers.c.bc'
source_filename = "./Bell_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"First fifteen Bell numbers:\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%2d: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"\0AThe first ten rows of Bell's triangle:\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @bellIndex(i32 %row, i32 %col) #0 {
entry:
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %row.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  %2 = load i32, i32* %col.addr, align 4
  %add = add nsw i32 %div, %2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @getBell(i32* %bellTri, i32 %row, i32 %col) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32*, i32** %bellTri.addr, align 4
  %3 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @setBell(i32* %bellTri, i32 %row, i32 %col, i32 %value) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %bellTri.addr, align 4
  %4 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @bellTriangle(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %length = alloca i32, align 4
  %tri = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %length, align 4
  %2 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %tri, align 4
  %4 = load i32*, i32** %tri, align 4
  call void @setBell(i32* %4, i32 1, i32 0, i32 1)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %tri, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32*, i32** %tri, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %11, 2
  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
  call void @setBell(i32* %7, i32 %8, i32 0, i32 %call2)
  store i32 1, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %14 = load i32*, i32** %tri, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %sub6 = sub nsw i32 %16, 1
  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
  %17 = load i32*, i32** %tri, align 4
  %18 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %18, 1
  %19 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %19, 1
  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
  %add11 = add nsw i32 %call7, %call10
  store i32 %add11, i32* %value, align 4
  %20 = load i32*, i32** %tri, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %value, align 4
  call void @setBell(i32* %20, i32 %21, i32 %22, i32 %23)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %25, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %26 = load i32*, i32** %tri, align 4
  ret i32* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %rows = alloca i32, align 4
  %bt = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 15, i32* %rows, align 4
  %call = call i32* @bellTriangle(i32 15)
  store i32* %call, i32** %bt, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %bt, align 4
  %3 = load i32, i32* %i, align 4
  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %1, i32 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc19, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp sle i32 %5, 10
  br i1 %cmp6, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond5
  %6 = load i32*, i32** %bt, align 4
  %7 = load i32, i32* %i, align 4
  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.body7
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %8, %9
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %10 = load i32*, i32** %bt, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %13 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %for.inc19

for.inc19:                                        ; preds = %for.end17
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond5

for.end21:                                        ; preds = %for.cond5
  %15 = load i32*, i32** %bt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %length, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %11, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %call7, %call10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
%4:i32 = sdiv %3, 2:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bellTriangle()

; entering Souper's runOnFunction() for main()

; ModuleID = './Bell_numbers.c.bc'
source_filename = "./Bell_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [29 x i8] c"First fifteen Bell numbers:\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%2d: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"\0AThe first ten rows of Bell's triangle:\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @bellIndex(i32 %row, i32 %col) #0 {
entry:
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %row.addr, align 4
  %sub = sub nsw i32 %1, 1
  %mul = mul nsw i32 %0, %sub
  %div = sdiv i32 %mul, 2
  %2 = load i32, i32* %col.addr, align 4
  %add = add nsw i32 %div, %2
  ret i32 %add
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @getBell(i32* %bellTri, i32 %row, i32 %col) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32*, i32** %bellTri.addr, align 4
  %3 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden void @setBell(i32* %bellTri, i32 %row, i32 %col, i32 %value) #0 {
entry:
  %bellTri.addr = alloca i32*, align 4
  %row.addr = alloca i32, align 4
  %col.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store i32* %bellTri, i32** %bellTri.addr, align 4
  store i32 %row, i32* %row.addr, align 4
  store i32 %col, i32* %col.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %row.addr, align 4
  %1 = load i32, i32* %col.addr, align 4
  %call = call i32 @bellIndex(i32 %0, i32 %1)
  store i32 %call, i32* %index, align 4
  %2 = load i32, i32* %value.addr, align 4
  %3 = load i32*, i32** %bellTri.addr, align 4
  %4 = load i32, i32* %index, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %2, i32* %arrayidx, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @bellTriangle(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %length = alloca i32, align 4
  %tri = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %value = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %mul = mul nsw i32 %0, %add
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* %length, align 4
  %2 = load i32, i32* %length, align 4
  %call = call noalias i8* @calloc(i32 %2, i32 4)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %tri, align 4
  %4 = load i32*, i32** %tri, align 4
  call void @setBell(i32* %4, i32 1, i32 0, i32 1)
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** %tri, align 4
  %8 = load i32, i32* %i, align 4
  %9 = load i32*, i32** %tri, align 4
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load i32, i32* %i, align 4
  %sub1 = sub nsw i32 %11, 2
  %call2 = call i32 @getBell(i32* %9, i32 %sub, i32 %sub1)
  call void @setBell(i32* %7, i32 %8, i32 0, i32 %call2)
  store i32 1, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %12, %13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %14 = load i32*, i32** %tri, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %sub6 = sub nsw i32 %16, 1
  %call7 = call i32 @getBell(i32* %14, i32 %15, i32 %sub6)
  %17 = load i32*, i32** %tri, align 4
  %18 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %18, 1
  %19 = load i32, i32* %j, align 4
  %sub9 = sub nsw i32 %19, 1
  %call10 = call i32 @getBell(i32* %17, i32 %sub8, i32 %sub9)
  %add11 = add nsw i32 %call7, %call10
  store i32 %add11, i32* %value, align 4
  %20 = load i32*, i32** %tri, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %value, align 4
  call void @setBell(i32* %20, i32 %21, i32 %22, i32 %23)
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %25, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %26 = load i32*, i32** %tri, align 4
  ret i32* %26
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %rows = alloca i32, align 4
  %bt = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 15, i32* %rows, align 4
  %call = call i32* @bellTriangle(i32 15)
  store i32* %call, i32** %bt, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %2 = load i32*, i32** %bt, align 4
  %3 = load i32, i32* %i, align 4
  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %1, i32 %call2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc19, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp sle i32 %5, 10
  br i1 %cmp6, label %for.body7, label %for.end21

for.body7:                                        ; preds = %for.cond5
  %6 = load i32*, i32** %bt, align 4
  %7 = load i32, i32* %i, align 4
  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i32 %call8)
  store i32 1, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.body7
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %8, %9
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %10 = load i32*, i32** %bt, align 4
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %13 = load i32, i32* %j, align 4
  %inc16 = add nsw i32 %13, 1
  store i32 %inc16, i32* %j, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  br label %for.inc19

for.inc19:                                        ; preds = %for.end17
  %14 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %14, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond5

for.end21:                                        ; preds = %for.cond5
  %15 = load i32*, i32** %bt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 15
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 15:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @getBell(i32* %2, i32 %3, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %5, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @getBell(i32* %6, i32 %7, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 @getBell(i32* %10, i32 %11, i32 %12)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 15:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
