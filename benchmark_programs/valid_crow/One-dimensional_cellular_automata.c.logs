
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for evolve()

; ModuleID = './One-dimensional_cellular_automata.c.bc'
source_filename = "./One-dimensional_cellular_automata.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@trans = hidden global [9 x i8] c"___#_##_\00", align 1
@__const.main.c = private unnamed_addr constant [22 x i8] c"_###_##_#_#_#_#__#__\0A\00", align 16
@__const.main.b = private unnamed_addr constant [22 x i8] c"____________________\0A\00", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @evolve(i8* %cell, i8* %backup, i32 %len) #0 {
entry:
  %cell.addr = alloca i8*, align 4
  %backup.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %cell, i8** %cell.addr, align 4
  store i8* %backup, i8** %backup.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %diff, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %cell.addr, align 4
  %3 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %sub
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 95
  %conv2 = zext i1 %cmp1 to i32
  %mul = mul nsw i32 %conv2, 4
  %5 = load i8*, i8** %cell.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %7 to i32
  %cmp5 = icmp ne i32 %conv4, 95
  %conv6 = zext i1 %cmp5 to i32
  %mul7 = mul nsw i32 %conv6, 2
  %add = add nsw i32 %mul, %mul7
  %8 = load i8*, i8** %cell.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add8 = add nsw i32 %9, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %8, i32 %add8
  %10 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %10 to i32
  %cmp11 = icmp ne i32 %conv10, 95
  %conv12 = zext i1 %cmp11 to i32
  %add13 = add nsw i32 %add, %conv12
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* @trans, i32 0, i32 %add13
  %11 = load i8, i8* %arrayidx14, align 1
  %12 = load i8*, i8** %backup.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %12, i32 %13
  store i8 %11, i8* %arrayidx15, align 1
  %14 = load i8*, i8** %backup.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %16 to i32
  %17 = load i8*, i8** %cell.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %19 to i32
  %cmp20 = icmp ne i32 %conv17, %conv19
  %conv21 = zext i1 %cmp20 to i32
  %20 = load i32, i32* %diff, align 4
  %add22 = add nsw i32 %20, %conv21
  store i32 %add22, i32* %diff, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8*, i8** %cell.addr, align 4
  %23 = load i8*, i8** %backup.addr, align 4
  %call = call i8* @strcpy(i8* %22, i8* %23)
  %24 = load i32, i32* %diff, align 4
  ret i32 %24
}

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [22 x i8], align 16
  %b = alloca [22 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [22 x i8]* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([22 x i8], [22 x i8]* @__const.main.c, i32 0, i32 0), i32 22, i1 false)
  %1 = bitcast [22 x i8]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 getelementptr inbounds ([22 x i8], [22 x i8]* @__const.main.b, i32 0, i32 0), i32 22, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %c, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 1
  %call = call i32 (i8*, ...) @printf(i8* %add.ptr)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [22 x i8], [22 x i8]* %c, i32 0, i32 0
  %add.ptr2 = getelementptr inbounds i8, i8* %arraydecay1, i32 1
  %arraydecay3 = getelementptr inbounds [22 x i8], [22 x i8]* %b, i32 0, i32 0
  %add.ptr4 = getelementptr inbounds i8, i8* %arraydecay3, i32 1
  %call5 = call i32 @evolve(i8* %add.ptr2, i8* %add.ptr4, i32 19)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %conv, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv2 = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %conv2, 4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 4:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne i32 %conv4, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv6 = zext i1 %cmp5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %conv6, 2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %mul7
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
%5:i8 = var
%6:i32 = sext %5
%7:i1 = ne 95:i32, %6
%8:i32 = zext %7
%9:i32 = mulnsw 4:i32, %8
%10:i32 = addnsw %4, %9
infer %10

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp ne i32 %conv10, 95
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv12 = zext i1 %cmp11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %add, %conv12
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
%5:i8 = var
%6:i32 = sext %5
%7:i1 = ne 95:i32, %6
%8:i32 = zext %7
%9:i32 = mulnsw 4:i32, %8
%10:i32 = addnsw %4, %9
%11:i8 = var
%12:i32 = sext %11
%13:i1 = ne 95:i32, %12
%14:i32 = zext %13
%15:i32 = addnsw %10, %14
infer %15

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx14, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx18, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv19 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp20 = icmp ne i32 %conv17, %conv19
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %conv21 = zext i1 %cmp20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4
infer %5

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %diff, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add22 = add nsw i32 %20, %conv21
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i1 = ne %2, %4
%6:i32 = zext %5
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %diff, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 4:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
%5:i8 = var
%6:i32 = sext %5
%7:i1 = ne 95:i32, %6
%8:i32 = zext %7
%9:i32 = mulnsw 4:i32, %8
%10:i32 = addnsw %4, %9
infer %10


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 4:i32, %3

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
%5:i8 = var
%6:i32 = sext %5
%7:i1 = ne 95:i32, %6
%8:i32 = zext %7
%9:i32 = mulnsw 4:i32, %8
%10:i32 = addnsw %4, %9
%11:i8 = var
%12:i32 = sext %11
%13:i1 = ne 95:i32, %12
%14:i32 = zext %13
%15:i32 = addnsw %10, %14
infer %15


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 4:i32, %3

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3

Cost = 4
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 95:i32, %1
%3:i32 = zext %2
%4:i32 = mulnsw 2:i32, %3
%5:i8 = var
%6:i32 = sext %5
%7:i1 = ne 95:i32, %6
%8:i32 = zext %7
%9:i32 = mulnsw 4:i32, %8
%10:i32 = addnsw %4, %9

Cost = 9
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i1 = ne %2, %4
%6:i32 = zext %5
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for evolve()

; entering Souper's runOnFunction() for main()

; ModuleID = './One-dimensional_cellular_automata.c.bc'
source_filename = "./One-dimensional_cellular_automata.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@trans = hidden global [9 x i8] c"___#_##_\00", align 1
@__const.main.c = private unnamed_addr constant [22 x i8] c"_###_##_#_#_#_#__#__\0A\00", align 16
@__const.main.b = private unnamed_addr constant [22 x i8] c"____________________\0A\00", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @evolve(i8* %cell, i8* %backup, i32 %len) #0 {
entry:
  %cell.addr = alloca i8*, align 4
  %backup.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %cell, i8** %cell.addr, align 4
  store i8* %backup, i8** %backup.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %diff, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %cell.addr, align 4
  %3 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %3, 1
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %sub
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 95
  %conv2 = zext i1 %cmp1 to i32
  %mul = mul nsw i32 %conv2, 4
  %5 = load i8*, i8** %cell.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %7 to i32
  %cmp5 = icmp ne i32 %conv4, 95
  %conv6 = zext i1 %cmp5 to i32
  %mul7 = mul nsw i32 %conv6, 2
  %add = add nsw i32 %mul, %mul7
  %8 = load i8*, i8** %cell.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add8 = add nsw i32 %9, 1
  %arrayidx9 = getelementptr inbounds i8, i8* %8, i32 %add8
  %10 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %10 to i32
  %cmp11 = icmp ne i32 %conv10, 95
  %conv12 = zext i1 %cmp11 to i32
  %add13 = add nsw i32 %add, %conv12
  %arrayidx14 = getelementptr inbounds [9 x i8], [9 x i8]* @trans, i32 0, i32 %add13
  %11 = load i8, i8* %arrayidx14, align 1
  %12 = load i8*, i8** %backup.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %12, i32 %13
  store i8 %11, i8* %arrayidx15, align 1
  %14 = load i8*, i8** %backup.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %16 to i32
  %17 = load i8*, i8** %cell.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i32 %18
  %19 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %19 to i32
  %cmp20 = icmp ne i32 %conv17, %conv19
  %conv21 = zext i1 %cmp20 to i32
  %20 = load i32, i32* %diff, align 4
  %add22 = add nsw i32 %20, %conv21
  store i32 %add22, i32* %diff, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8*, i8** %cell.addr, align 4
  %23 = load i8*, i8** %backup.addr, align 4
  %call = call i8* @strcpy(i8* %22, i8* %23)
  %24 = load i32, i32* %diff, align 4
  ret i32 %24
}

declare i8* @strcpy(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %c = alloca [22 x i8], align 16
  %b = alloca [22 x i8], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [22 x i8]* %c to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([22 x i8], [22 x i8]* @__const.main.c, i32 0, i32 0), i32 22, i1 false)
  %1 = bitcast [22 x i8]* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 getelementptr inbounds ([22 x i8], [22 x i8]* @__const.main.b, i32 0, i32 0), i32 22, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %arraydecay = getelementptr inbounds [22 x i8], [22 x i8]* %c, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i32 1
  %call = call i32 (i8*, ...) @printf(i8* %add.ptr)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [22 x i8], [22 x i8]* %c, i32 0, i32 0
  %add.ptr2 = getelementptr inbounds i8, i8* %arraydecay1, i32 1
  %arraydecay3 = getelementptr inbounds [22 x i8], [22 x i8]* %b, i32 0, i32 0
  %add.ptr4 = getelementptr inbounds i8, i8* %arraydecay3, i32 1
  %call5 = call i32 @evolve(i8* %add.ptr2, i8* %add.ptr4, i32 19)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call5 = call i32 @evolve(i8* %add.ptr2, i8* %add.ptr4, i32 19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
