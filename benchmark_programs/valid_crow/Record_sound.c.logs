
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for record()

; ModuleID = './Record_sound.c.bc'
source_filename = "./Record_sound.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [9 x i8] c"/dev/dsp\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @record(i32 %bytes) #0 {
entry:
  %retval = alloca i8*, align 4
  %bytes.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %a = alloca i8*, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 67108864)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %bytes.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %0)
  store i8* %call1, i8** %a, align 4
  %1 = load i32, i32* %fd, align 4
  %2 = load i8*, i8** %a, align 4
  %3 = load i32, i32* %bytes.addr, align 4
  %call2 = call i32 @read(i32 %1, i8* %2, i32 %3)
  %4 = load i32, i32* %fd, align 4
  %call3 = call i32 @close(i32 %4)
  %5 = load i8*, i8** %a, align 4
  store i8* %5, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @play(i8* %buf, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 268435456)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %fd, align 4
  %1 = load i8*, i8** %buf.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call1 = call i32 @write(i32 %0, i8* %1, i32 %2)
  %3 = load i32, i32* %fd, align 4
  %call2 = call i32 @close(i32 %3)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

declare i32 @write(i32 %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @record(i32 65536)
  store i8* %call, i8** %p, align 4
  %0 = load i8*, i8** %p, align 4
  %call1 = call i32 @play(i8* %0, i32 65536)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 67108864)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 -1, %call
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %bytes.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %bytes.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for record()

; entering Souper's runOnFunction() for play()

; ModuleID = './Record_sound.c.bc'
source_filename = "./Record_sound.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [9 x i8] c"/dev/dsp\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @record(i32 %bytes) #0 {
entry:
  %retval = alloca i8*, align 4
  %bytes.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %a = alloca i8*, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 67108864)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %bytes.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %0)
  store i8* %call1, i8** %a, align 4
  %1 = load i32, i32* %fd, align 4
  %2 = load i8*, i8** %a, align 4
  %3 = load i32, i32* %bytes.addr, align 4
  %call2 = call i32 @read(i32 %1, i8* %2, i32 %3)
  %4 = load i32, i32* %fd, align 4
  %call3 = call i32 @close(i32 %4)
  %5 = load i8*, i8** %a, align 4
  store i8* %5, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @play(i8* %buf, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 268435456)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %fd, align 4
  %1 = load i8*, i8** %buf.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call1 = call i32 @write(i32 %0, i8* %1, i32 %2)
  %3 = load i32, i32* %fd, align 4
  %call2 = call i32 @close(i32 %3)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

declare i32 @write(i32 %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @record(i32 65536)
  store i8* %call, i8** %p, align 4
  %0 = load i8*, i8** %p, align 4
  %call1 = call i32 @play(i8* %0, i32 65536)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 268435456)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 -1, %call
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %fd, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for play()

; entering Souper's runOnFunction() for main()

; ModuleID = './Record_sound.c.bc'
source_filename = "./Record_sound.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [9 x i8] c"/dev/dsp\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @record(i32 %bytes) #0 {
entry:
  %retval = alloca i8*, align 4
  %bytes.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %a = alloca i8*, align 4
  store i32 %bytes, i32* %bytes.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 67108864)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %bytes.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %0)
  store i8* %call1, i8** %a, align 4
  %1 = load i32, i32* %fd, align 4
  %2 = load i8*, i8** %a, align 4
  %3 = load i32, i32* %bytes.addr, align 4
  %call2 = call i32 @read(i32 %1, i8* %2, i32 %3)
  %4 = load i32, i32* %fd, align 4
  %call3 = call i32 @close(i32 %4)
  %5 = load i8*, i8** %a, align 4
  store i8* %5, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

declare i32 @open(i8* %0, i32 %1, ...) #1

declare noalias i8* @malloc(i32 %0) #1

declare i32 @read(i32 %0, i8* %1, i32 %2) #1

declare i32 @close(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @play(i8* %buf, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 268435456)
  store i32 %call, i32* %fd, align 4
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %fd, align 4
  %1 = load i8*, i8** %buf.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %call1 = call i32 @write(i32 %0, i8* %1, i32 %2)
  %3 = load i32, i32* %fd, align 4
  %call2 = call i32 @close(i32 %3)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

declare i32 @write(i32 %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %p = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i8* @record(i32 65536)
  store i8* %call, i8** %p, align 4
  %0 = load i8*, i8** %p, align 4
  %call1 = call i32 @play(i8* %0, i32 65536)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
