
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for reverse_section()

; ModuleID = './Phrase_reversals.c.bc'
source_filename = "./Phrase_reversals.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.str = private unnamed_addr constant [29 x i8] c"rosetta code phrase reversal\00", align 16
@.str = private unnamed_addr constant [22 x i8] c"Original:       \22%s\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Reversed:       \22%s\22\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Reversed words: \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Reversed order: \22%s\22\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_section(i8* %s, i32 %length) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i32, i32* %length.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %length.addr, align 4
  %div = udiv i32 %3, 2
  %add = add i32 %div, 1
  %cmp1 = icmp ult i32 %2, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %length.addr, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %8, %9
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i32 %sub
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i32 %12
  store i8 %10, i8* %arrayidx3, align 1
  %13 = load i8, i8* %temp, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i32, i32* %length.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub4 = sub i32 %15, %16
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i32 %sub4
  store i8 %13, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  store i8* %18, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 4
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_words_in_order(i8* %s, i8 signext %delim) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %sub = sub i32 %call1, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %j, align 4
  %add = add i32 %5, %6
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %add
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %j, align 4
  %add5 = add i32 %9, %10
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %add5
  %11 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %11 to i32
  %12 = load i8, i8* %delim.addr, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp ne i32 %conv7, %conv8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
  br i1 %13, label %for.body11, label %for.end

for.body11:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %sub12 = sub i32 %17, 1
  %call13 = call i8* @reverse_section(i8* %add.ptr, i32 %sub12)
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %s.addr, align 4
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i32 %18
  store i8* %add.ptr14, i8** %s.addr, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc16 = add i32 %20, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  store i8* %21, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then
  %22 = load i8*, i8** %retval, align 4
  ret i8* %22
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_string(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %2) #5
  %sub = sub i32 %call1, 1
  %call2 = call i8* @reverse_section(i8* %1, i32 %sub)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_order_of_words(i8* %s, i8 signext %delim) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i8* @reverse_string(i8* %0)
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %delim.addr, align 1
  %call1 = call i8* @reverse_words_in_order(i8* %1, i8 signext %2)
  %3 = load i8*, i8** %s.addr, align 4
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %str = alloca [29 x i8], align 16
  %lenstr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %delim = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @__const.main.str, i32 0, i32 0), i32 29, i1 false)
  store i32 29, i32* %lenstr, align 4
  %1 = load i32, i32* %lenstr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca i8, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  store i8 32, i8* %delim, align 1
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %3 = load i32, i32* %lenstr, align 4
  %call2 = call i8* @strncpy(i8* %vla, i8* %arraydecay1, i32 %3)
  %call3 = call i8* @reverse_string(i8* %vla)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %vla)
  %arraydecay5 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %4 = load i32, i32* %lenstr, align 4
  %call6 = call i8* @strncpy(i8* %vla, i8* %arraydecay5, i32 %4)
  %5 = load i8, i8* %delim, align 1
  %call7 = call i8* @reverse_words_in_order(i8* %vla, i8 signext %5)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i8* %vla)
  %arraydecay9 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %6 = load i32, i32* %lenstr, align 4
  %call10 = call i8* @strncpy(i8* %vla, i8* %arraydecay9, i32 %6)
  %7 = load i8, i8* %delim, align 1
  %call11 = call i8* @reverse_order_of_words(i8* %vla, i8 signext %7)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* %vla)
  store i32 0, i32* %retval, align 4
  %8 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %8)
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare i32 @printf(i8* %0, ...) #4

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #4

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 %div, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = add 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %2, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %1, 2:i32
%3:i32 = add 1:i32, %2
%4:i1 = ult %0, %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %temp, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = add 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = udiv %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %1, 2:i32
%3:i32 = add 1:i32, %2
%4:i1 = ult %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for reverse_section()

; entering Souper's runOnFunction() for reverse_words_in_order()

; ModuleID = './Phrase_reversals.c.bc'
source_filename = "./Phrase_reversals.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.str = private unnamed_addr constant [29 x i8] c"rosetta code phrase reversal\00", align 16
@.str = private unnamed_addr constant [22 x i8] c"Original:       \22%s\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Reversed:       \22%s\22\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Reversed words: \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Reversed order: \22%s\22\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_section(i8* %s, i32 %length) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i32, i32* %length.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %length.addr, align 4
  %div = udiv i32 %3, 2
  %add = add i32 %div, 1
  %cmp1 = icmp ult i32 %2, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %length.addr, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %8, %9
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i32 %sub
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i32 %12
  store i8 %10, i8* %arrayidx3, align 1
  %13 = load i8, i8* %temp, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i32, i32* %length.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub4 = sub i32 %15, %16
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i32 %sub4
  store i8 %13, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  store i8* %18, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 4
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_words_in_order(i8* %s, i8 signext %delim) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %sub = sub i32 %call1, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %j, align 4
  %add = add i32 %5, %6
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %add
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %j, align 4
  %add5 = add i32 %9, %10
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %add5
  %11 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %11 to i32
  %12 = load i8, i8* %delim.addr, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp ne i32 %conv7, %conv8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
  br i1 %13, label %for.body11, label %for.end

for.body11:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %sub12 = sub i32 %17, 1
  %call13 = call i8* @reverse_section(i8* %add.ptr, i32 %sub12)
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %s.addr, align 4
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i32 %18
  store i8* %add.ptr14, i8** %s.addr, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc16 = add i32 %20, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  store i8* %21, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then
  %22 = load i8*, i8** %retval, align 4
  ret i8* %22
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_string(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %2) #5
  %sub = sub i32 %call1, 1
  %call2 = call i8* @reverse_section(i8* %1, i32 %sub)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_order_of_words(i8* %s, i8 signext %delim) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i8* @reverse_string(i8* %0)
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %delim.addr, align 1
  %call1 = call i8* @reverse_words_in_order(i8* %1, i8 signext %2)
  %3 = load i8*, i8** %s.addr, align 4
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %str = alloca [29 x i8], align 16
  %lenstr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %delim = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @__const.main.str, i32 0, i32 0), i32 29, i1 false)
  store i32 29, i32* %lenstr, align 4
  %1 = load i32, i32* %lenstr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca i8, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  store i8 32, i8* %delim, align 1
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %3 = load i32, i32* %lenstr, align 4
  %call2 = call i8* @strncpy(i8* %vla, i8* %arraydecay1, i32 %3)
  %call3 = call i8* @reverse_string(i8* %vla)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %vla)
  %arraydecay5 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %4 = load i32, i32* %lenstr, align 4
  %call6 = call i8* @strncpy(i8* %vla, i8* %arraydecay5, i32 %4)
  %5 = load i8, i8* %delim, align 1
  %call7 = call i8* @reverse_words_in_order(i8* %vla, i8 signext %5)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i8* %vla)
  %arraydecay9 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %6 = load i32, i32* %lenstr, align 4
  %call10 = call i8* @strncpy(i8* %vla, i8* %arraydecay9, i32 %6)
  %7 = load i8, i8* %delim, align 1
  %call11 = call i8* @reverse_order_of_words(i8* %vla, i8 signext %7)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* %vla)
  store i32 0, i32* %retval, align 4
  %8 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %8)
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare i32 @printf(i8* %0, ...) #4

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #4

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %3) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %delim.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne i32 %conv7, %conv8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %1, 1:i32
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for reverse_words_in_order()

; entering Souper's runOnFunction() for reverse_string()

; ModuleID = './Phrase_reversals.c.bc'
source_filename = "./Phrase_reversals.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.str = private unnamed_addr constant [29 x i8] c"rosetta code phrase reversal\00", align 16
@.str = private unnamed_addr constant [22 x i8] c"Original:       \22%s\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Reversed:       \22%s\22\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Reversed words: \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Reversed order: \22%s\22\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_section(i8* %s, i32 %length) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i32, i32* %length.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %length.addr, align 4
  %div = udiv i32 %3, 2
  %add = add i32 %div, 1
  %cmp1 = icmp ult i32 %2, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %length.addr, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %8, %9
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i32 %sub
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i32 %12
  store i8 %10, i8* %arrayidx3, align 1
  %13 = load i8, i8* %temp, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i32, i32* %length.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub4 = sub i32 %15, %16
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i32 %sub4
  store i8 %13, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  store i8* %18, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 4
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_words_in_order(i8* %s, i8 signext %delim) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %sub = sub i32 %call1, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %j, align 4
  %add = add i32 %5, %6
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %add
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %j, align 4
  %add5 = add i32 %9, %10
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %add5
  %11 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %11 to i32
  %12 = load i8, i8* %delim.addr, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp ne i32 %conv7, %conv8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
  br i1 %13, label %for.body11, label %for.end

for.body11:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %sub12 = sub i32 %17, 1
  %call13 = call i8* @reverse_section(i8* %add.ptr, i32 %sub12)
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %s.addr, align 4
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i32 %18
  store i8* %add.ptr14, i8** %s.addr, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc16 = add i32 %20, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  store i8* %21, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then
  %22 = load i8*, i8** %retval, align 4
  ret i8* %22
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_string(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %2) #5
  %sub = sub i32 %call1, 1
  %call2 = call i8* @reverse_section(i8* %1, i32 %sub)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_order_of_words(i8* %s, i8 signext %delim) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i8* @reverse_string(i8* %0)
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %delim.addr, align 1
  %call1 = call i8* @reverse_words_in_order(i8* %1, i8 signext %2)
  %3 = load i8*, i8** %s.addr, align 4
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %str = alloca [29 x i8], align 16
  %lenstr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %delim = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @__const.main.str, i32 0, i32 0), i32 29, i1 false)
  store i32 29, i32* %lenstr, align 4
  %1 = load i32, i32* %lenstr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca i8, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  store i8 32, i8* %delim, align 1
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %3 = load i32, i32* %lenstr, align 4
  %call2 = call i8* @strncpy(i8* %vla, i8* %arraydecay1, i32 %3)
  %call3 = call i8* @reverse_string(i8* %vla)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %vla)
  %arraydecay5 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %4 = load i32, i32* %lenstr, align 4
  %call6 = call i8* @strncpy(i8* %vla, i8* %arraydecay5, i32 %4)
  %5 = load i8, i8* %delim, align 1
  %call7 = call i8* @reverse_words_in_order(i8* %vla, i8 signext %5)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i8* %vla)
  %arraydecay9 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %6 = load i32, i32* %lenstr, align 4
  %call10 = call i8* @strncpy(i8* %vla, i8* %arraydecay9, i32 %6)
  %7 = load i8, i8* %delim, align 1
  %call11 = call i8* @reverse_order_of_words(i8* %vla, i8 signext %7)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* %vla)
  store i32 0, i32* %retval, align 4
  %8 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %8)
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare i32 @printf(i8* %0, ...) #4

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #4

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %2) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1
#########################################################
; exiting Souper's runOnFunction() for reverse_string()

; entering Souper's runOnFunction() for reverse_order_of_words()

; ModuleID = './Phrase_reversals.c.bc'
source_filename = "./Phrase_reversals.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.str = private unnamed_addr constant [29 x i8] c"rosetta code phrase reversal\00", align 16
@.str = private unnamed_addr constant [22 x i8] c"Original:       \22%s\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Reversed:       \22%s\22\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Reversed words: \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Reversed order: \22%s\22\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_section(i8* %s, i32 %length) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i32, i32* %length.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %length.addr, align 4
  %div = udiv i32 %3, 2
  %add = add i32 %div, 1
  %cmp1 = icmp ult i32 %2, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %length.addr, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %8, %9
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i32 %sub
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i32 %12
  store i8 %10, i8* %arrayidx3, align 1
  %13 = load i8, i8* %temp, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i32, i32* %length.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub4 = sub i32 %15, %16
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i32 %sub4
  store i8 %13, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  store i8* %18, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 4
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_words_in_order(i8* %s, i8 signext %delim) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %sub = sub i32 %call1, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %j, align 4
  %add = add i32 %5, %6
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %add
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %j, align 4
  %add5 = add i32 %9, %10
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %add5
  %11 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %11 to i32
  %12 = load i8, i8* %delim.addr, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp ne i32 %conv7, %conv8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
  br i1 %13, label %for.body11, label %for.end

for.body11:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %sub12 = sub i32 %17, 1
  %call13 = call i8* @reverse_section(i8* %add.ptr, i32 %sub12)
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %s.addr, align 4
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i32 %18
  store i8* %add.ptr14, i8** %s.addr, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc16 = add i32 %20, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  store i8* %21, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then
  %22 = load i8*, i8** %retval, align 4
  ret i8* %22
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_string(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %2) #5
  %sub = sub i32 %call1, 1
  %call2 = call i8* @reverse_section(i8* %1, i32 %sub)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_order_of_words(i8* %s, i8 signext %delim) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i8* @reverse_string(i8* %0)
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %delim.addr, align 1
  %call1 = call i8* @reverse_words_in_order(i8* %1, i8 signext %2)
  %3 = load i8*, i8** %s.addr, align 4
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %str = alloca [29 x i8], align 16
  %lenstr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %delim = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @__const.main.str, i32 0, i32 0), i32 29, i1 false)
  store i32 29, i32* %lenstr, align 4
  %1 = load i32, i32* %lenstr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca i8, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  store i8 32, i8* %delim, align 1
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %3 = load i32, i32* %lenstr, align 4
  %call2 = call i8* @strncpy(i8* %vla, i8* %arraydecay1, i32 %3)
  %call3 = call i8* @reverse_string(i8* %vla)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %vla)
  %arraydecay5 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %4 = load i32, i32* %lenstr, align 4
  %call6 = call i8* @strncpy(i8* %vla, i8* %arraydecay5, i32 %4)
  %5 = load i8, i8* %delim, align 1
  %call7 = call i8* @reverse_words_in_order(i8* %vla, i8 signext %5)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i8* %vla)
  %arraydecay9 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %6 = load i32, i32* %lenstr, align 4
  %call10 = call i8* @strncpy(i8* %vla, i8* %arraydecay9, i32 %6)
  %7 = load i8, i8* %delim, align 1
  %call11 = call i8* @reverse_order_of_words(i8* %vla, i8 signext %7)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* %vla)
  store i32 0, i32* %retval, align 4
  %8 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %8)
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare i32 @printf(i8* %0, ...) #4

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #4

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %delim.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for reverse_order_of_words()

; entering Souper's runOnFunction() for main()

; ModuleID = './Phrase_reversals.c.bc'
source_filename = "./Phrase_reversals.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.str = private unnamed_addr constant [29 x i8] c"rosetta code phrase reversal\00", align 16
@.str = private unnamed_addr constant [22 x i8] c"Original:       \22%s\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Reversed:       \22%s\22\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"Reversed words: \22%s\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Reversed order: \22%s\22\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_section(i8* %s, i32 %length) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i32 %length, i32* %length.addr, align 4
  %0 = load i32, i32* %length.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %length.addr, align 4
  %div = udiv i32 %3, 2
  %add = add i32 %div, 1
  %cmp1 = icmp ult i32 %2, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i32, i32* %length.addr, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub i32 %8, %9
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i32 %sub
  %10 = load i8, i8* %arrayidx2, align 1
  %11 = load i8*, i8** %s.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i32 %12
  store i8 %10, i8* %arrayidx3, align 1
  %13 = load i8, i8* %temp, align 1
  %14 = load i8*, i8** %s.addr, align 4
  %15 = load i32, i32* %length.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub4 = sub i32 %15, %16
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i32 %sub4
  store i8 %13, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %s.addr, align 4
  store i8* %18, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load i8*, i8** %retval, align 4
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_words_in_order(i8* %s, i8 signext %delim) #0 {
entry:
  %retval = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  store i8* %1, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %3) #5
  %sub = sub i32 %call1, 1
  %cmp = icmp ult i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %j, align 4
  %add = add i32 %5, %6
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %add
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond2
  %8 = load i8*, i8** %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %j, align 4
  %add5 = add i32 %9, %10
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %add5
  %11 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %11 to i32
  %12 = load i8, i8* %delim.addr, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp ne i32 %conv7, %conv8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %13 = phi i1 [ false, %for.cond2 ], [ %cmp9, %land.rhs ]
  br i1 %13, label %for.body11, label %for.end

for.body11:                                       ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body11
  %14 = load i32, i32* %j, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %land.end
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i32, i32* %j, align 4
  %sub12 = sub i32 %17, 1
  %call13 = call i8* @reverse_section(i8* %add.ptr, i32 %sub12)
  %18 = load i32, i32* %j, align 4
  %19 = load i8*, i8** %s.addr, align 4
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i32 %18
  store i8* %add.ptr14, i8** %s.addr, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc16 = add i32 %20, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %21 = load i8*, i8** %s.addr, align 4
  store i8* %21, i8** %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %if.then
  %22 = load i8*, i8** %retval, align 4
  ret i8* %22
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_string(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #5
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %call1 = call i32 @strlen(i8* %2) #5
  %sub = sub i32 %call1, 1
  %call2 = call i8* @reverse_section(i8* %1, i32 %sub)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @reverse_order_of_words(i8* %s, i8 signext %delim) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %delim.addr = alloca i8, align 1
  store i8* %s, i8** %s.addr, align 4
  store i8 %delim, i8* %delim.addr, align 1
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i8* @reverse_string(i8* %0)
  %1 = load i8*, i8** %s.addr, align 4
  %2 = load i8, i8* %delim.addr, align 1
  %call1 = call i8* @reverse_words_in_order(i8* %1, i8 signext %2)
  %3 = load i8*, i8** %s.addr, align 4
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %str = alloca [29 x i8], align 16
  %lenstr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %delim = alloca i8, align 1
  store i32 0, i32* %retval, align 4
  %0 = bitcast [29 x i8]* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([29 x i8], [29 x i8]* @__const.main.str, i32 0, i32 0), i32 29, i1 false)
  store i32 29, i32* %lenstr, align 4
  %1 = load i32, i32* %lenstr, align 4
  %2 = call i8* @llvm.stacksave()
  store i8* %2, i8** %saved_stack, align 4
  %vla = alloca i8, i32 %1, align 16
  store i32 %1, i32* %__vla_expr0, align 4
  store i8 32, i8* %delim, align 1
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %3 = load i32, i32* %lenstr, align 4
  %call2 = call i8* @strncpy(i8* %vla, i8* %arraydecay1, i32 %3)
  %call3 = call i8* @reverse_string(i8* %vla)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8* %vla)
  %arraydecay5 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %4 = load i32, i32* %lenstr, align 4
  %call6 = call i8* @strncpy(i8* %vla, i8* %arraydecay5, i32 %4)
  %5 = load i8, i8* %delim, align 1
  %call7 = call i8* @reverse_words_in_order(i8* %vla, i8 signext %5)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i8* %vla)
  %arraydecay9 = getelementptr inbounds [29 x i8], [29 x i8]* %str, i32 0, i32 0
  %6 = load i32, i32* %lenstr, align 4
  %call10 = call i8* @strncpy(i8* %vla, i8* %arraydecay9, i32 %6)
  %7 = load i8, i8* %delim, align 1
  %call11 = call i8* @reverse_order_of_words(i8* %vla, i8 signext %7)
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i8* %vla)
  store i32 0, i32* %retval, align 4
  %8 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %8)
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare i32 @printf(i8* %0, ...) #4

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #4

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %lenstr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %lenstr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %lenstr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %delim, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %lenstr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %delim, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
