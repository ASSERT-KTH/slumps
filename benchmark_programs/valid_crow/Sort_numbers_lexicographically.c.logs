
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for compareStrings()

; ModuleID = './Sort_numbers_lexicographically.c.bc'
source_filename = "./Sort_numbers_lexicographically.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@__const.main.numbers = private unnamed_addr constant [5 x i32] [i32 0, i32 5, i32 13, i32 21, i32 -22], align 16
@.str.1 = private unnamed_addr constant [28 x i8] c"In lexicographical order:\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%3d: [\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8**, align 4
  %bb = alloca i8**, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  store i8** %1, i8*** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to i8**
  store i8** %3, i8*** %bb, align 4
  %4 = load i8**, i8*** %aa, align 4
  %5 = load i8*, i8** %4, align 4
  %6 = load i8**, i8*** %bb, align 4
  %7 = load i8*, i8** %6, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #5
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @lexOrder(i32 %n, i32* %ints) #0 {
entry:
  %n.addr = alloca i32, align 4
  %ints.addr = alloca i32*, align 4
  %strs = alloca i8**, align 4
  %i = alloca i32, align 4
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %ints, i32** %ints.addr, align 4
  store i32 1, i32* %first, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %last, align 4
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %k, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  store i32 %3, i32* %first, align 4
  store i32 1, i32* %last, align 4
  %4 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 2, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %k, align 4
  %mul = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call to i8**
  store i8** %6, i8*** %strs, align 4
  %7 = load i32, i32* %first, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %last, align 4
  %cmp1 = icmp sle i32 %8, %9
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %cmp2 = icmp sge i32 %10, 1
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %conv = sitofp i32 %11 to double
  %12 = call double @llvm.log10.f64(double %conv)
  %conv4 = fptosi double %12 to i32
  %add = add nsw i32 %conv4, 2
  store i32 %add, i32* %len, align 4
  br label %if.end14

if.else:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %13, 0
  br i1 %cmp5, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else
  store i32 2, i32* %len, align 4
  br label %if.end13

if.else8:                                         ; preds = %if.else
  %14 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 0, %14
  %conv10 = sitofp i32 %sub9 to double
  %15 = call double @llvm.log10.f64(double %conv10)
  %conv11 = fptosi double %15 to i32
  %add12 = add nsw i32 %conv11, 3
  store i32 %add12, i32* %len, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else8, %if.then7
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then3
  %16 = load i32, i32* %len, align 4
  %call15 = call noalias i8* @malloc(i32 %16)
  %17 = load i8**, i8*** %strs, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %first, align 4
  %sub16 = sub nsw i32 %18, %19
  %arrayidx = getelementptr inbounds i8*, i8** %17, i32 %sub16
  store i8* %call15, i8** %arrayidx, align 4
  %20 = load i8**, i8*** %strs, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %first, align 4
  %sub17 = sub nsw i32 %21, %22
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i32 %sub17
  %23 = load i8*, i8** %arrayidx18, align 4
  %24 = load i32, i32* %i, align 4
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i8**, i8*** %strs, align 4
  %27 = bitcast i8** %26 to i8*
  %28 = load i32, i32* %k, align 4
  call void @qsort(i8* %27, i32 %28, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc28, %for.end
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %k, align 4
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body23, label %for.end30

for.body23:                                       ; preds = %for.cond20
  %31 = load i8**, i8*** %strs, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %31, i32 %32
  %33 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i32 @atoi(i8* %33)
  %34 = load i32*, i32** %ints.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %call25, i32* %arrayidx26, align 4
  %36 = load i8**, i8*** %strs, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %36, i32 %37
  %38 = load i8*, i8** %arrayidx27, align 4
  call void @free(i8* %38)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body23
  %39 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %39, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond20

for.end30:                                        ; preds = %for.cond20
  %40 = load i8**, i8*** %strs, align 4
  %41 = bitcast i8** %40 to i8*
  call void @free(i8* %41)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log10.f64(double %0) #3

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @atoi(i8* %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %ints = alloca i32*, align 4
  %numbers = alloca [5 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i32]* %numbers to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.numbers to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %numbers, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %n, align 4
  store i32 %3, i32* %k, align 4
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp slt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %k, align 4
  %sub = sub nsw i32 2, %5
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %k, align 4
  %mul = mul i32 %6, 4
  %call2 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call2 to i32*
  store i32* %7, i32** %ints, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32*, i32** %ints, align 4
  call void @lexOrder(i32 %8, i32* %9)
  %10 = load i32, i32* %n, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %if.end
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %11, %12
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %13 = load i32*, i32** %ints, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  %17 = load i32*, i32** %ints, align 4
  %18 = bitcast i32* %17 to i8*
  call void @free(i8* %18)
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %5, i8* %7) #5
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for compareStrings()

; entering Souper's runOnFunction() for lexOrder()

; ModuleID = './Sort_numbers_lexicographically.c.bc'
source_filename = "./Sort_numbers_lexicographically.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@__const.main.numbers = private unnamed_addr constant [5 x i32] [i32 0, i32 5, i32 13, i32 21, i32 -22], align 16
@.str.1 = private unnamed_addr constant [28 x i8] c"In lexicographical order:\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%3d: [\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8**, align 4
  %bb = alloca i8**, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  store i8** %1, i8*** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to i8**
  store i8** %3, i8*** %bb, align 4
  %4 = load i8**, i8*** %aa, align 4
  %5 = load i8*, i8** %4, align 4
  %6 = load i8**, i8*** %bb, align 4
  %7 = load i8*, i8** %6, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #5
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @lexOrder(i32 %n, i32* %ints) #0 {
entry:
  %n.addr = alloca i32, align 4
  %ints.addr = alloca i32*, align 4
  %strs = alloca i8**, align 4
  %i = alloca i32, align 4
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %ints, i32** %ints.addr, align 4
  store i32 1, i32* %first, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %last, align 4
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %k, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  store i32 %3, i32* %first, align 4
  store i32 1, i32* %last, align 4
  %4 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 2, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %k, align 4
  %mul = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call to i8**
  store i8** %6, i8*** %strs, align 4
  %7 = load i32, i32* %first, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %last, align 4
  %cmp1 = icmp sle i32 %8, %9
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %cmp2 = icmp sge i32 %10, 1
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %conv = sitofp i32 %11 to double
  %12 = call double @llvm.log10.f64(double %conv)
  %conv4 = fptosi double %12 to i32
  %add = add nsw i32 %conv4, 2
  store i32 %add, i32* %len, align 4
  br label %if.end14

if.else:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %13, 0
  br i1 %cmp5, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else
  store i32 2, i32* %len, align 4
  br label %if.end13

if.else8:                                         ; preds = %if.else
  %14 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 0, %14
  %conv10 = sitofp i32 %sub9 to double
  %15 = call double @llvm.log10.f64(double %conv10)
  %conv11 = fptosi double %15 to i32
  %add12 = add nsw i32 %conv11, 3
  store i32 %add12, i32* %len, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else8, %if.then7
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then3
  %16 = load i32, i32* %len, align 4
  %call15 = call noalias i8* @malloc(i32 %16)
  %17 = load i8**, i8*** %strs, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %first, align 4
  %sub16 = sub nsw i32 %18, %19
  %arrayidx = getelementptr inbounds i8*, i8** %17, i32 %sub16
  store i8* %call15, i8** %arrayidx, align 4
  %20 = load i8**, i8*** %strs, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %first, align 4
  %sub17 = sub nsw i32 %21, %22
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i32 %sub17
  %23 = load i8*, i8** %arrayidx18, align 4
  %24 = load i32, i32* %i, align 4
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i8**, i8*** %strs, align 4
  %27 = bitcast i8** %26 to i8*
  %28 = load i32, i32* %k, align 4
  call void @qsort(i8* %27, i32 %28, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc28, %for.end
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %k, align 4
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body23, label %for.end30

for.body23:                                       ; preds = %for.cond20
  %31 = load i8**, i8*** %strs, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %31, i32 %32
  %33 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i32 @atoi(i8* %33)
  %34 = load i32*, i32** %ints.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %call25, i32* %arrayidx26, align 4
  %36 = load i8**, i8*** %strs, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %36, i32 %37
  %38 = load i8*, i8** %arrayidx27, align 4
  call void @free(i8* %38)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body23
  %39 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %39, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond20

for.end30:                                        ; preds = %for.cond20
  %40 = load i8**, i8*** %strs, align 4
  %41 = bitcast i8** %40 to i8*
  call void @free(i8* %41)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log10.f64(double %0) #3

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @atoi(i8* %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %ints = alloca i32*, align 4
  %numbers = alloca [5 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i32]* %numbers to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.numbers to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %numbers, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %n, align 4
  store i32 %3, i32* %k, align 4
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp slt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %k, align 4
  %sub = sub nsw i32 2, %5
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %k, align 4
  %mul = mul i32 %6, 4
  %call2 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call2 to i32*
  store i32* %7, i32** %ints, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32*, i32** %ints, align 4
  call void @lexOrder(i32 %8, i32* %9)
  %10 = load i32, i32* %n, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %if.end
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %11, %12
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %13 = load i32*, i32** %ints, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  %17 = load i32*, i32** %ints, align 4
  %18 = bitcast i32* %17 to i8*
  call void @free(i8* %18)
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %first, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %last, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sle i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sge i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = fptosi double %12 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %conv4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 0, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv11 = fptosi double %15 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 %conv11, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %first, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub16 = sub nsw i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %first, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call25 = call i32 @atoi(i8* %33)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2046
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for lexOrder()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sort_numbers_lexicographically.c.bc'
source_filename = "./Sort_numbers_lexicographically.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@__const.main.numbers = private unnamed_addr constant [5 x i32] [i32 0, i32 5, i32 13, i32 21, i32 -22], align 16
@.str.1 = private unnamed_addr constant [28 x i8] c"In lexicographical order:\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"%3d: [\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"\08]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8**, align 4
  %bb = alloca i8**, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  store i8** %1, i8*** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to i8**
  store i8** %3, i8*** %bb, align 4
  %4 = load i8**, i8*** %aa, align 4
  %5 = load i8*, i8** %4, align 4
  %6 = load i8**, i8*** %bb, align 4
  %7 = load i8*, i8** %6, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #5
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @lexOrder(i32 %n, i32* %ints) #0 {
entry:
  %n.addr = alloca i32, align 4
  %ints.addr = alloca i32*, align 4
  %strs = alloca i8**, align 4
  %i = alloca i32, align 4
  %first = alloca i32, align 4
  %last = alloca i32, align 4
  %k = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %ints, i32** %ints.addr, align 4
  store i32 1, i32* %first, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %last, align 4
  %1 = load i32, i32* %n.addr, align 4
  store i32 %1, i32* %k, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  store i32 %3, i32* %first, align 4
  store i32 1, i32* %last, align 4
  %4 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 2, %4
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %k, align 4
  %mul = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %6 = bitcast i8* %call to i8**
  store i8** %6, i8*** %strs, align 4
  %7 = load i32, i32* %first, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %last, align 4
  %cmp1 = icmp sle i32 %8, %9
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %cmp2 = icmp sge i32 %10, 1
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %conv = sitofp i32 %11 to double
  %12 = call double @llvm.log10.f64(double %conv)
  %conv4 = fptosi double %12 to i32
  %add = add nsw i32 %conv4, 2
  store i32 %add, i32* %len, align 4
  br label %if.end14

if.else:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %13, 0
  br i1 %cmp5, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else
  store i32 2, i32* %len, align 4
  br label %if.end13

if.else8:                                         ; preds = %if.else
  %14 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 0, %14
  %conv10 = sitofp i32 %sub9 to double
  %15 = call double @llvm.log10.f64(double %conv10)
  %conv11 = fptosi double %15 to i32
  %add12 = add nsw i32 %conv11, 3
  store i32 %add12, i32* %len, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else8, %if.then7
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then3
  %16 = load i32, i32* %len, align 4
  %call15 = call noalias i8* @malloc(i32 %16)
  %17 = load i8**, i8*** %strs, align 4
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %first, align 4
  %sub16 = sub nsw i32 %18, %19
  %arrayidx = getelementptr inbounds i8*, i8** %17, i32 %sub16
  store i8* %call15, i8** %arrayidx, align 4
  %20 = load i8**, i8*** %strs, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %first, align 4
  %sub17 = sub nsw i32 %21, %22
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i32 %sub17
  %23 = load i8*, i8** %arrayidx18, align 4
  %24 = load i32, i32* %i, align 4
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i8**, i8*** %strs, align 4
  %27 = bitcast i8** %26 to i8*
  %28 = load i32, i32* %k, align 4
  call void @qsort(i8* %27, i32 %28, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc28, %for.end
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %k, align 4
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body23, label %for.end30

for.body23:                                       ; preds = %for.cond20
  %31 = load i8**, i8*** %strs, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %31, i32 %32
  %33 = load i8*, i8** %arrayidx24, align 4
  %call25 = call i32 @atoi(i8* %33)
  %34 = load i32*, i32** %ints.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %call25, i32* %arrayidx26, align 4
  %36 = load i8**, i8*** %strs, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %36, i32 %37
  %38 = load i8*, i8** %arrayidx27, align 4
  call void @free(i8* %38)
  br label %for.inc28

for.inc28:                                        ; preds = %for.body23
  %39 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %39, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond20

for.end30:                                        ; preds = %for.cond20
  %40 = load i8**, i8*** %strs, align 4
  %41 = bitcast i8** %40 to i8*
  call void @free(i8* %41)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.log10.f64(double %0) #3

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @atoi(i8* %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %n = alloca i32, align 4
  %ints = alloca i32*, align 4
  %numbers = alloca [5 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [5 x i32]* %numbers to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([5 x i32]* @__const.main.numbers to i8*), i32 20, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 5
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %numbers, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %n, align 4
  store i32 %3, i32* %k, align 4
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp slt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %k, align 4
  %sub = sub nsw i32 2, %5
  store i32 %sub, i32* %k, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %k, align 4
  %mul = mul i32 %6, 4
  %call2 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call2 to i32*
  store i32* %7, i32** %ints, align 4
  %8 = load i32, i32* %n, align 4
  %9 = load i32*, i32** %ints, align 4
  call void @lexOrder(i32 %8, i32* %9)
  %10 = load i32, i32* %n, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i32 %10)
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %if.end
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %11, %12
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %13 = load i32*, i32** %ints, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0))
  %17 = load i32*, i32** %ints, align 4
  %18 = bitcast i32* %17 to i8*
  call void @free(i8* %18)
  br label %for.inc10

for.inc10:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %19, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 2, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
