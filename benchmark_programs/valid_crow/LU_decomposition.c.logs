
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for mat_zero()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mat_zero()

; entering Souper's runOnFunction() for mat_new()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 8, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i32 %mul1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul 8:i32, %1
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul nsw i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul 8:i32, %1
%3:i32 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mul 8:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mat_new()

; entering Souper's runOnFunction() for mat_copy()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = mul nsw i32 %8, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for mat_copy()

; entering Souper's runOnFunction() for mat_del()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for mat_del()

; entering Souper's runOnFunction() for mat_show()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %13, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %15, %sub8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mat_show()

; entering Souper's runOnFunction() for mat_mul()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for mat_mul()

; entering Souper's runOnFunction() for mat_pivot()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp4 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %max_j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = fcmp ogt double %23, %29
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc27 = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %max_j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp ne i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp slt i32 %34, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %max_j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %max_j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc49 = add nsw i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mat_pivot()

; entering Souper's runOnFunction() for mat_LU()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sle i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp sge i32 %47, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %k26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %k26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %k26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %k26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %62, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc48 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc51 = add nsw i32 %79, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mat_LU()

; entering Souper's runOnFunction() for main()

; ModuleID = './LU_decomposition.c.bc'
source_filename = "./LU_decomposition.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"%8.4g\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" [ \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c" ]\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@A3 = hidden global [3 x [3 x double]] [[3 x double] [double 1.000000e+00, double 3.000000e+00, double 5.000000e+00], [3 x double] [double 2.000000e+00, double 4.000000e+00, double 7.000000e+00], [3 x double] [double 1.000000e+00, double 1.000000e+00, double 0.000000e+00]], align 16
@A4 = hidden global [4 x [4 x double]] [[4 x double] [double 1.100000e+01, double 9.000000e+00, double 2.400000e+01, double 2.000000e+00], [4 x double] [double 1.000000e+00, double 5.000000e+00, double 2.000000e+00, double 6.000000e+00], [4 x double] [double 3.000000e+00, double 1.700000e+01, double 1.800000e+01, double 1.000000e+00], [4 x double] [double 2.000000e+00, double 5.000000e+00, double 7.000000e+00, double 1.000000e+00]], align 16
@.str.6 = private unnamed_addr constant [4 x i8] c"A =\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"L =\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"U =\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"P =\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @mat_zero(double** %x, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double**, double*** %x.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %4, i32 %5
  %6 = load double*, double** %arrayidx, align 4
  %7 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %6, i32 %7
  store double 0.000000e+00, double* %arrayidx4, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_new(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %mul = mul i32 4, %0
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to double**
  store double** %1, double*** %x, align 4
  %2 = load i32, i32* %n.addr, align 4
  %mul1 = mul i32 8, %2
  %3 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %mul1, %3
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %4 = bitcast i8* %call3 to double*
  %5 = load double**, double*** %x, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 0
  store double* %4, double** %arrayidx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load double**, double*** %x, align 4
  %arrayidx4 = getelementptr inbounds double*, double** %8, i32 0
  %9 = load double*, double** %arrayidx4, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %mul5 = mul nsw i32 %10, %11
  %add.ptr = getelementptr inbounds double, double* %9, i32 %mul5
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double*, double** %12, i32 %13
  store double* %add.ptr, double** %arrayidx6, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load double**, double*** %x, align 4
  %16 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %15, i32 %16)
  %17 = load double**, double*** %x, align 4
  ret double** %17
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_copy(i8* %s, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %x = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i8*, i8** %s.addr, align 4
  %7 = bitcast i8* %6 to double*
  %8 = load i32, i32* %i, align 4
  %9 = mul nsw i32 %8, %5
  %arrayidx = getelementptr inbounds double, double* %7, i32 %9
  %10 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %arrayidx, i32 %10
  %11 = load double, double* %arrayidx4, align 8
  %12 = load double**, double*** %x, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  store double %11, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %17 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %17, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  %18 = load double**, double*** %x, align 4
  ret double** %18
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_del(double** %x) #0 {
entry:
  %x.addr = alloca double**, align 4
  store double** %x, double*** %x.addr, align 4
  %0 = load double**, double*** %x.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %0, i32 0
  %1 = load double*, double** %arrayidx, align 4
  %2 = bitcast double* %1 to i8*
  call void @free(i8* %2)
  %3 = load double**, double*** %x.addr, align 4
  %4 = bitcast double** %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mat_show(double** %x, i8* %fmt, i32 %n) #0 {
entry:
  %x.addr = alloca double**, align 4
  %fmt.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double** %x, double*** %x.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %fmt.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %fmt.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %tobool1 = icmp ne i32 %3, 0
  %4 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* %cond)
  store i32 0, i32* %j, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %fmt.addr, align 4
  %8 = load double**, double*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %8, i32 %9
  %10 = load double*, double** %arrayidx, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds double, double* %10, i32 %11
  %12 = load double, double* %arrayidx5, align 8
  %call6 = call i32 (i8*, ...) @printf(i8* %7, double %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %14, 1
  %cmp7 = icmp slt i32 %13, %sub
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body4
  br label %cond.end

cond.false:                                       ; preds = %for.body4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %n.addr, align 4
  %sub8 = sub nsw i32 %16, 1
  %cmp9 = icmp eq i32 %15, %sub8
  %17 = zext i1 %cmp9 to i64
  %cond10 = select i1 %cmp9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond11 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), %cond.true ], [ %cond10, %cond.false ]
  %call12 = call i32 (i8*, ...) @printf(i8* %cond11)
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %19, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden double** @mat_mul(double** %a, double** %b, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %b.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %c = alloca double**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double** %a, double*** %a.addr, align 4
  store double** %b, double*** %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %c, align 4
  store double** %call, double*** %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc12, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end14

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %7 = load double**, double*** %a.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %7, i32 %8
  %9 = load double*, double** %arrayidx, align 4
  %10 = load i32, i32* %k, align 4
  %arrayidx7 = getelementptr inbounds double, double* %9, i32 %10
  %11 = load double, double* %arrayidx7, align 8
  %12 = load double**, double*** %b.addr, align 4
  %13 = load i32, i32* %k, align 4
  %arrayidx8 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx8, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx9, align 8
  %mul = fmul double %11, %16
  %17 = load double**, double*** %c, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %17, i32 %18
  %19 = load double*, double** %arrayidx10, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds double, double* %19, i32 %20
  %21 = load double, double* %arrayidx11, align 8
  %add = fadd double %21, %mul
  store double %add, double* %arrayidx11, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %23 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %23, 1
  store i32 %inc13, i32* %j, align 4
  br label %for.cond1

for.end14:                                        ; preds = %for.cond1
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %24 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %24, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end17:                                        ; preds = %for.cond
  %25 = load double**, double*** %c, align 4
  ret double** %25
}

; Function Attrs: noinline nounwind optnone
define hidden void @mat_pivot(double** %a, double** %p, i32 %n) #0 {
entry:
  %a.addr = alloca double**, align 4
  %p.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i10 = alloca i32, align 4
  %max_j = alloca i32, align 4
  %j15 = alloca i32, align 4
  %k = alloca i32, align 4
  %tmp = alloca double, align 8
  store double** %a, double*** %a.addr, align 4
  store double** %p, double*** %p.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %j, align 4
  %cmp4 = icmp eq i32 %4, %5
  %conv = zext i1 %cmp4 to i32
  %conv5 = sitofp i32 %conv to double
  %6 = load double**, double*** %p.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %6, i32 %7
  %8 = load double*, double** %arrayidx, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds double, double* %8, i32 %9
  store double %conv5, double* %arrayidx6, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  store i32 0, i32* %i10, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc48, %for.end9
  %12 = load i32, i32* %i10, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, %13
  br i1 %cmp12, label %for.body14, label %for.end50

for.body14:                                       ; preds = %for.cond11
  %14 = load i32, i32* %i10, align 4
  store i32 %14, i32* %max_j, align 4
  %15 = load i32, i32* %i10, align 4
  store i32 %15, i32* %j15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc26, %for.body14
  %16 = load i32, i32* %j15, align 4
  %17 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %16, %17
  br i1 %cmp17, label %for.body19, label %for.end28

for.body19:                                       ; preds = %for.cond16
  %18 = load double**, double*** %a.addr, align 4
  %19 = load i32, i32* %j15, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %18, i32 %19
  %20 = load double*, double** %arrayidx20, align 4
  %21 = load i32, i32* %i10, align 4
  %arrayidx21 = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx21, align 8
  %23 = call double @llvm.fabs.f64(double %22)
  %24 = load double**, double*** %a.addr, align 4
  %25 = load i32, i32* %max_j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %24, i32 %25
  %26 = load double*, double** %arrayidx22, align 4
  %27 = load i32, i32* %i10, align 4
  %arrayidx23 = getelementptr inbounds double, double* %26, i32 %27
  %28 = load double, double* %arrayidx23, align 8
  %29 = call double @llvm.fabs.f64(double %28)
  %cmp24 = fcmp ogt double %23, %29
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body19
  %30 = load i32, i32* %j15, align 4
  store i32 %30, i32* %max_j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body19
  br label %for.inc26

for.inc26:                                        ; preds = %if.end
  %31 = load i32, i32* %j15, align 4
  %inc27 = add nsw i32 %31, 1
  store i32 %inc27, i32* %j15, align 4
  br label %for.cond16

for.end28:                                        ; preds = %for.cond16
  %32 = load i32, i32* %max_j, align 4
  %33 = load i32, i32* %i10, align 4
  %cmp29 = icmp ne i32 %32, %33
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %for.end28
  store i32 0, i32* %k, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc44, %if.then31
  %34 = load i32, i32* %k, align 4
  %35 = load i32, i32* %n.addr, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body35, label %for.end46

for.body35:                                       ; preds = %for.cond32
  %36 = load double**, double*** %p.addr, align 4
  %37 = load i32, i32* %i10, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %36, i32 %37
  %38 = load double*, double** %arrayidx36, align 4
  %39 = load i32, i32* %k, align 4
  %arrayidx37 = getelementptr inbounds double, double* %38, i32 %39
  %40 = load double, double* %arrayidx37, align 8
  store double %40, double* %tmp, align 8
  %41 = load double**, double*** %p.addr, align 4
  %42 = load i32, i32* %max_j, align 4
  %arrayidx38 = getelementptr inbounds double*, double** %41, i32 %42
  %43 = load double*, double** %arrayidx38, align 4
  %44 = load i32, i32* %k, align 4
  %arrayidx39 = getelementptr inbounds double, double* %43, i32 %44
  %45 = load double, double* %arrayidx39, align 8
  %46 = load double**, double*** %p.addr, align 4
  %47 = load i32, i32* %i10, align 4
  %arrayidx40 = getelementptr inbounds double*, double** %46, i32 %47
  %48 = load double*, double** %arrayidx40, align 4
  %49 = load i32, i32* %k, align 4
  %arrayidx41 = getelementptr inbounds double, double* %48, i32 %49
  store double %45, double* %arrayidx41, align 8
  %50 = load double, double* %tmp, align 8
  %51 = load double**, double*** %p.addr, align 4
  %52 = load i32, i32* %max_j, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx42, align 4
  %54 = load i32, i32* %k, align 4
  %arrayidx43 = getelementptr inbounds double, double* %53, i32 %54
  store double %50, double* %arrayidx43, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body35
  %55 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond32

for.end46:                                        ; preds = %for.cond32
  br label %if.end47

if.end47:                                         ; preds = %for.end46, %for.end28
  br label %for.inc48

for.inc48:                                        ; preds = %if.end47
  %56 = load i32, i32* %i10, align 4
  %inc49 = add nsw i32 %56, 1
  store i32 %inc49, i32* %i10, align 4
  br label %for.cond11

for.end50:                                        ; preds = %for.cond11
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @mat_LU(double** %A, double** %L, double** %U, double** %P, i32 %n) #0 {
entry:
  %A.addr = alloca double**, align 4
  %L.addr = alloca double**, align 4
  %U.addr = alloca double**, align 4
  %P.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %Aprime = alloca double**, align 4
  %i = alloca i32, align 4
  %i2 = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca double, align 8
  %k = alloca i32, align 4
  %k26 = alloca i32, align 4
  store double** %A, double*** %A.addr, align 4
  store double** %L, double*** %L.addr, align 4
  store double** %U, double*** %U.addr, align 4
  store double** %P, double*** %P.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load double**, double*** %L.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %0, i32 %1)
  %2 = load double**, double*** %U.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  call void @mat_zero(double** %2, i32 %3)
  %4 = load double**, double*** %A.addr, align 4
  %5 = load double**, double*** %P.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  call void @mat_pivot(double** %4, double** %5, i32 %6)
  %7 = load double**, double*** %P.addr, align 4
  %8 = load double**, double*** %A.addr, align 4
  %9 = load i32, i32* %n.addr, align 4
  %call = call double** @mat_mul(double** %7, double** %8, i32 %9)
  store double** %call, double*** %Aprime, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load double**, double*** %L.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds double, double* %14, i32 %15
  store double 1.000000e+00, double* %arrayidx1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc50, %for.end
  %17 = load i32, i32* %i2, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp slt i32 %17, %18
  br i1 %cmp4, label %for.body5, label %for.end52

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc47, %for.body5
  %19 = load i32, i32* %j, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %19, %20
  br i1 %cmp7, label %for.body8, label %for.end49

for.body8:                                        ; preds = %for.cond6
  %21 = load i32, i32* %j, align 4
  %22 = load i32, i32* %i2, align 4
  %cmp9 = icmp sle i32 %21, %22
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body8
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then
  %23 = load i32, i32* %k, align 4
  %24 = load i32, i32* %j, align 4
  %cmp11 = icmp slt i32 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end19

for.body12:                                       ; preds = %for.cond10
  %25 = load double**, double*** %L.addr, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %25, i32 %26
  %27 = load double*, double** %arrayidx13, align 4
  %28 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds double, double* %27, i32 %28
  %29 = load double, double* %arrayidx14, align 8
  %30 = load double**, double*** %U.addr, align 4
  %31 = load i32, i32* %k, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %30, i32 %31
  %32 = load double*, double** %arrayidx15, align 4
  %33 = load i32, i32* %i2, align 4
  %arrayidx16 = getelementptr inbounds double, double* %32, i32 %33
  %34 = load double, double* %arrayidx16, align 8
  %mul = fmul double %29, %34
  %35 = load double, double* %s, align 8
  %add = fadd double %35, %mul
  store double %add, double* %s, align 8
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %36 = load i32, i32* %k, align 4
  %inc18 = add nsw i32 %36, 1
  store i32 %inc18, i32* %k, align 4
  br label %for.cond10

for.end19:                                        ; preds = %for.cond10
  %37 = load double**, double*** %Aprime, align 4
  %38 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds double*, double** %37, i32 %38
  %39 = load double*, double** %arrayidx20, align 4
  %40 = load i32, i32* %i2, align 4
  %arrayidx21 = getelementptr inbounds double, double* %39, i32 %40
  %41 = load double, double* %arrayidx21, align 8
  %42 = load double, double* %s, align 8
  %sub = fsub double %41, %42
  %43 = load double**, double*** %U.addr, align 4
  %44 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds double*, double** %43, i32 %44
  %45 = load double*, double** %arrayidx22, align 4
  %46 = load i32, i32* %i2, align 4
  %arrayidx23 = getelementptr inbounds double, double* %45, i32 %46
  store double %sub, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %for.end19, %for.body8
  %47 = load i32, i32* %j, align 4
  %48 = load i32, i32* %i2, align 4
  %cmp24 = icmp sge i32 %47, %48
  br i1 %cmp24, label %if.then25, label %if.end46

if.then25:                                        ; preds = %if.end
  store double 0.000000e+00, double* %s, align 8
  store i32 0, i32* %k26, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %if.then25
  %49 = load i32, i32* %k26, align 4
  %50 = load i32, i32* %i2, align 4
  %cmp28 = icmp slt i32 %49, %50
  br i1 %cmp28, label %for.body29, label %for.end38

for.body29:                                       ; preds = %for.cond27
  %51 = load double**, double*** %L.addr, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx30 = getelementptr inbounds double*, double** %51, i32 %52
  %53 = load double*, double** %arrayidx30, align 4
  %54 = load i32, i32* %k26, align 4
  %arrayidx31 = getelementptr inbounds double, double* %53, i32 %54
  %55 = load double, double* %arrayidx31, align 8
  %56 = load double**, double*** %U.addr, align 4
  %57 = load i32, i32* %k26, align 4
  %arrayidx32 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx32, align 4
  %59 = load i32, i32* %i2, align 4
  %arrayidx33 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx33, align 8
  %mul34 = fmul double %55, %60
  %61 = load double, double* %s, align 8
  %add35 = fadd double %61, %mul34
  store double %add35, double* %s, align 8
  br label %for.inc36

for.inc36:                                        ; preds = %for.body29
  %62 = load i32, i32* %k26, align 4
  %inc37 = add nsw i32 %62, 1
  store i32 %inc37, i32* %k26, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %63 = load double**, double*** %Aprime, align 4
  %64 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds double*, double** %63, i32 %64
  %65 = load double*, double** %arrayidx39, align 4
  %66 = load i32, i32* %i2, align 4
  %arrayidx40 = getelementptr inbounds double, double* %65, i32 %66
  %67 = load double, double* %arrayidx40, align 8
  %68 = load double, double* %s, align 8
  %sub41 = fsub double %67, %68
  %69 = load double**, double*** %U.addr, align 4
  %70 = load i32, i32* %i2, align 4
  %arrayidx42 = getelementptr inbounds double*, double** %69, i32 %70
  %71 = load double*, double** %arrayidx42, align 4
  %72 = load i32, i32* %i2, align 4
  %arrayidx43 = getelementptr inbounds double, double* %71, i32 %72
  %73 = load double, double* %arrayidx43, align 8
  %div = fdiv double %sub41, %73
  %74 = load double**, double*** %L.addr, align 4
  %75 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds double*, double** %74, i32 %75
  %76 = load double*, double** %arrayidx44, align 4
  %77 = load i32, i32* %i2, align 4
  %arrayidx45 = getelementptr inbounds double, double* %76, i32 %77
  store double %div, double* %arrayidx45, align 8
  br label %if.end46

if.end46:                                         ; preds = %for.end38, %if.end
  br label %for.inc47

for.inc47:                                        ; preds = %if.end46
  %78 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %78, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond6

for.end49:                                        ; preds = %for.cond6
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %79 = load i32, i32* %i2, align 4
  %inc51 = add nsw i32 %79, 1
  store i32 %inc51, i32* %i2, align 4
  br label %for.cond3

for.end52:                                        ; preds = %for.cond3
  %80 = load double**, double*** %Aprime, align 4
  call void @mat_del(double** %80)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %A = alloca double**, align 4
  %L = alloca double**, align 4
  %P = alloca double**, align 4
  %U = alloca double**, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call double** @mat_new(i32 %0)
  store double** %call, double*** %L, align 4
  %1 = load i32, i32* %n, align 4
  %call1 = call double** @mat_new(i32 %1)
  store double** %call1, double*** %P, align 4
  %2 = load i32, i32* %n, align 4
  %call2 = call double** @mat_new(i32 %2)
  store double** %call2, double*** %U, align 4
  %3 = load i32, i32* %n, align 4
  %call3 = call double** @mat_copy(i8* bitcast ([3 x [3 x double]]* @A3 to i8*), i32 %3)
  store double** %call3, double*** %A, align 4
  %4 = load double**, double*** %A, align 4
  %5 = load double**, double*** %L, align 4
  %6 = load double**, double*** %U, align 4
  %7 = load double**, double*** %P, align 4
  %8 = load i32, i32* %n, align 4
  call void @mat_LU(double** %4, double** %5, double** %6, double** %7, i32 %8)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %9 = load double**, double*** %A, align 4
  %10 = load i32, i32* %n, align 4
  call void @mat_show(double** %9, i8* null, i32 %10)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %11 = load double**, double*** %L, align 4
  %12 = load i32, i32* %n, align 4
  call void @mat_show(double** %11, i8* null, i32 %12)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %13 = load double**, double*** %U, align 4
  %14 = load i32, i32* %n, align 4
  call void @mat_show(double** %13, i8* null, i32 %14)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %15 = load double**, double*** %P, align 4
  %16 = load i32, i32* %n, align 4
  call void @mat_show(double** %15, i8* null, i32 %16)
  %17 = load double**, double*** %A, align 4
  call void @mat_del(double** %17)
  %18 = load double**, double*** %L, align 4
  call void @mat_del(double** %18)
  %19 = load double**, double*** %U, align 4
  call void @mat_del(double** %19)
  %20 = load double**, double*** %P, align 4
  call void @mat_del(double** %20)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 4, i32* %n, align 4
  %21 = load i32, i32* %n, align 4
  %call9 = call double** @mat_new(i32 %21)
  store double** %call9, double*** %L, align 4
  %22 = load i32, i32* %n, align 4
  %call10 = call double** @mat_new(i32 %22)
  store double** %call10, double*** %P, align 4
  %23 = load i32, i32* %n, align 4
  %call11 = call double** @mat_new(i32 %23)
  store double** %call11, double*** %U, align 4
  %24 = load i32, i32* %n, align 4
  %call12 = call double** @mat_copy(i8* bitcast ([4 x [4 x double]]* @A4 to i8*), i32 %24)
  store double** %call12, double*** %A, align 4
  %25 = load double**, double*** %A, align 4
  %26 = load double**, double*** %L, align 4
  %27 = load double**, double*** %U, align 4
  %28 = load double**, double*** %P, align 4
  %29 = load i32, i32* %n, align 4
  call void @mat_LU(double** %25, double** %26, double** %27, double** %28, i32 %29)
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  %30 = load double**, double*** %A, align 4
  %31 = load i32, i32* %n, align 4
  call void @mat_show(double** %30, i8* null, i32 %31)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0))
  %32 = load double**, double*** %L, align 4
  %33 = load i32, i32* %n, align 4
  call void @mat_show(double** %32, i8* null, i32 %33)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0))
  %34 = load double**, double*** %U, align 4
  %35 = load i32, i32* %n, align 4
  call void @mat_show(double** %34, i8* null, i32 %35)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0))
  %36 = load double**, double*** %P, align 4
  %37 = load i32, i32* %n, align 4
  call void @mat_show(double** %36, i8* null, i32 %37)
  %38 = load double**, double*** %A, align 4
  call void @mat_del(double** %38)
  %39 = load double**, double*** %L, align 4
  call void @mat_del(double** %39)
  %40 = load double**, double*** %U, align 4
  call void @mat_del(double** %40)
  %41 = load double**, double*** %P, align 4
  call void @mat_del(double** %41)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
