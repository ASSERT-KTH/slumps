
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for compare()

; ModuleID = './General_FizzBuzz.c.bc'
source_filename = "./General_FizzBuzz.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.replace_info = type { i32, i8* }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Buzz\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Baxx\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fizz\00", align 1
@__const.main.info = private unnamed_addr constant [3 x %struct.replace_info] [%struct.replace_info { i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0) }, %struct.replace_info { i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.replace_info { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca %struct.replace_info*, align 4
  %y = alloca %struct.replace_info*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.replace_info*
  store %struct.replace_info* %1, %struct.replace_info** %x, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.replace_info*
  store %struct.replace_info* %3, %struct.replace_info** %y, align 4
  %4 = load %struct.replace_info*, %struct.replace_info** %x, align 4
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %6 = load %struct.replace_info*, %struct.replace_info** %y, align 4
  %n1 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %6, i32 0, i32 0
  %7 = load i32, i32* %n1, align 4
  %sub = sub nsw i32 %5, %7
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @generic_fizz_buzz(i32 %max, %struct.replace_info* %info, i32 %info_length) #0 {
entry:
  %max.addr = alloca i32, align 4
  %info.addr = alloca %struct.replace_info*, align 4
  %info_length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %it = alloca i32, align 4
  %found_word = alloca i32, align 4
  store i32 %max, i32* %max.addr, align 4
  store %struct.replace_info* %info, %struct.replace_info** %info.addr, align 4
  store i32 %info_length, i32* %info_length.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %max.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %found_word, align 4
  store i32 0, i32* %it, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %it, align 4
  %3 = load i32, i32* %info_length.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %6 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds %struct.replace_info, %struct.replace_info* %5, i32 %6
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %rem = srem i32 %4, %7
  %cmp4 = icmp eq i32 0, %rem
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %8 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %9 = load i32, i32* %it, align 4
  %arrayidx5 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %8, i32 %9
  %text = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx5, i32 0, i32 1
  %10 = load i8*, i8** %text, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %10)
  store i32 1, i32* %found_word, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %it, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %it, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %found_word, align 4
  %cmp6 = icmp eq i32 0, %12
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %13)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %for.end
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %if.end9
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %info = alloca [3 x %struct.replace_info], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.replace_info]* %info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x %struct.replace_info]* @__const.main.info to i8*), i32 24, i1 false)
  %arraydecay = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  %1 = bitcast %struct.replace_info* %arraydecay to i8*
  call void @qsort(i8* %1, i32 3, i32 8, i32 (i8*, i8*)* @compare)
  %arraydecay1 = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  call void @generic_fizz_buzz(i32 20, %struct.replace_info* %arraydecay1, i32 3)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for compare()

; entering Souper's runOnFunction() for generic_fizz_buzz()

; ModuleID = './General_FizzBuzz.c.bc'
source_filename = "./General_FizzBuzz.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.replace_info = type { i32, i8* }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Buzz\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Baxx\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fizz\00", align 1
@__const.main.info = private unnamed_addr constant [3 x %struct.replace_info] [%struct.replace_info { i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0) }, %struct.replace_info { i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.replace_info { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca %struct.replace_info*, align 4
  %y = alloca %struct.replace_info*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.replace_info*
  store %struct.replace_info* %1, %struct.replace_info** %x, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.replace_info*
  store %struct.replace_info* %3, %struct.replace_info** %y, align 4
  %4 = load %struct.replace_info*, %struct.replace_info** %x, align 4
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %6 = load %struct.replace_info*, %struct.replace_info** %y, align 4
  %n1 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %6, i32 0, i32 0
  %7 = load i32, i32* %n1, align 4
  %sub = sub nsw i32 %5, %7
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @generic_fizz_buzz(i32 %max, %struct.replace_info* %info, i32 %info_length) #0 {
entry:
  %max.addr = alloca i32, align 4
  %info.addr = alloca %struct.replace_info*, align 4
  %info_length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %it = alloca i32, align 4
  %found_word = alloca i32, align 4
  store i32 %max, i32* %max.addr, align 4
  store %struct.replace_info* %info, %struct.replace_info** %info.addr, align 4
  store i32 %info_length, i32* %info_length.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %max.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %found_word, align 4
  store i32 0, i32* %it, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %it, align 4
  %3 = load i32, i32* %info_length.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %6 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds %struct.replace_info, %struct.replace_info* %5, i32 %6
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %rem = srem i32 %4, %7
  %cmp4 = icmp eq i32 0, %rem
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %8 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %9 = load i32, i32* %it, align 4
  %arrayidx5 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %8, i32 %9
  %text = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx5, i32 0, i32 1
  %10 = load i8*, i8** %text, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %10)
  store i32 1, i32* %found_word, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %it, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %it, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %found_word, align 4
  %cmp6 = icmp eq i32 0, %12
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %13)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %for.end
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %if.end9
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %info = alloca [3 x %struct.replace_info], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.replace_info]* %info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x %struct.replace_info]* @__const.main.info to i8*), i32 24, i1 false)
  %arraydecay = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  %1 = bitcast %struct.replace_info* %arraydecay to i8*
  call void @qsort(i8* %1, i32 3, i32 8, i32 (i8*, i8*)* @compare)
  %arraydecay1 = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  call void @generic_fizz_buzz(i32 20, %struct.replace_info* %arraydecay1, i32 3)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %max.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %info_length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %4, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 0, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %it, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %found_word, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 0, %12
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for generic_fizz_buzz()

; entering Souper's runOnFunction() for main()

; ModuleID = './General_FizzBuzz.c.bc'
source_filename = "./General_FizzBuzz.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.replace_info = type { i32, i8* }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Buzz\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Baxx\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"Fizz\00", align 1
@__const.main.info = private unnamed_addr constant [3 x %struct.replace_info] [%struct.replace_info { i32 5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0) }, %struct.replace_info { i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.replace_info { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compare(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca %struct.replace_info*, align 4
  %y = alloca %struct.replace_info*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.replace_info*
  store %struct.replace_info* %1, %struct.replace_info** %x, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.replace_info*
  store %struct.replace_info* %3, %struct.replace_info** %y, align 4
  %4 = load %struct.replace_info*, %struct.replace_info** %x, align 4
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %4, i32 0, i32 0
  %5 = load i32, i32* %n, align 4
  %6 = load %struct.replace_info*, %struct.replace_info** %y, align 4
  %n1 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %6, i32 0, i32 0
  %7 = load i32, i32* %n1, align 4
  %sub = sub nsw i32 %5, %7
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden void @generic_fizz_buzz(i32 %max, %struct.replace_info* %info, i32 %info_length) #0 {
entry:
  %max.addr = alloca i32, align 4
  %info.addr = alloca %struct.replace_info*, align 4
  %info_length.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %it = alloca i32, align 4
  %found_word = alloca i32, align 4
  store i32 %max, i32* %max.addr, align 4
  store %struct.replace_info* %info, %struct.replace_info** %info.addr, align 4
  store i32 %info_length, i32* %info_length.addr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %max.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %found_word, align 4
  store i32 0, i32* %it, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %it, align 4
  %3 = load i32, i32* %info_length.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %6 = load i32, i32* %it, align 4
  %arrayidx = getelementptr inbounds %struct.replace_info, %struct.replace_info* %5, i32 %6
  %n = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx, i32 0, i32 0
  %7 = load i32, i32* %n, align 4
  %rem = srem i32 %4, %7
  %cmp4 = icmp eq i32 0, %rem
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %8 = load %struct.replace_info*, %struct.replace_info** %info.addr, align 4
  %9 = load i32, i32* %it, align 4
  %arrayidx5 = getelementptr inbounds %struct.replace_info, %struct.replace_info* %8, i32 %9
  %text = getelementptr inbounds %struct.replace_info, %struct.replace_info* %arrayidx5, i32 0, i32 1
  %10 = load i8*, i8** %text, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* %10)
  store i32 1, i32* %found_word, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %it, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %it, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load i32, i32* %found_word, align 4
  %cmp6 = icmp eq i32 0, %12
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %for.end
  %13 = load i32, i32* %i, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %13)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %for.end
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %if.end9
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %info = alloca [3 x %struct.replace_info], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.replace_info]* %info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([3 x %struct.replace_info]* @__const.main.info to i8*), i32 24, i1 false)
  %arraydecay = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  %1 = bitcast %struct.replace_info* %arraydecay to i8*
  call void @qsort(i8* %1, i32 3, i32 8, i32 (i8*, i8*)* @compare)
  %arraydecay1 = getelementptr inbounds [3 x %struct.replace_info], [3 x %struct.replace_info]* %info, i32 0, i32 0
  call void @generic_fizz_buzz(i32 20, %struct.replace_info* %arraydecay1, i32 3)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
